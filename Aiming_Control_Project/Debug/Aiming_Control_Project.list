
Aiming_Control_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033b4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800353c  0800353c  0000453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800354c  0800354c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  0800354c  0800354c  0000454c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003554  08003554  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003554  08003554  00004554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003558  08003558  00004558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800355c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000224  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad34  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b16  00000000  00000000  0000fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  00011888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008bb  00000000  00000000  000123c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021208  00000000  00000000  00012c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc24  00000000  00000000  00033e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1a82  00000000  00000000  00040aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112531  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f20  00000000  00000000  00112574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b5  00000000  00000000  00115494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003524 	.word	0x08003524

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003524 	.word	0x08003524

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <GetPosition>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float GetPosition(ADC_HandleTypeDef* hadc){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	float val = HAL_ADC_GetValue(hadc);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f001 f90f 	bl	80016e4 <HAL_ADC_GetValue>
 80004c6:	ee07 0a90 	vmov	s15, r0
 80004ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004ce:	edc7 7a03 	vstr	s15, [r7, #12]
	return (val/ADCResolution)*ServoRange;
 80004d2:	ed97 7a03 	vldr	s14, [r7, #12]
 80004d6:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80004f0 <GetPosition+0x38>
 80004da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004de:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80004f4 <GetPosition+0x3c>
 80004e2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80004e6:	eeb0 0a67 	vmov.f32	s0, s15
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	44fa0000 	.word	0x44fa0000
 80004f4:	43340000 	.word	0x43340000

080004f8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
		if(hadc->Instance == ADC1)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a15      	ldr	r2, [pc, #84]	@ (800055c <HAL_ADC_ConvCpltCallback+0x64>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d108      	bne.n	800051c <HAL_ADC_ConvCpltCallback+0x24>
			 Pos_S1 = GetPosition(hadc);
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f7ff ffd4 	bl	80004b8 <GetPosition>
 8000510:	eef0 7a40 	vmov.f32	s15, s0
 8000514:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <HAL_ADC_ConvCpltCallback+0x68>)
 8000516:	edc3 7a00 	vstr	s15, [r3]
		else if (hadc->Instance == ADC2)
			Pos_S2 = GetPosition(hadc);
		else if (hadc->Instance == ADC3)
			Pos_S3 = GetPosition(hadc);
	}
 800051a:	e01a      	b.n	8000552 <HAL_ADC_ConvCpltCallback+0x5a>
		else if (hadc->Instance == ADC2)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a10      	ldr	r2, [pc, #64]	@ (8000564 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d108      	bne.n	8000538 <HAL_ADC_ConvCpltCallback+0x40>
			Pos_S2 = GetPosition(hadc);
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f7ff ffc6 	bl	80004b8 <GetPosition>
 800052c:	eef0 7a40 	vmov.f32	s15, s0
 8000530:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <HAL_ADC_ConvCpltCallback+0x70>)
 8000532:	edc3 7a00 	vstr	s15, [r3]
	}
 8000536:	e00c      	b.n	8000552 <HAL_ADC_ConvCpltCallback+0x5a>
		else if (hadc->Instance == ADC3)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0b      	ldr	r2, [pc, #44]	@ (800056c <HAL_ADC_ConvCpltCallback+0x74>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d107      	bne.n	8000552 <HAL_ADC_ConvCpltCallback+0x5a>
			Pos_S3 = GetPosition(hadc);
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f7ff ffb8 	bl	80004b8 <GetPosition>
 8000548:	eef0 7a40 	vmov.f32	s15, s0
 800054c:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <HAL_ADC_ConvCpltCallback+0x78>)
 800054e:	edc3 7a00 	vstr	s15, [r3]
	}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40012000 	.word	0x40012000
 8000560:	20000220 	.word	0x20000220
 8000564:	40012100 	.word	0x40012100
 8000568:	20000224 	.word	0x20000224
 800056c:	40012200 	.word	0x40012200
 8000570:	20000228 	.word	0x20000228

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fe10 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f834 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 fb6a 	bl	8000c58 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000584:	f000 f89a 	bl	80006bc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000588:	f000 f8ea 	bl	8000760 <MX_ADC2_Init>
  MX_ADC3_Init();
 800058c:	f000 f93a 	bl	8000804 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000590:	f000 f98a 	bl	80008a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000594:	f000 fa0c 	bl	80009b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000598:	f000 fa8a 	bl	8000ab0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800059c:	f000 fb08 	bl	8000bb0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_ADC_Start_IT(&hadc1);
 80005a0:	480b      	ldr	r0, [pc, #44]	@ (80005d0 <main+0x5c>)
 80005a2:	f000 feb1 	bl	8001308 <HAL_ADC_Start_IT>
  	  HAL_ADC_Start_IT(&hadc2);
 80005a6:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <main+0x60>)
 80005a8:	f000 feae 	bl	8001308 <HAL_ADC_Start_IT>
      HAL_ADC_Start_IT(&hadc3);
 80005ac:	480a      	ldr	r0, [pc, #40]	@ (80005d8 <main+0x64>)
 80005ae:	f000 feab 	bl	8001308 <HAL_ADC_Start_IT>
 	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005b2:	2100      	movs	r1, #0
 80005b4:	4809      	ldr	r0, [pc, #36]	@ (80005dc <main+0x68>)
 80005b6:	f002 fa0b 	bl	80029d0 <HAL_TIM_PWM_Start>
 	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005ba:	2104      	movs	r1, #4
 80005bc:	4808      	ldr	r0, [pc, #32]	@ (80005e0 <main+0x6c>)
 80005be:	f002 fa07 	bl	80029d0 <HAL_TIM_PWM_Start>
 	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80005c2:	2108      	movs	r1, #8
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <main+0x70>)
 80005c6:	f002 fa03 	bl	80029d0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <main+0x56>
 80005ce:	bf00      	nop
 80005d0:	20000028 	.word	0x20000028
 80005d4:	20000070 	.word	0x20000070
 80005d8:	200000b8 	.word	0x200000b8
 80005dc:	20000100 	.word	0x20000100
 80005e0:	20000148 	.word	0x20000148
 80005e4:	20000190 	.word	0x20000190

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	@ 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 ff68 	bl	80034cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800065c:	2332      	movs	r3, #50	@ 0x32
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000660:	2304      	movs	r3, #4
 8000662:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fd4b 	bl	8002108 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 fb3e 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000688:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f001 ffac 	bl	80025f8 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a6:	f000 fb27 	bl	8000cf8 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	@ 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ce:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006d0:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <MX_ADC1_Init+0x9c>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ec:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fa:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_ADC1_Init+0x98>)
 80006fc:	4a17      	ldr	r2, [pc, #92]	@ (800075c <MX_ADC1_Init+0xa0>)
 80006fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_ADC1_Init+0x98>)
 8000708:	2201      	movs	r2, #1
 800070a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_ADC1_Init+0x98>)
 8000716:	2201      	movs	r2, #1
 8000718:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071a:	480e      	ldr	r0, [pc, #56]	@ (8000754 <MX_ADC1_Init+0x98>)
 800071c:	f000 fdb0 	bl	8001280 <HAL_ADC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 fae7 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800072a:	2301      	movs	r3, #1
 800072c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800072e:	2301      	movs	r3, #1
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	@ (8000754 <MX_ADC1_Init+0x98>)
 800073c:	f000 fff4 	bl	8001728 <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000746:	f000 fad7 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000028 	.word	0x20000028
 8000758:	40012000 	.word	0x40012000
 800075c:	0f000001 	.word	0x0f000001

08000760 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <MX_ADC2_Init+0x98>)
 8000774:	4a21      	ldr	r2, [pc, #132]	@ (80007fc <MX_ADC2_Init+0x9c>)
 8000776:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_ADC2_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800077e:	4b1e      	ldr	r3, [pc, #120]	@ (80007f8 <MX_ADC2_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000784:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_ADC2_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800078a:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <MX_ADC2_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000790:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <MX_ADC2_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000798:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_ADC2_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079e:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <MX_ADC2_Init+0x98>)
 80007a0:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <MX_ADC2_Init+0xa0>)
 80007a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_ADC2_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <MX_ADC2_Init+0x98>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_ADC2_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_ADC2_Init+0x98>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007be:	480e      	ldr	r0, [pc, #56]	@ (80007f8 <MX_ADC2_Init+0x98>)
 80007c0:	f000 fd5e 	bl	8001280 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f000 fa95 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007da:	463b      	mov	r3, r7
 80007dc:	4619      	mov	r1, r3
 80007de:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <MX_ADC2_Init+0x98>)
 80007e0:	f000 ffa2 	bl	8001728 <HAL_ADC_ConfigChannel>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80007ea:	f000 fa85 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000070 	.word	0x20000070
 80007fc:	40012100 	.word	0x40012100
 8000800:	0f000001 	.word	0x0f000001

08000804 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000816:	4b21      	ldr	r3, [pc, #132]	@ (800089c <MX_ADC3_Init+0x98>)
 8000818:	4a21      	ldr	r2, [pc, #132]	@ (80008a0 <MX_ADC3_Init+0x9c>)
 800081a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800081c:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <MX_ADC3_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000822:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <MX_ADC3_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000828:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <MX_ADC3_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800082e:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_ADC3_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000834:	4b19      	ldr	r3, [pc, #100]	@ (800089c <MX_ADC3_Init+0x98>)
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083c:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_ADC3_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000842:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_ADC3_Init+0x98>)
 8000844:	4a17      	ldr	r2, [pc, #92]	@ (80008a4 <MX_ADC3_Init+0xa0>)
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_ADC3_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_ADC3_Init+0x98>)
 8000850:	2201      	movs	r2, #1
 8000852:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000854:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_ADC3_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_ADC3_Init+0x98>)
 800085e:	2201      	movs	r2, #1
 8000860:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000862:	480e      	ldr	r0, [pc, #56]	@ (800089c <MX_ADC3_Init+0x98>)
 8000864:	f000 fd0c 	bl	8001280 <HAL_ADC_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800086e:	f000 fa43 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000872:	2303      	movs	r3, #3
 8000874:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	4806      	ldr	r0, [pc, #24]	@ (800089c <MX_ADC3_Init+0x98>)
 8000884:	f000 ff50 	bl	8001728 <HAL_ADC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800088e:	f000 fa33 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000b8 	.word	0x200000b8
 80008a0:	40012200 	.word	0x40012200
 80008a4:	0f000001 	.word	0x0f000001

080008a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	@ 0x30
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008d4:	4b34      	ldr	r3, [pc, #208]	@ (80009a8 <MX_TIM1_Init+0x100>)
 80008d6:	4a35      	ldr	r2, [pc, #212]	@ (80009ac <MX_TIM1_Init+0x104>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80008da:	4b33      	ldr	r3, [pc, #204]	@ (80009a8 <MX_TIM1_Init+0x100>)
 80008dc:	22a0      	movs	r2, #160	@ 0xa0
 80008de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b31      	ldr	r3, [pc, #196]	@ (80009a8 <MX_TIM1_Init+0x100>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80008e6:	4b30      	ldr	r3, [pc, #192]	@ (80009a8 <MX_TIM1_Init+0x100>)
 80008e8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80008ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b2e      	ldr	r3, [pc, #184]	@ (80009a8 <MX_TIM1_Init+0x100>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f4:	4b2c      	ldr	r3, [pc, #176]	@ (80009a8 <MX_TIM1_Init+0x100>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b2b      	ldr	r3, [pc, #172]	@ (80009a8 <MX_TIM1_Init+0x100>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000900:	4829      	ldr	r0, [pc, #164]	@ (80009a8 <MX_TIM1_Init+0x100>)
 8000902:	f002 f92d 	bl	8002b60 <HAL_TIM_IC_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800090c:	f000 f9f4 	bl	8000cf8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000910:	2304      	movs	r3, #4
 8000912:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000914:	2350      	movs	r3, #80	@ 0x50
 8000916:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	481f      	ldr	r0, [pc, #124]	@ (80009a8 <MX_TIM1_Init+0x100>)
 800092c:	f002 fa03 	bl	8002d36 <HAL_TIM_SlaveConfigSynchro>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000936:	f000 f9df 	bl	8000cf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800093e:	2301      	movs	r3, #1
 8000940:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	4619      	mov	r1, r3
 8000952:	4815      	ldr	r0, [pc, #84]	@ (80009a8 <MX_TIM1_Init+0x100>)
 8000954:	f002 f953 	bl	8002bfe <HAL_TIM_IC_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800095e:	f000 f9cb 	bl	8000cf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000962:	2302      	movs	r3, #2
 8000964:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000966:	2302      	movs	r3, #2
 8000968:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2204      	movs	r2, #4
 8000970:	4619      	mov	r1, r3
 8000972:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <MX_TIM1_Init+0x100>)
 8000974:	f002 f943 	bl	8002bfe <HAL_TIM_IC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800097e:	f000 f9bb 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_TIM1_Init+0x100>)
 8000990:	f002 fd20 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800099a:	f000 f9ad 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3730      	adds	r7, #48	@ 0x30
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000100 	.word	0x20000100
 80009ac:	40010000 	.word	0x40010000

080009b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	@ 0x30
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009dc:	4b33      	ldr	r3, [pc, #204]	@ (8000aac <MX_TIM2_Init+0xfc>)
 80009de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160;
 80009e4:	4b31      	ldr	r3, [pc, #196]	@ (8000aac <MX_TIM2_Init+0xfc>)
 80009e6:	22a0      	movs	r2, #160	@ 0xa0
 80009e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b30      	ldr	r3, [pc, #192]	@ (8000aac <MX_TIM2_Init+0xfc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80009f0:	4b2e      	ldr	r3, [pc, #184]	@ (8000aac <MX_TIM2_Init+0xfc>)
 80009f2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80009f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b2c      	ldr	r3, [pc, #176]	@ (8000aac <MX_TIM2_Init+0xfc>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fe:	4b2b      	ldr	r3, [pc, #172]	@ (8000aac <MX_TIM2_Init+0xfc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a04:	4829      	ldr	r0, [pc, #164]	@ (8000aac <MX_TIM2_Init+0xfc>)
 8000a06:	f002 f8ab 	bl	8002b60 <HAL_TIM_IC_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000a10:	f000 f972 	bl	8000cf8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000a14:	2304      	movs	r3, #4
 8000a16:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000a18:	2350      	movs	r3, #80	@ 0x50
 8000a1a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481f      	ldr	r0, [pc, #124]	@ (8000aac <MX_TIM2_Init+0xfc>)
 8000a30:	f002 f981 	bl	8002d36 <HAL_TIM_SlaveConfigSynchro>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a3a:	f000 f95d 	bl	8000cf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a42:	2301      	movs	r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	2200      	movs	r2, #0
 8000a54:	4619      	mov	r1, r3
 8000a56:	4815      	ldr	r0, [pc, #84]	@ (8000aac <MX_TIM2_Init+0xfc>)
 8000a58:	f002 f8d1 	bl	8002bfe <HAL_TIM_IC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000a62:	f000 f949 	bl	8000cf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a66:	2302      	movs	r3, #2
 8000a68:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	2204      	movs	r2, #4
 8000a74:	4619      	mov	r1, r3
 8000a76:	480d      	ldr	r0, [pc, #52]	@ (8000aac <MX_TIM2_Init+0xfc>)
 8000a78:	f002 f8c1 	bl	8002bfe <HAL_TIM_IC_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a82:	f000 f939 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	@ (8000aac <MX_TIM2_Init+0xfc>)
 8000a94:	f002 fc9e 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000a9e:	f000 f92b 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	3730      	adds	r7, #48	@ 0x30
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000148 	.word	0x20000148

08000ab0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08c      	sub	sp, #48	@ 0x30
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000adc:	4b32      	ldr	r3, [pc, #200]	@ (8000ba8 <MX_TIM3_Init+0xf8>)
 8000ade:	4a33      	ldr	r2, [pc, #204]	@ (8000bac <MX_TIM3_Init+0xfc>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160;
 8000ae2:	4b31      	ldr	r3, [pc, #196]	@ (8000ba8 <MX_TIM3_Init+0xf8>)
 8000ae4:	22a0      	movs	r2, #160	@ 0xa0
 8000ae6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba8 <MX_TIM3_Init+0xf8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000aee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba8 <MX_TIM3_Init+0xf8>)
 8000af0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000af4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <MX_TIM3_Init+0xf8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba8 <MX_TIM3_Init+0xf8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b02:	4829      	ldr	r0, [pc, #164]	@ (8000ba8 <MX_TIM3_Init+0xf8>)
 8000b04:	f002 f82c 	bl	8002b60 <HAL_TIM_IC_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000b0e:	f000 f8f3 	bl	8000cf8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b12:	2304      	movs	r3, #4
 8000b14:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b16:	2350      	movs	r3, #80	@ 0x50
 8000b18:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481e      	ldr	r0, [pc, #120]	@ (8000ba8 <MX_TIM3_Init+0xf8>)
 8000b2e:	f002 f902 	bl	8002d36 <HAL_TIM_SlaveConfigSynchro>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b38:	f000 f8de 	bl	8000cf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b40:	2301      	movs	r3, #1
 8000b42:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2200      	movs	r2, #0
 8000b52:	4619      	mov	r1, r3
 8000b54:	4814      	ldr	r0, [pc, #80]	@ (8000ba8 <MX_TIM3_Init+0xf8>)
 8000b56:	f002 f852 	bl	8002bfe <HAL_TIM_IC_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000b60:	f000 f8ca 	bl	8000cf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b64:	2302      	movs	r3, #2
 8000b66:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2204      	movs	r2, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_TIM3_Init+0xf8>)
 8000b76:	f002 f842 	bl	8002bfe <HAL_TIM_IC_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000b80:	f000 f8ba 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <MX_TIM3_Init+0xf8>)
 8000b92:	f002 fc1f 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000b9c:	f000 f8ac 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	@ 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000190 	.word	0x20000190
 8000bac:	40000400 	.word	0x40000400

08000bb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bcc:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <MX_TIM4_Init+0xa0>)
 8000bce:	4a21      	ldr	r2, [pc, #132]	@ (8000c54 <MX_TIM4_Init+0xa4>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MX_TIM4_Init+0xa0>)
 8000bd4:	2263      	movs	r2, #99	@ 0x63
 8000bd6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <MX_TIM4_Init+0xa0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <MX_TIM4_Init+0xa0>)
 8000be0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000be4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <MX_TIM4_Init+0xa0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <MX_TIM4_Init+0xa0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000bf2:	4817      	ldr	r0, [pc, #92]	@ (8000c50 <MX_TIM4_Init+0xa0>)
 8000bf4:	f001 ffb4 	bl	8002b60 <HAL_TIM_IC_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000bfe:	f000 f87b 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480f      	ldr	r0, [pc, #60]	@ (8000c50 <MX_TIM4_Init+0xa0>)
 8000c12:	f002 fbdf 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000c1c:	f000 f86c 	bl	8000cf8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c20:	2300      	movs	r3, #0
 8000c22:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c24:	2301      	movs	r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	4619      	mov	r1, r3
 8000c36:	4806      	ldr	r0, [pc, #24]	@ (8000c50 <MX_TIM4_Init+0xa0>)
 8000c38:	f001 ffe1 	bl	8002bfe <HAL_TIM_IC_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000c42:	f000 f859 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200001d8 	.word	0x200001d8
 8000c54:	40000800 	.word	0x40000800

08000c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <MX_GPIO_Init+0x98>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf0 <MX_GPIO_Init+0x98>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <MX_GPIO_Init+0x98>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <MX_GPIO_Init+0x98>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a17      	ldr	r2, [pc, #92]	@ (8000cf0 <MX_GPIO_Init+0x98>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <MX_GPIO_Init+0x98>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <MX_GPIO_Init+0x98>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a10      	ldr	r2, [pc, #64]	@ (8000cf0 <MX_GPIO_Init+0x98>)
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <MX_GPIO_Init+0x98>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	480b      	ldr	r0, [pc, #44]	@ (8000cf4 <MX_GPIO_Init+0x9c>)
 8000cc8:	f001 fa04 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4804      	ldr	r0, [pc, #16]	@ (8000cf4 <MX_GPIO_Init+0x9c>)
 8000ce4:	f001 f85a 	bl	8001d9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <Error_Handler+0x8>

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	4a0f      	ldr	r2, [pc, #60]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d42:	2007      	movs	r0, #7
 8000d44:	f000 ffe8 	bl	8001d18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	@ 0x38
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a51      	ldr	r2, [pc, #324]	@ (8000eb8 <HAL_ADC_MspInit+0x164>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d130      	bne.n	8000dd8 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
 8000d7a:	4b50      	ldr	r3, [pc, #320]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a4f      	ldr	r2, [pc, #316]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	4b4d      	ldr	r3, [pc, #308]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d8e:	623b      	str	r3, [r7, #32]
 8000d90:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	4b49      	ldr	r3, [pc, #292]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	4a48      	ldr	r2, [pc, #288]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da2:	4b46      	ldr	r3, [pc, #280]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	61fb      	str	r3, [r7, #28]
 8000dac:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dae:	2302      	movs	r3, #2
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db2:	2303      	movs	r3, #3
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	483f      	ldr	r0, [pc, #252]	@ (8000ec0 <HAL_ADC_MspInit+0x16c>)
 8000dc2:	f000 ffeb 	bl	8001d9c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2012      	movs	r0, #18
 8000dcc:	f000 ffaf 	bl	8001d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000dd0:	2012      	movs	r0, #18
 8000dd2:	f000 ffc8 	bl	8001d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000dd6:	e06a      	b.n	8000eae <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a39      	ldr	r2, [pc, #228]	@ (8000ec4 <HAL_ADC_MspInit+0x170>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d130      	bne.n	8000e44 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	4b35      	ldr	r3, [pc, #212]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	4a34      	ldr	r2, [pc, #208]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000dec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df2:	4b32      	ldr	r3, [pc, #200]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	4b2e      	ldr	r3, [pc, #184]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a2d      	ldr	r2, [pc, #180]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4824      	ldr	r0, [pc, #144]	@ (8000ec0 <HAL_ADC_MspInit+0x16c>)
 8000e2e:	f000 ffb5 	bl	8001d9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2012      	movs	r0, #18
 8000e38:	f000 ff79 	bl	8001d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e3c:	2012      	movs	r0, #18
 8000e3e:	f000 ff92 	bl	8001d66 <HAL_NVIC_EnableIRQ>
}
 8000e42:	e034      	b.n	8000eae <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec8 <HAL_ADC_MspInit+0x174>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d12f      	bne.n	8000eae <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	4a19      	ldr	r2, [pc, #100]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000e58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e5e:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a12      	ldr	r2, [pc, #72]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <HAL_ADC_MspInit+0x168>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e86:	2308      	movs	r3, #8
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	4809      	ldr	r0, [pc, #36]	@ (8000ec0 <HAL_ADC_MspInit+0x16c>)
 8000e9a:	f000 ff7f 	bl	8001d9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2012      	movs	r0, #18
 8000ea4:	f000 ff43 	bl	8001d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ea8:	2012      	movs	r0, #18
 8000eaa:	f000 ff5c 	bl	8001d66 <HAL_NVIC_EnableIRQ>
}
 8000eae:	bf00      	nop
 8000eb0:	3738      	adds	r7, #56	@ 0x38
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40012000 	.word	0x40012000
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40012100 	.word	0x40012100
 8000ec8:	40012200 	.word	0x40012200

08000ecc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b090      	sub	sp, #64	@ 0x40
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a65      	ldr	r2, [pc, #404]	@ (8001080 <HAL_TIM_IC_MspInit+0x1b4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d12d      	bne.n	8000f4a <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ef2:	4b64      	ldr	r3, [pc, #400]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	4a63      	ldr	r2, [pc, #396]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000efe:	4b61      	ldr	r3, [pc, #388]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a5c      	ldr	r2, [pc, #368]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000f14:	f043 0310 	orr.w	r3, r3, #16
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f40:	4619      	mov	r1, r3
 8000f42:	4851      	ldr	r0, [pc, #324]	@ (8001088 <HAL_TIM_IC_MspInit+0x1bc>)
 8000f44:	f000 ff2a 	bl	8001d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f48:	e095      	b.n	8001076 <HAL_TIM_IC_MspInit+0x1aa>
  else if(htim_ic->Instance==TIM2)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f52:	d12c      	bne.n	8000fae <HAL_TIM_IC_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
 8000f58:	4b4a      	ldr	r3, [pc, #296]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	4a49      	ldr	r2, [pc, #292]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f64:	4b47      	ldr	r3, [pc, #284]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	623b      	str	r3, [r7, #32]
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	4b43      	ldr	r3, [pc, #268]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f78:	4a42      	ldr	r2, [pc, #264]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f80:	4b40      	ldr	r3, [pc, #256]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4839      	ldr	r0, [pc, #228]	@ (800108c <HAL_TIM_IC_MspInit+0x1c0>)
 8000fa8:	f000 fef8 	bl	8001d9c <HAL_GPIO_Init>
}
 8000fac:	e063      	b.n	8001076 <HAL_TIM_IC_MspInit+0x1aa>
  else if(htim_ic->Instance==TIM3)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a37      	ldr	r2, [pc, #220]	@ (8001090 <HAL_TIM_IC_MspInit+0x1c4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d12c      	bne.n	8001012 <HAL_TIM_IC_MspInit+0x146>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	4b31      	ldr	r3, [pc, #196]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	4a30      	ldr	r2, [pc, #192]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fdc:	4a29      	ldr	r2, [pc, #164]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe4:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ff0:	2340      	movs	r3, #64	@ 0x40
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001000:	2302      	movs	r3, #2
 8001002:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001008:	4619      	mov	r1, r3
 800100a:	4820      	ldr	r0, [pc, #128]	@ (800108c <HAL_TIM_IC_MspInit+0x1c0>)
 800100c:	f000 fec6 	bl	8001d9c <HAL_GPIO_Init>
}
 8001010:	e031      	b.n	8001076 <HAL_TIM_IC_MspInit+0x1aa>
  else if(htim_ic->Instance==TIM4)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1f      	ldr	r2, [pc, #124]	@ (8001094 <HAL_TIM_IC_MspInit+0x1c8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d12c      	bne.n	8001076 <HAL_TIM_IC_MspInit+0x1aa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	4b18      	ldr	r3, [pc, #96]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	4a17      	ldr	r2, [pc, #92]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	6413      	str	r3, [r2, #64]	@ 0x40
 800102c:	4b15      	ldr	r3, [pc, #84]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001040:	4a10      	ldr	r2, [pc, #64]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	6313      	str	r3, [r2, #48]	@ 0x30
 8001048:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <HAL_TIM_IC_MspInit+0x1b8>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001054:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001058:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001066:	2302      	movs	r3, #2
 8001068:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800106e:	4619      	mov	r1, r3
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <HAL_TIM_IC_MspInit+0x1cc>)
 8001072:	f000 fe93 	bl	8001d9c <HAL_GPIO_Init>
}
 8001076:	bf00      	nop
 8001078:	3740      	adds	r7, #64	@ 0x40
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40010000 	.word	0x40010000
 8001084:	40023800 	.word	0x40023800
 8001088:	40021000 	.word	0x40021000
 800108c:	40020000 	.word	0x40020000
 8001090:	40000400 	.word	0x40000400
 8001094:	40000800 	.word	0x40000800
 8001098:	40020c00 	.word	0x40020c00

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <NMI_Handler+0x4>

080010a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <MemManage_Handler+0x4>

080010b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f2:	f000 f8a5 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <ADC_IRQHandler+0x1c>)
 8001102:	f000 f9df 	bl	80014c4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001106:	4805      	ldr	r0, [pc, #20]	@ (800111c <ADC_IRQHandler+0x20>)
 8001108:	f000 f9dc 	bl	80014c4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <ADC_IRQHandler+0x24>)
 800110e:	f000 f9d9 	bl	80014c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000028 	.word	0x20000028
 800111c:	20000070 	.word	0x20000070
 8001120:	200000b8 	.word	0x200000b8

08001124 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <SystemInit+0x20>)
 800112a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800112e:	4a05      	ldr	r2, [pc, #20]	@ (8001144 <SystemInit+0x20>)
 8001130:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001134:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001180 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800114c:	f7ff ffea 	bl	8001124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	@ (8001184 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	@ (8001188 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	@ (8001194 <LoopFillZerobss+0x22>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001176:	f002 f9b1 	bl	80034dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117a:	f7ff f9fb 	bl	8000574 <main>
  bx  lr    
 800117e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001180:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800118c:	0800355c 	.word	0x0800355c
  ldr r2, =_sbss
 8001190:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001194:	20000230 	.word	0x20000230

08001198 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <CAN1_RX0_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a0:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <HAL_Init+0x40>)
 80011a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011ac:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_Init+0x40>)
 80011b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b8:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a07      	ldr	r2, [pc, #28]	@ (80011dc <HAL_Init+0x40>)
 80011be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c4:	2003      	movs	r0, #3
 80011c6:	f000 fda7 	bl	8001d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 f808 	bl	80011e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d0:	f7ff fd98 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023c00 	.word	0x40023c00

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_InitTick+0x54>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_InitTick+0x58>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fdbf 	bl	8001d82 <HAL_SYSTICK_Config>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e00e      	b.n	800122c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d80a      	bhi.n	800122a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f000 fd87 	bl	8001d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001220:	4a06      	ldr	r2, [pc, #24]	@ (800123c <HAL_InitTick+0x5c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000000 	.word	0x20000000
 8001238:	20000008 	.word	0x20000008
 800123c:	20000004 	.word	0x20000004

08001240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_IncTick+0x20>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_IncTick+0x24>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <HAL_IncTick+0x24>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000008 	.word	0x20000008
 8001264:	2000022c 	.word	0x2000022c

08001268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <HAL_GetTick+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	2000022c 	.word	0x2000022c

08001280 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e033      	b.n	80012fe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fd58 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d118      	bne.n	80012f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012c6:	f023 0302 	bic.w	r3, r3, #2
 80012ca:	f043 0202 	orr.w	r2, r3, #2
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 fb4a 	bl	800196c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f023 0303 	bic.w	r3, r3, #3
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80012ee:	e001      	b.n	80012f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_ADC_Start_IT+0x1a>
 800131e:	2302      	movs	r3, #2
 8001320:	e0bd      	b.n	800149e <HAL_ADC_Start_IT+0x196>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b01      	cmp	r3, #1
 8001336:	d018      	beq.n	800136a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0201 	orr.w	r2, r2, #1
 8001346:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001348:	4b58      	ldr	r3, [pc, #352]	@ (80014ac <HAL_ADC_Start_IT+0x1a4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a58      	ldr	r2, [pc, #352]	@ (80014b0 <HAL_ADC_Start_IT+0x1a8>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	0c9a      	lsrs	r2, r3, #18
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800135c:	e002      	b.n	8001364 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3b01      	subs	r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f9      	bne.n	800135e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b01      	cmp	r3, #1
 8001376:	f040 8085 	bne.w	8001484 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001398:	2b00      	cmp	r3, #0
 800139a:	d007      	beq.n	80013ac <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013b8:	d106      	bne.n	80013c8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f023 0206 	bic.w	r2, r3, #6
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80013c6:	e002      	b.n	80013ce <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013d6:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <HAL_ADC_Start_IT+0x1ac>)
 80013d8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80013e2:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80013f2:	f043 0320 	orr.w	r3, r3, #32
 80013f6:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 031f 	and.w	r3, r3, #31
 8001400:	2b00      	cmp	r3, #0
 8001402:	d12a      	bne.n	800145a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a2b      	ldr	r2, [pc, #172]	@ (80014b8 <HAL_ADC_Start_IT+0x1b0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d015      	beq.n	800143a <HAL_ADC_Start_IT+0x132>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a2a      	ldr	r2, [pc, #168]	@ (80014bc <HAL_ADC_Start_IT+0x1b4>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d105      	bne.n	8001424 <HAL_ADC_Start_IT+0x11c>
 8001418:	4b26      	ldr	r3, [pc, #152]	@ (80014b4 <HAL_ADC_Start_IT+0x1ac>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 031f 	and.w	r3, r3, #31
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00a      	beq.n	800143a <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a25      	ldr	r2, [pc, #148]	@ (80014c0 <HAL_ADC_Start_IT+0x1b8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d136      	bne.n	800149c <HAL_ADC_Start_IT+0x194>
 800142e:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <HAL_ADC_Start_IT+0x1ac>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	2b00      	cmp	r3, #0
 8001438:	d130      	bne.n	800149c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d129      	bne.n	800149c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	e020      	b.n	800149c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a16      	ldr	r2, [pc, #88]	@ (80014b8 <HAL_ADC_Start_IT+0x1b0>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d11b      	bne.n	800149c <HAL_ADC_Start_IT+0x194>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d114      	bne.n	800149c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	e00b      	b.n	800149c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001488:	f043 0210 	orr.w	r2, r3, #16
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001494:	f043 0201 	orr.w	r2, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000000 	.word	0x20000000
 80014b0:	431bde83 	.word	0x431bde83
 80014b4:	40012300 	.word	0x40012300
 80014b8:	40012000 	.word	0x40012000
 80014bc:	40012100 	.word	0x40012100
 80014c0:	40012200 	.word	0x40012200

080014c4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	f003 0320 	and.w	r3, r3, #32
 80014f2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d049      	beq.n	800158e <HAL_ADC_IRQHandler+0xca>
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d046      	beq.n	800158e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b00      	cmp	r3, #0
 800150a:	d105      	bne.n	8001518 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001510:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d12b      	bne.n	800157e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800152a:	2b00      	cmp	r3, #0
 800152c:	d127      	bne.n	800157e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001534:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001546:	2b00      	cmp	r3, #0
 8001548:	d119      	bne.n	800157e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0220 	bic.w	r2, r2, #32
 8001558:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d105      	bne.n	800157e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7fe ffba 	bl	80004f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f06f 0212 	mvn.w	r2, #18
 800158c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d057      	beq.n	8001654 <HAL_ADC_IRQHandler+0x190>
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d054      	beq.n	8001654 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d105      	bne.n	80015c2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d139      	bne.n	8001644 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015d6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d12b      	bne.n	8001644 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d124      	bne.n	8001644 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001604:	2b00      	cmp	r3, #0
 8001606:	d11d      	bne.n	8001644 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800160c:	2b00      	cmp	r3, #0
 800160e:	d119      	bne.n	8001644 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800161e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d105      	bne.n	8001644 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fa8d 	bl	8001b64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f06f 020c 	mvn.w	r2, #12
 8001652:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001662:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d017      	beq.n	800169a <HAL_ADC_IRQHandler+0x1d6>
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d014      	beq.n	800169a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b01      	cmp	r3, #1
 800167c:	d10d      	bne.n	800169a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f837 	bl	80016fe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0201 	mvn.w	r2, #1
 8001698:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016a8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d015      	beq.n	80016dc <HAL_ADC_IRQHandler+0x218>
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d012      	beq.n	80016dc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	f043 0202 	orr.w	r2, r3, #2
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f06f 0220 	mvn.w	r2, #32
 80016ca:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f820 	bl	8001712 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f06f 0220 	mvn.w	r2, #32
 80016da:	601a      	str	r2, [r3, #0]
  }
}
 80016dc:	bf00      	nop
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x1c>
 8001740:	2302      	movs	r3, #2
 8001742:	e105      	b.n	8001950 <HAL_ADC_ConfigChannel+0x228>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b09      	cmp	r3, #9
 8001752:	d925      	bls.n	80017a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68d9      	ldr	r1, [r3, #12]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	3b1e      	subs	r3, #30
 800176a:	2207      	movs	r2, #7
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43da      	mvns	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	400a      	ands	r2, r1
 8001778:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68d9      	ldr	r1, [r3, #12]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	4618      	mov	r0, r3
 800178c:	4603      	mov	r3, r0
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4403      	add	r3, r0
 8001792:	3b1e      	subs	r3, #30
 8001794:	409a      	lsls	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	e022      	b.n	80017e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6919      	ldr	r1, [r3, #16]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	2207      	movs	r2, #7
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	400a      	ands	r2, r1
 80017c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6919      	ldr	r1, [r3, #16]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4618      	mov	r0, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4403      	add	r3, r0
 80017dc:	409a      	lsls	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d824      	bhi.n	8001838 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	3b05      	subs	r3, #5
 8001800:	221f      	movs	r2, #31
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	400a      	ands	r2, r1
 800180e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	3b05      	subs	r3, #5
 800182a:	fa00 f203 	lsl.w	r2, r0, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	635a      	str	r2, [r3, #52]	@ 0x34
 8001836:	e04c      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b0c      	cmp	r3, #12
 800183e:	d824      	bhi.n	800188a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	3b23      	subs	r3, #35	@ 0x23
 8001852:	221f      	movs	r2, #31
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43da      	mvns	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	400a      	ands	r2, r1
 8001860:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4618      	mov	r0, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	3b23      	subs	r3, #35	@ 0x23
 800187c:	fa00 f203 	lsl.w	r2, r0, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	631a      	str	r2, [r3, #48]	@ 0x30
 8001888:	e023      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	3b41      	subs	r3, #65	@ 0x41
 800189c:	221f      	movs	r2, #31
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	400a      	ands	r2, r1
 80018aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	3b41      	subs	r3, #65	@ 0x41
 80018c6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018d2:	4b22      	ldr	r3, [pc, #136]	@ (800195c <HAL_ADC_ConfigChannel+0x234>)
 80018d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a21      	ldr	r2, [pc, #132]	@ (8001960 <HAL_ADC_ConfigChannel+0x238>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d109      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1cc>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b12      	cmp	r3, #18
 80018e6:	d105      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a19      	ldr	r2, [pc, #100]	@ (8001960 <HAL_ADC_ConfigChannel+0x238>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d123      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x21e>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b10      	cmp	r3, #16
 8001904:	d003      	beq.n	800190e <HAL_ADC_ConfigChannel+0x1e6>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b11      	cmp	r3, #17
 800190c:	d11b      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b10      	cmp	r3, #16
 8001920:	d111      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <HAL_ADC_ConfigChannel+0x23c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a10      	ldr	r2, [pc, #64]	@ (8001968 <HAL_ADC_ConfigChannel+0x240>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	0c9a      	lsrs	r2, r3, #18
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001938:	e002      	b.n	8001940 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3b01      	subs	r3, #1
 800193e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f9      	bne.n	800193a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	40012300 	.word	0x40012300
 8001960:	40012000 	.word	0x40012000
 8001964:	20000000 	.word	0x20000000
 8001968:	431bde83 	.word	0x431bde83

0800196c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001974:	4b79      	ldr	r3, [pc, #484]	@ (8001b5c <ADC_Init+0x1f0>)
 8001976:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	431a      	orrs	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	021a      	lsls	r2, r3, #8
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80019c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6899      	ldr	r1, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fe:	4a58      	ldr	r2, [pc, #352]	@ (8001b60 <ADC_Init+0x1f4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d022      	beq.n	8001a4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6899      	ldr	r1, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6899      	ldr	r1, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	e00f      	b.n	8001a6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001a68:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0202 	bic.w	r2, r2, #2
 8001a78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6899      	ldr	r1, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7e1b      	ldrb	r3, [r3, #24]
 8001a84:	005a      	lsls	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01b      	beq.n	8001ad0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001aa6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ab6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6859      	ldr	r1, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	035a      	lsls	r2, r3, #13
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	e007      	b.n	8001ae0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ade:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	051a      	lsls	r2, r3, #20
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6899      	ldr	r1, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b22:	025a      	lsls	r2, r3, #9
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6899      	ldr	r1, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	029a      	lsls	r2, r3, #10
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	609a      	str	r2, [r3, #8]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	40012300 	.word	0x40012300
 8001b60:	0f000001 	.word	0x0f000001

08001b64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b94:	4013      	ands	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001baa:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	60d3      	str	r3, [r2, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc4:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	f003 0307 	and.w	r3, r3, #7
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db0b      	blt.n	8001c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f003 021f 	and.w	r2, r3, #31
 8001bf4:	4907      	ldr	r1, [pc, #28]	@ (8001c14 <__NVIC_EnableIRQ+0x38>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	@ (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	@ (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	@ 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	@ 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce4:	d301      	bcc.n	8001cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00f      	b.n	8001d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <SysTick_Config+0x40>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f7ff ff8e 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cfc:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <SysTick_Config+0x40>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d02:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <SysTick_Config+0x40>)
 8001d04:	2207      	movs	r2, #7
 8001d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	e000e010 	.word	0xe000e010

08001d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff29 	bl	8001b78 <__NVIC_SetPriorityGrouping>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d40:	f7ff ff3e 	bl	8001bc0 <__NVIC_GetPriorityGrouping>
 8001d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	f7ff ff8e 	bl	8001c6c <NVIC_EncodePriority>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff5d 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff31 	bl	8001bdc <__NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffa2 	bl	8001cd4 <SysTick_Config>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e16b      	b.n	8002090 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	f040 815a 	bne.w	800208a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d005      	beq.n	8001dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d130      	bne.n	8001e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e24:	2201      	movs	r2, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 0201 	and.w	r2, r3, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d017      	beq.n	8001e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d123      	bne.n	8001ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	08da      	lsrs	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3208      	adds	r2, #8
 8001ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	220f      	movs	r2, #15
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	08da      	lsrs	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3208      	adds	r2, #8
 8001eda:	69b9      	ldr	r1, [r7, #24]
 8001edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0203 	and.w	r2, r3, #3
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80b4 	beq.w	800208a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b60      	ldr	r3, [pc, #384]	@ (80020a8 <HAL_GPIO_Init+0x30c>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	4a5f      	ldr	r2, [pc, #380]	@ (80020a8 <HAL_GPIO_Init+0x30c>)
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f32:	4b5d      	ldr	r3, [pc, #372]	@ (80020a8 <HAL_GPIO_Init+0x30c>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f3e:	4a5b      	ldr	r2, [pc, #364]	@ (80020ac <HAL_GPIO_Init+0x310>)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3302      	adds	r3, #2
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a52      	ldr	r2, [pc, #328]	@ (80020b0 <HAL_GPIO_Init+0x314>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d02b      	beq.n	8001fc2 <HAL_GPIO_Init+0x226>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a51      	ldr	r2, [pc, #324]	@ (80020b4 <HAL_GPIO_Init+0x318>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d025      	beq.n	8001fbe <HAL_GPIO_Init+0x222>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a50      	ldr	r2, [pc, #320]	@ (80020b8 <HAL_GPIO_Init+0x31c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01f      	beq.n	8001fba <HAL_GPIO_Init+0x21e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4f      	ldr	r2, [pc, #316]	@ (80020bc <HAL_GPIO_Init+0x320>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d019      	beq.n	8001fb6 <HAL_GPIO_Init+0x21a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4e      	ldr	r2, [pc, #312]	@ (80020c0 <HAL_GPIO_Init+0x324>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_GPIO_Init+0x216>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4d      	ldr	r2, [pc, #308]	@ (80020c4 <HAL_GPIO_Init+0x328>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00d      	beq.n	8001fae <HAL_GPIO_Init+0x212>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4c      	ldr	r2, [pc, #304]	@ (80020c8 <HAL_GPIO_Init+0x32c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d007      	beq.n	8001faa <HAL_GPIO_Init+0x20e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4b      	ldr	r2, [pc, #300]	@ (80020cc <HAL_GPIO_Init+0x330>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_GPIO_Init+0x20a>
 8001fa2:	2307      	movs	r3, #7
 8001fa4:	e00e      	b.n	8001fc4 <HAL_GPIO_Init+0x228>
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	e00c      	b.n	8001fc4 <HAL_GPIO_Init+0x228>
 8001faa:	2306      	movs	r3, #6
 8001fac:	e00a      	b.n	8001fc4 <HAL_GPIO_Init+0x228>
 8001fae:	2305      	movs	r3, #5
 8001fb0:	e008      	b.n	8001fc4 <HAL_GPIO_Init+0x228>
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x228>
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e004      	b.n	8001fc4 <HAL_GPIO_Init+0x228>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e002      	b.n	8001fc4 <HAL_GPIO_Init+0x228>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_GPIO_Init+0x228>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	f002 0203 	and.w	r2, r2, #3
 8001fca:	0092      	lsls	r2, r2, #2
 8001fcc:	4093      	lsls	r3, r2
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd4:	4935      	ldr	r1, [pc, #212]	@ (80020ac <HAL_GPIO_Init+0x310>)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	3302      	adds	r3, #2
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80020d0 <HAL_GPIO_Init+0x334>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002006:	4a32      	ldr	r2, [pc, #200]	@ (80020d0 <HAL_GPIO_Init+0x334>)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800200c:	4b30      	ldr	r3, [pc, #192]	@ (80020d0 <HAL_GPIO_Init+0x334>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002030:	4a27      	ldr	r2, [pc, #156]	@ (80020d0 <HAL_GPIO_Init+0x334>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002036:	4b26      	ldr	r3, [pc, #152]	@ (80020d0 <HAL_GPIO_Init+0x334>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800205a:	4a1d      	ldr	r2, [pc, #116]	@ (80020d0 <HAL_GPIO_Init+0x334>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002060:	4b1b      	ldr	r3, [pc, #108]	@ (80020d0 <HAL_GPIO_Init+0x334>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002084:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <HAL_GPIO_Init+0x334>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3301      	adds	r3, #1
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b0f      	cmp	r3, #15
 8002094:	f67f ae90 	bls.w	8001db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	3724      	adds	r7, #36	@ 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40013800 	.word	0x40013800
 80020b0:	40020000 	.word	0x40020000
 80020b4:	40020400 	.word	0x40020400
 80020b8:	40020800 	.word	0x40020800
 80020bc:	40020c00 	.word	0x40020c00
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40021400 	.word	0x40021400
 80020c8:	40021800 	.word	0x40021800
 80020cc:	40021c00 	.word	0x40021c00
 80020d0:	40013c00 	.word	0x40013c00

080020d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
 80020e0:	4613      	mov	r3, r2
 80020e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e4:	787b      	ldrb	r3, [r7, #1]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f0:	e003      	b.n	80020fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020f2:	887b      	ldrh	r3, [r7, #2]
 80020f4:	041a      	lsls	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e267      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d075      	beq.n	8002212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002126:	4b88      	ldr	r3, [pc, #544]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b04      	cmp	r3, #4
 8002130:	d00c      	beq.n	800214c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002132:	4b85      	ldr	r3, [pc, #532]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800213a:	2b08      	cmp	r3, #8
 800213c:	d112      	bne.n	8002164 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213e:	4b82      	ldr	r3, [pc, #520]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800214a:	d10b      	bne.n	8002164 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	4b7e      	ldr	r3, [pc, #504]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d05b      	beq.n	8002210 <HAL_RCC_OscConfig+0x108>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d157      	bne.n	8002210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e242      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800216c:	d106      	bne.n	800217c <HAL_RCC_OscConfig+0x74>
 800216e:	4b76      	ldr	r3, [pc, #472]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a75      	ldr	r2, [pc, #468]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e01d      	b.n	80021b8 <HAL_RCC_OscConfig+0xb0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x98>
 8002186:	4b70      	ldr	r3, [pc, #448]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a6f      	ldr	r2, [pc, #444]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b6d      	ldr	r3, [pc, #436]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6c      	ldr	r2, [pc, #432]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0xb0>
 80021a0:	4b69      	ldr	r3, [pc, #420]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a68      	ldr	r2, [pc, #416]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b66      	ldr	r3, [pc, #408]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a65      	ldr	r2, [pc, #404]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff f852 	bl	8001268 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff f84e 	bl	8001268 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	@ 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e207      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b5b      	ldr	r3, [pc, #364]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0xc0>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff f83e 	bl	8001268 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff f83a 	bl	8001268 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	@ 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1f3      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	4b51      	ldr	r3, [pc, #324]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0xe8>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d063      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800221e:	4b4a      	ldr	r3, [pc, #296]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222a:	4b47      	ldr	r3, [pc, #284]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002232:	2b08      	cmp	r3, #8
 8002234:	d11c      	bne.n	8002270 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002236:	4b44      	ldr	r3, [pc, #272]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	4b41      	ldr	r3, [pc, #260]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x152>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e1c7      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225a:	4b3b      	ldr	r3, [pc, #236]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4937      	ldr	r1, [pc, #220]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	e03a      	b.n	80022e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002278:	4b34      	ldr	r3, [pc, #208]	@ (800234c <HAL_RCC_OscConfig+0x244>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227e:	f7fe fff3 	bl	8001268 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002286:	f7fe ffef 	bl	8001268 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e1a8      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	4b2b      	ldr	r3, [pc, #172]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b28      	ldr	r3, [pc, #160]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4925      	ldr	r1, [pc, #148]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e015      	b.n	80022e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ba:	4b24      	ldr	r3, [pc, #144]	@ (800234c <HAL_RCC_OscConfig+0x244>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe ffd2 	bl	8001268 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c8:	f7fe ffce 	bl	8001268 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e187      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	4b1b      	ldr	r3, [pc, #108]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d036      	beq.n	8002360 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d016      	beq.n	8002328 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fa:	4b15      	ldr	r3, [pc, #84]	@ (8002350 <HAL_RCC_OscConfig+0x248>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002300:	f7fe ffb2 	bl	8001268 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002308:	f7fe ffae 	bl	8001268 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e167      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_RCC_OscConfig+0x240>)
 800231c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x200>
 8002326:	e01b      	b.n	8002360 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002328:	4b09      	ldr	r3, [pc, #36]	@ (8002350 <HAL_RCC_OscConfig+0x248>)
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232e:	f7fe ff9b 	bl	8001268 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	e00e      	b.n	8002354 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002336:	f7fe ff97 	bl	8001268 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d907      	bls.n	8002354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e150      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
 8002348:	40023800 	.word	0x40023800
 800234c:	42470000 	.word	0x42470000
 8002350:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	4b88      	ldr	r3, [pc, #544]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ea      	bne.n	8002336 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8097 	beq.w	800249c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002372:	4b81      	ldr	r3, [pc, #516]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10f      	bne.n	800239e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	4b7d      	ldr	r3, [pc, #500]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	4a7c      	ldr	r2, [pc, #496]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800238c:	6413      	str	r3, [r2, #64]	@ 0x40
 800238e:	4b7a      	ldr	r3, [pc, #488]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b77      	ldr	r3, [pc, #476]	@ (800257c <HAL_RCC_OscConfig+0x474>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023aa:	4b74      	ldr	r3, [pc, #464]	@ (800257c <HAL_RCC_OscConfig+0x474>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a73      	ldr	r2, [pc, #460]	@ (800257c <HAL_RCC_OscConfig+0x474>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7fe ff57 	bl	8001268 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7fe ff53 	bl	8001268 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e10c      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b6a      	ldr	r3, [pc, #424]	@ (800257c <HAL_RCC_OscConfig+0x474>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x2ea>
 80023e4:	4b64      	ldr	r3, [pc, #400]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e8:	4a63      	ldr	r2, [pc, #396]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f0:	e01c      	b.n	800242c <HAL_RCC_OscConfig+0x324>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x30c>
 80023fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 80023fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	6713      	str	r3, [r2, #112]	@ 0x70
 8002406:	4b5c      	ldr	r3, [pc, #368]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800240a:	4a5b      	ldr	r2, [pc, #364]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6713      	str	r3, [r2, #112]	@ 0x70
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0x324>
 8002414:	4b58      	ldr	r3, [pc, #352]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002418:	4a57      	ldr	r2, [pc, #348]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 800241a:	f023 0301 	bic.w	r3, r3, #1
 800241e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002420:	4b55      	ldr	r3, [pc, #340]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002424:	4a54      	ldr	r2, [pc, #336]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002426:	f023 0304 	bic.w	r3, r3, #4
 800242a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002434:	f7fe ff18 	bl	8001268 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243a:	e00a      	b.n	8002452 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe ff14 	bl	8001268 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e0cb      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002452:	4b49      	ldr	r3, [pc, #292]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0ee      	beq.n	800243c <HAL_RCC_OscConfig+0x334>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002460:	f7fe ff02 	bl	8001268 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002466:	e00a      	b.n	800247e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe fefe 	bl	8001268 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0b5      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247e:	4b3e      	ldr	r3, [pc, #248]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ee      	bne.n	8002468 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800248a:	7dfb      	ldrb	r3, [r7, #23]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002490:	4b39      	ldr	r3, [pc, #228]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002494:	4a38      	ldr	r2, [pc, #224]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800249a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a1 	beq.w	80025e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a6:	4b34      	ldr	r3, [pc, #208]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d05c      	beq.n	800256c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d141      	bne.n	800253e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ba:	4b31      	ldr	r3, [pc, #196]	@ (8002580 <HAL_RCC_OscConfig+0x478>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7fe fed2 	bl	8001268 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c8:	f7fe fece 	bl	8001268 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e087      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024da:	4b27      	ldr	r3, [pc, #156]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69da      	ldr	r2, [r3, #28]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	019b      	lsls	r3, r3, #6
 80024f6:	431a      	orrs	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fc:	085b      	lsrs	r3, r3, #1
 80024fe:	3b01      	subs	r3, #1
 8002500:	041b      	lsls	r3, r3, #16
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	491b      	ldr	r1, [pc, #108]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002510:	4b1b      	ldr	r3, [pc, #108]	@ (8002580 <HAL_RCC_OscConfig+0x478>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7fe fea7 	bl	8001268 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251e:	f7fe fea3 	bl	8001268 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e05c      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002530:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x416>
 800253c:	e054      	b.n	80025e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253e:	4b10      	ldr	r3, [pc, #64]	@ (8002580 <HAL_RCC_OscConfig+0x478>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe fe90 	bl	8001268 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe fe8c 	bl	8001268 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e045      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <HAL_RCC_OscConfig+0x470>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x444>
 800256a:	e03d      	b.n	80025e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e038      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
 8002578:	40023800 	.word	0x40023800
 800257c:	40007000 	.word	0x40007000
 8002580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002584:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_RCC_OscConfig+0x4ec>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d028      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d121      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d11a      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025bc:	4293      	cmp	r3, r2
 80025be:	d111      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	3b01      	subs	r3, #1
 80025ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0cc      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b68      	ldr	r3, [pc, #416]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d90c      	bls.n	8002634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b65      	ldr	r3, [pc, #404]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a58      	ldr	r2, [pc, #352]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a52      	ldr	r2, [pc, #328]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800266e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d044      	beq.n	8002718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d119      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b3f      	ldr	r3, [pc, #252]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b3b      	ldr	r3, [pc, #236]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e067      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b37      	ldr	r3, [pc, #220]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4934      	ldr	r1, [pc, #208]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7fe fdbe 	bl	8001268 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7fe fdba 	bl	8001268 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e04f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	4b2b      	ldr	r3, [pc, #172]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 020c 	and.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d1eb      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b25      	ldr	r3, [pc, #148]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d20c      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b22      	ldr	r3, [pc, #136]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276a:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f821 	bl	80027c4 <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fd1e 	bl	80011e0 <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00
 80027b4:	40023800 	.word	0x40023800
 80027b8:	0800353c 	.word	0x0800353c
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000004 	.word	0x20000004

080027c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c8:	b094      	sub	sp, #80	@ 0x50
 80027ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027dc:	4b79      	ldr	r3, [pc, #484]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d00d      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x40>
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	f200 80e1 	bhi.w	80029b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x34>
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d003      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0x3a>
 80027f6:	e0db      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b73      	ldr	r3, [pc, #460]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80027fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027fc:	e0db      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027fe:	4b73      	ldr	r3, [pc, #460]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002800:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002802:	e0d8      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002804:	4b6f      	ldr	r3, [pc, #444]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800280c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800280e:	4b6d      	ldr	r3, [pc, #436]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d063      	beq.n	80028e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281a:	4b6a      	ldr	r3, [pc, #424]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	099b      	lsrs	r3, r3, #6
 8002820:	2200      	movs	r2, #0
 8002822:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002824:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282c:	633b      	str	r3, [r7, #48]	@ 0x30
 800282e:	2300      	movs	r3, #0
 8002830:	637b      	str	r3, [r7, #52]	@ 0x34
 8002832:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002836:	4622      	mov	r2, r4
 8002838:	462b      	mov	r3, r5
 800283a:	f04f 0000 	mov.w	r0, #0
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	0159      	lsls	r1, r3, #5
 8002844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002848:	0150      	lsls	r0, r2, #5
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4621      	mov	r1, r4
 8002850:	1a51      	subs	r1, r2, r1
 8002852:	6139      	str	r1, [r7, #16]
 8002854:	4629      	mov	r1, r5
 8002856:	eb63 0301 	sbc.w	r3, r3, r1
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002868:	4659      	mov	r1, fp
 800286a:	018b      	lsls	r3, r1, #6
 800286c:	4651      	mov	r1, sl
 800286e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002872:	4651      	mov	r1, sl
 8002874:	018a      	lsls	r2, r1, #6
 8002876:	4651      	mov	r1, sl
 8002878:	ebb2 0801 	subs.w	r8, r2, r1
 800287c:	4659      	mov	r1, fp
 800287e:	eb63 0901 	sbc.w	r9, r3, r1
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800288e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002896:	4690      	mov	r8, r2
 8002898:	4699      	mov	r9, r3
 800289a:	4623      	mov	r3, r4
 800289c:	eb18 0303 	adds.w	r3, r8, r3
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	462b      	mov	r3, r5
 80028a4:	eb49 0303 	adc.w	r3, r9, r3
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028b6:	4629      	mov	r1, r5
 80028b8:	024b      	lsls	r3, r1, #9
 80028ba:	4621      	mov	r1, r4
 80028bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028c0:	4621      	mov	r1, r4
 80028c2:	024a      	lsls	r2, r1, #9
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ca:	2200      	movs	r2, #0
 80028cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028d4:	f7fd fc78 	bl	80001c8 <__aeabi_uldivmod>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4613      	mov	r3, r2
 80028de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028e0:	e058      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e2:	4b38      	ldr	r3, [pc, #224]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	099b      	lsrs	r3, r3, #6
 80028e8:	2200      	movs	r2, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	4611      	mov	r1, r2
 80028ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028f2:	623b      	str	r3, [r7, #32]
 80028f4:	2300      	movs	r3, #0
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028fc:	4642      	mov	r2, r8
 80028fe:	464b      	mov	r3, r9
 8002900:	f04f 0000 	mov.w	r0, #0
 8002904:	f04f 0100 	mov.w	r1, #0
 8002908:	0159      	lsls	r1, r3, #5
 800290a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290e:	0150      	lsls	r0, r2, #5
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4641      	mov	r1, r8
 8002916:	ebb2 0a01 	subs.w	sl, r2, r1
 800291a:	4649      	mov	r1, r9
 800291c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800292c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002930:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002934:	ebb2 040a 	subs.w	r4, r2, sl
 8002938:	eb63 050b 	sbc.w	r5, r3, fp
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	00eb      	lsls	r3, r5, #3
 8002946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800294a:	00e2      	lsls	r2, r4, #3
 800294c:	4614      	mov	r4, r2
 800294e:	461d      	mov	r5, r3
 8002950:	4643      	mov	r3, r8
 8002952:	18e3      	adds	r3, r4, r3
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	464b      	mov	r3, r9
 8002958:	eb45 0303 	adc.w	r3, r5, r3
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 4500 	ldrd	r4, r5, [r7]
 800296a:	4629      	mov	r1, r5
 800296c:	028b      	lsls	r3, r1, #10
 800296e:	4621      	mov	r1, r4
 8002970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002974:	4621      	mov	r1, r4
 8002976:	028a      	lsls	r2, r1, #10
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800297e:	2200      	movs	r2, #0
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	61fa      	str	r2, [r7, #28]
 8002984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002988:	f7fd fc1e 	bl	80001c8 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4613      	mov	r3, r2
 8002992:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002994:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	3301      	adds	r3, #1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80029a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029ae:	e002      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029b0:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3750      	adds	r7, #80	@ 0x50
 80029bc:	46bd      	mov	sp, r7
 80029be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	00f42400 	.word	0x00f42400
 80029cc:	007a1200 	.word	0x007a1200

080029d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_TIM_PWM_Start+0x24>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e022      	b.n	8002a3a <HAL_TIM_PWM_Start+0x6a>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d109      	bne.n	8002a0e <HAL_TIM_PWM_Start+0x3e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	bf14      	ite	ne
 8002a06:	2301      	movne	r3, #1
 8002a08:	2300      	moveq	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	e015      	b.n	8002a3a <HAL_TIM_PWM_Start+0x6a>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d109      	bne.n	8002a28 <HAL_TIM_PWM_Start+0x58>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	bf14      	ite	ne
 8002a20:	2301      	movne	r3, #1
 8002a22:	2300      	moveq	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e008      	b.n	8002a3a <HAL_TIM_PWM_Start+0x6a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	bf14      	ite	ne
 8002a34:	2301      	movne	r3, #1
 8002a36:	2300      	moveq	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07c      	b.n	8002b3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d104      	bne.n	8002a52 <HAL_TIM_PWM_Start+0x82>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a50:	e013      	b.n	8002a7a <HAL_TIM_PWM_Start+0xaa>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d104      	bne.n	8002a62 <HAL_TIM_PWM_Start+0x92>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a60:	e00b      	b.n	8002a7a <HAL_TIM_PWM_Start+0xaa>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d104      	bne.n	8002a72 <HAL_TIM_PWM_Start+0xa2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a70:	e003      	b.n	8002a7a <HAL_TIM_PWM_Start+0xaa>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2202      	movs	r2, #2
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	6839      	ldr	r1, [r7, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fc81 	bl	800338a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8002b44 <HAL_TIM_PWM_Start+0x174>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d004      	beq.n	8002a9c <HAL_TIM_PWM_Start+0xcc>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a2c      	ldr	r2, [pc, #176]	@ (8002b48 <HAL_TIM_PWM_Start+0x178>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_TIM_PWM_Start+0xd0>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <HAL_TIM_PWM_Start+0xd2>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ab4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a22      	ldr	r2, [pc, #136]	@ (8002b44 <HAL_TIM_PWM_Start+0x174>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d022      	beq.n	8002b06 <HAL_TIM_PWM_Start+0x136>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac8:	d01d      	beq.n	8002b06 <HAL_TIM_PWM_Start+0x136>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1f      	ldr	r2, [pc, #124]	@ (8002b4c <HAL_TIM_PWM_Start+0x17c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d018      	beq.n	8002b06 <HAL_TIM_PWM_Start+0x136>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b50 <HAL_TIM_PWM_Start+0x180>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d013      	beq.n	8002b06 <HAL_TIM_PWM_Start+0x136>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b54 <HAL_TIM_PWM_Start+0x184>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00e      	beq.n	8002b06 <HAL_TIM_PWM_Start+0x136>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a16      	ldr	r2, [pc, #88]	@ (8002b48 <HAL_TIM_PWM_Start+0x178>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d009      	beq.n	8002b06 <HAL_TIM_PWM_Start+0x136>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a18      	ldr	r2, [pc, #96]	@ (8002b58 <HAL_TIM_PWM_Start+0x188>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d004      	beq.n	8002b06 <HAL_TIM_PWM_Start+0x136>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a16      	ldr	r2, [pc, #88]	@ (8002b5c <HAL_TIM_PWM_Start+0x18c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d111      	bne.n	8002b2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b06      	cmp	r3, #6
 8002b16:	d010      	beq.n	8002b3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b28:	e007      	b.n	8002b3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40010000 	.word	0x40010000
 8002b48:	40010400 	.word	0x40010400
 8002b4c:	40000400 	.word	0x40000400
 8002b50:	40000800 	.word	0x40000800
 8002b54:	40000c00 	.word	0x40000c00
 8002b58:	40014000 	.word	0x40014000
 8002b5c:	40001800 	.word	0x40001800

08002b60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e041      	b.n	8002bf6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe f9a0 	bl	8000ecc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f000 f90c 	bl	8002dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_TIM_IC_ConfigChannel+0x1e>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e088      	b.n	8002d2e <HAL_TIM_IC_ConfigChannel+0x130>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d11b      	bne.n	8002c62 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002c3a:	f000 f9fd 	bl	8003038 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 020c 	bic.w	r2, r2, #12
 8002c4c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6999      	ldr	r1, [r3, #24]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	619a      	str	r2, [r3, #24]
 8002c60:	e060      	b.n	8002d24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d11c      	bne.n	8002ca2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002c78:	f000 fa81 	bl	800317e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002c8a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6999      	ldr	r1, [r3, #24]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	021a      	lsls	r2, r3, #8
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	619a      	str	r2, [r3, #24]
 8002ca0:	e040      	b.n	8002d24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d11b      	bne.n	8002ce0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002cb8:	f000 face 	bl	8003258 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 020c 	bic.w	r2, r2, #12
 8002cca:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69d9      	ldr	r1, [r3, #28]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	61da      	str	r2, [r3, #28]
 8002cde:	e021      	b.n	8002d24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d11c      	bne.n	8002d20 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002cf6:	f000 faeb 	bl	80032d0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002d08:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69d9      	ldr	r1, [r3, #28]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	021a      	lsls	r2, r3, #8
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	61da      	str	r2, [r3, #28]
 8002d1e:	e001      	b.n	8002d24 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b082      	sub	sp, #8
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_TIM_SlaveConfigSynchro+0x18>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e031      	b.n	8002db2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002d5e:	6839      	ldr	r1, [r7, #0]
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8d7 	bl	8002f14 <TIM_SlaveTimer_SetConfig>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e018      	b.n	8002db2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d8e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d9e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a46      	ldr	r2, [pc, #280]	@ (8002ee8 <TIM_Base_SetConfig+0x12c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d013      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dda:	d00f      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a43      	ldr	r2, [pc, #268]	@ (8002eec <TIM_Base_SetConfig+0x130>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a42      	ldr	r2, [pc, #264]	@ (8002ef0 <TIM_Base_SetConfig+0x134>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d007      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a41      	ldr	r2, [pc, #260]	@ (8002ef4 <TIM_Base_SetConfig+0x138>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a40      	ldr	r2, [pc, #256]	@ (8002ef8 <TIM_Base_SetConfig+0x13c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d108      	bne.n	8002e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a35      	ldr	r2, [pc, #212]	@ (8002ee8 <TIM_Base_SetConfig+0x12c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d02b      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1c:	d027      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a32      	ldr	r2, [pc, #200]	@ (8002eec <TIM_Base_SetConfig+0x130>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d023      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a31      	ldr	r2, [pc, #196]	@ (8002ef0 <TIM_Base_SetConfig+0x134>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01f      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a30      	ldr	r2, [pc, #192]	@ (8002ef4 <TIM_Base_SetConfig+0x138>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01b      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a2f      	ldr	r2, [pc, #188]	@ (8002ef8 <TIM_Base_SetConfig+0x13c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d017      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a2e      	ldr	r2, [pc, #184]	@ (8002efc <TIM_Base_SetConfig+0x140>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a2d      	ldr	r2, [pc, #180]	@ (8002f00 <TIM_Base_SetConfig+0x144>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00f      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a2c      	ldr	r2, [pc, #176]	@ (8002f04 <TIM_Base_SetConfig+0x148>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00b      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a2b      	ldr	r2, [pc, #172]	@ (8002f08 <TIM_Base_SetConfig+0x14c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d007      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a2a      	ldr	r2, [pc, #168]	@ (8002f0c <TIM_Base_SetConfig+0x150>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a29      	ldr	r2, [pc, #164]	@ (8002f10 <TIM_Base_SetConfig+0x154>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d108      	bne.n	8002e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a10      	ldr	r2, [pc, #64]	@ (8002ee8 <TIM_Base_SetConfig+0x12c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_Base_SetConfig+0xf8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a12      	ldr	r2, [pc, #72]	@ (8002ef8 <TIM_Base_SetConfig+0x13c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d103      	bne.n	8002ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d105      	bne.n	8002eda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f023 0201 	bic.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	611a      	str	r2, [r3, #16]
  }
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	40000400 	.word	0x40000400
 8002ef0:	40000800 	.word	0x40000800
 8002ef4:	40000c00 	.word	0x40000c00
 8002ef8:	40010400 	.word	0x40010400
 8002efc:	40014000 	.word	0x40014000
 8002f00:	40014400 	.word	0x40014400
 8002f04:	40014800 	.word	0x40014800
 8002f08:	40001800 	.word	0x40001800
 8002f0c:	40001c00 	.word	0x40001c00
 8002f10:	40002000 	.word	0x40002000

08002f14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f30:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f023 0307 	bic.w	r3, r3, #7
 8002f42:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b70      	cmp	r3, #112	@ 0x70
 8002f5c:	d01a      	beq.n	8002f94 <TIM_SlaveTimer_SetConfig+0x80>
 8002f5e:	2b70      	cmp	r3, #112	@ 0x70
 8002f60:	d860      	bhi.n	8003024 <TIM_SlaveTimer_SetConfig+0x110>
 8002f62:	2b60      	cmp	r3, #96	@ 0x60
 8002f64:	d054      	beq.n	8003010 <TIM_SlaveTimer_SetConfig+0xfc>
 8002f66:	2b60      	cmp	r3, #96	@ 0x60
 8002f68:	d85c      	bhi.n	8003024 <TIM_SlaveTimer_SetConfig+0x110>
 8002f6a:	2b50      	cmp	r3, #80	@ 0x50
 8002f6c:	d046      	beq.n	8002ffc <TIM_SlaveTimer_SetConfig+0xe8>
 8002f6e:	2b50      	cmp	r3, #80	@ 0x50
 8002f70:	d858      	bhi.n	8003024 <TIM_SlaveTimer_SetConfig+0x110>
 8002f72:	2b40      	cmp	r3, #64	@ 0x40
 8002f74:	d019      	beq.n	8002faa <TIM_SlaveTimer_SetConfig+0x96>
 8002f76:	2b40      	cmp	r3, #64	@ 0x40
 8002f78:	d854      	bhi.n	8003024 <TIM_SlaveTimer_SetConfig+0x110>
 8002f7a:	2b30      	cmp	r3, #48	@ 0x30
 8002f7c:	d055      	beq.n	800302a <TIM_SlaveTimer_SetConfig+0x116>
 8002f7e:	2b30      	cmp	r3, #48	@ 0x30
 8002f80:	d850      	bhi.n	8003024 <TIM_SlaveTimer_SetConfig+0x110>
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d051      	beq.n	800302a <TIM_SlaveTimer_SetConfig+0x116>
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d84c      	bhi.n	8003024 <TIM_SlaveTimer_SetConfig+0x110>
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d04d      	beq.n	800302a <TIM_SlaveTimer_SetConfig+0x116>
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d04b      	beq.n	800302a <TIM_SlaveTimer_SetConfig+0x116>
 8002f92:	e047      	b.n	8003024 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002fa4:	f000 f9d1 	bl	800334a <TIM_ETR_SetConfig>
      break;
 8002fa8:	e040      	b.n	800302c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d101      	bne.n	8002fb6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e03b      	b.n	800302e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a1a      	ldr	r2, [r3, #32]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0201 	bic.w	r2, r2, #1
 8002fcc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fdc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	621a      	str	r2, [r3, #32]
      break;
 8002ffa:	e017      	b.n	800302c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003008:	461a      	mov	r2, r3
 800300a:	f000 f889 	bl	8003120 <TIM_TI1_ConfigInputStage>
      break;
 800300e:	e00d      	b.n	800302c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800301c:	461a      	mov	r2, r3
 800301e:	f000 f8eb 	bl	80031f8 <TIM_TI2_ConfigInputStage>
      break;
 8003022:	e003      	b.n	800302c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	75fb      	strb	r3, [r7, #23]
      break;
 8003028:	e000      	b.n	800302c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800302a:	bf00      	nop
  }

  return status;
 800302c:	7dfb      	ldrb	r3, [r7, #23]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f023 0201 	bic.w	r2, r3, #1
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4a28      	ldr	r2, [pc, #160]	@ (8003104 <TIM_TI1_SetConfig+0xcc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d01b      	beq.n	800309e <TIM_TI1_SetConfig+0x66>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800306c:	d017      	beq.n	800309e <TIM_TI1_SetConfig+0x66>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a25      	ldr	r2, [pc, #148]	@ (8003108 <TIM_TI1_SetConfig+0xd0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <TIM_TI1_SetConfig+0x66>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4a24      	ldr	r2, [pc, #144]	@ (800310c <TIM_TI1_SetConfig+0xd4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00f      	beq.n	800309e <TIM_TI1_SetConfig+0x66>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4a23      	ldr	r2, [pc, #140]	@ (8003110 <TIM_TI1_SetConfig+0xd8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00b      	beq.n	800309e <TIM_TI1_SetConfig+0x66>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a22      	ldr	r2, [pc, #136]	@ (8003114 <TIM_TI1_SetConfig+0xdc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d007      	beq.n	800309e <TIM_TI1_SetConfig+0x66>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4a21      	ldr	r2, [pc, #132]	@ (8003118 <TIM_TI1_SetConfig+0xe0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d003      	beq.n	800309e <TIM_TI1_SetConfig+0x66>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a20      	ldr	r2, [pc, #128]	@ (800311c <TIM_TI1_SetConfig+0xe4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <TIM_TI1_SetConfig+0x6a>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <TIM_TI1_SetConfig+0x6c>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f023 0303 	bic.w	r3, r3, #3
 80030ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	e003      	b.n	80030c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f023 030a 	bic.w	r3, r3, #10
 80030dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f003 030a 	and.w	r3, r3, #10
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	621a      	str	r2, [r3, #32]
}
 80030f6:	bf00      	nop
 80030f8:	371c      	adds	r7, #28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40010000 	.word	0x40010000
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800
 8003110:	40000c00 	.word	0x40000c00
 8003114:	40010400 	.word	0x40010400
 8003118:	40014000 	.word	0x40014000
 800311c:	40001800 	.word	0x40001800

08003120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f023 0201 	bic.w	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800314a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f023 030a 	bic.w	r3, r3, #10
 800315c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800317e:	b480      	push	{r7}
 8003180:	b087      	sub	sp, #28
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0210 	bic.w	r2, r3, #16
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	031b      	lsls	r3, r3, #12
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80031d0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	621a      	str	r2, [r3, #32]
}
 80031ec:	bf00      	nop
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f023 0210 	bic.w	r2, r3, #16
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	031b      	lsls	r3, r3, #12
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003234:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	621a      	str	r2, [r3, #32]
}
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f023 0303 	bic.w	r3, r3, #3
 8003284:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003294:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	b2db      	uxtb	r3, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80032a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	621a      	str	r2, [r3, #32]
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	021b      	lsls	r3, r3, #8
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800330e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	031b      	lsls	r3, r3, #12
 8003314:	b29b      	uxth	r3, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003322:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	031b      	lsls	r3, r3, #12
 8003328:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	621a      	str	r2, [r3, #32]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800334a:	b480      	push	{r7}
 800334c:	b087      	sub	sp, #28
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003364:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	021a      	lsls	r2, r3, #8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	431a      	orrs	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4313      	orrs	r3, r2
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	609a      	str	r2, [r3, #8]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800338a:	b480      	push	{r7}
 800338c:	b087      	sub	sp, #28
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	2201      	movs	r2, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	401a      	ands	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a1a      	ldr	r2, [r3, #32]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	431a      	orrs	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	621a      	str	r2, [r3, #32]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e05a      	b.n	80034a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a21      	ldr	r2, [pc, #132]	@ (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d022      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003438:	d01d      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1d      	ldr	r2, [pc, #116]	@ (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d018      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1b      	ldr	r2, [pc, #108]	@ (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d013      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1a      	ldr	r2, [pc, #104]	@ (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00e      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a18      	ldr	r2, [pc, #96]	@ (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a17      	ldr	r2, [pc, #92]	@ (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d004      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a15      	ldr	r2, [pc, #84]	@ (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d10c      	bne.n	8003490 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800347c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	4313      	orrs	r3, r2
 8003486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40010000 	.word	0x40010000
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40000800 	.word	0x40000800
 80034bc:	40000c00 	.word	0x40000c00
 80034c0:	40010400 	.word	0x40010400
 80034c4:	40014000 	.word	0x40014000
 80034c8:	40001800 	.word	0x40001800

080034cc <memset>:
 80034cc:	4402      	add	r2, r0
 80034ce:	4603      	mov	r3, r0
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d100      	bne.n	80034d6 <memset+0xa>
 80034d4:	4770      	bx	lr
 80034d6:	f803 1b01 	strb.w	r1, [r3], #1
 80034da:	e7f9      	b.n	80034d0 <memset+0x4>

080034dc <__libc_init_array>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	4d0d      	ldr	r5, [pc, #52]	@ (8003514 <__libc_init_array+0x38>)
 80034e0:	4c0d      	ldr	r4, [pc, #52]	@ (8003518 <__libc_init_array+0x3c>)
 80034e2:	1b64      	subs	r4, r4, r5
 80034e4:	10a4      	asrs	r4, r4, #2
 80034e6:	2600      	movs	r6, #0
 80034e8:	42a6      	cmp	r6, r4
 80034ea:	d109      	bne.n	8003500 <__libc_init_array+0x24>
 80034ec:	4d0b      	ldr	r5, [pc, #44]	@ (800351c <__libc_init_array+0x40>)
 80034ee:	4c0c      	ldr	r4, [pc, #48]	@ (8003520 <__libc_init_array+0x44>)
 80034f0:	f000 f818 	bl	8003524 <_init>
 80034f4:	1b64      	subs	r4, r4, r5
 80034f6:	10a4      	asrs	r4, r4, #2
 80034f8:	2600      	movs	r6, #0
 80034fa:	42a6      	cmp	r6, r4
 80034fc:	d105      	bne.n	800350a <__libc_init_array+0x2e>
 80034fe:	bd70      	pop	{r4, r5, r6, pc}
 8003500:	f855 3b04 	ldr.w	r3, [r5], #4
 8003504:	4798      	blx	r3
 8003506:	3601      	adds	r6, #1
 8003508:	e7ee      	b.n	80034e8 <__libc_init_array+0xc>
 800350a:	f855 3b04 	ldr.w	r3, [r5], #4
 800350e:	4798      	blx	r3
 8003510:	3601      	adds	r6, #1
 8003512:	e7f2      	b.n	80034fa <__libc_init_array+0x1e>
 8003514:	08003554 	.word	0x08003554
 8003518:	08003554 	.word	0x08003554
 800351c:	08003554 	.word	0x08003554
 8003520:	08003558 	.word	0x08003558

08003524 <_init>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	bf00      	nop
 8003528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352a:	bc08      	pop	{r3}
 800352c:	469e      	mov	lr, r3
 800352e:	4770      	bx	lr

08003530 <_fini>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	bf00      	nop
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr
