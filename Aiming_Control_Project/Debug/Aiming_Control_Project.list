
Aiming_Control_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a280  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800a410  0800a410  0000b410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a870  0800a870  0000c080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a870  0800a870  0000b870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a878  0800a878  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a878  0800a878  0000b878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a87c  0800a87c  0000b87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800a880  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c080  2**0
                  CONTENTS
 10 .bss          00000574  20000080  20000080  0000c080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200005f4  200005f4  0000c080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd23  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000236f  00000000  00000000  0001bdd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  0001e148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1b  00000000  00000000  0001f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023930  00000000  00000000  0001ff1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001371b  00000000  00000000  0004384b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbd45  00000000  00000000  00056f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132cab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059d8  00000000  00000000  00132cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b5  00000000  00000000  001386c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3f8 	.word	0x0800a3f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800a3f8 	.word	0x0800a3f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96a 	b.w	8000ea8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14e      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	458c      	cmp	ip, r1
 8000bfc:	4686      	mov	lr, r0
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	d962      	bls.n	8000cca <__udivmoddi4+0xde>
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	4091      	lsls	r1, r2
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	4319      	orrs	r1, r3
 8000c16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f f68c 	uxth.w	r6, ip
 8000c22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb04 f106 	mul.w	r1, r4, r6
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c42:	f080 8112 	bcs.w	8000e6a <__udivmoddi4+0x27e>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 810f 	bls.w	8000e6a <__udivmoddi4+0x27e>
 8000c4c:	3c02      	subs	r4, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f606 	mul.w	r6, r0, r6
 8000c66:	429e      	cmp	r6, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x94>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c72:	f080 80fc 	bcs.w	8000e6e <__udivmoddi4+0x282>
 8000c76:	429e      	cmp	r6, r3
 8000c78:	f240 80f9 	bls.w	8000e6e <__udivmoddi4+0x282>
 8000c7c:	4463      	add	r3, ip
 8000c7e:	3802      	subs	r0, #2
 8000c80:	1b9b      	subs	r3, r3, r6
 8000c82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c86:	2100      	movs	r1, #0
 8000c88:	b11d      	cbz	r5, 8000c92 <__udivmoddi4+0xa6>
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d905      	bls.n	8000ca6 <__udivmoddi4+0xba>
 8000c9a:	b10d      	cbz	r5, 8000ca0 <__udivmoddi4+0xb4>
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e7f5      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000ca6:	fab3 f183 	clz	r1, r3
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d146      	bne.n	8000d3c <__udivmoddi4+0x150>
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xcc>
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	f0c0 80f0 	bcc.w	8000e98 <__udivmoddi4+0x2ac>
 8000cb8:	1a86      	subs	r6, r0, r2
 8000cba:	eb64 0303 	sbc.w	r3, r4, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d0e6      	beq.n	8000c92 <__udivmoddi4+0xa6>
 8000cc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc8:	e7e3      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	f040 8090 	bne.w	8000df0 <__udivmoddi4+0x204>
 8000cd0:	eba1 040c 	sub.w	r4, r1, ip
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa1f f78c 	uxth.w	r7, ip
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb07 f006 	mul.w	r0, r7, r6
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x11c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x11a>
 8000d00:	4298      	cmp	r0, r3
 8000d02:	f200 80cd 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d06:	4626      	mov	r6, r4
 8000d08:	1a1c      	subs	r4, r3, r0
 8000d0a:	fa1f f38e 	uxth.w	r3, lr
 8000d0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d12:	fb08 4410 	mls	r4, r8, r0, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb00 f707 	mul.w	r7, r0, r7
 8000d1e:	429f      	cmp	r7, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x148>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x146>
 8000d2c:	429f      	cmp	r7, r3
 8000d2e:	f200 80b0 	bhi.w	8000e92 <__udivmoddi4+0x2a6>
 8000d32:	4620      	mov	r0, r4
 8000d34:	1bdb      	subs	r3, r3, r7
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0x9c>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 f706 	lsr.w	r7, r2, r6
 8000d46:	431f      	orrs	r7, r3
 8000d48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d50:	ea43 030c 	orr.w	r3, r3, ip
 8000d54:	40f4      	lsrs	r4, r6
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d60:	fbb4 fef0 	udiv	lr, r4, r0
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fb00 441e 	mls	r4, r0, lr, r4
 8000d6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d70:	fb0e f90c 	mul.w	r9, lr, ip
 8000d74:	45a1      	cmp	r9, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	d90a      	bls.n	8000d92 <__udivmoddi4+0x1a6>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d82:	f080 8084 	bcs.w	8000e8e <__udivmoddi4+0x2a2>
 8000d86:	45a1      	cmp	r9, r4
 8000d88:	f240 8081 	bls.w	8000e8e <__udivmoddi4+0x2a2>
 8000d8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000da2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1d2>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db4:	d267      	bcs.n	8000e86 <__udivmoddi4+0x29a>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d965      	bls.n	8000e86 <__udivmoddi4+0x29a>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc6:	eba4 040c 	sub.w	r4, r4, ip
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	46ce      	mov	lr, r9
 8000dce:	469c      	mov	ip, r3
 8000dd0:	d351      	bcc.n	8000e76 <__udivmoddi4+0x28a>
 8000dd2:	d04e      	beq.n	8000e72 <__udivmoddi4+0x286>
 8000dd4:	b155      	cbz	r5, 8000dec <__udivmoddi4+0x200>
 8000dd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dda:	eb64 040c 	sbc.w	r4, r4, ip
 8000dde:	fa04 f606 	lsl.w	r6, r4, r6
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431e      	orrs	r6, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e750      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000e00:	4094      	lsls	r4, r2
 8000e02:	430c      	orrs	r4, r1
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0c:	fa1f f78c 	uxth.w	r7, ip
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3110 	mls	r1, r8, r0, r3
 8000e18:	0c23      	lsrs	r3, r4, #16
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	fb00 f107 	mul.w	r1, r0, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x24c>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2e:	d22c      	bcs.n	8000e8a <__udivmoddi4+0x29e>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	d92a      	bls.n	8000e8a <__udivmoddi4+0x29e>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e40:	fb08 3311 	mls	r3, r8, r1, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb01 f307 	mul.w	r3, r1, r7
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x276>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e58:	d213      	bcs.n	8000e82 <__udivmoddi4+0x296>
 8000e5a:	42a3      	cmp	r3, r4
 8000e5c:	d911      	bls.n	8000e82 <__udivmoddi4+0x296>
 8000e5e:	3902      	subs	r1, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	1ae4      	subs	r4, r4, r3
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e739      	b.n	8000cde <__udivmoddi4+0xf2>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	e6f0      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e706      	b.n	8000c80 <__udivmoddi4+0x94>
 8000e72:	45c8      	cmp	r8, r9
 8000e74:	d2ae      	bcs.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7e:	3801      	subs	r0, #1
 8000e80:	e7a8      	b.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e82:	4631      	mov	r1, r6
 8000e84:	e7ed      	b.n	8000e62 <__udivmoddi4+0x276>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e799      	b.n	8000dbe <__udivmoddi4+0x1d2>
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	e7d4      	b.n	8000e38 <__udivmoddi4+0x24c>
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	e77f      	b.n	8000d92 <__udivmoddi4+0x1a6>
 8000e92:	4463      	add	r3, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e74d      	b.n	8000d34 <__udivmoddi4+0x148>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e70f      	b.n	8000cc0 <__udivmoddi4+0xd4>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	e730      	b.n	8000d08 <__udivmoddi4+0x11c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f023 030f 	bic.w	r3, r3, #15
 8000ebc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	f043 030c 	orr.w	r3, r3, #12
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	f043 030c 	orr.w	r3, r3, #12
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ee2:	7bbb      	ldrb	r3, [r7, #14]
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000eec:	f107 0208 	add.w	r2, r7, #8
 8000ef0:	2364      	movs	r3, #100	@ 0x64
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	214e      	movs	r1, #78	@ 0x4e
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <lcd_send_cmd+0x5c>)
 8000efa:	f002 ff49 	bl	8003d90 <HAL_I2C_Master_Transmit>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000174 	.word	0x20000174

08000f0c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f023 030f 	bic.w	r3, r3, #15
 8000f1c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f043 030d 	orr.w	r3, r3, #13
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	f043 0309 	orr.w	r3, r3, #9
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	f043 030d 	orr.w	r3, r3, #13
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f42:	7bbb      	ldrb	r3, [r7, #14]
 8000f44:	f043 0309 	orr.w	r3, r3, #9
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f4c:	f107 0208 	add.w	r2, r7, #8
 8000f50:	2364      	movs	r3, #100	@ 0x64
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2304      	movs	r3, #4
 8000f56:	214e      	movs	r1, #78	@ 0x4e
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <lcd_send_data+0x5c>)
 8000f5a:	f002 ff19 	bl	8003d90 <HAL_I2C_Master_Transmit>
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000174 	.word	0x20000174

08000f6c <lcd_enviar>:

void lcd_enviar(char *string,int row,int col)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
	lcd_put_cur(row,col);
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	68b8      	ldr	r0, [r7, #8]
 8000f7c:	f000 f81e 	bl	8000fbc <lcd_put_cur>
	lcd_send_string(string);
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f877 	bl	8001074 <lcd_send_string>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <lcd_clear>:

void lcd_clear (void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000f94:	2080      	movs	r0, #128	@ 0x80
 8000f96:	f7ff ff89 	bl	8000eac <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	e005      	b.n	8000fac <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000fa0:	2020      	movs	r0, #32
 8000fa2:	f7ff ffb3 	bl	8000f0c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b45      	cmp	r3, #69	@ 0x45
 8000fb0:	ddf6      	ble.n	8000fa0 <lcd_clear+0x12>
	}
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <lcd_put_cur+0x18>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d005      	beq.n	8000fde <lcd_put_cur+0x22>
 8000fd2:	e009      	b.n	8000fe8 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fda:	603b      	str	r3, [r7, #0]
            break;
 8000fdc:	e004      	b.n	8000fe8 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000fe4:	603b      	str	r3, [r7, #0]
            break;
 8000fe6:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <lcd_send_cmd>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <lcd_init>:


void lcd_init (void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000ffe:	2032      	movs	r0, #50	@ 0x32
 8001000:	f001 fe96 	bl	8002d30 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001004:	2030      	movs	r0, #48	@ 0x30
 8001006:	f7ff ff51 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800100a:	2005      	movs	r0, #5
 800100c:	f001 fe90 	bl	8002d30 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001010:	2030      	movs	r0, #48	@ 0x30
 8001012:	f7ff ff4b 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001016:	2001      	movs	r0, #1
 8001018:	f001 fe8a 	bl	8002d30 <HAL_Delay>
	lcd_send_cmd (0x30);
 800101c:	2030      	movs	r0, #48	@ 0x30
 800101e:	f7ff ff45 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(10);
 8001022:	200a      	movs	r0, #10
 8001024:	f001 fe84 	bl	8002d30 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001028:	2020      	movs	r0, #32
 800102a:	f7ff ff3f 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f001 fe7e 	bl	8002d30 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001034:	2028      	movs	r0, #40	@ 0x28
 8001036:	f7ff ff39 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f001 fe78 	bl	8002d30 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001040:	2008      	movs	r0, #8
 8001042:	f7ff ff33 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f001 fe72 	bl	8002d30 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800104c:	2001      	movs	r0, #1
 800104e:	f7ff ff2d 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f001 fe6c 	bl	8002d30 <HAL_Delay>
	HAL_Delay(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f001 fe69 	bl	8002d30 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800105e:	2006      	movs	r0, #6
 8001060:	f7ff ff24 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f001 fe63 	bl	8002d30 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800106a:	200c      	movs	r0, #12
 800106c:	f7ff ff1e 	bl	8000eac <lcd_send_cmd>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800107c:	e006      	b.n	800108c <lcd_send_string+0x18>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff40 	bl	8000f0c <lcd_send_data>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f4      	bne.n	800107e <lcd_send_string+0xa>
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <ShootPWMInit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------Shoot init-------------------------------------------------*/
void ShootPWMInit(uint16_t s){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,s);
 80010aa:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <ShootPWMInit+0x20>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	88fa      	ldrh	r2, [r7, #6]
 80010b0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000340 	.word	0x20000340

080010c4 <GetPosition>:
/*---------------------------End Shoot init-------------------------------------------------*/

/*-------------------------------------ServoADC Code--------------------------------------*/
float GetPosition(uint32_t val){
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	return ((float)val/ADCResolution)*ServoRange;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010d6:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80010f4 <GetPosition+0x30>
 80010da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010de:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80010f8 <GetPosition+0x34>
 80010e2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80010e6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	45800000 	.word	0x45800000
 80010f8:	42f00000 	.word	0x42f00000

080010fc <ReadServo>:

uint32_t ReadServo(ADC_HandleTypeDef* hadc){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	uint32_t value;

	HAL_ADC_Start(hadc);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f001 fe7b 	bl	8002e00 <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(hadc,HAL_MAX_DELAY)==HAL_OK) {
 800110a:	f04f 31ff 	mov.w	r1, #4294967295
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f001 ff7b 	bl	800300a <HAL_ADC_PollForConversion>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <ReadServo+0x26>
		   value = HAL_ADC_GetValue(hadc);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f002 f800 	bl	8003120 <HAL_ADC_GetValue>
 8001120:	60f8      	str	r0, [r7, #12]
		  }
	HAL_ADC_Stop(hadc);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f001 ff3e 	bl	8002fa4 <HAL_ADC_Stop>

	return value;
 8001128:	68fb      	ldr	r3, [r7, #12]
	}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <DrawDisplay>:

/*----------------------------------ServoADC Code End--------------------------------------*/
/*----------------------------------Display Code-------------------------------------------*/
void DrawDisplay(){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	memset(Buff,0,sizeof(Buff));
 8001138:	2264      	movs	r2, #100	@ 0x64
 800113a:	2100      	movs	r1, #0
 800113c:	4823      	ldr	r0, [pc, #140]	@ (80011cc <DrawDisplay+0x98>)
 800113e:	f005 fee0 	bl	8006f02 <memset>
	gcvt(Pos_S2, 4, BufX);
 8001142:	4b23      	ldr	r3, [pc, #140]	@ (80011d0 <DrawDisplay+0x9c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9fe 	bl	8000548 <__aeabi_f2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4920      	ldr	r1, [pc, #128]	@ (80011d4 <DrawDisplay+0xa0>)
 8001152:	2004      	movs	r0, #4
 8001154:	ec43 2b10 	vmov	d0, r2, r3
 8001158:	f005 fda2 	bl	8006ca0 <gcvt>
	gcvt(Pos_S3, 4, BufY);
 800115c:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <DrawDisplay+0xa4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9f1 	bl	8000548 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	491c      	ldr	r1, [pc, #112]	@ (80011dc <DrawDisplay+0xa8>)
 800116c:	2004      	movs	r0, #4
 800116e:	ec43 2b10 	vmov	d0, r2, r3
 8001172:	f005 fd95 	bl	8006ca0 <gcvt>
	strcat(Buff,"X:");
 8001176:	4815      	ldr	r0, [pc, #84]	@ (80011cc <DrawDisplay+0x98>)
 8001178:	f7ff f82a 	bl	80001d0 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <DrawDisplay+0x98>)
 8001182:	4413      	add	r3, r2
 8001184:	4a16      	ldr	r2, [pc, #88]	@ (80011e0 <DrawDisplay+0xac>)
 8001186:	8811      	ldrh	r1, [r2, #0]
 8001188:	7892      	ldrb	r2, [r2, #2]
 800118a:	8019      	strh	r1, [r3, #0]
 800118c:	709a      	strb	r2, [r3, #2]
	strcat(Buff,BufX);
 800118e:	4911      	ldr	r1, [pc, #68]	@ (80011d4 <DrawDisplay+0xa0>)
 8001190:	480e      	ldr	r0, [pc, #56]	@ (80011cc <DrawDisplay+0x98>)
 8001192:	f005 febe 	bl	8006f12 <strcat>
	strcat(Buff," Y:");
 8001196:	480d      	ldr	r0, [pc, #52]	@ (80011cc <DrawDisplay+0x98>)
 8001198:	f7ff f81a 	bl	80001d0 <strlen>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <DrawDisplay+0x98>)
 80011a2:	4413      	add	r3, r2
 80011a4:	4a0f      	ldr	r2, [pc, #60]	@ (80011e4 <DrawDisplay+0xb0>)
 80011a6:	6810      	ldr	r0, [r2, #0]
 80011a8:	6018      	str	r0, [r3, #0]
	strcat(Buff,BufY);
 80011aa:	490c      	ldr	r1, [pc, #48]	@ (80011dc <DrawDisplay+0xa8>)
 80011ac:	4807      	ldr	r0, [pc, #28]	@ (80011cc <DrawDisplay+0x98>)
 80011ae:	f005 feb0 	bl	8006f12 <strcat>
	lcd_enviar( "TARGET DETECTED", 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <DrawDisplay+0xb4>)
 80011b8:	f7ff fed8 	bl	8000f6c <lcd_enviar>
	lcd_enviar(Buff , 1, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2101      	movs	r1, #1
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <DrawDisplay+0x98>)
 80011c2:	f7ff fed3 	bl	8000f6c <lcd_enviar>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000043c 	.word	0x2000043c
 80011d0:	2000038c 	.word	0x2000038c
 80011d4:	200003d4 	.word	0x200003d4
 80011d8:	20000390 	.word	0x20000390
 80011dc:	20000408 	.word	0x20000408
 80011e0:	0800a410 	.word	0x0800a410
 80011e4:	0800a414 	.word	0x0800a414
 80011e8:	0800a418 	.word	0x0800a418

080011ec <SetPosition>:
/*----------------------------------Display Code End---------------------------------------*/
/*---------------------------------Servo Position Code--------------------------------------*/
void SetPosition(TIM_HandleTypeDef *htim,uint16_t PulseWidth){
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
	if(htim->Instance == TIM1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a10      	ldr	r2, [pc, #64]	@ (8001240 <SetPosition+0x54>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d104      	bne.n	800120c <SetPosition+0x20>
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, PulseWidth);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	635a      	str	r2, [r3, #52]	@ 0x34
	else if(htim->Instance == TIM2)
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, PulseWidth);
	else if(htim->Instance == TIM3)
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, PulseWidth);
}
 800120a:	e012      	b.n	8001232 <SetPosition+0x46>
	else if(htim->Instance == TIM2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001214:	d104      	bne.n	8001220 <SetPosition+0x34>
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, PulseWidth);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800121e:	e008      	b.n	8001232 <SetPosition+0x46>
	else if(htim->Instance == TIM3)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	@ (8001244 <SetPosition+0x58>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d103      	bne.n	8001232 <SetPosition+0x46>
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, PulseWidth);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40010000 	.word	0x40010000
 8001244:	40000400 	.word	0x40000400

08001248 <Rotate>:

void Rotate(){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

    HAL_Delay(10);
 800124c:	200a      	movs	r0, #10
 800124e:	f001 fd6f 	bl	8002d30 <HAL_Delay>
	if(dir == 0 && coord1 <= 210) {
 8001252:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <Rotate+0x74>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d114      	bne.n	8001284 <Rotate+0x3c>
 800125a:	4b19      	ldr	r3, [pc, #100]	@ (80012c0 <Rotate+0x78>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2bd2      	cmp	r3, #210	@ 0xd2
 8001260:	dc10      	bgt.n	8001284 <Rotate+0x3c>
		coord1=coord1+3;
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <Rotate+0x78>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	3303      	adds	r3, #3
 8001268:	4a15      	ldr	r2, [pc, #84]	@ (80012c0 <Rotate+0x78>)
 800126a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, coord1);//2,1ms represents 180º
 800126c:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <Rotate+0x78>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <Rotate+0x7c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	635a      	str	r2, [r3, #52]	@ 0x34
			if (coord1==210)
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <Rotate+0x78>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2bd2      	cmp	r3, #210	@ 0xd2
 800127c:	d102      	bne.n	8001284 <Rotate+0x3c>
				dir = 1;
 800127e:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <Rotate+0x74>)
 8001280:	2201      	movs	r2, #1
 8001282:	601a      	str	r2, [r3, #0]
		}
	if(dir == 1 && coord1 >= 90) {
 8001284:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <Rotate+0x74>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d114      	bne.n	80012b6 <Rotate+0x6e>
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <Rotate+0x78>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b59      	cmp	r3, #89	@ 0x59
 8001292:	dd10      	ble.n	80012b6 <Rotate+0x6e>
		coord1-=3;
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <Rotate+0x78>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3b03      	subs	r3, #3
 800129a:	4a09      	ldr	r2, [pc, #36]	@ (80012c0 <Rotate+0x78>)
 800129c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, coord1);//2,1ms represents 180º
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <Rotate+0x78>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <Rotate+0x7c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	635a      	str	r2, [r3, #52]	@ 0x34
			if (coord1<=90)
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <Rotate+0x78>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b5a      	cmp	r3, #90	@ 0x5a
 80012ae:	dc02      	bgt.n	80012b6 <Rotate+0x6e>
				dir = 0;
 80012b0:	4b02      	ldr	r3, [pc, #8]	@ (80012bc <Rotate+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
		}
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000394 	.word	0x20000394
 80012c0:	20000000 	.word	0x20000000
 80012c4:	20000220 	.word	0x20000220

080012c8 <delay>:
/*-------------------------------Servo Position Code End--------------------------------------*/

/*-------------------------------------HCSR-04 Code--------------------------------------*/
	void delay (uint16_t time)
	{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <delay+0x30>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	@ 0x24
		while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 80012da:	bf00      	nop
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <delay+0x30>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d3f9      	bcc.n	80012dc <delay+0x14>
	}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200002f8 	.word	0x200002f8
 80012fc:	00000000 	.word	0x00000000

08001300 <HAL_TIM_IC_CaptureCallback>:


	void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
	{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  //Channel 4 is exclusively used for HCSR-04 management
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7f1b      	ldrb	r3, [r3, #28]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d178      	bne.n	8001402 <HAL_TIM_IC_CaptureCallback+0x102>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 8001310:	4b41      	ldr	r3, [pc, #260]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d11a      	bne.n	800134e <HAL_TIM_IC_CaptureCallback+0x4e>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 8001318:	210c      	movs	r1, #12
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f004 ffc6 	bl	80062ac <HAL_TIM_ReadCapturedValue>
 8001320:	4603      	mov	r3, r0
 8001322:	4a3e      	ldr	r2, [pc, #248]	@ (800141c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001324:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 8001326:	4b3c      	ldr	r3, [pc, #240]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6a1a      	ldr	r2, [r3, #32]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 800133a:	621a      	str	r2, [r3, #32]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6a1a      	ldr	r2, [r3, #32]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800134a:	621a      	str	r2, [r3, #32]
				// set polarity to rising edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
			}
		}
	}
 800134c:	e059      	b.n	8001402 <HAL_TIM_IC_CaptureCallback+0x102>
			else if (Is_First_Captured==1)   // if the first is already captured
 800134e:	4b32      	ldr	r3, [pc, #200]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d155      	bne.n	8001402 <HAL_TIM_IC_CaptureCallback+0x102>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8001356:	210c      	movs	r1, #12
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f004 ffa7 	bl	80062ac <HAL_TIM_ReadCapturedValue>
 800135e:	4603      	mov	r3, r0
 8001360:	4a2f      	ldr	r2, [pc, #188]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001362:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	@ 0x24
				if (IC_Val2 > IC_Val1)
 800136c:	4b2c      	ldr	r3, [pc, #176]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x120>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d907      	bls.n	8001388 <HAL_TIM_IC_CaptureCallback+0x88>
					Difference = IC_Val2-IC_Val1;
 8001378:	4b29      	ldr	r3, [pc, #164]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x120>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b27      	ldr	r3, [pc, #156]	@ (800141c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	4a28      	ldr	r2, [pc, #160]	@ (8001424 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e00f      	b.n	80013a8 <HAL_TIM_IC_CaptureCallback+0xa8>
				else if (IC_Val1 > IC_Val2)
 8001388:	4b24      	ldr	r3, [pc, #144]	@ (800141c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x120>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d909      	bls.n	80013a8 <HAL_TIM_IC_CaptureCallback+0xa8>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8001394:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b20      	ldr	r3, [pc, #128]	@ (800141c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80013a2:	33ff      	adds	r3, #255	@ 0xff
 80013a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001424 <HAL_TIM_IC_CaptureCallback+0x124>)
 80013a6:	6013      	str	r3, [r2, #0]
				Distance = Difference * (0.34/2);
 80013a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <HAL_TIM_IC_CaptureCallback+0x124>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8a9 	bl	8000504 <__aeabi_ui2d>
 80013b2:	a317      	add	r3, pc, #92	@ (adr r3, 8001410 <HAL_TIM_IC_CaptureCallback+0x110>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff f91e 	bl	80005f8 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fbda 	bl	8000b7c <__aeabi_d2uiz>
 80013c8:	4603      	mov	r3, r0
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b16      	ldr	r3, [pc, #88]	@ (8001428 <HAL_TIM_IC_CaptureCallback+0x128>)
 80013ce:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <HAL_TIM_IC_CaptureCallback+0x118>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6a1a      	ldr	r2, [r3, #32]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80013e4:	621a      	str	r2, [r3, #32]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a12      	ldr	r2, [r2, #32]
 80013f0:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0202 	bic.w	r2, r2, #2
 8001400:	60da      	str	r2, [r3, #12]
	}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	f3af 8000 	nop.w
 8001410:	5c28f5c3 	.word	0x5c28f5c3
 8001414:	3fc5c28f 	.word	0x3fc5c28f
 8001418:	200003a4 	.word	0x200003a4
 800141c:	20000398 	.word	0x20000398
 8001420:	2000039c 	.word	0x2000039c
 8001424:	200003a0 	.word	0x200003a0
 8001428:	200003a5 	.word	0x200003a5
 800142c:	200002f8 	.word	0x200002f8

08001430 <HCSR04_Read>:

	void HCSR04_Read (void)
	{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001434:	2201      	movs	r2, #1
 8001436:	2110      	movs	r1, #16
 8001438:	480a      	ldr	r0, [pc, #40]	@ (8001464 <HCSR04_Read+0x34>)
 800143a:	f002 fb4b 	bl	8003ad4 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 800143e:	200a      	movs	r0, #10
 8001440:	f7ff ff42 	bl	80012c8 <delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);// pull the TRIG pin low
 8001444:	2200      	movs	r2, #0
 8001446:	2110      	movs	r1, #16
 8001448:	4806      	ldr	r0, [pc, #24]	@ (8001464 <HCSR04_Read+0x34>)
 800144a:	f002 fb43 	bl	8003ad4 <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HCSR04_Read+0x38>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <HCSR04_Read+0x38>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0202 	orr.w	r2, r2, #2
 800145c:	60da      	str	r2, [r3, #12]
	}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40020000 	.word	0x40020000
 8001468:	200002f8 	.word	0x200002f8
 800146c:	00000000 	.word	0x00000000

08001470 <read_joystick_position>:

	/*---------------------------------HCSR-04 Code End--------------------------------------*/


	//Lectura y tratamiento de coordenadas
	void read_joystick_position(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
	    uint8_t command = 0x00;  // Comando para leer datos del joystick (según el manual)
 8001476:	2300      	movs	r3, #0
 8001478:	71fb      	strb	r3, [r7, #7]

	    // Activamos el CS
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001480:	48a7      	ldr	r0, [pc, #668]	@ (8001720 <read_joystick_position+0x2b0>)
 8001482:	f002 fb27 	bl	8003ad4 <HAL_GPIO_WritePin>

	    //Transmitimos para leer
	    HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY);
 8001486:	1df9      	adds	r1, r7, #7
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
 800148c:	2201      	movs	r2, #1
 800148e:	48a5      	ldr	r0, [pc, #660]	@ (8001724 <read_joystick_position+0x2b4>)
 8001490:	f003 fce5 	bl	8004e5e <HAL_SPI_Transmit>

	    // Recibimos el buffer de datos del joystick
	    HAL_SPI_Receive(&hspi1, joystick_data, 5, HAL_MAX_DELAY);
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	2205      	movs	r2, #5
 800149a:	49a3      	ldr	r1, [pc, #652]	@ (8001728 <read_joystick_position+0x2b8>)
 800149c:	48a1      	ldr	r0, [pc, #644]	@ (8001724 <read_joystick_position+0x2b4>)
 800149e:	f003 fe22 	bl	80050e6 <HAL_SPI_Receive>

	    // Cerramos el CS
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014a8:	489d      	ldr	r0, [pc, #628]	@ (8001720 <read_joystick_position+0x2b0>)
 80014aa:	f002 fb13 	bl	8003ad4 <HAL_GPIO_WritePin>

	    // Procesar los datos: joystick_data[1] y joystick_data[2] son las posiciones X e Y
	    v_directorx = joystick_data[0];
 80014ae:	4b9e      	ldr	r3, [pc, #632]	@ (8001728 <read_joystick_position+0x2b8>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b9d      	ldr	r3, [pc, #628]	@ (800172c <read_joystick_position+0x2bc>)
 80014b6:	801a      	strh	r2, [r3, #0]
	    angulo = joystick_data[1];  //Valores de angulo
 80014b8:	4b9b      	ldr	r3, [pc, #620]	@ (8001728 <read_joystick_position+0x2b8>)
 80014ba:	785b      	ldrb	r3, [r3, #1]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b9c      	ldr	r3, [pc, #624]	@ (8001730 <read_joystick_position+0x2c0>)
 80014c0:	801a      	strh	r2, [r3, #0]
	    v_directory = joystick_data[2];  //Sectores de angulo
 80014c2:	4b99      	ldr	r3, [pc, #612]	@ (8001728 <read_joystick_position+0x2b8>)
 80014c4:	789b      	ldrb	r3, [r3, #2]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b9a      	ldr	r3, [pc, #616]	@ (8001734 <read_joystick_position+0x2c4>)
 80014ca:	801a      	strh	r2, [r3, #0]
	    boton1 = joystick_data[3]; //Boton central y lateral
 80014cc:	4b96      	ldr	r3, [pc, #600]	@ (8001728 <read_joystick_position+0x2b8>)
 80014ce:	78db      	ldrb	r3, [r3, #3]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b99      	ldr	r3, [pc, #612]	@ (8001738 <read_joystick_position+0x2c8>)
 80014d4:	801a      	strh	r2, [r3, #0]
	    boton2 = joystick_data[4]; //Confirmación de boton central y lateral
 80014d6:	4b94      	ldr	r3, [pc, #592]	@ (8001728 <read_joystick_position+0x2b8>)
 80014d8:	791b      	ldrb	r3, [r3, #4]
 80014da:	461a      	mov	r2, r3
 80014dc:	4b97      	ldr	r3, [pc, #604]	@ (800173c <read_joystick_position+0x2cc>)
 80014de:	801a      	strh	r2, [r3, #0]


	    //Boton lateral o central como seguro
	    if(boton2)
 80014e0:	4b96      	ldr	r3, [pc, #600]	@ (800173c <read_joystick_position+0x2cc>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 825c 	beq.w	80019a2 <read_joystick_position+0x532>
	    	          {
	    	//Valores de coordenadas en x e y para azimut y giro
	    		          x_value= 100-100*cos((M_PI*angulo_grados)/180);
 80014ea:	4b95      	ldr	r3, [pc, #596]	@ (8001740 <read_joystick_position+0x2d0>)
 80014ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f0:	a385      	add	r3, pc, #532	@ (adr r3, 8001708 <read_joystick_position+0x298>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f87f 	bl	80005f8 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b8f      	ldr	r3, [pc, #572]	@ (8001744 <read_joystick_position+0x2d4>)
 8001508:	f7ff f9a0 	bl	800084c <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	ec43 2b17 	vmov	d7, r2, r3
 8001514:	eeb0 0a47 	vmov.f32	s0, s14
 8001518:	eef0 0a67 	vmov.f32	s1, s15
 800151c:	f007 fee8 	bl	80092f0 <cos>
 8001520:	ec51 0b10 	vmov	r0, r1, d0
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b87      	ldr	r3, [pc, #540]	@ (8001748 <read_joystick_position+0x2d8>)
 800152a:	f7ff f865 	bl	80005f8 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	f04f 0000 	mov.w	r0, #0
 8001536:	4984      	ldr	r1, [pc, #528]	@ (8001748 <read_joystick_position+0x2d8>)
 8001538:	f7fe fea6 	bl	8000288 <__aeabi_dsub>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4982      	ldr	r1, [pc, #520]	@ (800174c <read_joystick_position+0x2dc>)
 8001542:	e9c1 2300 	strd	r2, r3, [r1]
	    		          y_value= 100+100*sin((M_PI*angulo_grados)/180);
 8001546:	4b7e      	ldr	r3, [pc, #504]	@ (8001740 <read_joystick_position+0x2d0>)
 8001548:	e9d3 0100 	ldrd	r0, r1, [r3]
 800154c:	a36e      	add	r3, pc, #440	@ (adr r3, 8001708 <read_joystick_position+0x298>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7ff f851 	bl	80005f8 <__aeabi_dmul>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	4b78      	ldr	r3, [pc, #480]	@ (8001744 <read_joystick_position+0x2d4>)
 8001564:	f7ff f972 	bl	800084c <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	ec43 2b17 	vmov	d7, r2, r3
 8001570:	eeb0 0a47 	vmov.f32	s0, s14
 8001574:	eef0 0a67 	vmov.f32	s1, s15
 8001578:	f007 ff0e 	bl	8009398 <sin>
 800157c:	ec51 0b10 	vmov	r0, r1, d0
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	4b70      	ldr	r3, [pc, #448]	@ (8001748 <read_joystick_position+0x2d8>)
 8001586:	f7ff f837 	bl	80005f8 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	4b6c      	ldr	r3, [pc, #432]	@ (8001748 <read_joystick_position+0x2d8>)
 8001598:	f7fe fe78 	bl	800028c <__adddf3>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	496b      	ldr	r1, [pc, #428]	@ (8001750 <read_joystick_position+0x2e0>)
 80015a2:	e9c1 2300 	strd	r2, r3, [r1]

	    		          //pos_servo2=90.0+(120.0/200.0)*(x_value);
						  if(x_value>50.0 && pos_servo2<210.0)pos_servo2+=1;
 80015a6:	4b69      	ldr	r3, [pc, #420]	@ (800174c <read_joystick_position+0x2dc>)
 80015a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b68      	ldr	r3, [pc, #416]	@ (8001754 <read_joystick_position+0x2e4>)
 80015b2:	f7ff fab1 	bl	8000b18 <__aeabi_dcmpgt>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d017      	beq.n	80015ec <read_joystick_position+0x17c>
 80015bc:	4b66      	ldr	r3, [pc, #408]	@ (8001758 <read_joystick_position+0x2e8>)
 80015be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	4b65      	ldr	r3, [pc, #404]	@ (800175c <read_joystick_position+0x2ec>)
 80015c8:	f7ff fa88 	bl	8000adc <__aeabi_dcmplt>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00c      	beq.n	80015ec <read_joystick_position+0x17c>
 80015d2:	4b61      	ldr	r3, [pc, #388]	@ (8001758 <read_joystick_position+0x2e8>)
 80015d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b60      	ldr	r3, [pc, #384]	@ (8001760 <read_joystick_position+0x2f0>)
 80015de:	f7fe fe55 	bl	800028c <__adddf3>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	495c      	ldr	r1, [pc, #368]	@ (8001758 <read_joystick_position+0x2e8>)
 80015e8:	e9c1 2300 	strd	r2, r3, [r1]
						  if(x_value<150.0 && pos_servo2>90.0)pos_servo2-=1;
 80015ec:	4b57      	ldr	r3, [pc, #348]	@ (800174c <read_joystick_position+0x2dc>)
 80015ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f2:	a347      	add	r3, pc, #284	@ (adr r3, 8001710 <read_joystick_position+0x2a0>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7ff fa70 	bl	8000adc <__aeabi_dcmplt>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d017      	beq.n	8001632 <read_joystick_position+0x1c2>
 8001602:	4b55      	ldr	r3, [pc, #340]	@ (8001758 <read_joystick_position+0x2e8>)
 8001604:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b55      	ldr	r3, [pc, #340]	@ (8001764 <read_joystick_position+0x2f4>)
 800160e:	f7ff fa83 	bl	8000b18 <__aeabi_dcmpgt>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00c      	beq.n	8001632 <read_joystick_position+0x1c2>
 8001618:	4b4f      	ldr	r3, [pc, #316]	@ (8001758 <read_joystick_position+0x2e8>)
 800161a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b4f      	ldr	r3, [pc, #316]	@ (8001760 <read_joystick_position+0x2f0>)
 8001624:	f7fe fe30 	bl	8000288 <__aeabi_dsub>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	494a      	ldr	r1, [pc, #296]	@ (8001758 <read_joystick_position+0x2e8>)
 800162e:	e9c1 2300 	strd	r2, r3, [r1]
						  //pos_servo3=90.0+(120.0/200.0)*(y_value);
						  if(y_value<50.0 && pos_servo3<210.0)pos_servo3+=1;
 8001632:	4b47      	ldr	r3, [pc, #284]	@ (8001750 <read_joystick_position+0x2e0>)
 8001634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	4b45      	ldr	r3, [pc, #276]	@ (8001754 <read_joystick_position+0x2e4>)
 800163e:	f7ff fa4d 	bl	8000adc <__aeabi_dcmplt>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d017      	beq.n	8001678 <read_joystick_position+0x208>
 8001648:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <read_joystick_position+0x2f8>)
 800164a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4b42      	ldr	r3, [pc, #264]	@ (800175c <read_joystick_position+0x2ec>)
 8001654:	f7ff fa42 	bl	8000adc <__aeabi_dcmplt>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00c      	beq.n	8001678 <read_joystick_position+0x208>
 800165e:	4b42      	ldr	r3, [pc, #264]	@ (8001768 <read_joystick_position+0x2f8>)
 8001660:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	4b3d      	ldr	r3, [pc, #244]	@ (8001760 <read_joystick_position+0x2f0>)
 800166a:	f7fe fe0f 	bl	800028c <__adddf3>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	493d      	ldr	r1, [pc, #244]	@ (8001768 <read_joystick_position+0x2f8>)
 8001674:	e9c1 2300 	strd	r2, r3, [r1]
						  if(y_value>150.0 && pos_servo3>90.0)pos_servo3-=1;
 8001678:	4b35      	ldr	r3, [pc, #212]	@ (8001750 <read_joystick_position+0x2e0>)
 800167a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800167e:	a324      	add	r3, pc, #144	@ (adr r3, 8001710 <read_joystick_position+0x2a0>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7ff fa48 	bl	8000b18 <__aeabi_dcmpgt>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d017      	beq.n	80016be <read_joystick_position+0x24e>
 800168e:	4b36      	ldr	r3, [pc, #216]	@ (8001768 <read_joystick_position+0x2f8>)
 8001690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b32      	ldr	r3, [pc, #200]	@ (8001764 <read_joystick_position+0x2f4>)
 800169a:	f7ff fa3d 	bl	8000b18 <__aeabi_dcmpgt>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00c      	beq.n	80016be <read_joystick_position+0x24e>
 80016a4:	4b30      	ldr	r3, [pc, #192]	@ (8001768 <read_joystick_position+0x2f8>)
 80016a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001760 <read_joystick_position+0x2f0>)
 80016b0:	f7fe fdea 	bl	8000288 <__aeabi_dsub>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	492b      	ldr	r1, [pc, #172]	@ (8001768 <read_joystick_position+0x2f8>)
 80016ba:	e9c1 2300 	strd	r2, r3, [r1]

	    		          //Sector 0-60
	    		          if(v_directorx>1 && v_directory> 1 && v_directory< 3)
 80016be:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <read_joystick_position+0x2bc>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d954      	bls.n	8001770 <read_joystick_position+0x300>
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <read_joystick_position+0x2c4>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d950      	bls.n	8001770 <read_joystick_position+0x300>
 80016ce:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <read_joystick_position+0x2c4>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d84c      	bhi.n	8001770 <read_joystick_position+0x300>
	    		            {
	    		          	 angulo_grados=60*1.0*angulo/255;
 80016d6:	4b16      	ldr	r3, [pc, #88]	@ (8001730 <read_joystick_position+0x2c0>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff22 	bl	8000524 <__aeabi_i2d>
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4b21      	ldr	r3, [pc, #132]	@ (800176c <read_joystick_position+0x2fc>)
 80016e6:	f7fe ff87 	bl	80005f8 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	a309      	add	r3, pc, #36	@ (adr r3, 8001718 <read_joystick_position+0x2a8>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7ff f8a8 	bl	800084c <__aeabi_ddiv>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	490f      	ldr	r1, [pc, #60]	@ (8001740 <read_joystick_position+0x2d0>)
 8001702:	e9c1 2300 	strd	r2, r3, [r1]
 8001706:	e14c      	b.n	80019a2 <read_joystick_position+0x532>
 8001708:	54442d18 	.word	0x54442d18
 800170c:	400921fb 	.word	0x400921fb
 8001710:	00000000 	.word	0x00000000
 8001714:	4062c000 	.word	0x4062c000
 8001718:	00000000 	.word	0x00000000
 800171c:	406fe000 	.word	0x406fe000
 8001720:	40020400 	.word	0x40020400
 8001724:	200001c8 	.word	0x200001c8
 8001728:	200003a8 	.word	0x200003a8
 800172c:	200003b4 	.word	0x200003b4
 8001730:	200003b2 	.word	0x200003b2
 8001734:	200003b6 	.word	0x200003b6
 8001738:	200003ae 	.word	0x200003ae
 800173c:	200003b0 	.word	0x200003b0
 8001740:	200003b8 	.word	0x200003b8
 8001744:	40668000 	.word	0x40668000
 8001748:	40590000 	.word	0x40590000
 800174c:	200003c0 	.word	0x200003c0
 8001750:	200003c8 	.word	0x200003c8
 8001754:	40490000 	.word	0x40490000
 8001758:	20000008 	.word	0x20000008
 800175c:	406a4000 	.word	0x406a4000
 8001760:	3ff00000 	.word	0x3ff00000
 8001764:	40568000 	.word	0x40568000
 8001768:	20000010 	.word	0x20000010
 800176c:	404e0000 	.word	0x404e0000
	    		            }
	    		          //Sector 60-90
	    		            else if(v_directory== 3 && v_directorx>1)
 8001770:	4b95      	ldr	r3, [pc, #596]	@ (80019c8 <read_joystick_position+0x558>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d121      	bne.n	80017bc <read_joystick_position+0x34c>
 8001778:	4b94      	ldr	r3, [pc, #592]	@ (80019cc <read_joystick_position+0x55c>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d91d      	bls.n	80017bc <read_joystick_position+0x34c>
	    		            {
	    		          	 angulo_grados= 60+30*angulo*1.0/68;
 8001780:	4b93      	ldr	r3, [pc, #588]	@ (80019d0 <read_joystick_position+0x560>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4613      	mov	r3, r2
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fec8 	bl	8000524 <__aeabi_i2d>
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b8e      	ldr	r3, [pc, #568]	@ (80019d4 <read_joystick_position+0x564>)
 800179a:	f7ff f857 	bl	800084c <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b8b      	ldr	r3, [pc, #556]	@ (80019d8 <read_joystick_position+0x568>)
 80017ac:	f7fe fd6e 	bl	800028c <__adddf3>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4989      	ldr	r1, [pc, #548]	@ (80019dc <read_joystick_position+0x56c>)
 80017b6:	e9c1 2300 	strd	r2, r3, [r1]
 80017ba:	e0f2      	b.n	80019a2 <read_joystick_position+0x532>
	    		            }
	    		          //Sector 90-120
	    		            else if(v_directory== 3 && v_directorx<2)
 80017bc:	4b82      	ldr	r3, [pc, #520]	@ (80019c8 <read_joystick_position+0x558>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d122      	bne.n	800180a <read_joystick_position+0x39a>
 80017c4:	4b81      	ldr	r3, [pc, #516]	@ (80019cc <read_joystick_position+0x55c>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d81e      	bhi.n	800180a <read_joystick_position+0x39a>
	    		            {
	    		            	 angulo_grados= 90+30*(68-angulo)*1.0/68;
 80017cc:	4b80      	ldr	r3, [pc, #512]	@ (80019d0 <read_joystick_position+0x560>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	f1c3 0244 	rsb	r2, r3, #68	@ 0x44
 80017d4:	4613      	mov	r3, r2
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	1a9b      	subs	r3, r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fea1 	bl	8000524 <__aeabi_i2d>
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b7b      	ldr	r3, [pc, #492]	@ (80019d4 <read_joystick_position+0x564>)
 80017e8:	f7ff f830 	bl	800084c <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b79      	ldr	r3, [pc, #484]	@ (80019e0 <read_joystick_position+0x570>)
 80017fa:	f7fe fd47 	bl	800028c <__adddf3>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4976      	ldr	r1, [pc, #472]	@ (80019dc <read_joystick_position+0x56c>)
 8001804:	e9c1 2300 	strd	r2, r3, [r1]
 8001808:	e0cb      	b.n	80019a2 <read_joystick_position+0x532>
	    		            }
	    		          //Sector 120-180
	    		            else if(v_directorx<2 && v_directory> 1 && v_directory< 3)
 800180a:	4b70      	ldr	r3, [pc, #448]	@ (80019cc <read_joystick_position+0x55c>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d826      	bhi.n	8001860 <read_joystick_position+0x3f0>
 8001812:	4b6d      	ldr	r3, [pc, #436]	@ (80019c8 <read_joystick_position+0x558>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d922      	bls.n	8001860 <read_joystick_position+0x3f0>
 800181a:	4b6b      	ldr	r3, [pc, #428]	@ (80019c8 <read_joystick_position+0x558>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d81e      	bhi.n	8001860 <read_joystick_position+0x3f0>
	    		            {
	    		               angulo_grados= 120+60*(255-angulo)*1.0/255;
 8001822:	4b6b      	ldr	r3, [pc, #428]	@ (80019d0 <read_joystick_position+0x560>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 800182a:	4613      	mov	r3, r2
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe76 	bl	8000524 <__aeabi_i2d>
 8001838:	a35d      	add	r3, pc, #372	@ (adr r3, 80019b0 <read_joystick_position+0x540>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7ff f805 	bl	800084c <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	4b65      	ldr	r3, [pc, #404]	@ (80019e4 <read_joystick_position+0x574>)
 8001850:	f7fe fd1c 	bl	800028c <__adddf3>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4960      	ldr	r1, [pc, #384]	@ (80019dc <read_joystick_position+0x56c>)
 800185a:	e9c1 2300 	strd	r2, r3, [r1]
 800185e:	e0a0      	b.n	80019a2 <read_joystick_position+0x532>
	    		            }
	    		          //Sector 180-240
	    		            else if(v_directorx<2 && v_directory< 2 && v_directory> 0)
 8001860:	4b5a      	ldr	r3, [pc, #360]	@ (80019cc <read_joystick_position+0x55c>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d826      	bhi.n	80018b6 <read_joystick_position+0x446>
 8001868:	4b57      	ldr	r3, [pc, #348]	@ (80019c8 <read_joystick_position+0x558>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d822      	bhi.n	80018b6 <read_joystick_position+0x446>
 8001870:	4b55      	ldr	r3, [pc, #340]	@ (80019c8 <read_joystick_position+0x558>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d01e      	beq.n	80018b6 <read_joystick_position+0x446>
	    		            {
	    		               angulo_grados= 180+60*(255-angulo)*1.0/255;
 8001878:	4b55      	ldr	r3, [pc, #340]	@ (80019d0 <read_joystick_position+0x560>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8001880:	4613      	mov	r3, r2
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe4b 	bl	8000524 <__aeabi_i2d>
 800188e:	a348      	add	r3, pc, #288	@ (adr r3, 80019b0 <read_joystick_position+0x540>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe ffda 	bl	800084c <__aeabi_ddiv>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b50      	ldr	r3, [pc, #320]	@ (80019e8 <read_joystick_position+0x578>)
 80018a6:	f7fe fcf1 	bl	800028c <__adddf3>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	494b      	ldr	r1, [pc, #300]	@ (80019dc <read_joystick_position+0x56c>)
 80018b0:	e9c1 2300 	strd	r2, r3, [r1]
 80018b4:	e075      	b.n	80019a2 <read_joystick_position+0x532>
	    		            }
	    		          //Sector 240-270
	    		            else if(v_directory== 0 && v_directorx<2)
 80018b6:	4b44      	ldr	r3, [pc, #272]	@ (80019c8 <read_joystick_position+0x558>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d120      	bne.n	8001900 <read_joystick_position+0x490>
 80018be:	4b43      	ldr	r3, [pc, #268]	@ (80019cc <read_joystick_position+0x55c>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d81c      	bhi.n	8001900 <read_joystick_position+0x490>
	    		            {
	    		               angulo_grados= 240-30*(angulo-255)*1.0/68;
 80018c6:	4b42      	ldr	r3, [pc, #264]	@ (80019d0 <read_joystick_position+0x560>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	f1a3 02ff 	sub.w	r2, r3, #255	@ 0xff
 80018ce:	4613      	mov	r3, r2
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	1a9b      	subs	r3, r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fe24 	bl	8000524 <__aeabi_i2d>
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	4b3c      	ldr	r3, [pc, #240]	@ (80019d4 <read_joystick_position+0x564>)
 80018e2:	f7fe ffb3 	bl	800084c <__aeabi_ddiv>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	f04f 0000 	mov.w	r0, #0
 80018ee:	493f      	ldr	r1, [pc, #252]	@ (80019ec <read_joystick_position+0x57c>)
 80018f0:	f7fe fcca 	bl	8000288 <__aeabi_dsub>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4938      	ldr	r1, [pc, #224]	@ (80019dc <read_joystick_position+0x56c>)
 80018fa:	e9c1 2300 	strd	r2, r3, [r1]
 80018fe:	e050      	b.n	80019a2 <read_joystick_position+0x532>
	    		            }
	    		          //Sector 270-300
	    		            else if(v_directory== 0 && v_directorx>1)
 8001900:	4b31      	ldr	r3, [pc, #196]	@ (80019c8 <read_joystick_position+0x558>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d122      	bne.n	800194e <read_joystick_position+0x4de>
 8001908:	4b30      	ldr	r3, [pc, #192]	@ (80019cc <read_joystick_position+0x55c>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d91e      	bls.n	800194e <read_joystick_position+0x4de>
	    		            {
	    		                 angulo_grados= 270+30*(angulo-255+68)*1.0/68;
 8001910:	4b2f      	ldr	r3, [pc, #188]	@ (80019d0 <read_joystick_position+0x560>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	f1a3 02bb 	sub.w	r2, r3, #187	@ 0xbb
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fdff 	bl	8000524 <__aeabi_i2d>
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <read_joystick_position+0x564>)
 800192c:	f7fe ff8e 	bl	800084c <__aeabi_ddiv>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	a31f      	add	r3, pc, #124	@ (adr r3, 80019b8 <read_joystick_position+0x548>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe fca5 	bl	800028c <__adddf3>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4925      	ldr	r1, [pc, #148]	@ (80019dc <read_joystick_position+0x56c>)
 8001948:	e9c1 2300 	strd	r2, r3, [r1]
 800194c:	e029      	b.n	80019a2 <read_joystick_position+0x532>
	    		            }
	    		          //Sector 300-330
	    		            else if(v_directorx>1 && v_directory< 2 && v_directory> 0)
 800194e:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <read_joystick_position+0x55c>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d925      	bls.n	80019a2 <read_joystick_position+0x532>
 8001956:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <read_joystick_position+0x558>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d821      	bhi.n	80019a2 <read_joystick_position+0x532>
 800195e:	4b1a      	ldr	r3, [pc, #104]	@ (80019c8 <read_joystick_position+0x558>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d01d      	beq.n	80019a2 <read_joystick_position+0x532>
	    		            {
	    		          	 angulo_grados= 300+60*(angulo)*1.0/255;
 8001966:	4b1a      	ldr	r3, [pc, #104]	@ (80019d0 <read_joystick_position+0x560>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	4613      	mov	r3, r2
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fdd5 	bl	8000524 <__aeabi_i2d>
 800197a:	a30d      	add	r3, pc, #52	@ (adr r3, 80019b0 <read_joystick_position+0x540>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe ff64 	bl	800084c <__aeabi_ddiv>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	a30c      	add	r3, pc, #48	@ (adr r3, 80019c0 <read_joystick_position+0x550>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f7fe fc7b 	bl	800028c <__adddf3>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4910      	ldr	r1, [pc, #64]	@ (80019dc <read_joystick_position+0x56c>)
 800199c:	e9c1 2300 	strd	r2, r3, [r1]
	    	          {
	    	        	  //Si se ha quitado el seguro valores por defecto a cero y la torreta se queda inmovil
	    	        	  //x_value= 0;
	    	        	  //y_value= 0;
	    	          }
	}
 80019a0:	e7ff      	b.n	80019a2 <read_joystick_position+0x532>
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	f3af 8000 	nop.w
 80019b0:	00000000 	.word	0x00000000
 80019b4:	406fe000 	.word	0x406fe000
 80019b8:	00000000 	.word	0x00000000
 80019bc:	4070e000 	.word	0x4070e000
 80019c0:	00000000 	.word	0x00000000
 80019c4:	4072c000 	.word	0x4072c000
 80019c8:	200003b6 	.word	0x200003b6
 80019cc:	200003b4 	.word	0x200003b4
 80019d0:	200003b2 	.word	0x200003b2
 80019d4:	40510000 	.word	0x40510000
 80019d8:	404e0000 	.word	0x404e0000
 80019dc:	200003b8 	.word	0x200003b8
 80019e0:	40568000 	.word	0x40568000
 80019e4:	405e0000 	.word	0x405e0000
 80019e8:	40668000 	.word	0x40668000
 80019ec:	406e0000 	.word	0x406e0000

080019f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f4:	f001 f92a 	bl	8002c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f8:	f000 f8be 	bl	8001b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019fc:	f000 fc8e 	bl	800231c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a00:	f000 f924 	bl	8001c4c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a04:	f000 f974 	bl	8001cf0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001a08:	f000 f9c4 	bl	8001d94 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001a0c:	f000 fa78 	bl	8001f00 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a10:	f000 fafa 	bl	8002008 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a14:	f000 fb50 	bl	80020b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a18:	f000 fba8 	bl	800216c <MX_TIM4_Init>
  MX_I2C1_Init();
 8001a1c:	f000 fa0c 	bl	8001e38 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a20:	f000 fa38 	bl	8001e94 <MX_SPI1_Init>
  MX_TIM8_Init();
 8001a24:	f000 fbf6 	bl	8002214 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
 	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4843      	ldr	r0, [pc, #268]	@ (8001b38 <main+0x148>)
 8001a2c:	f003 ffb0 	bl	8005990 <HAL_TIM_PWM_Start>
 	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001a30:	2104      	movs	r1, #4
 8001a32:	4842      	ldr	r0, [pc, #264]	@ (8001b3c <main+0x14c>)
 8001a34:	f003 ffac 	bl	8005990 <HAL_TIM_PWM_Start>
 	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001a38:	2108      	movs	r1, #8
 8001a3a:	4841      	ldr	r0, [pc, #260]	@ (8001b40 <main+0x150>)
 8001a3c:	f003 ffa8 	bl	8005990 <HAL_TIM_PWM_Start>
 	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001a40:	2100      	movs	r1, #0
 8001a42:	4840      	ldr	r0, [pc, #256]	@ (8001b44 <main+0x154>)
 8001a44:	f003 ffa4 	bl	8005990 <HAL_TIM_PWM_Start>
 	  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8001a48:	210c      	movs	r1, #12
 8001a4a:	483f      	ldr	r0, [pc, #252]	@ (8001b48 <main+0x158>)
 8001a4c:	f004 f8b8 	bl	8005bc0 <HAL_TIM_IC_Start_IT>
 	  lcd_init();
 8001a50:	f7ff fad3 	bl	8000ffa <lcd_init>
 	  ShootPWMInit(3125);
 8001a54:	f640 4035 	movw	r0, #3125	@ 0xc35
 8001a58:	f7ff fb22 	bl	80010a0 <ShootPWMInit>
 	  lcd_clear();
 8001a5c:	f7ff fa97 	bl	8000f8e <lcd_clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HCSR04_Read();
 8001a60:	f7ff fce6 	bl	8001430 <HCSR04_Read>

	 Pos_S1 = GetPosition(ReadServo(&hadc1));
 8001a64:	4839      	ldr	r0, [pc, #228]	@ (8001b4c <main+0x15c>)
 8001a66:	f7ff fb49 	bl	80010fc <ReadServo>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fb29 	bl	80010c4 <GetPosition>
 8001a72:	eef0 7a40 	vmov.f32	s15, s0
 8001a76:	4b36      	ldr	r3, [pc, #216]	@ (8001b50 <main+0x160>)
 8001a78:	edc3 7a00 	vstr	s15, [r3]
	 Pos_S2 = GetPosition(ReadServo(&hadc2));
 8001a7c:	4835      	ldr	r0, [pc, #212]	@ (8001b54 <main+0x164>)
 8001a7e:	f7ff fb3d 	bl	80010fc <ReadServo>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fb1d 	bl	80010c4 <GetPosition>
 8001a8a:	eef0 7a40 	vmov.f32	s15, s0
 8001a8e:	4b32      	ldr	r3, [pc, #200]	@ (8001b58 <main+0x168>)
 8001a90:	edc3 7a00 	vstr	s15, [r3]
	 Pos_S3 = GetPosition(ReadServo(&hadc3));
 8001a94:	4831      	ldr	r0, [pc, #196]	@ (8001b5c <main+0x16c>)
 8001a96:	f7ff fb31 	bl	80010fc <ReadServo>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fb11 	bl	80010c4 <GetPosition>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b60 <main+0x170>)
 8001aa8:	edc3 7a00 	vstr	s15, [r3]

	Rotate();
 8001aac:	f7ff fbcc 	bl	8001248 <Rotate>
	SetPosition(&htim2, pos_servo2);
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b64 <main+0x174>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff f85f 	bl	8000b7c <__aeabi_d2uiz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	481d      	ldr	r0, [pc, #116]	@ (8001b3c <main+0x14c>)
 8001ac6:	f7ff fb91 	bl	80011ec <SetPosition>
	SetPosition(&htim3, pos_servo3);
 8001aca:	4b27      	ldr	r3, [pc, #156]	@ (8001b68 <main+0x178>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff f852 	bl	8000b7c <__aeabi_d2uiz>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4619      	mov	r1, r3
 8001ade:	4818      	ldr	r0, [pc, #96]	@ (8001b40 <main+0x150>)
 8001ae0:	f7ff fb84 	bl	80011ec <SetPosition>
	//  Pos_S3 = GetPosition(ReadServo(&hadc3));

	  if(Distance < 10){
 8001ae4:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <main+0x17c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b09      	cmp	r3, #9
 8001aea:	d80f      	bhi.n	8001b0c <main+0x11c>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,1);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001af2:	481f      	ldr	r0, [pc, #124]	@ (8001b70 <main+0x180>)
 8001af4:	f001 ffee 	bl	8003ad4 <HAL_GPIO_WritePin>

		  if (pantalla==0){
 8001af8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <main+0x184>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d114      	bne.n	8001b2a <main+0x13a>
		    DrawDisplay();
 8001b00:	f7ff fb18 	bl	8001134 <DrawDisplay>
		    pantalla=1;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <main+0x184>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e00e      	b.n	8001b2a <main+0x13a>
		  }
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,0);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b12:	4817      	ldr	r0, [pc, #92]	@ (8001b70 <main+0x180>)
 8001b14:	f001 ffde 	bl	8003ad4 <HAL_GPIO_WritePin>
		  if (pantalla==1){
 8001b18:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <main+0x184>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d104      	bne.n	8001b2a <main+0x13a>
	  	    lcd_clear();
 8001b20:	f7ff fa35 	bl	8000f8e <lcd_clear>
		    pantalla=0;
 8001b24:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <main+0x184>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
		  }
	  }

	  //Llamada a la función de lectura
	  	          read_joystick_position();
 8001b2a:	f7ff fca1 	bl	8001470 <read_joystick_position>

	  	          // Retardo recomendado en la DATASHEET
	  	          HAL_Delay(10);
 8001b2e:	200a      	movs	r0, #10
 8001b30:	f001 f8fe 	bl	8002d30 <HAL_Delay>
	HCSR04_Read();
 8001b34:	e794      	b.n	8001a60 <main+0x70>
 8001b36:	bf00      	nop
 8001b38:	20000220 	.word	0x20000220
 8001b3c:	20000268 	.word	0x20000268
 8001b40:	200002b0 	.word	0x200002b0
 8001b44:	20000340 	.word	0x20000340
 8001b48:	200002f8 	.word	0x200002f8
 8001b4c:	2000009c 	.word	0x2000009c
 8001b50:	20000388 	.word	0x20000388
 8001b54:	200000e4 	.word	0x200000e4
 8001b58:	2000038c 	.word	0x2000038c
 8001b5c:	2000012c 	.word	0x2000012c
 8001b60:	20000390 	.word	0x20000390
 8001b64:	20000008 	.word	0x20000008
 8001b68:	20000010 	.word	0x20000010
 8001b6c:	200003a5 	.word	0x200003a5
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	200003d0 	.word	0x200003d0

08001b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b094      	sub	sp, #80	@ 0x50
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 0320 	add.w	r3, r7, #32
 8001b82:	2230      	movs	r2, #48	@ 0x30
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f005 f9bb 	bl	8006f02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	4b28      	ldr	r3, [pc, #160]	@ (8001c44 <SystemClock_Config+0xcc>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	4a27      	ldr	r2, [pc, #156]	@ (8001c44 <SystemClock_Config+0xcc>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001baa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bac:	4b25      	ldr	r3, [pc, #148]	@ (8001c44 <SystemClock_Config+0xcc>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb8:	2300      	movs	r3, #0
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	4b22      	ldr	r3, [pc, #136]	@ (8001c48 <SystemClock_Config+0xd0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a21      	ldr	r2, [pc, #132]	@ (8001c48 <SystemClock_Config+0xd0>)
 8001bc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c48 <SystemClock_Config+0xd0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bdc:	2310      	movs	r3, #16
 8001bde:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be0:	2302      	movs	r3, #2
 8001be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001be4:	2300      	movs	r3, #0
 8001be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001be8:	2308      	movs	r3, #8
 8001bea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001bec:	2332      	movs	r3, #50	@ 0x32
 8001bee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001bf4:	2307      	movs	r3, #7
 8001bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf8:	f107 0320 	add.w	r3, r7, #32
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 fc21 	bl	8004444 <HAL_RCC_OscConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c08:	f000 fc22 	bl	8002450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c0c:	230f      	movs	r3, #15
 8001c0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c10:	2302      	movs	r3, #2
 8001c12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fe82 	bl	8004934 <HAL_RCC_ClockConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c36:	f000 fc0b 	bl	8002450 <Error_Handler>
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	3750      	adds	r7, #80	@ 0x50
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40007000 	.word	0x40007000

08001c4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c52:	463b      	mov	r3, r7
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001c60:	4a21      	ldr	r2, [pc, #132]	@ (8001ce8 <MX_ADC1_Init+0x9c>)
 8001c62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c84:	4b17      	ldr	r3, [pc, #92]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001c8c:	4a17      	ldr	r2, [pc, #92]	@ (8001cec <MX_ADC1_Init+0xa0>)
 8001c8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c90:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c96:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001caa:	480e      	ldr	r0, [pc, #56]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001cac:	f001 f864 	bl	8002d78 <HAL_ADC_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001cb6:	f000 fbcb 	bl	8002450 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <MX_ADC1_Init+0x98>)
 8001ccc:	f001 fa36 	bl	800313c <HAL_ADC_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001cd6:	f000 fbbb 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000009c 	.word	0x2000009c
 8001ce8:	40012000 	.word	0x40012000
 8001cec:	0f000001 	.word	0x0f000001

08001cf0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001d02:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d04:	4a21      	ldr	r2, [pc, #132]	@ (8001d8c <MX_ADC2_Init+0x9c>)
 8001d06:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d08:	4b1f      	ldr	r3, [pc, #124]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001d14:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d20:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d30:	4a17      	ldr	r2, [pc, #92]	@ (8001d90 <MX_ADC2_Init+0xa0>)
 8001d32:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001d4e:	480e      	ldr	r0, [pc, #56]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d50:	f001 f812 	bl	8002d78 <HAL_ADC_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001d5a:	f000 fb79 	bl	8002450 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d62:	2301      	movs	r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4806      	ldr	r0, [pc, #24]	@ (8001d88 <MX_ADC2_Init+0x98>)
 8001d70:	f001 f9e4 	bl	800313c <HAL_ADC_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001d7a:	f000 fb69 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200000e4 	.word	0x200000e4
 8001d8c:	40012100 	.word	0x40012100
 8001d90:	0f000001 	.word	0x0f000001

08001d94 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001da6:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001da8:	4a21      	ldr	r2, [pc, #132]	@ (8001e30 <MX_ADC3_Init+0x9c>)
 8001daa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001dac:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001db2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001db8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dcc:	4b17      	ldr	r3, [pc, #92]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dd2:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001dd4:	4a17      	ldr	r2, [pc, #92]	@ (8001e34 <MX_ADC3_Init+0xa0>)
 8001dd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dd8:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001dde:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001df2:	480e      	ldr	r0, [pc, #56]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001df4:	f000 ffc0 	bl	8002d78 <HAL_ADC_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001dfe:	f000 fb27 	bl	8002450 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001e02:	2303      	movs	r3, #3
 8001e04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e06:	2301      	movs	r3, #1
 8001e08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e0e:	463b      	mov	r3, r7
 8001e10:	4619      	mov	r1, r3
 8001e12:	4806      	ldr	r0, [pc, #24]	@ (8001e2c <MX_ADC3_Init+0x98>)
 8001e14:	f001 f992 	bl	800313c <HAL_ADC_ConfigChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001e1e:	f000 fb17 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	2000012c 	.word	0x2000012c
 8001e30:	40012200 	.word	0x40012200
 8001e34:	0f000001 	.word	0x0f000001

08001e38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e3c:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <MX_I2C1_Init+0x50>)
 8001e3e:	4a13      	ldr	r2, [pc, #76]	@ (8001e8c <MX_I2C1_Init+0x54>)
 8001e40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e42:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <MX_I2C1_Init+0x50>)
 8001e44:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <MX_I2C1_Init+0x58>)
 8001e46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	@ (8001e88 <MX_I2C1_Init+0x50>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <MX_I2C1_Init+0x50>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <MX_I2C1_Init+0x50>)
 8001e56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <MX_I2C1_Init+0x50>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <MX_I2C1_Init+0x50>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e68:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <MX_I2C1_Init+0x50>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <MX_I2C1_Init+0x50>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e74:	4804      	ldr	r0, [pc, #16]	@ (8001e88 <MX_I2C1_Init+0x50>)
 8001e76:	f001 fe47 	bl	8003b08 <HAL_I2C_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e80:	f000 fae6 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000174 	.word	0x20000174
 8001e8c:	40005400 	.word	0x40005400
 8001e90:	000186a0 	.word	0x000186a0

08001e94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e98:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <MX_SPI1_Init+0x64>)
 8001e9a:	4a18      	ldr	r2, [pc, #96]	@ (8001efc <MX_SPI1_Init+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e9e:	4b16      	ldr	r3, [pc, #88]	@ (8001ef8 <MX_SPI1_Init+0x64>)
 8001ea0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ea4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <MX_SPI1_Init+0x64>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eac:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <MX_SPI1_Init+0x64>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <MX_SPI1_Init+0x64>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <MX_SPI1_Init+0x64>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <MX_SPI1_Init+0x64>)
 8001ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ec4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <MX_SPI1_Init+0x64>)
 8001ec8:	2218      	movs	r2, #24
 8001eca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <MX_SPI1_Init+0x64>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <MX_SPI1_Init+0x64>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <MX_SPI1_Init+0x64>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ede:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <MX_SPI1_Init+0x64>)
 8001ee0:	220a      	movs	r2, #10
 8001ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ee4:	4804      	ldr	r0, [pc, #16]	@ (8001ef8 <MX_SPI1_Init+0x64>)
 8001ee6:	f002 ff31 	bl	8004d4c <HAL_SPI_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ef0:	f000 faae 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200001c8 	.word	0x200001c8
 8001efc:	40013000 	.word	0x40013000

08001f00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b092      	sub	sp, #72	@ 0x48
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
 8001f20:	615a      	str	r2, [r3, #20]
 8001f22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2220      	movs	r2, #32
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 ffe9 	bl	8006f02 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f30:	4b33      	ldr	r3, [pc, #204]	@ (8002000 <MX_TIM1_Init+0x100>)
 8001f32:	4a34      	ldr	r2, [pc, #208]	@ (8002004 <MX_TIM1_Init+0x104>)
 8001f34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 8001f36:	4b32      	ldr	r3, [pc, #200]	@ (8002000 <MX_TIM1_Init+0x100>)
 8001f38:	229f      	movs	r2, #159	@ 0x9f
 8001f3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	@ (8002000 <MX_TIM1_Init+0x100>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001f42:	4b2f      	ldr	r3, [pc, #188]	@ (8002000 <MX_TIM1_Init+0x100>)
 8001f44:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001f48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <MX_TIM1_Init+0x100>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f50:	4b2b      	ldr	r3, [pc, #172]	@ (8002000 <MX_TIM1_Init+0x100>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f56:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <MX_TIM1_Init+0x100>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f5c:	4828      	ldr	r0, [pc, #160]	@ (8002000 <MX_TIM1_Init+0x100>)
 8001f5e:	f003 fcc7 	bl	80058f0 <HAL_TIM_PWM_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001f68:	f000 fa72 	bl	8002450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4821      	ldr	r0, [pc, #132]	@ (8002000 <MX_TIM1_Init+0x100>)
 8001f7c:	f004 fdae 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001f86:	f000 fa63 	bl	8002450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8a:	2360      	movs	r3, #96	@ 0x60
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f96:	2300      	movs	r3, #0
 8001f98:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001faa:	2200      	movs	r2, #0
 8001fac:	4619      	mov	r1, r3
 8001fae:	4814      	ldr	r0, [pc, #80]	@ (8002000 <MX_TIM1_Init+0x100>)
 8001fb0:	f004 f8ba 	bl	8006128 <HAL_TIM_PWM_ConfigChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001fba:	f000 fa49 	bl	8002450 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fd6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4807      	ldr	r0, [pc, #28]	@ (8002000 <MX_TIM1_Init+0x100>)
 8001fe2:	f004 fdf7 	bl	8006bd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001fec:	f000 fa30 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ff0:	4803      	ldr	r0, [pc, #12]	@ (8002000 <MX_TIM1_Init+0x100>)
 8001ff2:	f000 fc41 	bl	8002878 <HAL_TIM_MspPostInit>

}
 8001ff6:	bf00      	nop
 8001ff8:	3748      	adds	r7, #72	@ 0x48
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000220 	.word	0x20000220
 8002004:	40010000 	.word	0x40010000

08002008 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	@ 0x28
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200e:	f107 0320 	add.w	r3, r7, #32
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]
 8002026:	615a      	str	r2, [r3, #20]
 8002028:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800202a:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <MX_TIM2_Init+0xac>)
 800202c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002030:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8002032:	4b20      	ldr	r3, [pc, #128]	@ (80020b4 <MX_TIM2_Init+0xac>)
 8002034:	229f      	movs	r2, #159	@ 0x9f
 8002036:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002038:	4b1e      	ldr	r3, [pc, #120]	@ (80020b4 <MX_TIM2_Init+0xac>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800203e:	4b1d      	ldr	r3, [pc, #116]	@ (80020b4 <MX_TIM2_Init+0xac>)
 8002040:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002044:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002046:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <MX_TIM2_Init+0xac>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204c:	4b19      	ldr	r3, [pc, #100]	@ (80020b4 <MX_TIM2_Init+0xac>)
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002052:	4818      	ldr	r0, [pc, #96]	@ (80020b4 <MX_TIM2_Init+0xac>)
 8002054:	f003 fc4c 	bl	80058f0 <HAL_TIM_PWM_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800205e:	f000 f9f7 	bl	8002450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800206a:	f107 0320 	add.w	r3, r7, #32
 800206e:	4619      	mov	r1, r3
 8002070:	4810      	ldr	r0, [pc, #64]	@ (80020b4 <MX_TIM2_Init+0xac>)
 8002072:	f004 fd33 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800207c:	f000 f9e8 	bl	8002450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002080:	2360      	movs	r3, #96	@ 0x60
 8002082:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	2204      	movs	r2, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4807      	ldr	r0, [pc, #28]	@ (80020b4 <MX_TIM2_Init+0xac>)
 8002098:	f004 f846 	bl	8006128 <HAL_TIM_PWM_ConfigChannel>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80020a2:	f000 f9d5 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020a6:	4803      	ldr	r0, [pc, #12]	@ (80020b4 <MX_TIM2_Init+0xac>)
 80020a8:	f000 fbe6 	bl	8002878 <HAL_TIM_MspPostInit>

}
 80020ac:	bf00      	nop
 80020ae:	3728      	adds	r7, #40	@ 0x28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000268 	.word	0x20000268

080020b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	@ 0x28
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020be:	f107 0320 	add.w	r3, r7, #32
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	611a      	str	r2, [r3, #16]
 80020d6:	615a      	str	r2, [r3, #20]
 80020d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020da:	4b22      	ldr	r3, [pc, #136]	@ (8002164 <MX_TIM3_Init+0xac>)
 80020dc:	4a22      	ldr	r2, [pc, #136]	@ (8002168 <MX_TIM3_Init+0xb0>)
 80020de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 80020e0:	4b20      	ldr	r3, [pc, #128]	@ (8002164 <MX_TIM3_Init+0xac>)
 80020e2:	229f      	movs	r2, #159	@ 0x9f
 80020e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002164 <MX_TIM3_Init+0xac>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <MX_TIM3_Init+0xac>)
 80020ee:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80020f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002164 <MX_TIM3_Init+0xac>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <MX_TIM3_Init+0xac>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002100:	4818      	ldr	r0, [pc, #96]	@ (8002164 <MX_TIM3_Init+0xac>)
 8002102:	f003 fbf5 	bl	80058f0 <HAL_TIM_PWM_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800210c:	f000 f9a0 	bl	8002450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002118:	f107 0320 	add.w	r3, r7, #32
 800211c:	4619      	mov	r1, r3
 800211e:	4811      	ldr	r0, [pc, #68]	@ (8002164 <MX_TIM3_Init+0xac>)
 8002120:	f004 fcdc 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800212a:	f000 f991 	bl	8002450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800212e:	2360      	movs	r3, #96	@ 0x60
 8002130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	2208      	movs	r2, #8
 8002142:	4619      	mov	r1, r3
 8002144:	4807      	ldr	r0, [pc, #28]	@ (8002164 <MX_TIM3_Init+0xac>)
 8002146:	f003 ffef 	bl	8006128 <HAL_TIM_PWM_ConfigChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002150:	f000 f97e 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002154:	4803      	ldr	r0, [pc, #12]	@ (8002164 <MX_TIM3_Init+0xac>)
 8002156:	f000 fb8f 	bl	8002878 <HAL_TIM_MspPostInit>

}
 800215a:	bf00      	nop
 800215c:	3728      	adds	r7, #40	@ 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200002b0 	.word	0x200002b0
 8002168:	40000400 	.word	0x40000400

0800216c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800217c:	463b      	mov	r3, r7
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002188:	4b20      	ldr	r3, [pc, #128]	@ (800220c <MX_TIM4_Init+0xa0>)
 800218a:	4a21      	ldr	r2, [pc, #132]	@ (8002210 <MX_TIM4_Init+0xa4>)
 800218c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 800218e:	4b1f      	ldr	r3, [pc, #124]	@ (800220c <MX_TIM4_Init+0xa0>)
 8002190:	2263      	movs	r2, #99	@ 0x63
 8002192:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002194:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <MX_TIM4_Init+0xa0>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 800219a:	4b1c      	ldr	r3, [pc, #112]	@ (800220c <MX_TIM4_Init+0xa0>)
 800219c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80021a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a2:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <MX_TIM4_Init+0xa0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a8:	4b18      	ldr	r3, [pc, #96]	@ (800220c <MX_TIM4_Init+0xa0>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80021ae:	4817      	ldr	r0, [pc, #92]	@ (800220c <MX_TIM4_Init+0xa0>)
 80021b0:	f003 fcb6 	bl	8005b20 <HAL_TIM_IC_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80021ba:	f000 f949 	bl	8002450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021c6:	f107 0310 	add.w	r3, r7, #16
 80021ca:	4619      	mov	r1, r3
 80021cc:	480f      	ldr	r0, [pc, #60]	@ (800220c <MX_TIM4_Init+0xa0>)
 80021ce:	f004 fc85 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80021d8:	f000 f93a 	bl	8002450 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021dc:	2300      	movs	r3, #0
 80021de:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021e0:	2301      	movs	r3, #1
 80021e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80021ec:	463b      	mov	r3, r7
 80021ee:	220c      	movs	r2, #12
 80021f0:	4619      	mov	r1, r3
 80021f2:	4806      	ldr	r0, [pc, #24]	@ (800220c <MX_TIM4_Init+0xa0>)
 80021f4:	f003 fefc 	bl	8005ff0 <HAL_TIM_IC_ConfigChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80021fe:	f000 f927 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200002f8 	.word	0x200002f8
 8002210:	40000800 	.word	0x40000800

08002214 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b092      	sub	sp, #72	@ 0x48
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
 8002234:	615a      	str	r2, [r3, #20]
 8002236:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	2220      	movs	r2, #32
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f004 fe5f 	bl	8006f02 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002244:	4b33      	ldr	r3, [pc, #204]	@ (8002314 <MX_TIM8_Init+0x100>)
 8002246:	4a34      	ldr	r2, [pc, #208]	@ (8002318 <MX_TIM8_Init+0x104>)
 8002248:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 255-1;
 800224a:	4b32      	ldr	r3, [pc, #200]	@ (8002314 <MX_TIM8_Init+0x100>)
 800224c:	22fe      	movs	r2, #254	@ 0xfe
 800224e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002250:	4b30      	ldr	r3, [pc, #192]	@ (8002314 <MX_TIM8_Init+0x100>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 6250-1;
 8002256:	4b2f      	ldr	r3, [pc, #188]	@ (8002314 <MX_TIM8_Init+0x100>)
 8002258:	f641 0269 	movw	r2, #6249	@ 0x1869
 800225c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225e:	4b2d      	ldr	r3, [pc, #180]	@ (8002314 <MX_TIM8_Init+0x100>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002264:	4b2b      	ldr	r3, [pc, #172]	@ (8002314 <MX_TIM8_Init+0x100>)
 8002266:	2200      	movs	r2, #0
 8002268:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226a:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <MX_TIM8_Init+0x100>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002270:	4828      	ldr	r0, [pc, #160]	@ (8002314 <MX_TIM8_Init+0x100>)
 8002272:	f003 fb3d 	bl	80058f0 <HAL_TIM_PWM_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800227c:	f000 f8e8 	bl	8002450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002280:	2300      	movs	r3, #0
 8002282:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002288:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800228c:	4619      	mov	r1, r3
 800228e:	4821      	ldr	r0, [pc, #132]	@ (8002314 <MX_TIM8_Init+0x100>)
 8002290:	f004 fc24 	bl	8006adc <HAL_TIMEx_MasterConfigSynchronization>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800229a:	f000 f8d9 	bl	8002450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800229e:	2360      	movs	r3, #96	@ 0x60
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022a6:	2300      	movs	r3, #0
 80022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022aa:	2300      	movs	r3, #0
 80022ac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022b6:	2300      	movs	r3, #0
 80022b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022be:	2200      	movs	r2, #0
 80022c0:	4619      	mov	r1, r3
 80022c2:	4814      	ldr	r0, [pc, #80]	@ (8002314 <MX_TIM8_Init+0x100>)
 80022c4:	f003 ff30 	bl	8006128 <HAL_TIM_PWM_ConfigChannel>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80022ce:	f000 f8bf 	bl	8002450 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	4619      	mov	r1, r3
 80022f4:	4807      	ldr	r0, [pc, #28]	@ (8002314 <MX_TIM8_Init+0x100>)
 80022f6:	f004 fc6d 	bl	8006bd4 <HAL_TIMEx_ConfigBreakDeadTime>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8002300:	f000 f8a6 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002304:	4803      	ldr	r0, [pc, #12]	@ (8002314 <MX_TIM8_Init+0x100>)
 8002306:	f000 fab7 	bl	8002878 <HAL_TIM_MspPostInit>

}
 800230a:	bf00      	nop
 800230c:	3748      	adds	r7, #72	@ 0x48
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000340 	.word	0x20000340
 8002318:	40010400 	.word	0x40010400

0800231c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
 8002330:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b42      	ldr	r3, [pc, #264]	@ (8002440 <MX_GPIO_Init+0x124>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	4a41      	ldr	r2, [pc, #260]	@ (8002440 <MX_GPIO_Init+0x124>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6313      	str	r3, [r2, #48]	@ 0x30
 8002342:	4b3f      	ldr	r3, [pc, #252]	@ (8002440 <MX_GPIO_Init+0x124>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b3b      	ldr	r3, [pc, #236]	@ (8002440 <MX_GPIO_Init+0x124>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002356:	4a3a      	ldr	r2, [pc, #232]	@ (8002440 <MX_GPIO_Init+0x124>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	6313      	str	r3, [r2, #48]	@ 0x30
 800235e:	4b38      	ldr	r3, [pc, #224]	@ (8002440 <MX_GPIO_Init+0x124>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	4b34      	ldr	r3, [pc, #208]	@ (8002440 <MX_GPIO_Init+0x124>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4a33      	ldr	r2, [pc, #204]	@ (8002440 <MX_GPIO_Init+0x124>)
 8002374:	f043 0310 	orr.w	r3, r3, #16
 8002378:	6313      	str	r3, [r2, #48]	@ 0x30
 800237a:	4b31      	ldr	r3, [pc, #196]	@ (8002440 <MX_GPIO_Init+0x124>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	4b2d      	ldr	r3, [pc, #180]	@ (8002440 <MX_GPIO_Init+0x124>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a2c      	ldr	r2, [pc, #176]	@ (8002440 <MX_GPIO_Init+0x124>)
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <MX_GPIO_Init+0x124>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	4b26      	ldr	r3, [pc, #152]	@ (8002440 <MX_GPIO_Init+0x124>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	4a25      	ldr	r2, [pc, #148]	@ (8002440 <MX_GPIO_Init+0x124>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b2:	4b23      	ldr	r3, [pc, #140]	@ (8002440 <MX_GPIO_Init+0x124>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80023be:	2200      	movs	r2, #0
 80023c0:	2110      	movs	r1, #16
 80023c2:	4820      	ldr	r0, [pc, #128]	@ (8002444 <MX_GPIO_Init+0x128>)
 80023c4:	f001 fb86 	bl	8003ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80023c8:	2200      	movs	r2, #0
 80023ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023ce:	481e      	ldr	r0, [pc, #120]	@ (8002448 <MX_GPIO_Init+0x12c>)
 80023d0:	f001 fb80 	bl	8003ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80023d4:	2200      	movs	r2, #0
 80023d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023da:	481c      	ldr	r0, [pc, #112]	@ (800244c <MX_GPIO_Init+0x130>)
 80023dc:	f001 fb7a 	bl	8003ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023e0:	2310      	movs	r3, #16
 80023e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e4:	2301      	movs	r3, #1
 80023e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	4813      	ldr	r0, [pc, #76]	@ (8002444 <MX_GPIO_Init+0x128>)
 80023f8:	f001 f9d0 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002402:	2301      	movs	r3, #1
 8002404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	480c      	ldr	r0, [pc, #48]	@ (8002448 <MX_GPIO_Init+0x12c>)
 8002416:	f001 f9c1 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800241a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800241e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002420:	2301      	movs	r3, #1
 8002422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	2300      	movs	r3, #0
 800242a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	4806      	ldr	r0, [pc, #24]	@ (800244c <MX_GPIO_Init+0x130>)
 8002434:	f001 f9b2 	bl	800379c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002438:	bf00      	nop
 800243a:	3728      	adds	r7, #40	@ 0x28
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40023800 	.word	0x40023800
 8002444:	40020000 	.word	0x40020000
 8002448:	40020400 	.word	0x40020400
 800244c:	40020c00 	.word	0x40020c00

08002450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002454:	b672      	cpsid	i
}
 8002456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <Error_Handler+0x8>

0800245c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <HAL_MspInit+0x4c>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	4a0f      	ldr	r2, [pc, #60]	@ (80024a8 <HAL_MspInit+0x4c>)
 800246c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002470:	6453      	str	r3, [r2, #68]	@ 0x44
 8002472:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <HAL_MspInit+0x4c>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <HAL_MspInit+0x4c>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	4a08      	ldr	r2, [pc, #32]	@ (80024a8 <HAL_MspInit+0x4c>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	@ 0x40
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_MspInit+0x4c>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800249a:	2007      	movs	r0, #7
 800249c:	f001 f93c 	bl	8003718 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40023800 	.word	0x40023800

080024ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	@ 0x38
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a45      	ldr	r2, [pc, #276]	@ (80025e0 <HAL_ADC_MspInit+0x134>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d128      	bne.n	8002520 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	4b44      	ldr	r3, [pc, #272]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	4a43      	ldr	r2, [pc, #268]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024de:	4b41      	ldr	r3, [pc, #260]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e6:	623b      	str	r3, [r7, #32]
 80024e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	4b3d      	ldr	r3, [pc, #244]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	4a3c      	ldr	r2, [pc, #240]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fa:	4b3a      	ldr	r3, [pc, #232]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	61fb      	str	r3, [r7, #28]
 8002504:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002506:	2302      	movs	r3, #2
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800250a:	2303      	movs	r3, #3
 800250c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002516:	4619      	mov	r1, r3
 8002518:	4833      	ldr	r0, [pc, #204]	@ (80025e8 <HAL_ADC_MspInit+0x13c>)
 800251a:	f001 f93f 	bl	800379c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800251e:	e05a      	b.n	80025d6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a31      	ldr	r2, [pc, #196]	@ (80025ec <HAL_ADC_MspInit+0x140>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d128      	bne.n	800257c <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	4b2d      	ldr	r3, [pc, #180]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	4a2c      	ldr	r2, [pc, #176]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 8002534:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002538:	6453      	str	r3, [r2, #68]	@ 0x44
 800253a:	4b2a      	ldr	r3, [pc, #168]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	4b26      	ldr	r3, [pc, #152]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4a25      	ldr	r2, [pc, #148]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6313      	str	r3, [r2, #48]	@ 0x30
 8002556:	4b23      	ldr	r3, [pc, #140]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002562:	2304      	movs	r3, #4
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002566:	2303      	movs	r3, #3
 8002568:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002572:	4619      	mov	r1, r3
 8002574:	481c      	ldr	r0, [pc, #112]	@ (80025e8 <HAL_ADC_MspInit+0x13c>)
 8002576:	f001 f911 	bl	800379c <HAL_GPIO_Init>
}
 800257a:	e02c      	b.n	80025d6 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1b      	ldr	r2, [pc, #108]	@ (80025f0 <HAL_ADC_MspInit+0x144>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d127      	bne.n	80025d6 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	4b16      	ldr	r3, [pc, #88]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	4a15      	ldr	r2, [pc, #84]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 8002590:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002594:	6453      	str	r3, [r2, #68]	@ 0x44
 8002596:	4b13      	ldr	r3, [pc, #76]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	4a0e      	ldr	r2, [pc, #56]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b2:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <HAL_ADC_MspInit+0x138>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025be:	2308      	movs	r3, #8
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025c2:	2303      	movs	r3, #3
 80025c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ce:	4619      	mov	r1, r3
 80025d0:	4805      	ldr	r0, [pc, #20]	@ (80025e8 <HAL_ADC_MspInit+0x13c>)
 80025d2:	f001 f8e3 	bl	800379c <HAL_GPIO_Init>
}
 80025d6:	bf00      	nop
 80025d8:	3738      	adds	r7, #56	@ 0x38
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40012000 	.word	0x40012000
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40012100 	.word	0x40012100
 80025f0:	40012200 	.word	0x40012200

080025f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	@ 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a19      	ldr	r2, [pc, #100]	@ (8002678 <HAL_I2C_MspInit+0x84>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d12b      	bne.n	800266e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b18      	ldr	r3, [pc, #96]	@ (800267c <HAL_I2C_MspInit+0x88>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a17      	ldr	r2, [pc, #92]	@ (800267c <HAL_I2C_MspInit+0x88>)
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <HAL_I2C_MspInit+0x88>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002632:	23c0      	movs	r3, #192	@ 0xc0
 8002634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002636:	2312      	movs	r3, #18
 8002638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263e:	2303      	movs	r3, #3
 8002640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002642:	2304      	movs	r3, #4
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	4619      	mov	r1, r3
 800264c:	480c      	ldr	r0, [pc, #48]	@ (8002680 <HAL_I2C_MspInit+0x8c>)
 800264e:	f001 f8a5 	bl	800379c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b09      	ldr	r3, [pc, #36]	@ (800267c <HAL_I2C_MspInit+0x88>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	4a08      	ldr	r2, [pc, #32]	@ (800267c <HAL_I2C_MspInit+0x88>)
 800265c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002660:	6413      	str	r3, [r2, #64]	@ 0x40
 8002662:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_I2C_MspInit+0x88>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800266e:	bf00      	nop
 8002670:	3728      	adds	r7, #40	@ 0x28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40005400 	.word	0x40005400
 800267c:	40023800 	.word	0x40023800
 8002680:	40020400 	.word	0x40020400

08002684 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	@ 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a19      	ldr	r2, [pc, #100]	@ (8002708 <HAL_SPI_MspInit+0x84>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d12b      	bne.n	80026fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b18      	ldr	r3, [pc, #96]	@ (800270c <HAL_SPI_MspInit+0x88>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	4a17      	ldr	r2, [pc, #92]	@ (800270c <HAL_SPI_MspInit+0x88>)
 80026b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026b6:	4b15      	ldr	r3, [pc, #84]	@ (800270c <HAL_SPI_MspInit+0x88>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_SPI_MspInit+0x88>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	4a10      	ldr	r2, [pc, #64]	@ (800270c <HAL_SPI_MspInit+0x88>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d2:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <HAL_SPI_MspInit+0x88>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026de:	23e0      	movs	r3, #224	@ 0xe0
 80026e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ea:	2303      	movs	r3, #3
 80026ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026ee:	2305      	movs	r3, #5
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4619      	mov	r1, r3
 80026f8:	4805      	ldr	r0, [pc, #20]	@ (8002710 <HAL_SPI_MspInit+0x8c>)
 80026fa:	f001 f84f 	bl	800379c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80026fe:	bf00      	nop
 8002700:	3728      	adds	r7, #40	@ 0x28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40013000 	.word	0x40013000
 800270c:	40023800 	.word	0x40023800
 8002710:	40020000 	.word	0x40020000

08002714 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a29      	ldr	r2, [pc, #164]	@ (80027c8 <HAL_TIM_PWM_MspInit+0xb4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10e      	bne.n	8002744 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	4b28      	ldr	r3, [pc, #160]	@ (80027cc <HAL_TIM_PWM_MspInit+0xb8>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	4a27      	ldr	r2, [pc, #156]	@ (80027cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6453      	str	r3, [r2, #68]	@ 0x44
 8002736:	4b25      	ldr	r3, [pc, #148]	@ (80027cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002742:	e03a      	b.n	80027ba <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800274c:	d10e      	bne.n	800276c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	4b1e      	ldr	r3, [pc, #120]	@ (80027cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002756:	4a1d      	ldr	r2, [pc, #116]	@ (80027cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6413      	str	r3, [r2, #64]	@ 0x40
 800275e:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]
}
 800276a:	e026      	b.n	80027ba <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a17      	ldr	r2, [pc, #92]	@ (80027d0 <HAL_TIM_PWM_MspInit+0xbc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10e      	bne.n	8002794 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_TIM_PWM_MspInit+0xb8>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	4a13      	ldr	r2, [pc, #76]	@ (80027cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	6413      	str	r3, [r2, #64]	@ 0x40
 8002786:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
}
 8002792:	e012      	b.n	80027ba <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0e      	ldr	r2, [pc, #56]	@ (80027d4 <HAL_TIM_PWM_MspInit+0xc0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10d      	bne.n	80027ba <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	4b0a      	ldr	r3, [pc, #40]	@ (80027cc <HAL_TIM_PWM_MspInit+0xb8>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a6:	4a09      	ldr	r2, [pc, #36]	@ (80027cc <HAL_TIM_PWM_MspInit+0xb8>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ae:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <HAL_TIM_PWM_MspInit+0xb8>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
}
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40010000 	.word	0x40010000
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40010400 	.word	0x40010400

080027d8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	@ 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <HAL_TIM_IC_MspInit+0x94>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d134      	bne.n	8002864 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002870 <HAL_TIM_IC_MspInit+0x98>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	4a1b      	ldr	r2, [pc, #108]	@ (8002870 <HAL_TIM_IC_MspInit+0x98>)
 8002804:	f043 0304 	orr.w	r3, r3, #4
 8002808:	6413      	str	r3, [r2, #64]	@ 0x40
 800280a:	4b19      	ldr	r3, [pc, #100]	@ (8002870 <HAL_TIM_IC_MspInit+0x98>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <HAL_TIM_IC_MspInit+0x98>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	4a14      	ldr	r2, [pc, #80]	@ (8002870 <HAL_TIM_IC_MspInit+0x98>)
 8002820:	f043 0308 	orr.w	r3, r3, #8
 8002824:	6313      	str	r3, [r2, #48]	@ 0x30
 8002826:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <HAL_TIM_IC_MspInit+0x98>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002844:	2302      	movs	r3, #2
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4809      	ldr	r0, [pc, #36]	@ (8002874 <HAL_TIM_IC_MspInit+0x9c>)
 8002850:	f000 ffa4 	bl	800379c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002854:	2200      	movs	r2, #0
 8002856:	2100      	movs	r1, #0
 8002858:	201e      	movs	r0, #30
 800285a:	f000 ff68 	bl	800372e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800285e:	201e      	movs	r0, #30
 8002860:	f000 ff81 	bl	8003766 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002864:	bf00      	nop
 8002866:	3728      	adds	r7, #40	@ 0x28
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40000800 	.word	0x40000800
 8002870:	40023800 	.word	0x40023800
 8002874:	40020c00 	.word	0x40020c00

08002878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	@ 0x30
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a48      	ldr	r2, [pc, #288]	@ (80029b8 <HAL_TIM_MspPostInit+0x140>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d11f      	bne.n	80028da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	4b47      	ldr	r3, [pc, #284]	@ (80029bc <HAL_TIM_MspPostInit+0x144>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	4a46      	ldr	r2, [pc, #280]	@ (80029bc <HAL_TIM_MspPostInit+0x144>)
 80028a4:	f043 0310 	orr.w	r3, r3, #16
 80028a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028aa:	4b44      	ldr	r3, [pc, #272]	@ (80029bc <HAL_TIM_MspPostInit+0x144>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028cc:	f107 031c 	add.w	r3, r7, #28
 80028d0:	4619      	mov	r1, r3
 80028d2:	483b      	ldr	r0, [pc, #236]	@ (80029c0 <HAL_TIM_MspPostInit+0x148>)
 80028d4:	f000 ff62 	bl	800379c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80028d8:	e06a      	b.n	80029b0 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e2:	d11e      	bne.n	8002922 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <HAL_TIM_MspPostInit+0x144>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ec:	4a33      	ldr	r2, [pc, #204]	@ (80029bc <HAL_TIM_MspPostInit+0x144>)
 80028ee:	f043 0302 	orr.w	r3, r3, #2
 80028f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f4:	4b31      	ldr	r3, [pc, #196]	@ (80029bc <HAL_TIM_MspPostInit+0x144>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002900:	2308      	movs	r3, #8
 8002902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002910:	2301      	movs	r3, #1
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	4619      	mov	r1, r3
 800291a:	482a      	ldr	r0, [pc, #168]	@ (80029c4 <HAL_TIM_MspPostInit+0x14c>)
 800291c:	f000 ff3e 	bl	800379c <HAL_GPIO_Init>
}
 8002920:	e046      	b.n	80029b0 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a28      	ldr	r2, [pc, #160]	@ (80029c8 <HAL_TIM_MspPostInit+0x150>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d11e      	bne.n	800296a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292c:	2300      	movs	r3, #0
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	4b22      	ldr	r3, [pc, #136]	@ (80029bc <HAL_TIM_MspPostInit+0x144>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002934:	4a21      	ldr	r2, [pc, #132]	@ (80029bc <HAL_TIM_MspPostInit+0x144>)
 8002936:	f043 0302 	orr.w	r3, r3, #2
 800293a:	6313      	str	r3, [r2, #48]	@ 0x30
 800293c:	4b1f      	ldr	r3, [pc, #124]	@ (80029bc <HAL_TIM_MspPostInit+0x144>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002948:	2301      	movs	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294c:	2302      	movs	r3, #2
 800294e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	2300      	movs	r3, #0
 8002956:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002958:	2302      	movs	r3, #2
 800295a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295c:	f107 031c 	add.w	r3, r7, #28
 8002960:	4619      	mov	r1, r3
 8002962:	4818      	ldr	r0, [pc, #96]	@ (80029c4 <HAL_TIM_MspPostInit+0x14c>)
 8002964:	f000 ff1a 	bl	800379c <HAL_GPIO_Init>
}
 8002968:	e022      	b.n	80029b0 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM8)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a17      	ldr	r2, [pc, #92]	@ (80029cc <HAL_TIM_MspPostInit+0x154>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d11d      	bne.n	80029b0 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	4b10      	ldr	r3, [pc, #64]	@ (80029bc <HAL_TIM_MspPostInit+0x144>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297c:	4a0f      	ldr	r2, [pc, #60]	@ (80029bc <HAL_TIM_MspPostInit+0x144>)
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	6313      	str	r3, [r2, #48]	@ 0x30
 8002984:	4b0d      	ldr	r3, [pc, #52]	@ (80029bc <HAL_TIM_MspPostInit+0x144>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002990:	2340      	movs	r3, #64	@ 0x40
 8002992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2300      	movs	r3, #0
 800299e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80029a0:	2303      	movs	r3, #3
 80029a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	4619      	mov	r1, r3
 80029aa:	4809      	ldr	r0, [pc, #36]	@ (80029d0 <HAL_TIM_MspPostInit+0x158>)
 80029ac:	f000 fef6 	bl	800379c <HAL_GPIO_Init>
}
 80029b0:	bf00      	nop
 80029b2:	3730      	adds	r7, #48	@ 0x30
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40020400 	.word	0x40020400
 80029c8:	40000400 	.word	0x40000400
 80029cc:	40010400 	.word	0x40010400
 80029d0:	40020800 	.word	0x40020800

080029d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <NMI_Handler+0x4>

080029dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <HardFault_Handler+0x4>

080029e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029e8:	bf00      	nop
 80029ea:	e7fd      	b.n	80029e8 <MemManage_Handler+0x4>

080029ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <BusFault_Handler+0x4>

080029f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f8:	bf00      	nop
 80029fa:	e7fd      	b.n	80029f8 <UsageFault_Handler+0x4>

080029fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a2a:	f000 f961 	bl	8002cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a38:	4802      	ldr	r0, [pc, #8]	@ (8002a44 <TIM4_IRQHandler+0x10>)
 8002a3a:	f003 f9e9 	bl	8005e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200002f8 	.word	0x200002f8

08002a48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return 1;
 8002a4c:	2301      	movs	r3, #1
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <_kill>:

int _kill(int pid, int sig)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a62:	f004 faab 	bl	8006fbc <__errno>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2216      	movs	r2, #22
 8002a6a:	601a      	str	r2, [r3, #0]
  return -1;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <_exit>:

void _exit (int status)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a80:	f04f 31ff 	mov.w	r1, #4294967295
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ffe7 	bl	8002a58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a8a:	bf00      	nop
 8002a8c:	e7fd      	b.n	8002a8a <_exit+0x12>

08002a8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	e00a      	b.n	8002ab6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aa0:	f3af 8000 	nop.w
 8002aa4:	4601      	mov	r1, r0
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	60ba      	str	r2, [r7, #8]
 8002aac:	b2ca      	uxtb	r2, r1
 8002aae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	dbf0      	blt.n	8002aa0 <_read+0x12>
  }

  return len;
 8002abe:	687b      	ldr	r3, [r7, #4]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	e009      	b.n	8002aee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	60ba      	str	r2, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	3301      	adds	r3, #1
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	dbf1      	blt.n	8002ada <_write+0x12>
  }
  return len;
 8002af6:	687b      	ldr	r3, [r7, #4]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <_close>:

int _close(int file)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b28:	605a      	str	r2, [r3, #4]
  return 0;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <_isatty>:

int _isatty(int file)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b40:	2301      	movs	r3, #1
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b70:	4a14      	ldr	r2, [pc, #80]	@ (8002bc4 <_sbrk+0x5c>)
 8002b72:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <_sbrk+0x60>)
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b7c:	4b13      	ldr	r3, [pc, #76]	@ (8002bcc <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b84:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <_sbrk+0x64>)
 8002b86:	4a12      	ldr	r2, [pc, #72]	@ (8002bd0 <_sbrk+0x68>)
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b8a:	4b10      	ldr	r3, [pc, #64]	@ (8002bcc <_sbrk+0x64>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d207      	bcs.n	8002ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b98:	f004 fa10 	bl	8006fbc <__errno>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba6:	e009      	b.n	8002bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba8:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <_sbrk+0x64>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bae:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <_sbrk+0x64>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	4a05      	ldr	r2, [pc, #20]	@ (8002bcc <_sbrk+0x64>)
 8002bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20020000 	.word	0x20020000
 8002bc8:	00000400 	.word	0x00000400
 8002bcc:	200004a0 	.word	0x200004a0
 8002bd0:	200005f8 	.word	0x200005f8

08002bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd8:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <SystemInit+0x20>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bde:	4a05      	ldr	r2, [pc, #20]	@ (8002bf4 <SystemInit+0x20>)
 8002be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002bfc:	f7ff ffea 	bl	8002bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c00:	480c      	ldr	r0, [pc, #48]	@ (8002c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c02:	490d      	ldr	r1, [pc, #52]	@ (8002c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c04:	4a0d      	ldr	r2, [pc, #52]	@ (8002c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c08:	e002      	b.n	8002c10 <LoopCopyDataInit>

08002c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0e:	3304      	adds	r3, #4

08002c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c14:	d3f9      	bcc.n	8002c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c16:	4a0a      	ldr	r2, [pc, #40]	@ (8002c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c18:	4c0a      	ldr	r4, [pc, #40]	@ (8002c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c1c:	e001      	b.n	8002c22 <LoopFillZerobss>

08002c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c20:	3204      	adds	r2, #4

08002c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c24:	d3fb      	bcc.n	8002c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c26:	f004 f9cf 	bl	8006fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c2a:	f7fe fee1 	bl	80019f0 <main>
  bx  lr    
 8002c2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c38:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002c3c:	0800a880 	.word	0x0800a880
  ldr r2, =_sbss
 8002c40:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002c44:	200005f4 	.word	0x200005f4

08002c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <ADC_IRQHandler>
	...

08002c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c50:	4b0e      	ldr	r3, [pc, #56]	@ (8002c8c <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0d      	ldr	r2, [pc, #52]	@ (8002c8c <HAL_Init+0x40>)
 8002c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	@ (8002c8c <HAL_Init+0x40>)
 8002c62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c68:	4b08      	ldr	r3, [pc, #32]	@ (8002c8c <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a07      	ldr	r2, [pc, #28]	@ (8002c8c <HAL_Init+0x40>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c74:	2003      	movs	r0, #3
 8002c76:	f000 fd4f 	bl	8003718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f000 f808 	bl	8002c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c80:	f7ff fbec 	bl	800245c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023c00 	.word	0x40023c00

08002c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c98:	4b12      	ldr	r3, [pc, #72]	@ (8002ce4 <HAL_InitTick+0x54>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ce8 <HAL_InitTick+0x58>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fd67 	bl	8003782 <HAL_SYSTICK_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00e      	b.n	8002cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b0f      	cmp	r3, #15
 8002cc2:	d80a      	bhi.n	8002cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	f000 fd2f 	bl	800372e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cd0:	4a06      	ldr	r2, [pc, #24]	@ (8002cec <HAL_InitTick+0x5c>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000018 	.word	0x20000018
 8002ce8:	20000020 	.word	0x20000020
 8002cec:	2000001c 	.word	0x2000001c

08002cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cf4:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <HAL_IncTick+0x20>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <HAL_IncTick+0x24>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <HAL_IncTick+0x24>)
 8002d02:	6013      	str	r3, [r2, #0]
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000020 	.word	0x20000020
 8002d14:	200004a4 	.word	0x200004a4

08002d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	@ (8002d2c <HAL_GetTick+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	200004a4 	.word	0x200004a4

08002d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d38:	f7ff ffee 	bl	8002d18 <HAL_GetTick>
 8002d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d005      	beq.n	8002d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d74 <HAL_Delay+0x44>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d56:	bf00      	nop
 8002d58:	f7ff ffde 	bl	8002d18 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d8f7      	bhi.n	8002d58 <HAL_Delay+0x28>
  {
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000020 	.word	0x20000020

08002d78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e033      	b.n	8002df6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fb88 	bl	80024ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d118      	bne.n	8002de8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002dbe:	f023 0302 	bic.w	r3, r3, #2
 8002dc2:	f043 0202 	orr.w	r2, r3, #2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fad8 	bl	8003380 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002de6:	e001      	b.n	8002dec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_Start+0x1a>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e0b2      	b.n	8002f80 <HAL_ADC_Start+0x180>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d018      	beq.n	8002e62 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e40:	4b52      	ldr	r3, [pc, #328]	@ (8002f8c <HAL_ADC_Start+0x18c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a52      	ldr	r2, [pc, #328]	@ (8002f90 <HAL_ADC_Start+0x190>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0c9a      	lsrs	r2, r3, #18
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e54:	e002      	b.n	8002e5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f9      	bne.n	8002e56 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d17a      	bne.n	8002f66 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e96:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e9a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eae:	d106      	bne.n	8002ebe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb4:	f023 0206 	bic.w	r2, r3, #6
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ebc:	e002      	b.n	8002ec4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ecc:	4b31      	ldr	r3, [pc, #196]	@ (8002f94 <HAL_ADC_Start+0x194>)
 8002ece:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ed8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d12a      	bne.n	8002f3c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a2b      	ldr	r2, [pc, #172]	@ (8002f98 <HAL_ADC_Start+0x198>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d015      	beq.n	8002f1c <HAL_ADC_Start+0x11c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a29      	ldr	r2, [pc, #164]	@ (8002f9c <HAL_ADC_Start+0x19c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d105      	bne.n	8002f06 <HAL_ADC_Start+0x106>
 8002efa:	4b26      	ldr	r3, [pc, #152]	@ (8002f94 <HAL_ADC_Start+0x194>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a25      	ldr	r2, [pc, #148]	@ (8002fa0 <HAL_ADC_Start+0x1a0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d136      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
 8002f10:	4b20      	ldr	r3, [pc, #128]	@ (8002f94 <HAL_ADC_Start+0x194>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d130      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d129      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f38:	609a      	str	r2, [r3, #8]
 8002f3a:	e020      	b.n	8002f7e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a15      	ldr	r2, [pc, #84]	@ (8002f98 <HAL_ADC_Start+0x198>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d11b      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d114      	bne.n	8002f7e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	e00b      	b.n	8002f7e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	20000018 	.word	0x20000018
 8002f90:	431bde83 	.word	0x431bde83
 8002f94:	40012300 	.word	0x40012300
 8002f98:	40012000 	.word	0x40012000
 8002f9c:	40012100 	.word	0x40012100
 8002fa0:	40012200 	.word	0x40012200

08002fa4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_Stop+0x16>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e021      	b.n	8002ffe <HAL_ADC_Stop+0x5a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003026:	d113      	bne.n	8003050 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003036:	d10b      	bne.n	8003050 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e063      	b.n	8003118 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003050:	f7ff fe62 	bl	8002d18 <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003056:	e021      	b.n	800309c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305e:	d01d      	beq.n	800309c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d007      	beq.n	8003076 <HAL_ADC_PollForConversion+0x6c>
 8003066:	f7ff fe57 	bl	8002d18 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d212      	bcs.n	800309c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d00b      	beq.n	800309c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	f043 0204 	orr.w	r2, r3, #4
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e03d      	b.n	8003118 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d1d6      	bne.n	8003058 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f06f 0212 	mvn.w	r2, #18
 80030b2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d123      	bne.n	8003116 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11f      	bne.n	8003116 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030dc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d111      	bne.n	8003116 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d105      	bne.n	8003116 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x1c>
 8003154:	2302      	movs	r3, #2
 8003156:	e105      	b.n	8003364 <HAL_ADC_ConfigChannel+0x228>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b09      	cmp	r3, #9
 8003166:	d925      	bls.n	80031b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68d9      	ldr	r1, [r3, #12]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	4613      	mov	r3, r2
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4413      	add	r3, r2
 800317c:	3b1e      	subs	r3, #30
 800317e:	2207      	movs	r2, #7
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43da      	mvns	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	400a      	ands	r2, r1
 800318c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68d9      	ldr	r1, [r3, #12]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	4618      	mov	r0, r3
 80031a0:	4603      	mov	r3, r0
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	4403      	add	r3, r0
 80031a6:	3b1e      	subs	r3, #30
 80031a8:	409a      	lsls	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	e022      	b.n	80031fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6919      	ldr	r1, [r3, #16]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	2207      	movs	r2, #7
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43da      	mvns	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	400a      	ands	r2, r1
 80031d6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6919      	ldr	r1, [r3, #16]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	4618      	mov	r0, r3
 80031ea:	4603      	mov	r3, r0
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4403      	add	r3, r0
 80031f0:	409a      	lsls	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d824      	bhi.n	800324c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	3b05      	subs	r3, #5
 8003214:	221f      	movs	r2, #31
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43da      	mvns	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	400a      	ands	r2, r1
 8003222:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	4618      	mov	r0, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	3b05      	subs	r3, #5
 800323e:	fa00 f203 	lsl.w	r2, r0, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	635a      	str	r2, [r3, #52]	@ 0x34
 800324a:	e04c      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b0c      	cmp	r3, #12
 8003252:	d824      	bhi.n	800329e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	3b23      	subs	r3, #35	@ 0x23
 8003266:	221f      	movs	r2, #31
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43da      	mvns	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	400a      	ands	r2, r1
 8003274:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	4618      	mov	r0, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	3b23      	subs	r3, #35	@ 0x23
 8003290:	fa00 f203 	lsl.w	r2, r0, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
 800329c:	e023      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	3b41      	subs	r3, #65	@ 0x41
 80032b0:	221f      	movs	r2, #31
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43da      	mvns	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	400a      	ands	r2, r1
 80032be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	3b41      	subs	r3, #65	@ 0x41
 80032da:	fa00 f203 	lsl.w	r2, r0, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032e6:	4b22      	ldr	r3, [pc, #136]	@ (8003370 <HAL_ADC_ConfigChannel+0x234>)
 80032e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a21      	ldr	r2, [pc, #132]	@ (8003374 <HAL_ADC_ConfigChannel+0x238>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d109      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1cc>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b12      	cmp	r3, #18
 80032fa:	d105      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a19      	ldr	r2, [pc, #100]	@ (8003374 <HAL_ADC_ConfigChannel+0x238>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d123      	bne.n	800335a <HAL_ADC_ConfigChannel+0x21e>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b10      	cmp	r3, #16
 8003318:	d003      	beq.n	8003322 <HAL_ADC_ConfigChannel+0x1e6>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b11      	cmp	r3, #17
 8003320:	d11b      	bne.n	800335a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b10      	cmp	r3, #16
 8003334:	d111      	bne.n	800335a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003336:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <HAL_ADC_ConfigChannel+0x23c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a10      	ldr	r2, [pc, #64]	@ (800337c <HAL_ADC_ConfigChannel+0x240>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	0c9a      	lsrs	r2, r3, #18
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800334c:	e002      	b.n	8003354 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	3b01      	subs	r3, #1
 8003352:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f9      	bne.n	800334e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40012300 	.word	0x40012300
 8003374:	40012000 	.word	0x40012000
 8003378:	20000018 	.word	0x20000018
 800337c:	431bde83 	.word	0x431bde83

08003380 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003388:	4b79      	ldr	r3, [pc, #484]	@ (8003570 <ADC_Init+0x1f0>)
 800338a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	021a      	lsls	r2, r3, #8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80033d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6899      	ldr	r1, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003412:	4a58      	ldr	r2, [pc, #352]	@ (8003574 <ADC_Init+0x1f4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d022      	beq.n	800345e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003426:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6899      	ldr	r1, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003448:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6899      	ldr	r1, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	e00f      	b.n	800347e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800346c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800347c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0202 	bic.w	r2, r2, #2
 800348c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6899      	ldr	r1, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7e1b      	ldrb	r3, [r3, #24]
 8003498:	005a      	lsls	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01b      	beq.n	80034e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80034ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	3b01      	subs	r3, #1
 80034d8:	035a      	lsls	r2, r3, #13
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	e007      	b.n	80034f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003502:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	3b01      	subs	r3, #1
 8003510:	051a      	lsls	r2, r3, #20
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003528:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6899      	ldr	r1, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003536:	025a      	lsls	r2, r3, #9
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800354e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6899      	ldr	r1, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	029a      	lsls	r2, r3, #10
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	40012300 	.word	0x40012300
 8003574:	0f000001 	.word	0x0f000001

08003578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003588:	4b0c      	ldr	r3, [pc, #48]	@ (80035bc <__NVIC_SetPriorityGrouping+0x44>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003594:	4013      	ands	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035aa:	4a04      	ldr	r2, [pc, #16]	@ (80035bc <__NVIC_SetPriorityGrouping+0x44>)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	60d3      	str	r3, [r2, #12]
}
 80035b0:	bf00      	nop
 80035b2:	3714      	adds	r7, #20
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c4:	4b04      	ldr	r3, [pc, #16]	@ (80035d8 <__NVIC_GetPriorityGrouping+0x18>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	0a1b      	lsrs	r3, r3, #8
 80035ca:	f003 0307 	and.w	r3, r3, #7
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	db0b      	blt.n	8003606 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	f003 021f 	and.w	r2, r3, #31
 80035f4:	4907      	ldr	r1, [pc, #28]	@ (8003614 <__NVIC_EnableIRQ+0x38>)
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2001      	movs	r0, #1
 80035fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	e000e100 	.word	0xe000e100

08003618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	6039      	str	r1, [r7, #0]
 8003622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003628:	2b00      	cmp	r3, #0
 800362a:	db0a      	blt.n	8003642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	490c      	ldr	r1, [pc, #48]	@ (8003664 <__NVIC_SetPriority+0x4c>)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	0112      	lsls	r2, r2, #4
 8003638:	b2d2      	uxtb	r2, r2
 800363a:	440b      	add	r3, r1
 800363c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003640:	e00a      	b.n	8003658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	4908      	ldr	r1, [pc, #32]	@ (8003668 <__NVIC_SetPriority+0x50>)
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	3b04      	subs	r3, #4
 8003650:	0112      	lsls	r2, r2, #4
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	440b      	add	r3, r1
 8003656:	761a      	strb	r2, [r3, #24]
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000e100 	.word	0xe000e100
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800366c:	b480      	push	{r7}
 800366e:	b089      	sub	sp, #36	@ 0x24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f1c3 0307 	rsb	r3, r3, #7
 8003686:	2b04      	cmp	r3, #4
 8003688:	bf28      	it	cs
 800368a:	2304      	movcs	r3, #4
 800368c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	3304      	adds	r3, #4
 8003692:	2b06      	cmp	r3, #6
 8003694:	d902      	bls.n	800369c <NVIC_EncodePriority+0x30>
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3b03      	subs	r3, #3
 800369a:	e000      	b.n	800369e <NVIC_EncodePriority+0x32>
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a0:	f04f 32ff 	mov.w	r2, #4294967295
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43da      	mvns	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	401a      	ands	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036b4:	f04f 31ff 	mov.w	r1, #4294967295
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	fa01 f303 	lsl.w	r3, r1, r3
 80036be:	43d9      	mvns	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c4:	4313      	orrs	r3, r2
         );
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3724      	adds	r7, #36	@ 0x24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3b01      	subs	r3, #1
 80036e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036e4:	d301      	bcc.n	80036ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036e6:	2301      	movs	r3, #1
 80036e8:	e00f      	b.n	800370a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003714 <SysTick_Config+0x40>)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036f2:	210f      	movs	r1, #15
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	f7ff ff8e 	bl	8003618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <SysTick_Config+0x40>)
 80036fe:	2200      	movs	r2, #0
 8003700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003702:	4b04      	ldr	r3, [pc, #16]	@ (8003714 <SysTick_Config+0x40>)
 8003704:	2207      	movs	r2, #7
 8003706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	e000e010 	.word	0xe000e010

08003718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ff29 	bl	8003578 <__NVIC_SetPriorityGrouping>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800372e:	b580      	push	{r7, lr}
 8003730:	b086      	sub	sp, #24
 8003732:	af00      	add	r7, sp, #0
 8003734:	4603      	mov	r3, r0
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003740:	f7ff ff3e 	bl	80035c0 <__NVIC_GetPriorityGrouping>
 8003744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68b9      	ldr	r1, [r7, #8]
 800374a:	6978      	ldr	r0, [r7, #20]
 800374c:	f7ff ff8e 	bl	800366c <NVIC_EncodePriority>
 8003750:	4602      	mov	r2, r0
 8003752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff5d 	bl	8003618 <__NVIC_SetPriority>
}
 800375e:	bf00      	nop
 8003760:	3718      	adds	r7, #24
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	4603      	mov	r3, r0
 800376e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff ff31 	bl	80035dc <__NVIC_EnableIRQ>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ffa2 	bl	80036d4 <SysTick_Config>
 8003790:	4603      	mov	r3, r0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800379c:	b480      	push	{r7}
 800379e:	b089      	sub	sp, #36	@ 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	e16b      	b.n	8003a90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037b8:	2201      	movs	r2, #1
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	f040 815a 	bne.w	8003a8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d005      	beq.n	80037ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d130      	bne.n	8003850 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	2203      	movs	r2, #3
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4013      	ands	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003824:	2201      	movs	r2, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	091b      	lsrs	r3, r3, #4
 800383a:	f003 0201 	and.w	r2, r3, #1
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	2b03      	cmp	r3, #3
 800385a:	d017      	beq.n	800388c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	2203      	movs	r2, #3
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d123      	bne.n	80038e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	08da      	lsrs	r2, r3, #3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3208      	adds	r2, #8
 80038a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	220f      	movs	r2, #15
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	08da      	lsrs	r2, r3, #3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3208      	adds	r2, #8
 80038da:	69b9      	ldr	r1, [r7, #24]
 80038dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	2203      	movs	r2, #3
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0203 	and.w	r2, r3, #3
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80b4 	beq.w	8003a8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	4b60      	ldr	r3, [pc, #384]	@ (8003aa8 <HAL_GPIO_Init+0x30c>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392a:	4a5f      	ldr	r2, [pc, #380]	@ (8003aa8 <HAL_GPIO_Init+0x30c>)
 800392c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003930:	6453      	str	r3, [r2, #68]	@ 0x44
 8003932:	4b5d      	ldr	r3, [pc, #372]	@ (8003aa8 <HAL_GPIO_Init+0x30c>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800393e:	4a5b      	ldr	r2, [pc, #364]	@ (8003aac <HAL_GPIO_Init+0x310>)
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	3302      	adds	r3, #2
 8003946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800394a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	220f      	movs	r2, #15
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a52      	ldr	r2, [pc, #328]	@ (8003ab0 <HAL_GPIO_Init+0x314>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d02b      	beq.n	80039c2 <HAL_GPIO_Init+0x226>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a51      	ldr	r2, [pc, #324]	@ (8003ab4 <HAL_GPIO_Init+0x318>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d025      	beq.n	80039be <HAL_GPIO_Init+0x222>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a50      	ldr	r2, [pc, #320]	@ (8003ab8 <HAL_GPIO_Init+0x31c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d01f      	beq.n	80039ba <HAL_GPIO_Init+0x21e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a4f      	ldr	r2, [pc, #316]	@ (8003abc <HAL_GPIO_Init+0x320>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d019      	beq.n	80039b6 <HAL_GPIO_Init+0x21a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a4e      	ldr	r2, [pc, #312]	@ (8003ac0 <HAL_GPIO_Init+0x324>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d013      	beq.n	80039b2 <HAL_GPIO_Init+0x216>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a4d      	ldr	r2, [pc, #308]	@ (8003ac4 <HAL_GPIO_Init+0x328>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d00d      	beq.n	80039ae <HAL_GPIO_Init+0x212>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a4c      	ldr	r2, [pc, #304]	@ (8003ac8 <HAL_GPIO_Init+0x32c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d007      	beq.n	80039aa <HAL_GPIO_Init+0x20e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a4b      	ldr	r2, [pc, #300]	@ (8003acc <HAL_GPIO_Init+0x330>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_GPIO_Init+0x20a>
 80039a2:	2307      	movs	r3, #7
 80039a4:	e00e      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039a6:	2308      	movs	r3, #8
 80039a8:	e00c      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039aa:	2306      	movs	r3, #6
 80039ac:	e00a      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039ae:	2305      	movs	r3, #5
 80039b0:	e008      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039b2:	2304      	movs	r3, #4
 80039b4:	e006      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039b6:	2303      	movs	r3, #3
 80039b8:	e004      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e002      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <HAL_GPIO_Init+0x228>
 80039c2:	2300      	movs	r3, #0
 80039c4:	69fa      	ldr	r2, [r7, #28]
 80039c6:	f002 0203 	and.w	r2, r2, #3
 80039ca:	0092      	lsls	r2, r2, #2
 80039cc:	4093      	lsls	r3, r2
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d4:	4935      	ldr	r1, [pc, #212]	@ (8003aac <HAL_GPIO_Init+0x310>)
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	089b      	lsrs	r3, r3, #2
 80039da:	3302      	adds	r3, #2
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039e2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad0 <HAL_GPIO_Init+0x334>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a06:	4a32      	ldr	r2, [pc, #200]	@ (8003ad0 <HAL_GPIO_Init+0x334>)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a0c:	4b30      	ldr	r3, [pc, #192]	@ (8003ad0 <HAL_GPIO_Init+0x334>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a30:	4a27      	ldr	r2, [pc, #156]	@ (8003ad0 <HAL_GPIO_Init+0x334>)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a36:	4b26      	ldr	r3, [pc, #152]	@ (8003ad0 <HAL_GPIO_Init+0x334>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4013      	ands	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad0 <HAL_GPIO_Init+0x334>)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a60:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad0 <HAL_GPIO_Init+0x334>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a84:	4a12      	ldr	r2, [pc, #72]	@ (8003ad0 <HAL_GPIO_Init+0x334>)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	61fb      	str	r3, [r7, #28]
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b0f      	cmp	r3, #15
 8003a94:	f67f ae90 	bls.w	80037b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	3724      	adds	r7, #36	@ 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40013800 	.word	0x40013800
 8003ab0:	40020000 	.word	0x40020000
 8003ab4:	40020400 	.word	0x40020400
 8003ab8:	40020800 	.word	0x40020800
 8003abc:	40020c00 	.word	0x40020c00
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40021400 	.word	0x40021400
 8003ac8:	40021800 	.word	0x40021800
 8003acc:	40021c00 	.word	0x40021c00
 8003ad0:	40013c00 	.word	0x40013c00

08003ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae4:	787b      	ldrb	r3, [r7, #1]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af0:	e003      	b.n	8003afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003af2:	887b      	ldrh	r3, [r7, #2]
 8003af4:	041a      	lsls	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	619a      	str	r2, [r3, #24]
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e12b      	b.n	8003d72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fe fd60 	bl	80025f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	@ 0x24
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b6c:	f001 f8da 	bl	8004d24 <HAL_RCC_GetPCLK1Freq>
 8003b70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4a81      	ldr	r2, [pc, #516]	@ (8003d7c <HAL_I2C_Init+0x274>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d807      	bhi.n	8003b8c <HAL_I2C_Init+0x84>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a80      	ldr	r2, [pc, #512]	@ (8003d80 <HAL_I2C_Init+0x278>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	bf94      	ite	ls
 8003b84:	2301      	movls	r3, #1
 8003b86:	2300      	movhi	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	e006      	b.n	8003b9a <HAL_I2C_Init+0x92>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a7d      	ldr	r2, [pc, #500]	@ (8003d84 <HAL_I2C_Init+0x27c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	bf94      	ite	ls
 8003b94:	2301      	movls	r3, #1
 8003b96:	2300      	movhi	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e0e7      	b.n	8003d72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4a78      	ldr	r2, [pc, #480]	@ (8003d88 <HAL_I2C_Init+0x280>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	0c9b      	lsrs	r3, r3, #18
 8003bac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4a6a      	ldr	r2, [pc, #424]	@ (8003d7c <HAL_I2C_Init+0x274>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d802      	bhi.n	8003bdc <HAL_I2C_Init+0xd4>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	e009      	b.n	8003bf0 <HAL_I2C_Init+0xe8>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	4a69      	ldr	r2, [pc, #420]	@ (8003d8c <HAL_I2C_Init+0x284>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	099b      	lsrs	r3, r3, #6
 8003bee:	3301      	adds	r3, #1
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	495c      	ldr	r1, [pc, #368]	@ (8003d7c <HAL_I2C_Init+0x274>)
 8003c0c:	428b      	cmp	r3, r1
 8003c0e:	d819      	bhi.n	8003c44 <HAL_I2C_Init+0x13c>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e59      	subs	r1, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c1e:	1c59      	adds	r1, r3, #1
 8003c20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c24:	400b      	ands	r3, r1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_I2C_Init+0x138>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1e59      	subs	r1, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c38:	3301      	adds	r3, #1
 8003c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3e:	e051      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003c40:	2304      	movs	r3, #4
 8003c42:	e04f      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d111      	bne.n	8003c70 <HAL_I2C_Init+0x168>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1e58      	subs	r0, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	440b      	add	r3, r1
 8003c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e012      	b.n	8003c96 <HAL_I2C_Init+0x18e>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1e58      	subs	r0, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	0099      	lsls	r1, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c86:	3301      	adds	r3, #1
 8003c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	bf0c      	ite	eq
 8003c90:	2301      	moveq	r3, #1
 8003c92:	2300      	movne	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Init+0x196>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e022      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10e      	bne.n	8003cc4 <HAL_I2C_Init+0x1bc>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1e58      	subs	r0, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6859      	ldr	r1, [r3, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	440b      	add	r3, r1
 8003cb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cc2:	e00f      	b.n	8003ce4 <HAL_I2C_Init+0x1dc>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1e58      	subs	r0, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6859      	ldr	r1, [r3, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	0099      	lsls	r1, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	6809      	ldr	r1, [r1, #0]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69da      	ldr	r2, [r3, #28]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6911      	ldr	r1, [r2, #16]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68d2      	ldr	r2, [r2, #12]
 8003d1e:	4311      	orrs	r1, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	000186a0 	.word	0x000186a0
 8003d80:	001e847f 	.word	0x001e847f
 8003d84:	003d08ff 	.word	0x003d08ff
 8003d88:	431bde83 	.word	0x431bde83
 8003d8c:	10624dd3 	.word	0x10624dd3

08003d90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	817b      	strh	r3, [r7, #10]
 8003da0:	4613      	mov	r3, r2
 8003da2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003da4:	f7fe ffb8 	bl	8002d18 <HAL_GetTick>
 8003da8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	f040 80e0 	bne.w	8003f78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2319      	movs	r3, #25
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4970      	ldr	r1, [pc, #448]	@ (8003f84 <HAL_I2C_Master_Transmit+0x1f4>)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f964 	bl	8004090 <I2C_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e0d3      	b.n	8003f7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_I2C_Master_Transmit+0x50>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e0cc      	b.n	8003f7a <HAL_I2C_Master_Transmit+0x1ea>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d007      	beq.n	8003e06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0201 	orr.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2221      	movs	r2, #33	@ 0x21
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2210      	movs	r2, #16
 8003e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	893a      	ldrh	r2, [r7, #8]
 8003e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a50      	ldr	r2, [pc, #320]	@ (8003f88 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e48:	8979      	ldrh	r1, [r7, #10]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	6a3a      	ldr	r2, [r7, #32]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f89c 	bl	8003f8c <I2C_MasterRequestWrite>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e08d      	b.n	8003f7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e74:	e066      	b.n	8003f44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	6a39      	ldr	r1, [r7, #32]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fa22 	bl	80042c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d107      	bne.n	8003e9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e06b      	b.n	8003f7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d11b      	bne.n	8003f18 <HAL_I2C_Master_Transmit+0x188>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d017      	beq.n	8003f18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	6a39      	ldr	r1, [r7, #32]
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fa19 	bl	8004354 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00d      	beq.n	8003f44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d107      	bne.n	8003f40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e01a      	b.n	8003f7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d194      	bne.n	8003e76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e000      	b.n	8003f7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
  }
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	00100002 	.word	0x00100002
 8003f88:	ffff0000 	.word	0xffff0000

08003f8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d006      	beq.n	8003fb6 <I2C_MasterRequestWrite+0x2a>
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d003      	beq.n	8003fb6 <I2C_MasterRequestWrite+0x2a>
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fb4:	d108      	bne.n	8003fc8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e00b      	b.n	8003fe0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	2b12      	cmp	r3, #18
 8003fce:	d107      	bne.n	8003fe0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f84f 	bl	8004090 <I2C_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00d      	beq.n	8004014 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004006:	d103      	bne.n	8004010 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e035      	b.n	8004080 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800401c:	d108      	bne.n	8004030 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800401e:	897b      	ldrh	r3, [r7, #10]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800402c:	611a      	str	r2, [r3, #16]
 800402e:	e01b      	b.n	8004068 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004030:	897b      	ldrh	r3, [r7, #10]
 8004032:	11db      	asrs	r3, r3, #7
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f003 0306 	and.w	r3, r3, #6
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f063 030f 	orn	r3, r3, #15
 8004040:	b2da      	uxtb	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	490e      	ldr	r1, [pc, #56]	@ (8004088 <I2C_MasterRequestWrite+0xfc>)
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f898 	bl	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e010      	b.n	8004080 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800405e:	897b      	ldrh	r3, [r7, #10]
 8004060:	b2da      	uxtb	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4907      	ldr	r1, [pc, #28]	@ (800408c <I2C_MasterRequestWrite+0x100>)
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f888 	bl	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	00010008 	.word	0x00010008
 800408c:	00010002 	.word	0x00010002

08004090 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a0:	e048      	b.n	8004134 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a8:	d044      	beq.n	8004134 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040aa:	f7fe fe35 	bl	8002d18 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d302      	bcc.n	80040c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d139      	bne.n	8004134 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	0c1b      	lsrs	r3, r3, #16
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d10d      	bne.n	80040e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	43da      	mvns	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4013      	ands	r3, r2
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	e00c      	b.n	8004100 <I2C_WaitOnFlagUntilTimeout+0x70>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	43da      	mvns	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4013      	ands	r3, r2
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	429a      	cmp	r2, r3
 8004104:	d116      	bne.n	8004134 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	f043 0220 	orr.w	r2, r3, #32
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e023      	b.n	800417c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	0c1b      	lsrs	r3, r3, #16
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d10d      	bne.n	800415a <I2C_WaitOnFlagUntilTimeout+0xca>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	43da      	mvns	r2, r3
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4013      	ands	r3, r2
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	e00c      	b.n	8004174 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	43da      	mvns	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	4013      	ands	r3, r2
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	429a      	cmp	r2, r3
 8004178:	d093      	beq.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004192:	e071      	b.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a2:	d123      	bne.n	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d8:	f043 0204 	orr.w	r2, r3, #4
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e067      	b.n	80042bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d041      	beq.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f4:	f7fe fd90 	bl	8002d18 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	429a      	cmp	r2, r3
 8004202:	d302      	bcc.n	800420a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d136      	bne.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	0c1b      	lsrs	r3, r3, #16
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	d10c      	bne.n	800422e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	43da      	mvns	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	bf14      	ite	ne
 8004226:	2301      	movne	r3, #1
 8004228:	2300      	moveq	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	e00b      	b.n	8004246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	43da      	mvns	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4013      	ands	r3, r2
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	bf14      	ite	ne
 8004240:	2301      	movne	r3, #1
 8004242:	2300      	moveq	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d016      	beq.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e021      	b.n	80042bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d10c      	bne.n	800429c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	43da      	mvns	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4013      	ands	r3, r2
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	bf14      	ite	ne
 8004294:	2301      	movne	r3, #1
 8004296:	2300      	moveq	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	e00b      	b.n	80042b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	43da      	mvns	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4013      	ands	r3, r2
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf14      	ite	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	2300      	moveq	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f47f af6d 	bne.w	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042d0:	e034      	b.n	800433c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f886 	bl	80043e4 <I2C_IsAcknowledgeFailed>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e034      	b.n	800434c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d028      	beq.n	800433c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fe fd15 	bl	8002d18 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d11d      	bne.n	800433c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430a:	2b80      	cmp	r3, #128	@ 0x80
 800430c:	d016      	beq.n	800433c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e007      	b.n	800434c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004346:	2b80      	cmp	r3, #128	@ 0x80
 8004348:	d1c3      	bne.n	80042d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004360:	e034      	b.n	80043cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f83e 	bl	80043e4 <I2C_IsAcknowledgeFailed>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e034      	b.n	80043dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004378:	d028      	beq.n	80043cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800437a:	f7fe fccd 	bl	8002d18 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	429a      	cmp	r2, r3
 8004388:	d302      	bcc.n	8004390 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d11d      	bne.n	80043cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b04      	cmp	r3, #4
 800439c:	d016      	beq.n	80043cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b8:	f043 0220 	orr.w	r2, r3, #32
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e007      	b.n	80043dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d1c3      	bne.n	8004362 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fa:	d11b      	bne.n	8004434 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004404:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004420:	f043 0204 	orr.w	r2, r3, #4
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e267      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d075      	beq.n	800454e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004462:	4b88      	ldr	r3, [pc, #544]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b04      	cmp	r3, #4
 800446c:	d00c      	beq.n	8004488 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800446e:	4b85      	ldr	r3, [pc, #532]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004476:	2b08      	cmp	r3, #8
 8004478:	d112      	bne.n	80044a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800447a:	4b82      	ldr	r3, [pc, #520]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004486:	d10b      	bne.n	80044a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004488:	4b7e      	ldr	r3, [pc, #504]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d05b      	beq.n	800454c <HAL_RCC_OscConfig+0x108>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d157      	bne.n	800454c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e242      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a8:	d106      	bne.n	80044b8 <HAL_RCC_OscConfig+0x74>
 80044aa:	4b76      	ldr	r3, [pc, #472]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a75      	ldr	r2, [pc, #468]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80044b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e01d      	b.n	80044f4 <HAL_RCC_OscConfig+0xb0>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044c0:	d10c      	bne.n	80044dc <HAL_RCC_OscConfig+0x98>
 80044c2:	4b70      	ldr	r3, [pc, #448]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a6f      	ldr	r2, [pc, #444]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80044c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a6c      	ldr	r2, [pc, #432]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80044d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e00b      	b.n	80044f4 <HAL_RCC_OscConfig+0xb0>
 80044dc:	4b69      	ldr	r3, [pc, #420]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a68      	ldr	r2, [pc, #416]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80044e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	4b66      	ldr	r3, [pc, #408]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a65      	ldr	r2, [pc, #404]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80044ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d013      	beq.n	8004524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7fe fc0c 	bl	8002d18 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004504:	f7fe fc08 	bl	8002d18 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	@ 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e207      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004516:	4b5b      	ldr	r3, [pc, #364]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0xc0>
 8004522:	e014      	b.n	800454e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fe fbf8 	bl	8002d18 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800452c:	f7fe fbf4 	bl	8002d18 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	@ 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e1f3      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800453e:	4b51      	ldr	r3, [pc, #324]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0xe8>
 800454a:	e000      	b.n	800454e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d063      	beq.n	8004622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800455a:	4b4a      	ldr	r3, [pc, #296]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 030c 	and.w	r3, r3, #12
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00b      	beq.n	800457e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004566:	4b47      	ldr	r3, [pc, #284]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800456e:	2b08      	cmp	r3, #8
 8004570:	d11c      	bne.n	80045ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004572:	4b44      	ldr	r3, [pc, #272]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d116      	bne.n	80045ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457e:	4b41      	ldr	r3, [pc, #260]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d005      	beq.n	8004596 <HAL_RCC_OscConfig+0x152>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d001      	beq.n	8004596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e1c7      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004596:	4b3b      	ldr	r3, [pc, #236]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	4937      	ldr	r1, [pc, #220]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045aa:	e03a      	b.n	8004622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d020      	beq.n	80045f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045b4:	4b34      	ldr	r3, [pc, #208]	@ (8004688 <HAL_RCC_OscConfig+0x244>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fe fbad 	bl	8002d18 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c2:	f7fe fba9 	bl	8002d18 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e1a8      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e0:	4b28      	ldr	r3, [pc, #160]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	4925      	ldr	r1, [pc, #148]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	600b      	str	r3, [r1, #0]
 80045f4:	e015      	b.n	8004622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f6:	4b24      	ldr	r3, [pc, #144]	@ (8004688 <HAL_RCC_OscConfig+0x244>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fe fb8c 	bl	8002d18 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004604:	f7fe fb88 	bl	8002d18 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e187      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004616:	4b1b      	ldr	r3, [pc, #108]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d036      	beq.n	800469c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d016      	beq.n	8004664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004636:	4b15      	ldr	r3, [pc, #84]	@ (800468c <HAL_RCC_OscConfig+0x248>)
 8004638:	2201      	movs	r2, #1
 800463a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463c:	f7fe fb6c 	bl	8002d18 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004644:	f7fe fb68 	bl	8002d18 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e167      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004656:	4b0b      	ldr	r3, [pc, #44]	@ (8004684 <HAL_RCC_OscConfig+0x240>)
 8004658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x200>
 8004662:	e01b      	b.n	800469c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004664:	4b09      	ldr	r3, [pc, #36]	@ (800468c <HAL_RCC_OscConfig+0x248>)
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800466a:	f7fe fb55 	bl	8002d18 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004670:	e00e      	b.n	8004690 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004672:	f7fe fb51 	bl	8002d18 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d907      	bls.n	8004690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e150      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
 8004684:	40023800 	.word	0x40023800
 8004688:	42470000 	.word	0x42470000
 800468c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004690:	4b88      	ldr	r3, [pc, #544]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 8004692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1ea      	bne.n	8004672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 8097 	beq.w	80047d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046aa:	2300      	movs	r3, #0
 80046ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ae:	4b81      	ldr	r3, [pc, #516]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10f      	bne.n	80046da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	4b7d      	ldr	r3, [pc, #500]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	4a7c      	ldr	r2, [pc, #496]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 80046c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ca:	4b7a      	ldr	r3, [pc, #488]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	60bb      	str	r3, [r7, #8]
 80046d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d6:	2301      	movs	r3, #1
 80046d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046da:	4b77      	ldr	r3, [pc, #476]	@ (80048b8 <HAL_RCC_OscConfig+0x474>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d118      	bne.n	8004718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046e6:	4b74      	ldr	r3, [pc, #464]	@ (80048b8 <HAL_RCC_OscConfig+0x474>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a73      	ldr	r2, [pc, #460]	@ (80048b8 <HAL_RCC_OscConfig+0x474>)
 80046ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046f2:	f7fe fb11 	bl	8002d18 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046fa:	f7fe fb0d 	bl	8002d18 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e10c      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470c:	4b6a      	ldr	r3, [pc, #424]	@ (80048b8 <HAL_RCC_OscConfig+0x474>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0f0      	beq.n	80046fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d106      	bne.n	800472e <HAL_RCC_OscConfig+0x2ea>
 8004720:	4b64      	ldr	r3, [pc, #400]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 8004722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004724:	4a63      	ldr	r2, [pc, #396]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	6713      	str	r3, [r2, #112]	@ 0x70
 800472c:	e01c      	b.n	8004768 <HAL_RCC_OscConfig+0x324>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b05      	cmp	r3, #5
 8004734:	d10c      	bne.n	8004750 <HAL_RCC_OscConfig+0x30c>
 8004736:	4b5f      	ldr	r3, [pc, #380]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473a:	4a5e      	ldr	r2, [pc, #376]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 800473c:	f043 0304 	orr.w	r3, r3, #4
 8004740:	6713      	str	r3, [r2, #112]	@ 0x70
 8004742:	4b5c      	ldr	r3, [pc, #368]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004746:	4a5b      	ldr	r2, [pc, #364]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6713      	str	r3, [r2, #112]	@ 0x70
 800474e:	e00b      	b.n	8004768 <HAL_RCC_OscConfig+0x324>
 8004750:	4b58      	ldr	r3, [pc, #352]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004754:	4a57      	ldr	r2, [pc, #348]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 8004756:	f023 0301 	bic.w	r3, r3, #1
 800475a:	6713      	str	r3, [r2, #112]	@ 0x70
 800475c:	4b55      	ldr	r3, [pc, #340]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 800475e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004760:	4a54      	ldr	r2, [pc, #336]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 8004762:	f023 0304 	bic.w	r3, r3, #4
 8004766:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d015      	beq.n	800479c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004770:	f7fe fad2 	bl	8002d18 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004776:	e00a      	b.n	800478e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fe face 	bl	8002d18 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e0cb      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478e:	4b49      	ldr	r3, [pc, #292]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0ee      	beq.n	8004778 <HAL_RCC_OscConfig+0x334>
 800479a:	e014      	b.n	80047c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800479c:	f7fe fabc 	bl	8002d18 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a2:	e00a      	b.n	80047ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a4:	f7fe fab8 	bl	8002d18 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e0b5      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ba:	4b3e      	ldr	r3, [pc, #248]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1ee      	bne.n	80047a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047c6:	7dfb      	ldrb	r3, [r7, #23]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d105      	bne.n	80047d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047cc:	4b39      	ldr	r3, [pc, #228]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 80047ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d0:	4a38      	ldr	r2, [pc, #224]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 80047d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80a1 	beq.w	8004924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047e2:	4b34      	ldr	r3, [pc, #208]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b08      	cmp	r3, #8
 80047ec:	d05c      	beq.n	80048a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d141      	bne.n	800487a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f6:	4b31      	ldr	r3, [pc, #196]	@ (80048bc <HAL_RCC_OscConfig+0x478>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fc:	f7fe fa8c 	bl	8002d18 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004804:	f7fe fa88 	bl	8002d18 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e087      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004816:	4b27      	ldr	r3, [pc, #156]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69da      	ldr	r2, [r3, #28]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	019b      	lsls	r3, r3, #6
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	3b01      	subs	r3, #1
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004844:	061b      	lsls	r3, r3, #24
 8004846:	491b      	ldr	r1, [pc, #108]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800484c:	4b1b      	ldr	r3, [pc, #108]	@ (80048bc <HAL_RCC_OscConfig+0x478>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004852:	f7fe fa61 	bl	8002d18 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485a:	f7fe fa5d 	bl	8002d18 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e05c      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486c:	4b11      	ldr	r3, [pc, #68]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <HAL_RCC_OscConfig+0x416>
 8004878:	e054      	b.n	8004924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487a:	4b10      	ldr	r3, [pc, #64]	@ (80048bc <HAL_RCC_OscConfig+0x478>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004880:	f7fe fa4a 	bl	8002d18 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004888:	f7fe fa46 	bl	8002d18 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e045      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489a:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <HAL_RCC_OscConfig+0x470>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x444>
 80048a6:	e03d      	b.n	8004924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d107      	bne.n	80048c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e038      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40007000 	.word	0x40007000
 80048bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004930 <HAL_RCC_OscConfig+0x4ec>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d028      	beq.n	8004920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048d8:	429a      	cmp	r2, r3
 80048da:	d121      	bne.n	8004920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d11a      	bne.n	8004920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048f0:	4013      	ands	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d111      	bne.n	8004920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	3b01      	subs	r3, #1
 800490a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d107      	bne.n	8004920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d001      	beq.n	8004924 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40023800 	.word	0x40023800

08004934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0cc      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004948:	4b68      	ldr	r3, [pc, #416]	@ (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d90c      	bls.n	8004970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b65      	ldr	r3, [pc, #404]	@ (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	4b63      	ldr	r3, [pc, #396]	@ (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d001      	beq.n	8004970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0b8      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d020      	beq.n	80049be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004988:	4b59      	ldr	r3, [pc, #356]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	4a58      	ldr	r2, [pc, #352]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004992:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a0:	4b53      	ldr	r3, [pc, #332]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	4a52      	ldr	r2, [pc, #328]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ac:	4b50      	ldr	r3, [pc, #320]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	494d      	ldr	r1, [pc, #308]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d044      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d2:	4b47      	ldr	r3, [pc, #284]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d119      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e07f      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d003      	beq.n	80049f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f2:	4b3f      	ldr	r3, [pc, #252]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e06f      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a02:	4b3b      	ldr	r3, [pc, #236]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e067      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a12:	4b37      	ldr	r3, [pc, #220]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f023 0203 	bic.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4934      	ldr	r1, [pc, #208]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a24:	f7fe f978 	bl	8002d18 <HAL_GetTick>
 8004a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2c:	f7fe f974 	bl	8002d18 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e04f      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	4b2b      	ldr	r3, [pc, #172]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 020c 	and.w	r2, r3, #12
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d1eb      	bne.n	8004a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a54:	4b25      	ldr	r3, [pc, #148]	@ (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d20c      	bcs.n	8004a7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a62:	4b22      	ldr	r3, [pc, #136]	@ (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6a:	4b20      	ldr	r3, [pc, #128]	@ (8004aec <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e032      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a88:	4b19      	ldr	r3, [pc, #100]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	4916      	ldr	r1, [pc, #88]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d009      	beq.n	8004aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aa6:	4b12      	ldr	r3, [pc, #72]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	490e      	ldr	r1, [pc, #56]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aba:	f000 f821 	bl	8004b00 <HAL_RCC_GetSysClockFreq>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8004af0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	490a      	ldr	r1, [pc, #40]	@ (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004acc:	5ccb      	ldrb	r3, [r1, r3]
 8004ace:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad2:	4a09      	ldr	r2, [pc, #36]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ad6:	4b09      	ldr	r3, [pc, #36]	@ (8004afc <HAL_RCC_ClockConfig+0x1c8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe f8d8 	bl	8002c90 <HAL_InitTick>

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40023c00 	.word	0x40023c00
 8004af0:	40023800 	.word	0x40023800
 8004af4:	0800a428 	.word	0x0800a428
 8004af8:	20000018 	.word	0x20000018
 8004afc:	2000001c 	.word	0x2000001c

08004b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b04:	b094      	sub	sp, #80	@ 0x50
 8004b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b18:	4b79      	ldr	r3, [pc, #484]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 030c 	and.w	r3, r3, #12
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d00d      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0x40>
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	f200 80e1 	bhi.w	8004cec <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_RCC_GetSysClockFreq+0x34>
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d003      	beq.n	8004b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b32:	e0db      	b.n	8004cec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b34:	4b73      	ldr	r3, [pc, #460]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b38:	e0db      	b.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b3a:	4b73      	ldr	r3, [pc, #460]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b3e:	e0d8      	b.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b40:	4b6f      	ldr	r3, [pc, #444]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d063      	beq.n	8004c1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b56:	4b6a      	ldr	r3, [pc, #424]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	099b      	lsrs	r3, r3, #6
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b72:	4622      	mov	r2, r4
 8004b74:	462b      	mov	r3, r5
 8004b76:	f04f 0000 	mov.w	r0, #0
 8004b7a:	f04f 0100 	mov.w	r1, #0
 8004b7e:	0159      	lsls	r1, r3, #5
 8004b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b84:	0150      	lsls	r0, r2, #5
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	1a51      	subs	r1, r2, r1
 8004b8e:	6139      	str	r1, [r7, #16]
 8004b90:	4629      	mov	r1, r5
 8004b92:	eb63 0301 	sbc.w	r3, r3, r1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	018b      	lsls	r3, r1, #6
 8004ba8:	4651      	mov	r1, sl
 8004baa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bae:	4651      	mov	r1, sl
 8004bb0:	018a      	lsls	r2, r1, #6
 8004bb2:	4651      	mov	r1, sl
 8004bb4:	ebb2 0801 	subs.w	r8, r2, r1
 8004bb8:	4659      	mov	r1, fp
 8004bba:	eb63 0901 	sbc.w	r9, r3, r1
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bd2:	4690      	mov	r8, r2
 8004bd4:	4699      	mov	r9, r3
 8004bd6:	4623      	mov	r3, r4
 8004bd8:	eb18 0303 	adds.w	r3, r8, r3
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	462b      	mov	r3, r5
 8004be0:	eb49 0303 	adc.w	r3, r9, r3
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	024b      	lsls	r3, r1, #9
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	024a      	lsls	r2, r1, #9
 8004c00:	4610      	mov	r0, r2
 8004c02:	4619      	mov	r1, r3
 8004c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c06:	2200      	movs	r2, #0
 8004c08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c10:	f7fb ffd4 	bl	8000bbc <__aeabi_uldivmod>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4613      	mov	r3, r2
 8004c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c1c:	e058      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1e:	4b38      	ldr	r3, [pc, #224]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	099b      	lsrs	r3, r3, #6
 8004c24:	2200      	movs	r2, #0
 8004c26:	4618      	mov	r0, r3
 8004c28:	4611      	mov	r1, r2
 8004c2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c2e:	623b      	str	r3, [r7, #32]
 8004c30:	2300      	movs	r3, #0
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c38:	4642      	mov	r2, r8
 8004c3a:	464b      	mov	r3, r9
 8004c3c:	f04f 0000 	mov.w	r0, #0
 8004c40:	f04f 0100 	mov.w	r1, #0
 8004c44:	0159      	lsls	r1, r3, #5
 8004c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c4a:	0150      	lsls	r0, r2, #5
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4641      	mov	r1, r8
 8004c52:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c56:	4649      	mov	r1, r9
 8004c58:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c70:	ebb2 040a 	subs.w	r4, r2, sl
 8004c74:	eb63 050b 	sbc.w	r5, r3, fp
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	00eb      	lsls	r3, r5, #3
 8004c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c86:	00e2      	lsls	r2, r4, #3
 8004c88:	4614      	mov	r4, r2
 8004c8a:	461d      	mov	r5, r3
 8004c8c:	4643      	mov	r3, r8
 8004c8e:	18e3      	adds	r3, r4, r3
 8004c90:	603b      	str	r3, [r7, #0]
 8004c92:	464b      	mov	r3, r9
 8004c94:	eb45 0303 	adc.w	r3, r5, r3
 8004c98:	607b      	str	r3, [r7, #4]
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	028b      	lsls	r3, r1, #10
 8004caa:	4621      	mov	r1, r4
 8004cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	028a      	lsls	r2, r1, #10
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cba:	2200      	movs	r2, #0
 8004cbc:	61bb      	str	r3, [r7, #24]
 8004cbe:	61fa      	str	r2, [r7, #28]
 8004cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cc4:	f7fb ff7a 	bl	8000bbc <__aeabi_uldivmod>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4613      	mov	r3, r2
 8004cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	0c1b      	lsrs	r3, r3, #16
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	3301      	adds	r3, #1
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004ce0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cea:	e002      	b.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cec:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3750      	adds	r7, #80	@ 0x50
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cfe:	bf00      	nop
 8004d00:	40023800 	.word	0x40023800
 8004d04:	00f42400 	.word	0x00f42400
 8004d08:	007a1200 	.word	0x007a1200

08004d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d10:	4b03      	ldr	r3, [pc, #12]	@ (8004d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d12:	681b      	ldr	r3, [r3, #0]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000018 	.word	0x20000018

08004d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d28:	f7ff fff0 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	0a9b      	lsrs	r3, r3, #10
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	4903      	ldr	r1, [pc, #12]	@ (8004d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40023800 	.word	0x40023800
 8004d48:	0800a438 	.word	0x0800a438

08004d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e07b      	b.n	8004e56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d108      	bne.n	8004d78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d6e:	d009      	beq.n	8004d84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	61da      	str	r2, [r3, #28]
 8004d76:	e005      	b.n	8004d84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fd fc70 	bl	8002684 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	431a      	orrs	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e08:	ea42 0103 	orr.w	r1, r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	0c1b      	lsrs	r3, r3, #16
 8004e22:	f003 0104 	and.w	r1, r3, #4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2a:	f003 0210 	and.w	r2, r3, #16
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b088      	sub	sp, #32
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e6e:	f7fd ff53 	bl	8002d18 <HAL_GetTick>
 8004e72:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d001      	beq.n	8004e88 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
 8004e86:	e12a      	b.n	80050de <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_SPI_Transmit+0x36>
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e122      	b.n	80050de <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_SPI_Transmit+0x48>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e11b      	b.n	80050de <HAL_SPI_Transmit+0x280>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	88fa      	ldrh	r2, [r7, #6]
 8004ec6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	88fa      	ldrh	r2, [r7, #6]
 8004ecc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ef4:	d10f      	bne.n	8004f16 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f20:	2b40      	cmp	r3, #64	@ 0x40
 8004f22:	d007      	beq.n	8004f34 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f3c:	d152      	bne.n	8004fe4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_SPI_Transmit+0xee>
 8004f46:	8b7b      	ldrh	r3, [r7, #26]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d145      	bne.n	8004fd8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f50:	881a      	ldrh	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5c:	1c9a      	adds	r2, r3, #2
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f70:	e032      	b.n	8004fd8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d112      	bne.n	8004fa6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	881a      	ldrh	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f90:	1c9a      	adds	r2, r3, #2
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004fa4:	e018      	b.n	8004fd8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fa6:	f7fd feb7 	bl	8002d18 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d803      	bhi.n	8004fbe <HAL_SPI_Transmit+0x160>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d102      	bne.n	8004fc4 <HAL_SPI_Transmit+0x166>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d109      	bne.n	8004fd8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e082      	b.n	80050de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1c7      	bne.n	8004f72 <HAL_SPI_Transmit+0x114>
 8004fe2:	e053      	b.n	800508c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <HAL_SPI_Transmit+0x194>
 8004fec:	8b7b      	ldrh	r3, [r7, #26]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d147      	bne.n	8005082 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	330c      	adds	r3, #12
 8004ffc:	7812      	ldrb	r2, [r2, #0]
 8004ffe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005018:	e033      	b.n	8005082 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b02      	cmp	r3, #2
 8005026:	d113      	bne.n	8005050 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	330c      	adds	r3, #12
 8005032:	7812      	ldrb	r2, [r2, #0]
 8005034:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800504e:	e018      	b.n	8005082 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005050:	f7fd fe62 	bl	8002d18 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d803      	bhi.n	8005068 <HAL_SPI_Transmit+0x20a>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005066:	d102      	bne.n	800506e <HAL_SPI_Transmit+0x210>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e02d      	b.n	80050de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005086:	b29b      	uxth	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1c6      	bne.n	800501a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	6839      	ldr	r1, [r7, #0]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 fbd9 	bl	8005848 <SPI_EndRxTxTransaction>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2220      	movs	r2, #32
 80050a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10a      	bne.n	80050c0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80050dc:	2300      	movs	r3, #0
  }
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b088      	sub	sp, #32
 80050ea:	af02      	add	r7, sp, #8
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	603b      	str	r3, [r7, #0]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d001      	beq.n	8005106 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
 8005104:	e104      	b.n	8005310 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800510e:	d112      	bne.n	8005136 <HAL_SPI_Receive+0x50>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10e      	bne.n	8005136 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2204      	movs	r2, #4
 800511c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005120:	88fa      	ldrh	r2, [r7, #6]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	4613      	mov	r3, r2
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f8f3 	bl	8005318 <HAL_SPI_TransmitReceive>
 8005132:	4603      	mov	r3, r0
 8005134:	e0ec      	b.n	8005310 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005136:	f7fd fdef 	bl	8002d18 <HAL_GetTick>
 800513a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <HAL_SPI_Receive+0x62>
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e0e1      	b.n	8005310 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_SPI_Receive+0x74>
 8005156:	2302      	movs	r3, #2
 8005158:	e0da      	b.n	8005310 <HAL_SPI_Receive+0x22a>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2204      	movs	r2, #4
 8005166:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	88fa      	ldrh	r2, [r7, #6]
 800517a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a8:	d10f      	bne.n	80051ca <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d4:	2b40      	cmp	r3, #64	@ 0x40
 80051d6:	d007      	beq.n	80051e8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d170      	bne.n	80052d2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051f0:	e035      	b.n	800525e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d115      	bne.n	800522c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f103 020c 	add.w	r2, r3, #12
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800522a:	e018      	b.n	800525e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800522c:	f7fd fd74 	bl	8002d18 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d803      	bhi.n	8005244 <HAL_SPI_Receive+0x15e>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005242:	d102      	bne.n	800524a <HAL_SPI_Receive+0x164>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e058      	b.n	8005310 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1c4      	bne.n	80051f2 <HAL_SPI_Receive+0x10c>
 8005268:	e038      	b.n	80052dc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b01      	cmp	r3, #1
 8005276:	d113      	bne.n	80052a0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005282:	b292      	uxth	r2, r2
 8005284:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528a:	1c9a      	adds	r2, r3, #2
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005294:	b29b      	uxth	r3, r3
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800529e:	e018      	b.n	80052d2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052a0:	f7fd fd3a 	bl	8002d18 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d803      	bhi.n	80052b8 <HAL_SPI_Receive+0x1d2>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b6:	d102      	bne.n	80052be <HAL_SPI_Receive+0x1d8>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e01e      	b.n	8005310 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1c6      	bne.n	800526a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 fa4b 	bl	800577c <SPI_EndRxTransaction>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800530e:	2300      	movs	r3, #0
  }
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08a      	sub	sp, #40	@ 0x28
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005326:	2301      	movs	r3, #1
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800532a:	f7fd fcf5 	bl	8002d18 <HAL_GetTick>
 800532e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005336:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800533e:	887b      	ldrh	r3, [r7, #2]
 8005340:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005342:	7ffb      	ldrb	r3, [r7, #31]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d00c      	beq.n	8005362 <HAL_SPI_TransmitReceive+0x4a>
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800534e:	d106      	bne.n	800535e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <HAL_SPI_TransmitReceive+0x46>
 8005358:	7ffb      	ldrb	r3, [r7, #31]
 800535a:	2b04      	cmp	r3, #4
 800535c:	d001      	beq.n	8005362 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800535e:	2302      	movs	r3, #2
 8005360:	e17f      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x5c>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x5c>
 800536e:	887b      	ldrh	r3, [r7, #2]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e174      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_SPI_TransmitReceive+0x6e>
 8005382:	2302      	movs	r3, #2
 8005384:	e16d      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b04      	cmp	r3, #4
 8005398:	d003      	beq.n	80053a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2205      	movs	r2, #5
 800539e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	887a      	ldrh	r2, [r7, #2]
 80053b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	887a      	ldrh	r2, [r7, #2]
 80053b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	887a      	ldrh	r2, [r7, #2]
 80053c4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	887a      	ldrh	r2, [r7, #2]
 80053ca:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e2:	2b40      	cmp	r3, #64	@ 0x40
 80053e4:	d007      	beq.n	80053f6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053fe:	d17e      	bne.n	80054fe <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <HAL_SPI_TransmitReceive+0xf6>
 8005408:	8afb      	ldrh	r3, [r7, #22]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d16c      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005412:	881a      	ldrh	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541e:	1c9a      	adds	r2, r3, #2
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005432:	e059      	b.n	80054e8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d11b      	bne.n	800547a <HAL_SPI_TransmitReceive+0x162>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d016      	beq.n	800547a <HAL_SPI_TransmitReceive+0x162>
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	2b01      	cmp	r3, #1
 8005450:	d113      	bne.n	800547a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005456:	881a      	ldrh	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005462:	1c9a      	adds	r2, r3, #2
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b01      	cmp	r3, #1
 8005486:	d119      	bne.n	80054bc <HAL_SPI_TransmitReceive+0x1a4>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d014      	beq.n	80054bc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549c:	b292      	uxth	r2, r2
 800549e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	1c9a      	adds	r2, r3, #2
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054b8:	2301      	movs	r3, #1
 80054ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054bc:	f7fd fc2c 	bl	8002d18 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d80d      	bhi.n	80054e8 <HAL_SPI_TransmitReceive+0x1d0>
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d009      	beq.n	80054e8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e0bc      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1a0      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x11c>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d19b      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x11c>
 80054fc:	e082      	b.n	8005604 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_SPI_TransmitReceive+0x1f4>
 8005506:	8afb      	ldrh	r3, [r7, #22]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d171      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	330c      	adds	r3, #12
 8005516:	7812      	ldrb	r2, [r2, #0]
 8005518:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005532:	e05d      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b02      	cmp	r3, #2
 8005540:	d11c      	bne.n	800557c <HAL_SPI_TransmitReceive+0x264>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b00      	cmp	r3, #0
 800554a:	d017      	beq.n	800557c <HAL_SPI_TransmitReceive+0x264>
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	2b01      	cmp	r3, #1
 8005550:	d114      	bne.n	800557c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	330c      	adds	r3, #12
 800555c:	7812      	ldrb	r2, [r2, #0]
 800555e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	d119      	bne.n	80055be <HAL_SPI_TransmitReceive+0x2a6>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d014      	beq.n	80055be <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a6:	1c5a      	adds	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055ba:	2301      	movs	r3, #1
 80055bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055be:	f7fd fbab 	bl	8002d18 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d803      	bhi.n	80055d6 <HAL_SPI_TransmitReceive+0x2be>
 80055ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d102      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x2c4>
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e038      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d19c      	bne.n	8005534 <HAL_SPI_TransmitReceive+0x21c>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d197      	bne.n	8005534 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005604:	6a3a      	ldr	r2, [r7, #32]
 8005606:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f91d 	bl	8005848 <SPI_EndRxTxTransaction>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e01d      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10a      	bne.n	8005644 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800562e:	2300      	movs	r3, #0
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005660:	2300      	movs	r3, #0
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3728      	adds	r7, #40	@ 0x28
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800567c:	f7fd fb4c 	bl	8002d18 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	4413      	add	r3, r2
 800568a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800568c:	f7fd fb44 	bl	8002d18 <HAL_GetTick>
 8005690:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005692:	4b39      	ldr	r3, [pc, #228]	@ (8005778 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	015b      	lsls	r3, r3, #5
 8005698:	0d1b      	lsrs	r3, r3, #20
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	fb02 f303 	mul.w	r3, r2, r3
 80056a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056a2:	e054      	b.n	800574e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056aa:	d050      	beq.n	800574e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056ac:	f7fd fb34 	bl	8002d18 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d902      	bls.n	80056c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d13d      	bne.n	800573e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056da:	d111      	bne.n	8005700 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e4:	d004      	beq.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ee:	d107      	bne.n	8005700 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005708:	d10f      	bne.n	800572a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005728:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e017      	b.n	800576e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	3b01      	subs	r3, #1
 800574c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4013      	ands	r3, r2
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	429a      	cmp	r2, r3
 800575c:	bf0c      	ite	eq
 800575e:	2301      	moveq	r3, #1
 8005760:	2300      	movne	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	429a      	cmp	r2, r3
 800576a:	d19b      	bne.n	80056a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000018 	.word	0x20000018

0800577c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005790:	d111      	bne.n	80057b6 <SPI_EndRxTransaction+0x3a>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800579a:	d004      	beq.n	80057a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057a4:	d107      	bne.n	80057b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057be:	d12a      	bne.n	8005816 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057c8:	d012      	beq.n	80057f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2200      	movs	r2, #0
 80057d2:	2180      	movs	r1, #128	@ 0x80
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff ff49 	bl	800566c <SPI_WaitFlagStateUntilTimeout>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d02d      	beq.n	800583c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e4:	f043 0220 	orr.w	r2, r3, #32
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e026      	b.n	800583e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2200      	movs	r2, #0
 80057f8:	2101      	movs	r1, #1
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7ff ff36 	bl	800566c <SPI_WaitFlagStateUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01a      	beq.n	800583c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580a:	f043 0220 	orr.w	r2, r3, #32
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e013      	b.n	800583e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2200      	movs	r2, #0
 800581e:	2101      	movs	r1, #1
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff ff23 	bl	800566c <SPI_WaitFlagStateUntilTimeout>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d007      	beq.n	800583c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005830:	f043 0220 	orr.w	r2, r3, #32
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e000      	b.n	800583e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af02      	add	r7, sp, #8
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2201      	movs	r2, #1
 800585c:	2102      	movs	r1, #2
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f7ff ff04 	bl	800566c <SPI_WaitFlagStateUntilTimeout>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	f043 0220 	orr.w	r2, r3, #32
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e032      	b.n	80058e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800587a:	4b1b      	ldr	r3, [pc, #108]	@ (80058e8 <SPI_EndRxTxTransaction+0xa0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1b      	ldr	r2, [pc, #108]	@ (80058ec <SPI_EndRxTxTransaction+0xa4>)
 8005880:	fba2 2303 	umull	r2, r3, r2, r3
 8005884:	0d5b      	lsrs	r3, r3, #21
 8005886:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800588a:	fb02 f303 	mul.w	r3, r2, r3
 800588e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005898:	d112      	bne.n	80058c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2200      	movs	r2, #0
 80058a2:	2180      	movs	r1, #128	@ 0x80
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f7ff fee1 	bl	800566c <SPI_WaitFlagStateUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d016      	beq.n	80058de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b4:	f043 0220 	orr.w	r2, r3, #32
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e00f      	b.n	80058e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d6:	2b80      	cmp	r3, #128	@ 0x80
 80058d8:	d0f2      	beq.n	80058c0 <SPI_EndRxTxTransaction+0x78>
 80058da:	e000      	b.n	80058de <SPI_EndRxTxTransaction+0x96>
        break;
 80058dc:	bf00      	nop
  }

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20000018 	.word	0x20000018
 80058ec:	165e9f81 	.word	0x165e9f81

080058f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e041      	b.n	8005986 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fc fefc 	bl	8002714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f000 fd28 	bl	8006384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d109      	bne.n	80059b4 <HAL_TIM_PWM_Start+0x24>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	bf14      	ite	ne
 80059ac:	2301      	movne	r3, #1
 80059ae:	2300      	moveq	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e022      	b.n	80059fa <HAL_TIM_PWM_Start+0x6a>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d109      	bne.n	80059ce <HAL_TIM_PWM_Start+0x3e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	bf14      	ite	ne
 80059c6:	2301      	movne	r3, #1
 80059c8:	2300      	moveq	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	e015      	b.n	80059fa <HAL_TIM_PWM_Start+0x6a>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d109      	bne.n	80059e8 <HAL_TIM_PWM_Start+0x58>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	bf14      	ite	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	2300      	moveq	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	e008      	b.n	80059fa <HAL_TIM_PWM_Start+0x6a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e07c      	b.n	8005afc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_PWM_Start+0x82>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a10:	e013      	b.n	8005a3a <HAL_TIM_PWM_Start+0xaa>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_PWM_Start+0x92>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a20:	e00b      	b.n	8005a3a <HAL_TIM_PWM_Start+0xaa>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_PWM_Start+0xa2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a30:	e003      	b.n	8005a3a <HAL_TIM_PWM_Start+0xaa>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 f824 	bl	8006a90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b04 <HAL_TIM_PWM_Start+0x174>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d004      	beq.n	8005a5c <HAL_TIM_PWM_Start+0xcc>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a2c      	ldr	r2, [pc, #176]	@ (8005b08 <HAL_TIM_PWM_Start+0x178>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d101      	bne.n	8005a60 <HAL_TIM_PWM_Start+0xd0>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e000      	b.n	8005a62 <HAL_TIM_PWM_Start+0xd2>
 8005a60:	2300      	movs	r3, #0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a22      	ldr	r2, [pc, #136]	@ (8005b04 <HAL_TIM_PWM_Start+0x174>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d022      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a88:	d01d      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8005b0c <HAL_TIM_PWM_Start+0x17c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d018      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1d      	ldr	r2, [pc, #116]	@ (8005b10 <HAL_TIM_PWM_Start+0x180>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b14 <HAL_TIM_PWM_Start+0x184>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a16      	ldr	r2, [pc, #88]	@ (8005b08 <HAL_TIM_PWM_Start+0x178>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d009      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a18      	ldr	r2, [pc, #96]	@ (8005b18 <HAL_TIM_PWM_Start+0x188>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x136>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a16      	ldr	r2, [pc, #88]	@ (8005b1c <HAL_TIM_PWM_Start+0x18c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d111      	bne.n	8005aea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b06      	cmp	r3, #6
 8005ad6:	d010      	beq.n	8005afa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0201 	orr.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae8:	e007      	b.n	8005afa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0201 	orr.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40010400 	.word	0x40010400
 8005b0c:	40000400 	.word	0x40000400
 8005b10:	40000800 	.word	0x40000800
 8005b14:	40000c00 	.word	0x40000c00
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40001800 	.word	0x40001800

08005b20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e041      	b.n	8005bb6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fc fe46 	bl	80027d8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3304      	adds	r3, #4
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f000 fc10 	bl	8006384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d104      	bne.n	8005bde <HAL_TIM_IC_Start_IT+0x1e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	e013      	b.n	8005c06 <HAL_TIM_IC_Start_IT+0x46>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d104      	bne.n	8005bee <HAL_TIM_IC_Start_IT+0x2e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	e00b      	b.n	8005c06 <HAL_TIM_IC_Start_IT+0x46>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d104      	bne.n	8005bfe <HAL_TIM_IC_Start_IT+0x3e>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	e003      	b.n	8005c06 <HAL_TIM_IC_Start_IT+0x46>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d104      	bne.n	8005c18 <HAL_TIM_IC_Start_IT+0x58>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	e013      	b.n	8005c40 <HAL_TIM_IC_Start_IT+0x80>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d104      	bne.n	8005c28 <HAL_TIM_IC_Start_IT+0x68>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	e00b      	b.n	8005c40 <HAL_TIM_IC_Start_IT+0x80>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b08      	cmp	r3, #8
 8005c2c:	d104      	bne.n	8005c38 <HAL_TIM_IC_Start_IT+0x78>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	e003      	b.n	8005c40 <HAL_TIM_IC_Start_IT+0x80>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c42:	7bbb      	ldrb	r3, [r7, #14]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d102      	bne.n	8005c4e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c48:	7b7b      	ldrb	r3, [r7, #13]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d001      	beq.n	8005c52 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e0cc      	b.n	8005dec <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_IC_Start_IT+0xa2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c60:	e013      	b.n	8005c8a <HAL_TIM_IC_Start_IT+0xca>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	d104      	bne.n	8005c72 <HAL_TIM_IC_Start_IT+0xb2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c70:	e00b      	b.n	8005c8a <HAL_TIM_IC_Start_IT+0xca>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d104      	bne.n	8005c82 <HAL_TIM_IC_Start_IT+0xc2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c80:	e003      	b.n	8005c8a <HAL_TIM_IC_Start_IT+0xca>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <HAL_TIM_IC_Start_IT+0xda>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c98:	e013      	b.n	8005cc2 <HAL_TIM_IC_Start_IT+0x102>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d104      	bne.n	8005caa <HAL_TIM_IC_Start_IT+0xea>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ca8:	e00b      	b.n	8005cc2 <HAL_TIM_IC_Start_IT+0x102>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d104      	bne.n	8005cba <HAL_TIM_IC_Start_IT+0xfa>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cb8:	e003      	b.n	8005cc2 <HAL_TIM_IC_Start_IT+0x102>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b0c      	cmp	r3, #12
 8005cc6:	d841      	bhi.n	8005d4c <HAL_TIM_IC_Start_IT+0x18c>
 8005cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd0 <HAL_TIM_IC_Start_IT+0x110>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005d05 	.word	0x08005d05
 8005cd4:	08005d4d 	.word	0x08005d4d
 8005cd8:	08005d4d 	.word	0x08005d4d
 8005cdc:	08005d4d 	.word	0x08005d4d
 8005ce0:	08005d17 	.word	0x08005d17
 8005ce4:	08005d4d 	.word	0x08005d4d
 8005ce8:	08005d4d 	.word	0x08005d4d
 8005cec:	08005d4d 	.word	0x08005d4d
 8005cf0:	08005d29 	.word	0x08005d29
 8005cf4:	08005d4d 	.word	0x08005d4d
 8005cf8:	08005d4d 	.word	0x08005d4d
 8005cfc:	08005d4d 	.word	0x08005d4d
 8005d00:	08005d3b 	.word	0x08005d3b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0202 	orr.w	r2, r2, #2
 8005d12:	60da      	str	r2, [r3, #12]
      break;
 8005d14:	e01d      	b.n	8005d52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0204 	orr.w	r2, r2, #4
 8005d24:	60da      	str	r2, [r3, #12]
      break;
 8005d26:	e014      	b.n	8005d52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0208 	orr.w	r2, r2, #8
 8005d36:	60da      	str	r2, [r3, #12]
      break;
 8005d38:	e00b      	b.n	8005d52 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 0210 	orr.w	r2, r2, #16
 8005d48:	60da      	str	r2, [r3, #12]
      break;
 8005d4a:	e002      	b.n	8005d52 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d50:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d148      	bne.n	8005dea <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fe95 	bl	8006a90 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a22      	ldr	r2, [pc, #136]	@ (8005df4 <HAL_TIM_IC_Start_IT+0x234>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d022      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d78:	d01d      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005df8 <HAL_TIM_IC_Start_IT+0x238>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d018      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1c      	ldr	r2, [pc, #112]	@ (8005dfc <HAL_TIM_IC_Start_IT+0x23c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d013      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1b      	ldr	r2, [pc, #108]	@ (8005e00 <HAL_TIM_IC_Start_IT+0x240>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00e      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a19      	ldr	r2, [pc, #100]	@ (8005e04 <HAL_TIM_IC_Start_IT+0x244>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d009      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a18      	ldr	r2, [pc, #96]	@ (8005e08 <HAL_TIM_IC_Start_IT+0x248>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d004      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0x1f6>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a16      	ldr	r2, [pc, #88]	@ (8005e0c <HAL_TIM_IC_Start_IT+0x24c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d111      	bne.n	8005dda <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b06      	cmp	r3, #6
 8005dc6:	d010      	beq.n	8005dea <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd8:	e007      	b.n	8005dea <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0201 	orr.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40010000 	.word	0x40010000
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	40000800 	.word	0x40000800
 8005e00:	40000c00 	.word	0x40000c00
 8005e04:	40010400 	.word	0x40010400
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40001800 	.word	0x40001800

08005e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d020      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01b      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0202 	mvn.w	r2, #2
 8005e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fb fa50 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fa70 	bl	8006348 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fa77 	bl	800635c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d020      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01b      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0204 	mvn.w	r2, #4
 8005e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fb fa2a 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa4a 	bl	8006348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fa51 	bl	800635c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d020      	beq.n	8005f0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0208 	mvn.w	r2, #8
 8005edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2204      	movs	r2, #4
 8005ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fb fa04 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa24 	bl	8006348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fa2b 	bl	800635c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d020      	beq.n	8005f58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0210 	mvn.w	r2, #16
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2208      	movs	r2, #8
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fb f9de 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9fe 	bl	8006348 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fa05 	bl	800635c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00c      	beq.n	8005f7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0201 	mvn.w	r2, #1
 8005f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f9dc 	bl	8006334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00c      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d007      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fe76 	bl	8006c8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00c      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f9d6 	bl	8006370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00c      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0220 	mvn.w	r2, #32
 8005fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fe48 	bl	8006c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_TIM_IC_ConfigChannel+0x1e>
 800600a:	2302      	movs	r3, #2
 800600c:	e088      	b.n	8006120 <HAL_TIM_IC_ConfigChannel+0x130>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d11b      	bne.n	8006054 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800602c:	f000 fc06 	bl	800683c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 020c 	bic.w	r2, r2, #12
 800603e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6999      	ldr	r1, [r3, #24]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	619a      	str	r2, [r3, #24]
 8006052:	e060      	b.n	8006116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b04      	cmp	r3, #4
 8006058:	d11c      	bne.n	8006094 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800606a:	f000 fc5b 	bl	8006924 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699a      	ldr	r2, [r3, #24]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800607c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6999      	ldr	r1, [r3, #24]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	021a      	lsls	r2, r3, #8
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	619a      	str	r2, [r3, #24]
 8006092:	e040      	b.n	8006116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b08      	cmp	r3, #8
 8006098:	d11b      	bne.n	80060d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80060aa:	f000 fc78 	bl	800699e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 020c 	bic.w	r2, r2, #12
 80060bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69d9      	ldr	r1, [r3, #28]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	61da      	str	r2, [r3, #28]
 80060d0:	e021      	b.n	8006116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b0c      	cmp	r3, #12
 80060d6:	d11c      	bne.n	8006112 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80060e8:	f000 fc95 	bl	8006a16 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69da      	ldr	r2, [r3, #28]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80060fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69d9      	ldr	r1, [r3, #28]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	021a      	lsls	r2, r3, #8
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	61da      	str	r2, [r3, #28]
 8006110:	e001      	b.n	8006116 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800611e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006142:	2302      	movs	r3, #2
 8006144:	e0ae      	b.n	80062a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b0c      	cmp	r3, #12
 8006152:	f200 809f 	bhi.w	8006294 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006156:	a201      	add	r2, pc, #4	@ (adr r2, 800615c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	08006191 	.word	0x08006191
 8006160:	08006295 	.word	0x08006295
 8006164:	08006295 	.word	0x08006295
 8006168:	08006295 	.word	0x08006295
 800616c:	080061d1 	.word	0x080061d1
 8006170:	08006295 	.word	0x08006295
 8006174:	08006295 	.word	0x08006295
 8006178:	08006295 	.word	0x08006295
 800617c:	08006213 	.word	0x08006213
 8006180:	08006295 	.word	0x08006295
 8006184:	08006295 	.word	0x08006295
 8006188:	08006295 	.word	0x08006295
 800618c:	08006253 	.word	0x08006253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68b9      	ldr	r1, [r7, #8]
 8006196:	4618      	mov	r0, r3
 8006198:	f000 f9a0 	bl	80064dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0208 	orr.w	r2, r2, #8
 80061aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0204 	bic.w	r2, r2, #4
 80061ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6999      	ldr	r1, [r3, #24]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	619a      	str	r2, [r3, #24]
      break;
 80061ce:	e064      	b.n	800629a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68b9      	ldr	r1, [r7, #8]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 f9f0 	bl	80065bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6999      	ldr	r1, [r3, #24]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	021a      	lsls	r2, r3, #8
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	619a      	str	r2, [r3, #24]
      break;
 8006210:	e043      	b.n	800629a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fa45 	bl	80066a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0208 	orr.w	r2, r2, #8
 800622c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0204 	bic.w	r2, r2, #4
 800623c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69d9      	ldr	r1, [r3, #28]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	61da      	str	r2, [r3, #28]
      break;
 8006250:	e023      	b.n	800629a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fa99 	bl	8006790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69da      	ldr	r2, [r3, #28]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800626c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800627c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69d9      	ldr	r1, [r3, #28]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	021a      	lsls	r2, r3, #8
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	61da      	str	r2, [r3, #28]
      break;
 8006292:	e002      	b.n	800629a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	75fb      	strb	r3, [r7, #23]
      break;
 8006298:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b0c      	cmp	r3, #12
 80062be:	d831      	bhi.n	8006324 <HAL_TIM_ReadCapturedValue+0x78>
 80062c0:	a201      	add	r2, pc, #4	@ (adr r2, 80062c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	080062fd 	.word	0x080062fd
 80062cc:	08006325 	.word	0x08006325
 80062d0:	08006325 	.word	0x08006325
 80062d4:	08006325 	.word	0x08006325
 80062d8:	08006307 	.word	0x08006307
 80062dc:	08006325 	.word	0x08006325
 80062e0:	08006325 	.word	0x08006325
 80062e4:	08006325 	.word	0x08006325
 80062e8:	08006311 	.word	0x08006311
 80062ec:	08006325 	.word	0x08006325
 80062f0:	08006325 	.word	0x08006325
 80062f4:	08006325 	.word	0x08006325
 80062f8:	0800631b 	.word	0x0800631b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006302:	60fb      	str	r3, [r7, #12]

      break;
 8006304:	e00f      	b.n	8006326 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630c:	60fb      	str	r3, [r7, #12]

      break;
 800630e:	e00a      	b.n	8006326 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006316:	60fb      	str	r3, [r7, #12]

      break;
 8006318:	e005      	b.n	8006326 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006320:	60fb      	str	r3, [r7, #12]

      break;
 8006322:	e000      	b.n	8006326 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006324:	bf00      	nop
  }

  return tmpreg;
 8006326:	68fb      	ldr	r3, [r7, #12]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a46      	ldr	r2, [pc, #280]	@ (80064b0 <TIM_Base_SetConfig+0x12c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d013      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a2:	d00f      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a43      	ldr	r2, [pc, #268]	@ (80064b4 <TIM_Base_SetConfig+0x130>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00b      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a42      	ldr	r2, [pc, #264]	@ (80064b8 <TIM_Base_SetConfig+0x134>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d007      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a41      	ldr	r2, [pc, #260]	@ (80064bc <TIM_Base_SetConfig+0x138>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a40      	ldr	r2, [pc, #256]	@ (80064c0 <TIM_Base_SetConfig+0x13c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d108      	bne.n	80063d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a35      	ldr	r2, [pc, #212]	@ (80064b0 <TIM_Base_SetConfig+0x12c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d02b      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063e4:	d027      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a32      	ldr	r2, [pc, #200]	@ (80064b4 <TIM_Base_SetConfig+0x130>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d023      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a31      	ldr	r2, [pc, #196]	@ (80064b8 <TIM_Base_SetConfig+0x134>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d01f      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a30      	ldr	r2, [pc, #192]	@ (80064bc <TIM_Base_SetConfig+0x138>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d01b      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2f      	ldr	r2, [pc, #188]	@ (80064c0 <TIM_Base_SetConfig+0x13c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d017      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2e      	ldr	r2, [pc, #184]	@ (80064c4 <TIM_Base_SetConfig+0x140>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d013      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2d      	ldr	r2, [pc, #180]	@ (80064c8 <TIM_Base_SetConfig+0x144>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00f      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a2c      	ldr	r2, [pc, #176]	@ (80064cc <TIM_Base_SetConfig+0x148>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00b      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a2b      	ldr	r2, [pc, #172]	@ (80064d0 <TIM_Base_SetConfig+0x14c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d007      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a2a      	ldr	r2, [pc, #168]	@ (80064d4 <TIM_Base_SetConfig+0x150>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a29      	ldr	r2, [pc, #164]	@ (80064d8 <TIM_Base_SetConfig+0x154>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d108      	bne.n	8006448 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800643c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	689a      	ldr	r2, [r3, #8]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a10      	ldr	r2, [pc, #64]	@ (80064b0 <TIM_Base_SetConfig+0x12c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_Base_SetConfig+0xf8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a12      	ldr	r2, [pc, #72]	@ (80064c0 <TIM_Base_SetConfig+0x13c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d103      	bne.n	8006484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b01      	cmp	r3, #1
 8006494:	d105      	bne.n	80064a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f023 0201 	bic.w	r2, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	611a      	str	r2, [r3, #16]
  }
}
 80064a2:	bf00      	nop
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40010000 	.word	0x40010000
 80064b4:	40000400 	.word	0x40000400
 80064b8:	40000800 	.word	0x40000800
 80064bc:	40000c00 	.word	0x40000c00
 80064c0:	40010400 	.word	0x40010400
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40014400 	.word	0x40014400
 80064cc:	40014800 	.word	0x40014800
 80064d0:	40001800 	.word	0x40001800
 80064d4:	40001c00 	.word	0x40001c00
 80064d8:	40002000 	.word	0x40002000

080064dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	f023 0201 	bic.w	r2, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0303 	bic.w	r3, r3, #3
 8006512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f023 0302 	bic.w	r3, r3, #2
 8006524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a20      	ldr	r2, [pc, #128]	@ (80065b4 <TIM_OC1_SetConfig+0xd8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d003      	beq.n	8006540 <TIM_OC1_SetConfig+0x64>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a1f      	ldr	r2, [pc, #124]	@ (80065b8 <TIM_OC1_SetConfig+0xdc>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d10c      	bne.n	800655a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f023 0308 	bic.w	r3, r3, #8
 8006546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f023 0304 	bic.w	r3, r3, #4
 8006558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a15      	ldr	r2, [pc, #84]	@ (80065b4 <TIM_OC1_SetConfig+0xd8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <TIM_OC1_SetConfig+0x8e>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a14      	ldr	r2, [pc, #80]	@ (80065b8 <TIM_OC1_SetConfig+0xdc>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d111      	bne.n	800658e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	621a      	str	r2, [r3, #32]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	40010000 	.word	0x40010000
 80065b8:	40010400 	.word	0x40010400

080065bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	f023 0210 	bic.w	r2, r3, #16
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	021b      	lsls	r3, r3, #8
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f023 0320 	bic.w	r3, r3, #32
 8006606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a22      	ldr	r2, [pc, #136]	@ (80066a0 <TIM_OC2_SetConfig+0xe4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d003      	beq.n	8006624 <TIM_OC2_SetConfig+0x68>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a21      	ldr	r2, [pc, #132]	@ (80066a4 <TIM_OC2_SetConfig+0xe8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d10d      	bne.n	8006640 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800662a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800663e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a17      	ldr	r2, [pc, #92]	@ (80066a0 <TIM_OC2_SetConfig+0xe4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_OC2_SetConfig+0x94>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a16      	ldr	r2, [pc, #88]	@ (80066a4 <TIM_OC2_SetConfig+0xe8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d113      	bne.n	8006678 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800665e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	621a      	str	r2, [r3, #32]
}
 8006692:	bf00      	nop
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40010000 	.word	0x40010000
 80066a4:	40010400 	.word	0x40010400

080066a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0303 	bic.w	r3, r3, #3
 80066de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a21      	ldr	r2, [pc, #132]	@ (8006788 <TIM_OC3_SetConfig+0xe0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d003      	beq.n	800670e <TIM_OC3_SetConfig+0x66>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a20      	ldr	r2, [pc, #128]	@ (800678c <TIM_OC3_SetConfig+0xe4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d10d      	bne.n	800672a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a16      	ldr	r2, [pc, #88]	@ (8006788 <TIM_OC3_SetConfig+0xe0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d003      	beq.n	800673a <TIM_OC3_SetConfig+0x92>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a15      	ldr	r2, [pc, #84]	@ (800678c <TIM_OC3_SetConfig+0xe4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d113      	bne.n	8006762 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	4313      	orrs	r3, r2
 8006754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	621a      	str	r2, [r3, #32]
}
 800677c:	bf00      	nop
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	40010000 	.word	0x40010000
 800678c:	40010400 	.word	0x40010400

08006790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	031b      	lsls	r3, r3, #12
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a12      	ldr	r2, [pc, #72]	@ (8006834 <TIM_OC4_SetConfig+0xa4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <TIM_OC4_SetConfig+0x68>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a11      	ldr	r2, [pc, #68]	@ (8006838 <TIM_OC4_SetConfig+0xa8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d109      	bne.n	800680c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	019b      	lsls	r3, r3, #6
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	621a      	str	r2, [r3, #32]
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40010000 	.word	0x40010000
 8006838:	40010400 	.word	0x40010400

0800683c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	f023 0201 	bic.w	r2, r3, #1
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4a28      	ldr	r2, [pc, #160]	@ (8006908 <TIM_TI1_SetConfig+0xcc>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d01b      	beq.n	80068a2 <TIM_TI1_SetConfig+0x66>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006870:	d017      	beq.n	80068a2 <TIM_TI1_SetConfig+0x66>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4a25      	ldr	r2, [pc, #148]	@ (800690c <TIM_TI1_SetConfig+0xd0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d013      	beq.n	80068a2 <TIM_TI1_SetConfig+0x66>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4a24      	ldr	r2, [pc, #144]	@ (8006910 <TIM_TI1_SetConfig+0xd4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00f      	beq.n	80068a2 <TIM_TI1_SetConfig+0x66>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4a23      	ldr	r2, [pc, #140]	@ (8006914 <TIM_TI1_SetConfig+0xd8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00b      	beq.n	80068a2 <TIM_TI1_SetConfig+0x66>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4a22      	ldr	r2, [pc, #136]	@ (8006918 <TIM_TI1_SetConfig+0xdc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d007      	beq.n	80068a2 <TIM_TI1_SetConfig+0x66>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4a21      	ldr	r2, [pc, #132]	@ (800691c <TIM_TI1_SetConfig+0xe0>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d003      	beq.n	80068a2 <TIM_TI1_SetConfig+0x66>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4a20      	ldr	r2, [pc, #128]	@ (8006920 <TIM_TI1_SetConfig+0xe4>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d101      	bne.n	80068a6 <TIM_TI1_SetConfig+0x6a>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <TIM_TI1_SetConfig+0x6c>
 80068a6:	2300      	movs	r3, #0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 0303 	bic.w	r3, r3, #3
 80068b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	e003      	b.n	80068c6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f043 0301 	orr.w	r3, r3, #1
 80068c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f023 030a 	bic.w	r3, r3, #10
 80068e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f003 030a 	and.w	r3, r3, #10
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40010000 	.word	0x40010000
 800690c:	40000400 	.word	0x40000400
 8006910:	40000800 	.word	0x40000800
 8006914:	40000c00 	.word	0x40000c00
 8006918:	40010400 	.word	0x40010400
 800691c:	40014000 	.word	0x40014000
 8006920:	40001800 	.word	0x40001800

08006924 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	f023 0210 	bic.w	r2, r3, #16
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006950:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4313      	orrs	r3, r2
 800695a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	031b      	lsls	r3, r3, #12
 8006968:	b29b      	uxth	r3, r3
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006976:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	621a      	str	r2, [r3, #32]
}
 8006992:	bf00      	nop
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800699e:	b480      	push	{r7}
 80069a0:	b087      	sub	sp, #28
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	607a      	str	r2, [r7, #4]
 80069aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f023 0303 	bic.w	r3, r3, #3
 80069ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	011b      	lsls	r3, r3, #4
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80069ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b087      	sub	sp, #28
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a42:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	021b      	lsls	r3, r3, #8
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	031b      	lsls	r3, r3, #12
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006a68:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	031b      	lsls	r3, r3, #12
 8006a6e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	621a      	str	r2, [r3, #32]
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f003 031f 	and.w	r3, r3, #31
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a1a      	ldr	r2, [r3, #32]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	401a      	ands	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	621a      	str	r2, [r3, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
	...

08006adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006af0:	2302      	movs	r3, #2
 8006af2:	e05a      	b.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a21      	ldr	r2, [pc, #132]	@ (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d022      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b40:	d01d      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1d      	ldr	r2, [pc, #116]	@ (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d018      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00e      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a18      	ldr	r2, [pc, #96]	@ (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d009      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a17      	ldr	r2, [pc, #92]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d004      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a15      	ldr	r2, [pc, #84]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d10c      	bne.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	40010000 	.word	0x40010000
 8006bbc:	40000400 	.word	0x40000400
 8006bc0:	40000800 	.word	0x40000800
 8006bc4:	40000c00 	.word	0x40000c00
 8006bc8:	40010400 	.word	0x40010400
 8006bcc:	40014000 	.word	0x40014000
 8006bd0:	40001800 	.word	0x40001800

08006bd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e03d      	b.n	8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <gcvt>:
 8006ca0:	b530      	push	{r4, r5, lr}
 8006ca2:	ed2d 8b02 	vpush	{d8}
 8006ca6:	eeb0 8a40 	vmov.f32	s16, s0
 8006caa:	eef0 8a60 	vmov.f32	s17, s1
 8006cae:	460c      	mov	r4, r1
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	ec51 0b10 	vmov	r0, r1, d0
 8006cbc:	f7f9 ff0e 	bl	8000adc <__aeabi_dcmplt>
 8006cc0:	4622      	mov	r2, r4
 8006cc2:	b118      	cbz	r0, 8006ccc <gcvt+0x2c>
 8006cc4:	232d      	movs	r3, #45	@ 0x2d
 8006cc6:	f802 3b01 	strb.w	r3, [r2], #1
 8006cca:	3d01      	subs	r5, #1
 8006ccc:	2300      	movs	r3, #0
 8006cce:	4809      	ldr	r0, [pc, #36]	@ (8006cf4 <gcvt+0x54>)
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	2367      	movs	r3, #103	@ 0x67
 8006cd6:	eeb0 0a48 	vmov.f32	s0, s16
 8006cda:	eef0 0a68 	vmov.f32	s1, s17
 8006cde:	6800      	ldr	r0, [r0, #0]
 8006ce0:	f000 fb06 	bl	80072f0 <_gcvt>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	bf18      	it	ne
 8006ce8:	4620      	movne	r0, r4
 8006cea:	b003      	add	sp, #12
 8006cec:	ecbd 8b02 	vpop	{d8}
 8006cf0:	bd30      	pop	{r4, r5, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000030 	.word	0x20000030

08006cf8 <std>:
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	b510      	push	{r4, lr}
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8006d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d06:	6083      	str	r3, [r0, #8]
 8006d08:	8181      	strh	r1, [r0, #12]
 8006d0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d0c:	81c2      	strh	r2, [r0, #14]
 8006d0e:	6183      	str	r3, [r0, #24]
 8006d10:	4619      	mov	r1, r3
 8006d12:	2208      	movs	r2, #8
 8006d14:	305c      	adds	r0, #92	@ 0x5c
 8006d16:	f000 f8f4 	bl	8006f02 <memset>
 8006d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d50 <std+0x58>)
 8006d1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <std+0x5c>)
 8006d20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d22:	4b0d      	ldr	r3, [pc, #52]	@ (8006d58 <std+0x60>)
 8006d24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d26:	4b0d      	ldr	r3, [pc, #52]	@ (8006d5c <std+0x64>)
 8006d28:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d60 <std+0x68>)
 8006d2c:	6224      	str	r4, [r4, #32]
 8006d2e:	429c      	cmp	r4, r3
 8006d30:	d006      	beq.n	8006d40 <std+0x48>
 8006d32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d36:	4294      	cmp	r4, r2
 8006d38:	d002      	beq.n	8006d40 <std+0x48>
 8006d3a:	33d0      	adds	r3, #208	@ 0xd0
 8006d3c:	429c      	cmp	r4, r3
 8006d3e:	d105      	bne.n	8006d4c <std+0x54>
 8006d40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d48:	f000 b962 	b.w	8007010 <__retarget_lock_init_recursive>
 8006d4c:	bd10      	pop	{r4, pc}
 8006d4e:	bf00      	nop
 8006d50:	08006e7d 	.word	0x08006e7d
 8006d54:	08006e9f 	.word	0x08006e9f
 8006d58:	08006ed7 	.word	0x08006ed7
 8006d5c:	08006efb 	.word	0x08006efb
 8006d60:	200004a8 	.word	0x200004a8

08006d64 <stdio_exit_handler>:
 8006d64:	4a02      	ldr	r2, [pc, #8]	@ (8006d70 <stdio_exit_handler+0xc>)
 8006d66:	4903      	ldr	r1, [pc, #12]	@ (8006d74 <stdio_exit_handler+0x10>)
 8006d68:	4803      	ldr	r0, [pc, #12]	@ (8006d78 <stdio_exit_handler+0x14>)
 8006d6a:	f000 b869 	b.w	8006e40 <_fwalk_sglue>
 8006d6e:	bf00      	nop
 8006d70:	20000024 	.word	0x20000024
 8006d74:	08007581 	.word	0x08007581
 8006d78:	20000034 	.word	0x20000034

08006d7c <cleanup_stdio>:
 8006d7c:	6841      	ldr	r1, [r0, #4]
 8006d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006db0 <cleanup_stdio+0x34>)
 8006d80:	4299      	cmp	r1, r3
 8006d82:	b510      	push	{r4, lr}
 8006d84:	4604      	mov	r4, r0
 8006d86:	d001      	beq.n	8006d8c <cleanup_stdio+0x10>
 8006d88:	f000 fbfa 	bl	8007580 <_fflush_r>
 8006d8c:	68a1      	ldr	r1, [r4, #8]
 8006d8e:	4b09      	ldr	r3, [pc, #36]	@ (8006db4 <cleanup_stdio+0x38>)
 8006d90:	4299      	cmp	r1, r3
 8006d92:	d002      	beq.n	8006d9a <cleanup_stdio+0x1e>
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 fbf3 	bl	8007580 <_fflush_r>
 8006d9a:	68e1      	ldr	r1, [r4, #12]
 8006d9c:	4b06      	ldr	r3, [pc, #24]	@ (8006db8 <cleanup_stdio+0x3c>)
 8006d9e:	4299      	cmp	r1, r3
 8006da0:	d004      	beq.n	8006dac <cleanup_stdio+0x30>
 8006da2:	4620      	mov	r0, r4
 8006da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da8:	f000 bbea 	b.w	8007580 <_fflush_r>
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	bf00      	nop
 8006db0:	200004a8 	.word	0x200004a8
 8006db4:	20000510 	.word	0x20000510
 8006db8:	20000578 	.word	0x20000578

08006dbc <global_stdio_init.part.0>:
 8006dbc:	b510      	push	{r4, lr}
 8006dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8006dec <global_stdio_init.part.0+0x30>)
 8006dc0:	4c0b      	ldr	r4, [pc, #44]	@ (8006df0 <global_stdio_init.part.0+0x34>)
 8006dc2:	4a0c      	ldr	r2, [pc, #48]	@ (8006df4 <global_stdio_init.part.0+0x38>)
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2104      	movs	r1, #4
 8006dcc:	f7ff ff94 	bl	8006cf8 <std>
 8006dd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	2109      	movs	r1, #9
 8006dd8:	f7ff ff8e 	bl	8006cf8 <std>
 8006ddc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006de0:	2202      	movs	r2, #2
 8006de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de6:	2112      	movs	r1, #18
 8006de8:	f7ff bf86 	b.w	8006cf8 <std>
 8006dec:	200005e0 	.word	0x200005e0
 8006df0:	200004a8 	.word	0x200004a8
 8006df4:	08006d65 	.word	0x08006d65

08006df8 <__sfp_lock_acquire>:
 8006df8:	4801      	ldr	r0, [pc, #4]	@ (8006e00 <__sfp_lock_acquire+0x8>)
 8006dfa:	f000 b90a 	b.w	8007012 <__retarget_lock_acquire_recursive>
 8006dfe:	bf00      	nop
 8006e00:	200005e9 	.word	0x200005e9

08006e04 <__sfp_lock_release>:
 8006e04:	4801      	ldr	r0, [pc, #4]	@ (8006e0c <__sfp_lock_release+0x8>)
 8006e06:	f000 b905 	b.w	8007014 <__retarget_lock_release_recursive>
 8006e0a:	bf00      	nop
 8006e0c:	200005e9 	.word	0x200005e9

08006e10 <__sinit>:
 8006e10:	b510      	push	{r4, lr}
 8006e12:	4604      	mov	r4, r0
 8006e14:	f7ff fff0 	bl	8006df8 <__sfp_lock_acquire>
 8006e18:	6a23      	ldr	r3, [r4, #32]
 8006e1a:	b11b      	cbz	r3, 8006e24 <__sinit+0x14>
 8006e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e20:	f7ff bff0 	b.w	8006e04 <__sfp_lock_release>
 8006e24:	4b04      	ldr	r3, [pc, #16]	@ (8006e38 <__sinit+0x28>)
 8006e26:	6223      	str	r3, [r4, #32]
 8006e28:	4b04      	ldr	r3, [pc, #16]	@ (8006e3c <__sinit+0x2c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1f5      	bne.n	8006e1c <__sinit+0xc>
 8006e30:	f7ff ffc4 	bl	8006dbc <global_stdio_init.part.0>
 8006e34:	e7f2      	b.n	8006e1c <__sinit+0xc>
 8006e36:	bf00      	nop
 8006e38:	08006d7d 	.word	0x08006d7d
 8006e3c:	200005e0 	.word	0x200005e0

08006e40 <_fwalk_sglue>:
 8006e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e44:	4607      	mov	r7, r0
 8006e46:	4688      	mov	r8, r1
 8006e48:	4614      	mov	r4, r2
 8006e4a:	2600      	movs	r6, #0
 8006e4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e50:	f1b9 0901 	subs.w	r9, r9, #1
 8006e54:	d505      	bpl.n	8006e62 <_fwalk_sglue+0x22>
 8006e56:	6824      	ldr	r4, [r4, #0]
 8006e58:	2c00      	cmp	r4, #0
 8006e5a:	d1f7      	bne.n	8006e4c <_fwalk_sglue+0xc>
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e62:	89ab      	ldrh	r3, [r5, #12]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d907      	bls.n	8006e78 <_fwalk_sglue+0x38>
 8006e68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	d003      	beq.n	8006e78 <_fwalk_sglue+0x38>
 8006e70:	4629      	mov	r1, r5
 8006e72:	4638      	mov	r0, r7
 8006e74:	47c0      	blx	r8
 8006e76:	4306      	orrs	r6, r0
 8006e78:	3568      	adds	r5, #104	@ 0x68
 8006e7a:	e7e9      	b.n	8006e50 <_fwalk_sglue+0x10>

08006e7c <__sread>:
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	460c      	mov	r4, r1
 8006e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e84:	f000 f876 	bl	8006f74 <_read_r>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	bfab      	itete	ge
 8006e8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e90:	181b      	addge	r3, r3, r0
 8006e92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e96:	bfac      	ite	ge
 8006e98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e9a:	81a3      	strhlt	r3, [r4, #12]
 8006e9c:	bd10      	pop	{r4, pc}

08006e9e <__swrite>:
 8006e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea2:	461f      	mov	r7, r3
 8006ea4:	898b      	ldrh	r3, [r1, #12]
 8006ea6:	05db      	lsls	r3, r3, #23
 8006ea8:	4605      	mov	r5, r0
 8006eaa:	460c      	mov	r4, r1
 8006eac:	4616      	mov	r6, r2
 8006eae:	d505      	bpl.n	8006ebc <__swrite+0x1e>
 8006eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f000 f84a 	bl	8006f50 <_lseek_r>
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ec6:	81a3      	strh	r3, [r4, #12]
 8006ec8:	4632      	mov	r2, r6
 8006eca:	463b      	mov	r3, r7
 8006ecc:	4628      	mov	r0, r5
 8006ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed2:	f000 b861 	b.w	8006f98 <_write_r>

08006ed6 <__sseek>:
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	460c      	mov	r4, r1
 8006eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ede:	f000 f837 	bl	8006f50 <_lseek_r>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	bf15      	itete	ne
 8006ee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006eea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006eee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ef2:	81a3      	strheq	r3, [r4, #12]
 8006ef4:	bf18      	it	ne
 8006ef6:	81a3      	strhne	r3, [r4, #12]
 8006ef8:	bd10      	pop	{r4, pc}

08006efa <__sclose>:
 8006efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006efe:	f000 b817 	b.w	8006f30 <_close_r>

08006f02 <memset>:
 8006f02:	4402      	add	r2, r0
 8006f04:	4603      	mov	r3, r0
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d100      	bne.n	8006f0c <memset+0xa>
 8006f0a:	4770      	bx	lr
 8006f0c:	f803 1b01 	strb.w	r1, [r3], #1
 8006f10:	e7f9      	b.n	8006f06 <memset+0x4>

08006f12 <strcat>:
 8006f12:	b510      	push	{r4, lr}
 8006f14:	4602      	mov	r2, r0
 8006f16:	7814      	ldrb	r4, [r2, #0]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	3201      	adds	r2, #1
 8006f1c:	2c00      	cmp	r4, #0
 8006f1e:	d1fa      	bne.n	8006f16 <strcat+0x4>
 8006f20:	3b01      	subs	r3, #1
 8006f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f2a:	2a00      	cmp	r2, #0
 8006f2c:	d1f9      	bne.n	8006f22 <strcat+0x10>
 8006f2e:	bd10      	pop	{r4, pc}

08006f30 <_close_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4d06      	ldr	r5, [pc, #24]	@ (8006f4c <_close_r+0x1c>)
 8006f34:	2300      	movs	r3, #0
 8006f36:	4604      	mov	r4, r0
 8006f38:	4608      	mov	r0, r1
 8006f3a:	602b      	str	r3, [r5, #0]
 8006f3c:	f7fb fde0 	bl	8002b00 <_close>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d102      	bne.n	8006f4a <_close_r+0x1a>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	b103      	cbz	r3, 8006f4a <_close_r+0x1a>
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	200005e4 	.word	0x200005e4

08006f50 <_lseek_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4d07      	ldr	r5, [pc, #28]	@ (8006f70 <_lseek_r+0x20>)
 8006f54:	4604      	mov	r4, r0
 8006f56:	4608      	mov	r0, r1
 8006f58:	4611      	mov	r1, r2
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	602a      	str	r2, [r5, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f7fb fdf5 	bl	8002b4e <_lseek>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_lseek_r+0x1e>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_lseek_r+0x1e>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	200005e4 	.word	0x200005e4

08006f74 <_read_r>:
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4d07      	ldr	r5, [pc, #28]	@ (8006f94 <_read_r+0x20>)
 8006f78:	4604      	mov	r4, r0
 8006f7a:	4608      	mov	r0, r1
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	2200      	movs	r2, #0
 8006f80:	602a      	str	r2, [r5, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	f7fb fd83 	bl	8002a8e <_read>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_read_r+0x1e>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_read_r+0x1e>
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	200005e4 	.word	0x200005e4

08006f98 <_write_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d07      	ldr	r5, [pc, #28]	@ (8006fb8 <_write_r+0x20>)
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	602a      	str	r2, [r5, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f7fb fd8e 	bl	8002ac8 <_write>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_write_r+0x1e>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_write_r+0x1e>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	200005e4 	.word	0x200005e4

08006fbc <__errno>:
 8006fbc:	4b01      	ldr	r3, [pc, #4]	@ (8006fc4 <__errno+0x8>)
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	20000030 	.word	0x20000030

08006fc8 <__libc_init_array>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	4d0d      	ldr	r5, [pc, #52]	@ (8007000 <__libc_init_array+0x38>)
 8006fcc:	4c0d      	ldr	r4, [pc, #52]	@ (8007004 <__libc_init_array+0x3c>)
 8006fce:	1b64      	subs	r4, r4, r5
 8006fd0:	10a4      	asrs	r4, r4, #2
 8006fd2:	2600      	movs	r6, #0
 8006fd4:	42a6      	cmp	r6, r4
 8006fd6:	d109      	bne.n	8006fec <__libc_init_array+0x24>
 8006fd8:	4d0b      	ldr	r5, [pc, #44]	@ (8007008 <__libc_init_array+0x40>)
 8006fda:	4c0c      	ldr	r4, [pc, #48]	@ (800700c <__libc_init_array+0x44>)
 8006fdc:	f003 fa0c 	bl	800a3f8 <_init>
 8006fe0:	1b64      	subs	r4, r4, r5
 8006fe2:	10a4      	asrs	r4, r4, #2
 8006fe4:	2600      	movs	r6, #0
 8006fe6:	42a6      	cmp	r6, r4
 8006fe8:	d105      	bne.n	8006ff6 <__libc_init_array+0x2e>
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff0:	4798      	blx	r3
 8006ff2:	3601      	adds	r6, #1
 8006ff4:	e7ee      	b.n	8006fd4 <__libc_init_array+0xc>
 8006ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ffa:	4798      	blx	r3
 8006ffc:	3601      	adds	r6, #1
 8006ffe:	e7f2      	b.n	8006fe6 <__libc_init_array+0x1e>
 8007000:	0800a878 	.word	0x0800a878
 8007004:	0800a878 	.word	0x0800a878
 8007008:	0800a878 	.word	0x0800a878
 800700c:	0800a87c 	.word	0x0800a87c

08007010 <__retarget_lock_init_recursive>:
 8007010:	4770      	bx	lr

08007012 <__retarget_lock_acquire_recursive>:
 8007012:	4770      	bx	lr

08007014 <__retarget_lock_release_recursive>:
 8007014:	4770      	bx	lr
	...

08007018 <_free_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4605      	mov	r5, r0
 800701c:	2900      	cmp	r1, #0
 800701e:	d041      	beq.n	80070a4 <_free_r+0x8c>
 8007020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007024:	1f0c      	subs	r4, r1, #4
 8007026:	2b00      	cmp	r3, #0
 8007028:	bfb8      	it	lt
 800702a:	18e4      	addlt	r4, r4, r3
 800702c:	f000 f8e0 	bl	80071f0 <__malloc_lock>
 8007030:	4a1d      	ldr	r2, [pc, #116]	@ (80070a8 <_free_r+0x90>)
 8007032:	6813      	ldr	r3, [r2, #0]
 8007034:	b933      	cbnz	r3, 8007044 <_free_r+0x2c>
 8007036:	6063      	str	r3, [r4, #4]
 8007038:	6014      	str	r4, [r2, #0]
 800703a:	4628      	mov	r0, r5
 800703c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007040:	f000 b8dc 	b.w	80071fc <__malloc_unlock>
 8007044:	42a3      	cmp	r3, r4
 8007046:	d908      	bls.n	800705a <_free_r+0x42>
 8007048:	6820      	ldr	r0, [r4, #0]
 800704a:	1821      	adds	r1, r4, r0
 800704c:	428b      	cmp	r3, r1
 800704e:	bf01      	itttt	eq
 8007050:	6819      	ldreq	r1, [r3, #0]
 8007052:	685b      	ldreq	r3, [r3, #4]
 8007054:	1809      	addeq	r1, r1, r0
 8007056:	6021      	streq	r1, [r4, #0]
 8007058:	e7ed      	b.n	8007036 <_free_r+0x1e>
 800705a:	461a      	mov	r2, r3
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	b10b      	cbz	r3, 8007064 <_free_r+0x4c>
 8007060:	42a3      	cmp	r3, r4
 8007062:	d9fa      	bls.n	800705a <_free_r+0x42>
 8007064:	6811      	ldr	r1, [r2, #0]
 8007066:	1850      	adds	r0, r2, r1
 8007068:	42a0      	cmp	r0, r4
 800706a:	d10b      	bne.n	8007084 <_free_r+0x6c>
 800706c:	6820      	ldr	r0, [r4, #0]
 800706e:	4401      	add	r1, r0
 8007070:	1850      	adds	r0, r2, r1
 8007072:	4283      	cmp	r3, r0
 8007074:	6011      	str	r1, [r2, #0]
 8007076:	d1e0      	bne.n	800703a <_free_r+0x22>
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	6053      	str	r3, [r2, #4]
 800707e:	4408      	add	r0, r1
 8007080:	6010      	str	r0, [r2, #0]
 8007082:	e7da      	b.n	800703a <_free_r+0x22>
 8007084:	d902      	bls.n	800708c <_free_r+0x74>
 8007086:	230c      	movs	r3, #12
 8007088:	602b      	str	r3, [r5, #0]
 800708a:	e7d6      	b.n	800703a <_free_r+0x22>
 800708c:	6820      	ldr	r0, [r4, #0]
 800708e:	1821      	adds	r1, r4, r0
 8007090:	428b      	cmp	r3, r1
 8007092:	bf04      	itt	eq
 8007094:	6819      	ldreq	r1, [r3, #0]
 8007096:	685b      	ldreq	r3, [r3, #4]
 8007098:	6063      	str	r3, [r4, #4]
 800709a:	bf04      	itt	eq
 800709c:	1809      	addeq	r1, r1, r0
 800709e:	6021      	streq	r1, [r4, #0]
 80070a0:	6054      	str	r4, [r2, #4]
 80070a2:	e7ca      	b.n	800703a <_free_r+0x22>
 80070a4:	bd38      	pop	{r3, r4, r5, pc}
 80070a6:	bf00      	nop
 80070a8:	200005f0 	.word	0x200005f0

080070ac <sbrk_aligned>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	4e0f      	ldr	r6, [pc, #60]	@ (80070ec <sbrk_aligned+0x40>)
 80070b0:	460c      	mov	r4, r1
 80070b2:	6831      	ldr	r1, [r6, #0]
 80070b4:	4605      	mov	r5, r0
 80070b6:	b911      	cbnz	r1, 80070be <sbrk_aligned+0x12>
 80070b8:	f000 fa8a 	bl	80075d0 <_sbrk_r>
 80070bc:	6030      	str	r0, [r6, #0]
 80070be:	4621      	mov	r1, r4
 80070c0:	4628      	mov	r0, r5
 80070c2:	f000 fa85 	bl	80075d0 <_sbrk_r>
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	d103      	bne.n	80070d2 <sbrk_aligned+0x26>
 80070ca:	f04f 34ff 	mov.w	r4, #4294967295
 80070ce:	4620      	mov	r0, r4
 80070d0:	bd70      	pop	{r4, r5, r6, pc}
 80070d2:	1cc4      	adds	r4, r0, #3
 80070d4:	f024 0403 	bic.w	r4, r4, #3
 80070d8:	42a0      	cmp	r0, r4
 80070da:	d0f8      	beq.n	80070ce <sbrk_aligned+0x22>
 80070dc:	1a21      	subs	r1, r4, r0
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 fa76 	bl	80075d0 <_sbrk_r>
 80070e4:	3001      	adds	r0, #1
 80070e6:	d1f2      	bne.n	80070ce <sbrk_aligned+0x22>
 80070e8:	e7ef      	b.n	80070ca <sbrk_aligned+0x1e>
 80070ea:	bf00      	nop
 80070ec:	200005ec 	.word	0x200005ec

080070f0 <_malloc_r>:
 80070f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	1ccd      	adds	r5, r1, #3
 80070f6:	f025 0503 	bic.w	r5, r5, #3
 80070fa:	3508      	adds	r5, #8
 80070fc:	2d0c      	cmp	r5, #12
 80070fe:	bf38      	it	cc
 8007100:	250c      	movcc	r5, #12
 8007102:	2d00      	cmp	r5, #0
 8007104:	4606      	mov	r6, r0
 8007106:	db01      	blt.n	800710c <_malloc_r+0x1c>
 8007108:	42a9      	cmp	r1, r5
 800710a:	d904      	bls.n	8007116 <_malloc_r+0x26>
 800710c:	230c      	movs	r3, #12
 800710e:	6033      	str	r3, [r6, #0]
 8007110:	2000      	movs	r0, #0
 8007112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071ec <_malloc_r+0xfc>
 800711a:	f000 f869 	bl	80071f0 <__malloc_lock>
 800711e:	f8d8 3000 	ldr.w	r3, [r8]
 8007122:	461c      	mov	r4, r3
 8007124:	bb44      	cbnz	r4, 8007178 <_malloc_r+0x88>
 8007126:	4629      	mov	r1, r5
 8007128:	4630      	mov	r0, r6
 800712a:	f7ff ffbf 	bl	80070ac <sbrk_aligned>
 800712e:	1c43      	adds	r3, r0, #1
 8007130:	4604      	mov	r4, r0
 8007132:	d158      	bne.n	80071e6 <_malloc_r+0xf6>
 8007134:	f8d8 4000 	ldr.w	r4, [r8]
 8007138:	4627      	mov	r7, r4
 800713a:	2f00      	cmp	r7, #0
 800713c:	d143      	bne.n	80071c6 <_malloc_r+0xd6>
 800713e:	2c00      	cmp	r4, #0
 8007140:	d04b      	beq.n	80071da <_malloc_r+0xea>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	4639      	mov	r1, r7
 8007146:	4630      	mov	r0, r6
 8007148:	eb04 0903 	add.w	r9, r4, r3
 800714c:	f000 fa40 	bl	80075d0 <_sbrk_r>
 8007150:	4581      	cmp	r9, r0
 8007152:	d142      	bne.n	80071da <_malloc_r+0xea>
 8007154:	6821      	ldr	r1, [r4, #0]
 8007156:	1a6d      	subs	r5, r5, r1
 8007158:	4629      	mov	r1, r5
 800715a:	4630      	mov	r0, r6
 800715c:	f7ff ffa6 	bl	80070ac <sbrk_aligned>
 8007160:	3001      	adds	r0, #1
 8007162:	d03a      	beq.n	80071da <_malloc_r+0xea>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	442b      	add	r3, r5
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	f8d8 3000 	ldr.w	r3, [r8]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	bb62      	cbnz	r2, 80071cc <_malloc_r+0xdc>
 8007172:	f8c8 7000 	str.w	r7, [r8]
 8007176:	e00f      	b.n	8007198 <_malloc_r+0xa8>
 8007178:	6822      	ldr	r2, [r4, #0]
 800717a:	1b52      	subs	r2, r2, r5
 800717c:	d420      	bmi.n	80071c0 <_malloc_r+0xd0>
 800717e:	2a0b      	cmp	r2, #11
 8007180:	d917      	bls.n	80071b2 <_malloc_r+0xc2>
 8007182:	1961      	adds	r1, r4, r5
 8007184:	42a3      	cmp	r3, r4
 8007186:	6025      	str	r5, [r4, #0]
 8007188:	bf18      	it	ne
 800718a:	6059      	strne	r1, [r3, #4]
 800718c:	6863      	ldr	r3, [r4, #4]
 800718e:	bf08      	it	eq
 8007190:	f8c8 1000 	streq.w	r1, [r8]
 8007194:	5162      	str	r2, [r4, r5]
 8007196:	604b      	str	r3, [r1, #4]
 8007198:	4630      	mov	r0, r6
 800719a:	f000 f82f 	bl	80071fc <__malloc_unlock>
 800719e:	f104 000b 	add.w	r0, r4, #11
 80071a2:	1d23      	adds	r3, r4, #4
 80071a4:	f020 0007 	bic.w	r0, r0, #7
 80071a8:	1ac2      	subs	r2, r0, r3
 80071aa:	bf1c      	itt	ne
 80071ac:	1a1b      	subne	r3, r3, r0
 80071ae:	50a3      	strne	r3, [r4, r2]
 80071b0:	e7af      	b.n	8007112 <_malloc_r+0x22>
 80071b2:	6862      	ldr	r2, [r4, #4]
 80071b4:	42a3      	cmp	r3, r4
 80071b6:	bf0c      	ite	eq
 80071b8:	f8c8 2000 	streq.w	r2, [r8]
 80071bc:	605a      	strne	r2, [r3, #4]
 80071be:	e7eb      	b.n	8007198 <_malloc_r+0xa8>
 80071c0:	4623      	mov	r3, r4
 80071c2:	6864      	ldr	r4, [r4, #4]
 80071c4:	e7ae      	b.n	8007124 <_malloc_r+0x34>
 80071c6:	463c      	mov	r4, r7
 80071c8:	687f      	ldr	r7, [r7, #4]
 80071ca:	e7b6      	b.n	800713a <_malloc_r+0x4a>
 80071cc:	461a      	mov	r2, r3
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	d1fb      	bne.n	80071cc <_malloc_r+0xdc>
 80071d4:	2300      	movs	r3, #0
 80071d6:	6053      	str	r3, [r2, #4]
 80071d8:	e7de      	b.n	8007198 <_malloc_r+0xa8>
 80071da:	230c      	movs	r3, #12
 80071dc:	6033      	str	r3, [r6, #0]
 80071de:	4630      	mov	r0, r6
 80071e0:	f000 f80c 	bl	80071fc <__malloc_unlock>
 80071e4:	e794      	b.n	8007110 <_malloc_r+0x20>
 80071e6:	6005      	str	r5, [r0, #0]
 80071e8:	e7d6      	b.n	8007198 <_malloc_r+0xa8>
 80071ea:	bf00      	nop
 80071ec:	200005f0 	.word	0x200005f0

080071f0 <__malloc_lock>:
 80071f0:	4801      	ldr	r0, [pc, #4]	@ (80071f8 <__malloc_lock+0x8>)
 80071f2:	f7ff bf0e 	b.w	8007012 <__retarget_lock_acquire_recursive>
 80071f6:	bf00      	nop
 80071f8:	200005e8 	.word	0x200005e8

080071fc <__malloc_unlock>:
 80071fc:	4801      	ldr	r0, [pc, #4]	@ (8007204 <__malloc_unlock+0x8>)
 80071fe:	f7ff bf09 	b.w	8007014 <__retarget_lock_release_recursive>
 8007202:	bf00      	nop
 8007204:	200005e8 	.word	0x200005e8

08007208 <print_e>:
 8007208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800720a:	b087      	sub	sp, #28
 800720c:	461e      	mov	r6, r3
 800720e:	ab04      	add	r3, sp, #16
 8007210:	9301      	str	r3, [sp, #4]
 8007212:	ab03      	add	r3, sp, #12
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	460c      	mov	r4, r1
 8007218:	ab05      	add	r3, sp, #20
 800721a:	2102      	movs	r1, #2
 800721c:	4615      	mov	r5, r2
 800721e:	3201      	adds	r2, #1
 8007220:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8007222:	f000 fa75 	bl	8007710 <_dtoa_r>
 8007226:	9b05      	ldr	r3, [sp, #20]
 8007228:	f242 720f 	movw	r2, #9999	@ 0x270f
 800722c:	4293      	cmp	r3, r2
 800722e:	4601      	mov	r1, r0
 8007230:	d104      	bne.n	800723c <print_e+0x34>
 8007232:	4620      	mov	r0, r4
 8007234:	f000 f9dc 	bl	80075f0 <strcpy>
 8007238:	b007      	add	sp, #28
 800723a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800723c:	7802      	ldrb	r2, [r0, #0]
 800723e:	f804 2b01 	strb.w	r2, [r4], #1
 8007242:	2d00      	cmp	r5, #0
 8007244:	bfc8      	it	gt
 8007246:	2701      	movgt	r7, #1
 8007248:	222e      	movs	r2, #46	@ 0x2e
 800724a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800724e:	b108      	cbz	r0, 8007254 <print_e+0x4c>
 8007250:	2d00      	cmp	r5, #0
 8007252:	dc29      	bgt.n	80072a8 <print_e+0xa0>
 8007254:	2e67      	cmp	r6, #103	@ 0x67
 8007256:	d038      	beq.n	80072ca <print_e+0xc2>
 8007258:	2e47      	cmp	r6, #71	@ 0x47
 800725a:	d038      	beq.n	80072ce <print_e+0xc6>
 800725c:	222e      	movs	r2, #46	@ 0x2e
 800725e:	2130      	movs	r1, #48	@ 0x30
 8007260:	2d00      	cmp	r5, #0
 8007262:	dc2a      	bgt.n	80072ba <print_e+0xb2>
 8007264:	1e5a      	subs	r2, r3, #1
 8007266:	2a00      	cmp	r2, #0
 8007268:	bfb8      	it	lt
 800726a:	f1c3 0301 	rsblt	r3, r3, #1
 800726e:	9205      	str	r2, [sp, #20]
 8007270:	bfaa      	itet	ge
 8007272:	232b      	movge	r3, #43	@ 0x2b
 8007274:	9305      	strlt	r3, [sp, #20]
 8007276:	7063      	strbge	r3, [r4, #1]
 8007278:	9b05      	ldr	r3, [sp, #20]
 800727a:	7026      	strb	r6, [r4, #0]
 800727c:	bfbc      	itt	lt
 800727e:	222d      	movlt	r2, #45	@ 0x2d
 8007280:	7062      	strblt	r2, [r4, #1]
 8007282:	2b63      	cmp	r3, #99	@ 0x63
 8007284:	dc25      	bgt.n	80072d2 <print_e+0xca>
 8007286:	1ca1      	adds	r1, r4, #2
 8007288:	9b05      	ldr	r3, [sp, #20]
 800728a:	220a      	movs	r2, #10
 800728c:	fb93 f2f2 	sdiv	r2, r3, r2
 8007290:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 8007294:	7008      	strb	r0, [r1, #0]
 8007296:	f06f 0009 	mvn.w	r0, #9
 800729a:	fb00 3302 	mla	r3, r0, r2, r3
 800729e:	3330      	adds	r3, #48	@ 0x30
 80072a0:	704b      	strb	r3, [r1, #1]
 80072a2:	2300      	movs	r3, #0
 80072a4:	708b      	strb	r3, [r1, #2]
 80072a6:	e7c7      	b.n	8007238 <print_e+0x30>
 80072a8:	b10f      	cbz	r7, 80072ae <print_e+0xa6>
 80072aa:	f804 2b01 	strb.w	r2, [r4], #1
 80072ae:	7808      	ldrb	r0, [r1, #0]
 80072b0:	f804 0b01 	strb.w	r0, [r4], #1
 80072b4:	3d01      	subs	r5, #1
 80072b6:	2700      	movs	r7, #0
 80072b8:	e7c7      	b.n	800724a <print_e+0x42>
 80072ba:	b10f      	cbz	r7, 80072c0 <print_e+0xb8>
 80072bc:	f804 2b01 	strb.w	r2, [r4], #1
 80072c0:	f804 1b01 	strb.w	r1, [r4], #1
 80072c4:	3d01      	subs	r5, #1
 80072c6:	2700      	movs	r7, #0
 80072c8:	e7ca      	b.n	8007260 <print_e+0x58>
 80072ca:	2665      	movs	r6, #101	@ 0x65
 80072cc:	e7ca      	b.n	8007264 <print_e+0x5c>
 80072ce:	2645      	movs	r6, #69	@ 0x45
 80072d0:	e7c8      	b.n	8007264 <print_e+0x5c>
 80072d2:	2264      	movs	r2, #100	@ 0x64
 80072d4:	fb93 f2f2 	sdiv	r2, r3, r2
 80072d8:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 80072dc:	70a0      	strb	r0, [r4, #2]
 80072de:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 80072e2:	fb00 3302 	mla	r3, r0, r2, r3
 80072e6:	1ce1      	adds	r1, r4, #3
 80072e8:	9305      	str	r3, [sp, #20]
 80072ea:	e7cd      	b.n	8007288 <print_e+0x80>
 80072ec:	0000      	movs	r0, r0
	...

080072f0 <_gcvt>:
 80072f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f4:	ec59 8b10 	vmov	r8, r9, d0
 80072f8:	b086      	sub	sp, #24
 80072fa:	4605      	mov	r5, r0
 80072fc:	460c      	mov	r4, r1
 80072fe:	4616      	mov	r6, r2
 8007300:	469a      	mov	sl, r3
 8007302:	2200      	movs	r2, #0
 8007304:	2300      	movs	r3, #0
 8007306:	4640      	mov	r0, r8
 8007308:	4649      	mov	r1, r9
 800730a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800730c:	f7f9 fbe6 	bl	8000adc <__aeabi_dcmplt>
 8007310:	b110      	cbz	r0, 8007318 <_gcvt+0x28>
 8007312:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007316:	4699      	mov	r9, r3
 8007318:	2200      	movs	r2, #0
 800731a:	2300      	movs	r3, #0
 800731c:	4640      	mov	r0, r8
 800731e:	4649      	mov	r1, r9
 8007320:	f7f9 fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007324:	b138      	cbz	r0, 8007336 <_gcvt+0x46>
 8007326:	2330      	movs	r3, #48	@ 0x30
 8007328:	7033      	strb	r3, [r6, #0]
 800732a:	2300      	movs	r3, #0
 800732c:	7073      	strb	r3, [r6, #1]
 800732e:	4630      	mov	r0, r6
 8007330:	b006      	add	sp, #24
 8007332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007336:	a34e      	add	r3, pc, #312	@ (adr r3, 8007470 <_gcvt+0x180>)
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	4640      	mov	r0, r8
 800733e:	4649      	mov	r1, r9
 8007340:	f7f9 fbd6 	bl	8000af0 <__aeabi_dcmple>
 8007344:	b148      	cbz	r0, 800735a <_gcvt+0x6a>
 8007346:	ec49 8b10 	vmov	d0, r8, r9
 800734a:	9700      	str	r7, [sp, #0]
 800734c:	4653      	mov	r3, sl
 800734e:	1e62      	subs	r2, r4, #1
 8007350:	4631      	mov	r1, r6
 8007352:	4628      	mov	r0, r5
 8007354:	f7ff ff58 	bl	8007208 <print_e>
 8007358:	e7e9      	b.n	800732e <_gcvt+0x3e>
 800735a:	4620      	mov	r0, r4
 800735c:	f001 fb26 	bl	80089ac <_mprec_log10>
 8007360:	4642      	mov	r2, r8
 8007362:	ec51 0b10 	vmov	r0, r1, d0
 8007366:	464b      	mov	r3, r9
 8007368:	f7f9 fbc2 	bl	8000af0 <__aeabi_dcmple>
 800736c:	2800      	cmp	r0, #0
 800736e:	d1ea      	bne.n	8007346 <_gcvt+0x56>
 8007370:	ab05      	add	r3, sp, #20
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	ab04      	add	r3, sp, #16
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	4622      	mov	r2, r4
 800737a:	ab03      	add	r3, sp, #12
 800737c:	2102      	movs	r1, #2
 800737e:	ec49 8b10 	vmov	d0, r8, r9
 8007382:	4628      	mov	r0, r5
 8007384:	f000 f9c4 	bl	8007710 <_dtoa_r>
 8007388:	9a03      	ldr	r2, [sp, #12]
 800738a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800738e:	429a      	cmp	r2, r3
 8007390:	4601      	mov	r1, r0
 8007392:	d00e      	beq.n	80073b2 <_gcvt+0xc2>
 8007394:	4633      	mov	r3, r6
 8007396:	4608      	mov	r0, r1
 8007398:	f811 2b01 	ldrb.w	r2, [r1], #1
 800739c:	9d03      	ldr	r5, [sp, #12]
 800739e:	b10a      	cbz	r2, 80073a4 <_gcvt+0xb4>
 80073a0:	2d00      	cmp	r5, #0
 80073a2:	dc0a      	bgt.n	80073ba <_gcvt+0xca>
 80073a4:	1931      	adds	r1, r6, r4
 80073a6:	1ac9      	subs	r1, r1, r3
 80073a8:	462c      	mov	r4, r5
 80073aa:	2200      	movs	r2, #0
 80073ac:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 80073b0:	e00c      	b.n	80073cc <_gcvt+0xdc>
 80073b2:	4630      	mov	r0, r6
 80073b4:	f000 f91c 	bl	80075f0 <strcpy>
 80073b8:	e7b9      	b.n	800732e <_gcvt+0x3e>
 80073ba:	3d01      	subs	r5, #1
 80073bc:	f803 2b01 	strb.w	r2, [r3], #1
 80073c0:	9503      	str	r5, [sp, #12]
 80073c2:	e7e8      	b.n	8007396 <_gcvt+0xa6>
 80073c4:	f803 cb01 	strb.w	ip, [r3], #1
 80073c8:	3901      	subs	r1, #1
 80073ca:	2201      	movs	r2, #1
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	4625      	mov	r5, r4
 80073d0:	dc2e      	bgt.n	8007430 <_gcvt+0x140>
 80073d2:	b102      	cbz	r2, 80073d6 <_gcvt+0xe6>
 80073d4:	9403      	str	r4, [sp, #12]
 80073d6:	b90f      	cbnz	r7, 80073dc <_gcvt+0xec>
 80073d8:	7802      	ldrb	r2, [r0, #0]
 80073da:	b332      	cbz	r2, 800742a <_gcvt+0x13a>
 80073dc:	42b3      	cmp	r3, r6
 80073de:	bf04      	itt	eq
 80073e0:	2230      	moveq	r2, #48	@ 0x30
 80073e2:	f803 2b01 	strbeq.w	r2, [r3], #1
 80073e6:	222e      	movs	r2, #46	@ 0x2e
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	9a03      	ldr	r2, [sp, #12]
 80073ec:	461c      	mov	r4, r3
 80073ee:	f04f 0c00 	mov.w	ip, #0
 80073f2:	1ad5      	subs	r5, r2, r3
 80073f4:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 80073f8:	42e5      	cmn	r5, r4
 80073fa:	d421      	bmi.n	8007440 <_gcvt+0x150>
 80073fc:	2a00      	cmp	r2, #0
 80073fe:	f1c2 0400 	rsb	r4, r2, #0
 8007402:	bfd4      	ite	le
 8007404:	4625      	movle	r5, r4
 8007406:	2500      	movgt	r5, #0
 8007408:	3501      	adds	r5, #1
 800740a:	442b      	add	r3, r5
 800740c:	f1bc 0f00 	cmp.w	ip, #0
 8007410:	d004      	beq.n	800741c <_gcvt+0x12c>
 8007412:	2a00      	cmp	r2, #0
 8007414:	bfc8      	it	gt
 8007416:	2400      	movgt	r4, #0
 8007418:	4422      	add	r2, r4
 800741a:	9203      	str	r2, [sp, #12]
 800741c:	1e42      	subs	r2, r0, #1
 800741e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8007422:	b108      	cbz	r0, 8007428 <_gcvt+0x138>
 8007424:	2900      	cmp	r1, #0
 8007426:	dc10      	bgt.n	800744a <_gcvt+0x15a>
 8007428:	b9e7      	cbnz	r7, 8007464 <_gcvt+0x174>
 800742a:	2200      	movs	r2, #0
 800742c:	701a      	strb	r2, [r3, #0]
 800742e:	e77e      	b.n	800732e <_gcvt+0x3e>
 8007430:	2900      	cmp	r1, #0
 8007432:	f104 34ff 	add.w	r4, r4, #4294967295
 8007436:	dcc5      	bgt.n	80073c4 <_gcvt+0xd4>
 8007438:	2a00      	cmp	r2, #0
 800743a:	d0cc      	beq.n	80073d6 <_gcvt+0xe6>
 800743c:	9503      	str	r5, [sp, #12]
 800743e:	e7ca      	b.n	80073d6 <_gcvt+0xe6>
 8007440:	f804 ef01 	strb.w	lr, [r4, #1]!
 8007444:	f04f 0c01 	mov.w	ip, #1
 8007448:	e7d6      	b.n	80073f8 <_gcvt+0x108>
 800744a:	f803 0b01 	strb.w	r0, [r3], #1
 800744e:	3901      	subs	r1, #1
 8007450:	e7e5      	b.n	800741e <_gcvt+0x12e>
 8007452:	f802 5b01 	strb.w	r5, [r2], #1
 8007456:	1aa0      	subs	r0, r4, r2
 8007458:	2800      	cmp	r0, #0
 800745a:	dcfa      	bgt.n	8007452 <_gcvt+0x162>
 800745c:	2900      	cmp	r1, #0
 800745e:	bfa8      	it	ge
 8007460:	185b      	addge	r3, r3, r1
 8007462:	e7e2      	b.n	800742a <_gcvt+0x13a>
 8007464:	461a      	mov	r2, r3
 8007466:	185c      	adds	r4, r3, r1
 8007468:	2530      	movs	r5, #48	@ 0x30
 800746a:	e7f4      	b.n	8007456 <_gcvt+0x166>
 800746c:	f3af 8000 	nop.w
 8007470:	eb1c432d 	.word	0xeb1c432d
 8007474:	3f1a36e2 	.word	0x3f1a36e2

08007478 <__sflush_r>:
 8007478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800747c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007480:	0716      	lsls	r6, r2, #28
 8007482:	4605      	mov	r5, r0
 8007484:	460c      	mov	r4, r1
 8007486:	d454      	bmi.n	8007532 <__sflush_r+0xba>
 8007488:	684b      	ldr	r3, [r1, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	dc02      	bgt.n	8007494 <__sflush_r+0x1c>
 800748e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	dd48      	ble.n	8007526 <__sflush_r+0xae>
 8007494:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007496:	2e00      	cmp	r6, #0
 8007498:	d045      	beq.n	8007526 <__sflush_r+0xae>
 800749a:	2300      	movs	r3, #0
 800749c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074a0:	682f      	ldr	r7, [r5, #0]
 80074a2:	6a21      	ldr	r1, [r4, #32]
 80074a4:	602b      	str	r3, [r5, #0]
 80074a6:	d030      	beq.n	800750a <__sflush_r+0x92>
 80074a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	0759      	lsls	r1, r3, #29
 80074ae:	d505      	bpl.n	80074bc <__sflush_r+0x44>
 80074b0:	6863      	ldr	r3, [r4, #4]
 80074b2:	1ad2      	subs	r2, r2, r3
 80074b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074b6:	b10b      	cbz	r3, 80074bc <__sflush_r+0x44>
 80074b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074ba:	1ad2      	subs	r2, r2, r3
 80074bc:	2300      	movs	r3, #0
 80074be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074c0:	6a21      	ldr	r1, [r4, #32]
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b0      	blx	r6
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	d106      	bne.n	80074da <__sflush_r+0x62>
 80074cc:	6829      	ldr	r1, [r5, #0]
 80074ce:	291d      	cmp	r1, #29
 80074d0:	d82b      	bhi.n	800752a <__sflush_r+0xb2>
 80074d2:	4a2a      	ldr	r2, [pc, #168]	@ (800757c <__sflush_r+0x104>)
 80074d4:	410a      	asrs	r2, r1
 80074d6:	07d6      	lsls	r6, r2, #31
 80074d8:	d427      	bmi.n	800752a <__sflush_r+0xb2>
 80074da:	2200      	movs	r2, #0
 80074dc:	6062      	str	r2, [r4, #4]
 80074de:	04d9      	lsls	r1, r3, #19
 80074e0:	6922      	ldr	r2, [r4, #16]
 80074e2:	6022      	str	r2, [r4, #0]
 80074e4:	d504      	bpl.n	80074f0 <__sflush_r+0x78>
 80074e6:	1c42      	adds	r2, r0, #1
 80074e8:	d101      	bne.n	80074ee <__sflush_r+0x76>
 80074ea:	682b      	ldr	r3, [r5, #0]
 80074ec:	b903      	cbnz	r3, 80074f0 <__sflush_r+0x78>
 80074ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80074f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074f2:	602f      	str	r7, [r5, #0]
 80074f4:	b1b9      	cbz	r1, 8007526 <__sflush_r+0xae>
 80074f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074fa:	4299      	cmp	r1, r3
 80074fc:	d002      	beq.n	8007504 <__sflush_r+0x8c>
 80074fe:	4628      	mov	r0, r5
 8007500:	f7ff fd8a 	bl	8007018 <_free_r>
 8007504:	2300      	movs	r3, #0
 8007506:	6363      	str	r3, [r4, #52]	@ 0x34
 8007508:	e00d      	b.n	8007526 <__sflush_r+0xae>
 800750a:	2301      	movs	r3, #1
 800750c:	4628      	mov	r0, r5
 800750e:	47b0      	blx	r6
 8007510:	4602      	mov	r2, r0
 8007512:	1c50      	adds	r0, r2, #1
 8007514:	d1c9      	bne.n	80074aa <__sflush_r+0x32>
 8007516:	682b      	ldr	r3, [r5, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0c6      	beq.n	80074aa <__sflush_r+0x32>
 800751c:	2b1d      	cmp	r3, #29
 800751e:	d001      	beq.n	8007524 <__sflush_r+0xac>
 8007520:	2b16      	cmp	r3, #22
 8007522:	d11e      	bne.n	8007562 <__sflush_r+0xea>
 8007524:	602f      	str	r7, [r5, #0]
 8007526:	2000      	movs	r0, #0
 8007528:	e022      	b.n	8007570 <__sflush_r+0xf8>
 800752a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800752e:	b21b      	sxth	r3, r3
 8007530:	e01b      	b.n	800756a <__sflush_r+0xf2>
 8007532:	690f      	ldr	r7, [r1, #16]
 8007534:	2f00      	cmp	r7, #0
 8007536:	d0f6      	beq.n	8007526 <__sflush_r+0xae>
 8007538:	0793      	lsls	r3, r2, #30
 800753a:	680e      	ldr	r6, [r1, #0]
 800753c:	bf08      	it	eq
 800753e:	694b      	ldreq	r3, [r1, #20]
 8007540:	600f      	str	r7, [r1, #0]
 8007542:	bf18      	it	ne
 8007544:	2300      	movne	r3, #0
 8007546:	eba6 0807 	sub.w	r8, r6, r7
 800754a:	608b      	str	r3, [r1, #8]
 800754c:	f1b8 0f00 	cmp.w	r8, #0
 8007550:	dde9      	ble.n	8007526 <__sflush_r+0xae>
 8007552:	6a21      	ldr	r1, [r4, #32]
 8007554:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007556:	4643      	mov	r3, r8
 8007558:	463a      	mov	r2, r7
 800755a:	4628      	mov	r0, r5
 800755c:	47b0      	blx	r6
 800755e:	2800      	cmp	r0, #0
 8007560:	dc08      	bgt.n	8007574 <__sflush_r+0xfc>
 8007562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800756a:	81a3      	strh	r3, [r4, #12]
 800756c:	f04f 30ff 	mov.w	r0, #4294967295
 8007570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007574:	4407      	add	r7, r0
 8007576:	eba8 0800 	sub.w	r8, r8, r0
 800757a:	e7e7      	b.n	800754c <__sflush_r+0xd4>
 800757c:	dfbffffe 	.word	0xdfbffffe

08007580 <_fflush_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	690b      	ldr	r3, [r1, #16]
 8007584:	4605      	mov	r5, r0
 8007586:	460c      	mov	r4, r1
 8007588:	b913      	cbnz	r3, 8007590 <_fflush_r+0x10>
 800758a:	2500      	movs	r5, #0
 800758c:	4628      	mov	r0, r5
 800758e:	bd38      	pop	{r3, r4, r5, pc}
 8007590:	b118      	cbz	r0, 800759a <_fflush_r+0x1a>
 8007592:	6a03      	ldr	r3, [r0, #32]
 8007594:	b90b      	cbnz	r3, 800759a <_fflush_r+0x1a>
 8007596:	f7ff fc3b 	bl	8006e10 <__sinit>
 800759a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0f3      	beq.n	800758a <_fflush_r+0xa>
 80075a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075a4:	07d0      	lsls	r0, r2, #31
 80075a6:	d404      	bmi.n	80075b2 <_fflush_r+0x32>
 80075a8:	0599      	lsls	r1, r3, #22
 80075aa:	d402      	bmi.n	80075b2 <_fflush_r+0x32>
 80075ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ae:	f7ff fd30 	bl	8007012 <__retarget_lock_acquire_recursive>
 80075b2:	4628      	mov	r0, r5
 80075b4:	4621      	mov	r1, r4
 80075b6:	f7ff ff5f 	bl	8007478 <__sflush_r>
 80075ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075bc:	07da      	lsls	r2, r3, #31
 80075be:	4605      	mov	r5, r0
 80075c0:	d4e4      	bmi.n	800758c <_fflush_r+0xc>
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	059b      	lsls	r3, r3, #22
 80075c6:	d4e1      	bmi.n	800758c <_fflush_r+0xc>
 80075c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ca:	f7ff fd23 	bl	8007014 <__retarget_lock_release_recursive>
 80075ce:	e7dd      	b.n	800758c <_fflush_r+0xc>

080075d0 <_sbrk_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4d06      	ldr	r5, [pc, #24]	@ (80075ec <_sbrk_r+0x1c>)
 80075d4:	2300      	movs	r3, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	4608      	mov	r0, r1
 80075da:	602b      	str	r3, [r5, #0]
 80075dc:	f7fb fac4 	bl	8002b68 <_sbrk>
 80075e0:	1c43      	adds	r3, r0, #1
 80075e2:	d102      	bne.n	80075ea <_sbrk_r+0x1a>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	b103      	cbz	r3, 80075ea <_sbrk_r+0x1a>
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	200005e4 	.word	0x200005e4

080075f0 <strcpy>:
 80075f0:	4603      	mov	r3, r0
 80075f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075f6:	f803 2b01 	strb.w	r2, [r3], #1
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	d1f9      	bne.n	80075f2 <strcpy+0x2>
 80075fe:	4770      	bx	lr

08007600 <quorem>:
 8007600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	6903      	ldr	r3, [r0, #16]
 8007606:	690c      	ldr	r4, [r1, #16]
 8007608:	42a3      	cmp	r3, r4
 800760a:	4607      	mov	r7, r0
 800760c:	db7e      	blt.n	800770c <quorem+0x10c>
 800760e:	3c01      	subs	r4, #1
 8007610:	f101 0814 	add.w	r8, r1, #20
 8007614:	00a3      	lsls	r3, r4, #2
 8007616:	f100 0514 	add.w	r5, r0, #20
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007626:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800762a:	3301      	adds	r3, #1
 800762c:	429a      	cmp	r2, r3
 800762e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007632:	fbb2 f6f3 	udiv	r6, r2, r3
 8007636:	d32e      	bcc.n	8007696 <quorem+0x96>
 8007638:	f04f 0a00 	mov.w	sl, #0
 800763c:	46c4      	mov	ip, r8
 800763e:	46ae      	mov	lr, r5
 8007640:	46d3      	mov	fp, sl
 8007642:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007646:	b298      	uxth	r0, r3
 8007648:	fb06 a000 	mla	r0, r6, r0, sl
 800764c:	0c02      	lsrs	r2, r0, #16
 800764e:	0c1b      	lsrs	r3, r3, #16
 8007650:	fb06 2303 	mla	r3, r6, r3, r2
 8007654:	f8de 2000 	ldr.w	r2, [lr]
 8007658:	b280      	uxth	r0, r0
 800765a:	b292      	uxth	r2, r2
 800765c:	1a12      	subs	r2, r2, r0
 800765e:	445a      	add	r2, fp
 8007660:	f8de 0000 	ldr.w	r0, [lr]
 8007664:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007668:	b29b      	uxth	r3, r3
 800766a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800766e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007672:	b292      	uxth	r2, r2
 8007674:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007678:	45e1      	cmp	r9, ip
 800767a:	f84e 2b04 	str.w	r2, [lr], #4
 800767e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007682:	d2de      	bcs.n	8007642 <quorem+0x42>
 8007684:	9b00      	ldr	r3, [sp, #0]
 8007686:	58eb      	ldr	r3, [r5, r3]
 8007688:	b92b      	cbnz	r3, 8007696 <quorem+0x96>
 800768a:	9b01      	ldr	r3, [sp, #4]
 800768c:	3b04      	subs	r3, #4
 800768e:	429d      	cmp	r5, r3
 8007690:	461a      	mov	r2, r3
 8007692:	d32f      	bcc.n	80076f4 <quorem+0xf4>
 8007694:	613c      	str	r4, [r7, #16]
 8007696:	4638      	mov	r0, r7
 8007698:	f001 f880 	bl	800879c <__mcmp>
 800769c:	2800      	cmp	r0, #0
 800769e:	db25      	blt.n	80076ec <quorem+0xec>
 80076a0:	4629      	mov	r1, r5
 80076a2:	2000      	movs	r0, #0
 80076a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80076a8:	f8d1 c000 	ldr.w	ip, [r1]
 80076ac:	fa1f fe82 	uxth.w	lr, r2
 80076b0:	fa1f f38c 	uxth.w	r3, ip
 80076b4:	eba3 030e 	sub.w	r3, r3, lr
 80076b8:	4403      	add	r3, r0
 80076ba:	0c12      	lsrs	r2, r2, #16
 80076bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ca:	45c1      	cmp	r9, r8
 80076cc:	f841 3b04 	str.w	r3, [r1], #4
 80076d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076d4:	d2e6      	bcs.n	80076a4 <quorem+0xa4>
 80076d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076de:	b922      	cbnz	r2, 80076ea <quorem+0xea>
 80076e0:	3b04      	subs	r3, #4
 80076e2:	429d      	cmp	r5, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	d30b      	bcc.n	8007700 <quorem+0x100>
 80076e8:	613c      	str	r4, [r7, #16]
 80076ea:	3601      	adds	r6, #1
 80076ec:	4630      	mov	r0, r6
 80076ee:	b003      	add	sp, #12
 80076f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	3b04      	subs	r3, #4
 80076f8:	2a00      	cmp	r2, #0
 80076fa:	d1cb      	bne.n	8007694 <quorem+0x94>
 80076fc:	3c01      	subs	r4, #1
 80076fe:	e7c6      	b.n	800768e <quorem+0x8e>
 8007700:	6812      	ldr	r2, [r2, #0]
 8007702:	3b04      	subs	r3, #4
 8007704:	2a00      	cmp	r2, #0
 8007706:	d1ef      	bne.n	80076e8 <quorem+0xe8>
 8007708:	3c01      	subs	r4, #1
 800770a:	e7ea      	b.n	80076e2 <quorem+0xe2>
 800770c:	2000      	movs	r0, #0
 800770e:	e7ee      	b.n	80076ee <quorem+0xee>

08007710 <_dtoa_r>:
 8007710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007714:	69c7      	ldr	r7, [r0, #28]
 8007716:	b099      	sub	sp, #100	@ 0x64
 8007718:	ed8d 0b02 	vstr	d0, [sp, #8]
 800771c:	ec55 4b10 	vmov	r4, r5, d0
 8007720:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007722:	9109      	str	r1, [sp, #36]	@ 0x24
 8007724:	4683      	mov	fp, r0
 8007726:	920e      	str	r2, [sp, #56]	@ 0x38
 8007728:	9313      	str	r3, [sp, #76]	@ 0x4c
 800772a:	b97f      	cbnz	r7, 800774c <_dtoa_r+0x3c>
 800772c:	2010      	movs	r0, #16
 800772e:	f000 fdb3 	bl	8008298 <malloc>
 8007732:	4602      	mov	r2, r0
 8007734:	f8cb 001c 	str.w	r0, [fp, #28]
 8007738:	b920      	cbnz	r0, 8007744 <_dtoa_r+0x34>
 800773a:	4ba7      	ldr	r3, [pc, #668]	@ (80079d8 <_dtoa_r+0x2c8>)
 800773c:	21ef      	movs	r1, #239	@ 0xef
 800773e:	48a7      	ldr	r0, [pc, #668]	@ (80079dc <_dtoa_r+0x2cc>)
 8007740:	f001 f960 	bl	8008a04 <__assert_func>
 8007744:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007748:	6007      	str	r7, [r0, #0]
 800774a:	60c7      	str	r7, [r0, #12]
 800774c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007750:	6819      	ldr	r1, [r3, #0]
 8007752:	b159      	cbz	r1, 800776c <_dtoa_r+0x5c>
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	604a      	str	r2, [r1, #4]
 8007758:	2301      	movs	r3, #1
 800775a:	4093      	lsls	r3, r2
 800775c:	608b      	str	r3, [r1, #8]
 800775e:	4658      	mov	r0, fp
 8007760:	f000 fde2 	bl	8008328 <_Bfree>
 8007764:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007768:	2200      	movs	r2, #0
 800776a:	601a      	str	r2, [r3, #0]
 800776c:	1e2b      	subs	r3, r5, #0
 800776e:	bfb9      	ittee	lt
 8007770:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007774:	9303      	strlt	r3, [sp, #12]
 8007776:	2300      	movge	r3, #0
 8007778:	6033      	strge	r3, [r6, #0]
 800777a:	9f03      	ldr	r7, [sp, #12]
 800777c:	4b98      	ldr	r3, [pc, #608]	@ (80079e0 <_dtoa_r+0x2d0>)
 800777e:	bfbc      	itt	lt
 8007780:	2201      	movlt	r2, #1
 8007782:	6032      	strlt	r2, [r6, #0]
 8007784:	43bb      	bics	r3, r7
 8007786:	d112      	bne.n	80077ae <_dtoa_r+0x9e>
 8007788:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800778a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007794:	4323      	orrs	r3, r4
 8007796:	f000 854d 	beq.w	8008234 <_dtoa_r+0xb24>
 800779a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800779c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80079f4 <_dtoa_r+0x2e4>
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 854f 	beq.w	8008244 <_dtoa_r+0xb34>
 80077a6:	f10a 0303 	add.w	r3, sl, #3
 80077aa:	f000 bd49 	b.w	8008240 <_dtoa_r+0xb30>
 80077ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077b2:	2200      	movs	r2, #0
 80077b4:	ec51 0b17 	vmov	r0, r1, d7
 80077b8:	2300      	movs	r3, #0
 80077ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80077be:	f7f9 f983 	bl	8000ac8 <__aeabi_dcmpeq>
 80077c2:	4680      	mov	r8, r0
 80077c4:	b158      	cbz	r0, 80077de <_dtoa_r+0xce>
 80077c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077c8:	2301      	movs	r3, #1
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077ce:	b113      	cbz	r3, 80077d6 <_dtoa_r+0xc6>
 80077d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80077d2:	4b84      	ldr	r3, [pc, #528]	@ (80079e4 <_dtoa_r+0x2d4>)
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80079f8 <_dtoa_r+0x2e8>
 80077da:	f000 bd33 	b.w	8008244 <_dtoa_r+0xb34>
 80077de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80077e2:	aa16      	add	r2, sp, #88	@ 0x58
 80077e4:	a917      	add	r1, sp, #92	@ 0x5c
 80077e6:	4658      	mov	r0, fp
 80077e8:	f001 f888 	bl	80088fc <__d2b>
 80077ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80077f0:	4681      	mov	r9, r0
 80077f2:	2e00      	cmp	r6, #0
 80077f4:	d077      	beq.n	80078e6 <_dtoa_r+0x1d6>
 80077f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80077fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007804:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007808:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800780c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007810:	4619      	mov	r1, r3
 8007812:	2200      	movs	r2, #0
 8007814:	4b74      	ldr	r3, [pc, #464]	@ (80079e8 <_dtoa_r+0x2d8>)
 8007816:	f7f8 fd37 	bl	8000288 <__aeabi_dsub>
 800781a:	a369      	add	r3, pc, #420	@ (adr r3, 80079c0 <_dtoa_r+0x2b0>)
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f7f8 feea 	bl	80005f8 <__aeabi_dmul>
 8007824:	a368      	add	r3, pc, #416	@ (adr r3, 80079c8 <_dtoa_r+0x2b8>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 fd2f 	bl	800028c <__adddf3>
 800782e:	4604      	mov	r4, r0
 8007830:	4630      	mov	r0, r6
 8007832:	460d      	mov	r5, r1
 8007834:	f7f8 fe76 	bl	8000524 <__aeabi_i2d>
 8007838:	a365      	add	r3, pc, #404	@ (adr r3, 80079d0 <_dtoa_r+0x2c0>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f8 fedb 	bl	80005f8 <__aeabi_dmul>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4620      	mov	r0, r4
 8007848:	4629      	mov	r1, r5
 800784a:	f7f8 fd1f 	bl	800028c <__adddf3>
 800784e:	4604      	mov	r4, r0
 8007850:	460d      	mov	r5, r1
 8007852:	f7f9 f96b 	bl	8000b2c <__aeabi_d2iz>
 8007856:	2200      	movs	r2, #0
 8007858:	4607      	mov	r7, r0
 800785a:	2300      	movs	r3, #0
 800785c:	4620      	mov	r0, r4
 800785e:	4629      	mov	r1, r5
 8007860:	f7f9 f93c 	bl	8000adc <__aeabi_dcmplt>
 8007864:	b140      	cbz	r0, 8007878 <_dtoa_r+0x168>
 8007866:	4638      	mov	r0, r7
 8007868:	f7f8 fe5c 	bl	8000524 <__aeabi_i2d>
 800786c:	4622      	mov	r2, r4
 800786e:	462b      	mov	r3, r5
 8007870:	f7f9 f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007874:	b900      	cbnz	r0, 8007878 <_dtoa_r+0x168>
 8007876:	3f01      	subs	r7, #1
 8007878:	2f16      	cmp	r7, #22
 800787a:	d851      	bhi.n	8007920 <_dtoa_r+0x210>
 800787c:	4b5b      	ldr	r3, [pc, #364]	@ (80079ec <_dtoa_r+0x2dc>)
 800787e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800788a:	f7f9 f927 	bl	8000adc <__aeabi_dcmplt>
 800788e:	2800      	cmp	r0, #0
 8007890:	d048      	beq.n	8007924 <_dtoa_r+0x214>
 8007892:	3f01      	subs	r7, #1
 8007894:	2300      	movs	r3, #0
 8007896:	9312      	str	r3, [sp, #72]	@ 0x48
 8007898:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800789a:	1b9b      	subs	r3, r3, r6
 800789c:	1e5a      	subs	r2, r3, #1
 800789e:	bf44      	itt	mi
 80078a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80078a4:	2300      	movmi	r3, #0
 80078a6:	9208      	str	r2, [sp, #32]
 80078a8:	bf54      	ite	pl
 80078aa:	f04f 0800 	movpl.w	r8, #0
 80078ae:	9308      	strmi	r3, [sp, #32]
 80078b0:	2f00      	cmp	r7, #0
 80078b2:	db39      	blt.n	8007928 <_dtoa_r+0x218>
 80078b4:	9b08      	ldr	r3, [sp, #32]
 80078b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80078b8:	443b      	add	r3, r7
 80078ba:	9308      	str	r3, [sp, #32]
 80078bc:	2300      	movs	r3, #0
 80078be:	930a      	str	r3, [sp, #40]	@ 0x28
 80078c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c2:	2b09      	cmp	r3, #9
 80078c4:	d864      	bhi.n	8007990 <_dtoa_r+0x280>
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	bfc4      	itt	gt
 80078ca:	3b04      	subgt	r3, #4
 80078cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80078ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d0:	f1a3 0302 	sub.w	r3, r3, #2
 80078d4:	bfcc      	ite	gt
 80078d6:	2400      	movgt	r4, #0
 80078d8:	2401      	movle	r4, #1
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d863      	bhi.n	80079a6 <_dtoa_r+0x296>
 80078de:	e8df f003 	tbb	[pc, r3]
 80078e2:	372a      	.short	0x372a
 80078e4:	5535      	.short	0x5535
 80078e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80078ea:	441e      	add	r6, r3
 80078ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80078f0:	2b20      	cmp	r3, #32
 80078f2:	bfc1      	itttt	gt
 80078f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80078f8:	409f      	lslgt	r7, r3
 80078fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80078fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007902:	bfd6      	itet	le
 8007904:	f1c3 0320 	rsble	r3, r3, #32
 8007908:	ea47 0003 	orrgt.w	r0, r7, r3
 800790c:	fa04 f003 	lslle.w	r0, r4, r3
 8007910:	f7f8 fdf8 	bl	8000504 <__aeabi_ui2d>
 8007914:	2201      	movs	r2, #1
 8007916:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800791a:	3e01      	subs	r6, #1
 800791c:	9214      	str	r2, [sp, #80]	@ 0x50
 800791e:	e777      	b.n	8007810 <_dtoa_r+0x100>
 8007920:	2301      	movs	r3, #1
 8007922:	e7b8      	b.n	8007896 <_dtoa_r+0x186>
 8007924:	9012      	str	r0, [sp, #72]	@ 0x48
 8007926:	e7b7      	b.n	8007898 <_dtoa_r+0x188>
 8007928:	427b      	negs	r3, r7
 800792a:	930a      	str	r3, [sp, #40]	@ 0x28
 800792c:	2300      	movs	r3, #0
 800792e:	eba8 0807 	sub.w	r8, r8, r7
 8007932:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007934:	e7c4      	b.n	80078c0 <_dtoa_r+0x1b0>
 8007936:	2300      	movs	r3, #0
 8007938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800793a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800793c:	2b00      	cmp	r3, #0
 800793e:	dc35      	bgt.n	80079ac <_dtoa_r+0x29c>
 8007940:	2301      	movs	r3, #1
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	9307      	str	r3, [sp, #28]
 8007946:	461a      	mov	r2, r3
 8007948:	920e      	str	r2, [sp, #56]	@ 0x38
 800794a:	e00b      	b.n	8007964 <_dtoa_r+0x254>
 800794c:	2301      	movs	r3, #1
 800794e:	e7f3      	b.n	8007938 <_dtoa_r+0x228>
 8007950:	2300      	movs	r3, #0
 8007952:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007956:	18fb      	adds	r3, r7, r3
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	3301      	adds	r3, #1
 800795c:	2b01      	cmp	r3, #1
 800795e:	9307      	str	r3, [sp, #28]
 8007960:	bfb8      	it	lt
 8007962:	2301      	movlt	r3, #1
 8007964:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007968:	2100      	movs	r1, #0
 800796a:	2204      	movs	r2, #4
 800796c:	f102 0514 	add.w	r5, r2, #20
 8007970:	429d      	cmp	r5, r3
 8007972:	d91f      	bls.n	80079b4 <_dtoa_r+0x2a4>
 8007974:	6041      	str	r1, [r0, #4]
 8007976:	4658      	mov	r0, fp
 8007978:	f000 fc96 	bl	80082a8 <_Balloc>
 800797c:	4682      	mov	sl, r0
 800797e:	2800      	cmp	r0, #0
 8007980:	d13c      	bne.n	80079fc <_dtoa_r+0x2ec>
 8007982:	4b1b      	ldr	r3, [pc, #108]	@ (80079f0 <_dtoa_r+0x2e0>)
 8007984:	4602      	mov	r2, r0
 8007986:	f240 11af 	movw	r1, #431	@ 0x1af
 800798a:	e6d8      	b.n	800773e <_dtoa_r+0x2e>
 800798c:	2301      	movs	r3, #1
 800798e:	e7e0      	b.n	8007952 <_dtoa_r+0x242>
 8007990:	2401      	movs	r4, #1
 8007992:	2300      	movs	r3, #0
 8007994:	9309      	str	r3, [sp, #36]	@ 0x24
 8007996:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007998:	f04f 33ff 	mov.w	r3, #4294967295
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	9307      	str	r3, [sp, #28]
 80079a0:	2200      	movs	r2, #0
 80079a2:	2312      	movs	r3, #18
 80079a4:	e7d0      	b.n	8007948 <_dtoa_r+0x238>
 80079a6:	2301      	movs	r3, #1
 80079a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079aa:	e7f5      	b.n	8007998 <_dtoa_r+0x288>
 80079ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	9307      	str	r3, [sp, #28]
 80079b2:	e7d7      	b.n	8007964 <_dtoa_r+0x254>
 80079b4:	3101      	adds	r1, #1
 80079b6:	0052      	lsls	r2, r2, #1
 80079b8:	e7d8      	b.n	800796c <_dtoa_r+0x25c>
 80079ba:	bf00      	nop
 80079bc:	f3af 8000 	nop.w
 80079c0:	636f4361 	.word	0x636f4361
 80079c4:	3fd287a7 	.word	0x3fd287a7
 80079c8:	8b60c8b3 	.word	0x8b60c8b3
 80079cc:	3fc68a28 	.word	0x3fc68a28
 80079d0:	509f79fb 	.word	0x509f79fb
 80079d4:	3fd34413 	.word	0x3fd34413
 80079d8:	0800a44f 	.word	0x0800a44f
 80079dc:	0800a466 	.word	0x0800a466
 80079e0:	7ff00000 	.word	0x7ff00000
 80079e4:	0800a44e 	.word	0x0800a44e
 80079e8:	3ff80000 	.word	0x3ff80000
 80079ec:	0800a560 	.word	0x0800a560
 80079f0:	0800a4be 	.word	0x0800a4be
 80079f4:	0800a449 	.word	0x0800a449
 80079f8:	0800a44d 	.word	0x0800a44d
 80079fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a00:	6018      	str	r0, [r3, #0]
 8007a02:	9b07      	ldr	r3, [sp, #28]
 8007a04:	2b0e      	cmp	r3, #14
 8007a06:	f200 80a4 	bhi.w	8007b52 <_dtoa_r+0x442>
 8007a0a:	2c00      	cmp	r4, #0
 8007a0c:	f000 80a1 	beq.w	8007b52 <_dtoa_r+0x442>
 8007a10:	2f00      	cmp	r7, #0
 8007a12:	dd33      	ble.n	8007a7c <_dtoa_r+0x36c>
 8007a14:	4bad      	ldr	r3, [pc, #692]	@ (8007ccc <_dtoa_r+0x5bc>)
 8007a16:	f007 020f 	and.w	r2, r7, #15
 8007a1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a1e:	ed93 7b00 	vldr	d7, [r3]
 8007a22:	05f8      	lsls	r0, r7, #23
 8007a24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a2c:	d516      	bpl.n	8007a5c <_dtoa_r+0x34c>
 8007a2e:	4ba8      	ldr	r3, [pc, #672]	@ (8007cd0 <_dtoa_r+0x5c0>)
 8007a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a38:	f7f8 ff08 	bl	800084c <__aeabi_ddiv>
 8007a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a40:	f004 040f 	and.w	r4, r4, #15
 8007a44:	2603      	movs	r6, #3
 8007a46:	4da2      	ldr	r5, [pc, #648]	@ (8007cd0 <_dtoa_r+0x5c0>)
 8007a48:	b954      	cbnz	r4, 8007a60 <_dtoa_r+0x350>
 8007a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a52:	f7f8 fefb 	bl	800084c <__aeabi_ddiv>
 8007a56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a5a:	e028      	b.n	8007aae <_dtoa_r+0x39e>
 8007a5c:	2602      	movs	r6, #2
 8007a5e:	e7f2      	b.n	8007a46 <_dtoa_r+0x336>
 8007a60:	07e1      	lsls	r1, r4, #31
 8007a62:	d508      	bpl.n	8007a76 <_dtoa_r+0x366>
 8007a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a6c:	f7f8 fdc4 	bl	80005f8 <__aeabi_dmul>
 8007a70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a74:	3601      	adds	r6, #1
 8007a76:	1064      	asrs	r4, r4, #1
 8007a78:	3508      	adds	r5, #8
 8007a7a:	e7e5      	b.n	8007a48 <_dtoa_r+0x338>
 8007a7c:	f000 80d2 	beq.w	8007c24 <_dtoa_r+0x514>
 8007a80:	427c      	negs	r4, r7
 8007a82:	4b92      	ldr	r3, [pc, #584]	@ (8007ccc <_dtoa_r+0x5bc>)
 8007a84:	4d92      	ldr	r5, [pc, #584]	@ (8007cd0 <_dtoa_r+0x5c0>)
 8007a86:	f004 020f 	and.w	r2, r4, #15
 8007a8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a96:	f7f8 fdaf 	bl	80005f8 <__aeabi_dmul>
 8007a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a9e:	1124      	asrs	r4, r4, #4
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	2602      	movs	r6, #2
 8007aa4:	2c00      	cmp	r4, #0
 8007aa6:	f040 80b2 	bne.w	8007c0e <_dtoa_r+0x4fe>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1d3      	bne.n	8007a56 <_dtoa_r+0x346>
 8007aae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ab0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 80b7 	beq.w	8007c28 <_dtoa_r+0x518>
 8007aba:	4b86      	ldr	r3, [pc, #536]	@ (8007cd4 <_dtoa_r+0x5c4>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	4620      	mov	r0, r4
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	f7f9 f80b 	bl	8000adc <__aeabi_dcmplt>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	f000 80ae 	beq.w	8007c28 <_dtoa_r+0x518>
 8007acc:	9b07      	ldr	r3, [sp, #28]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 80aa 	beq.w	8007c28 <_dtoa_r+0x518>
 8007ad4:	9b00      	ldr	r3, [sp, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	dd37      	ble.n	8007b4a <_dtoa_r+0x43a>
 8007ada:	1e7b      	subs	r3, r7, #1
 8007adc:	9304      	str	r3, [sp, #16]
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4b7d      	ldr	r3, [pc, #500]	@ (8007cd8 <_dtoa_r+0x5c8>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	4629      	mov	r1, r5
 8007ae6:	f7f8 fd87 	bl	80005f8 <__aeabi_dmul>
 8007aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aee:	9c00      	ldr	r4, [sp, #0]
 8007af0:	3601      	adds	r6, #1
 8007af2:	4630      	mov	r0, r6
 8007af4:	f7f8 fd16 	bl	8000524 <__aeabi_i2d>
 8007af8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007afc:	f7f8 fd7c 	bl	80005f8 <__aeabi_dmul>
 8007b00:	4b76      	ldr	r3, [pc, #472]	@ (8007cdc <_dtoa_r+0x5cc>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	f7f8 fbc2 	bl	800028c <__adddf3>
 8007b08:	4605      	mov	r5, r0
 8007b0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b0e:	2c00      	cmp	r4, #0
 8007b10:	f040 808d 	bne.w	8007c2e <_dtoa_r+0x51e>
 8007b14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b18:	4b71      	ldr	r3, [pc, #452]	@ (8007ce0 <_dtoa_r+0x5d0>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f7f8 fbb4 	bl	8000288 <__aeabi_dsub>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b28:	462a      	mov	r2, r5
 8007b2a:	4633      	mov	r3, r6
 8007b2c:	f7f8 fff4 	bl	8000b18 <__aeabi_dcmpgt>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	f040 828b 	bne.w	800804c <_dtoa_r+0x93c>
 8007b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b3a:	462a      	mov	r2, r5
 8007b3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b40:	f7f8 ffcc 	bl	8000adc <__aeabi_dcmplt>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	f040 8128 	bne.w	8007d9a <_dtoa_r+0x68a>
 8007b4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f2c0 815a 	blt.w	8007e0e <_dtoa_r+0x6fe>
 8007b5a:	2f0e      	cmp	r7, #14
 8007b5c:	f300 8157 	bgt.w	8007e0e <_dtoa_r+0x6fe>
 8007b60:	4b5a      	ldr	r3, [pc, #360]	@ (8007ccc <_dtoa_r+0x5bc>)
 8007b62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b66:	ed93 7b00 	vldr	d7, [r3]
 8007b6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	ed8d 7b00 	vstr	d7, [sp]
 8007b72:	da03      	bge.n	8007b7c <_dtoa_r+0x46c>
 8007b74:	9b07      	ldr	r3, [sp, #28]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f340 8101 	ble.w	8007d7e <_dtoa_r+0x66e>
 8007b7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b80:	4656      	mov	r6, sl
 8007b82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b86:	4620      	mov	r0, r4
 8007b88:	4629      	mov	r1, r5
 8007b8a:	f7f8 fe5f 	bl	800084c <__aeabi_ddiv>
 8007b8e:	f7f8 ffcd 	bl	8000b2c <__aeabi_d2iz>
 8007b92:	4680      	mov	r8, r0
 8007b94:	f7f8 fcc6 	bl	8000524 <__aeabi_i2d>
 8007b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b9c:	f7f8 fd2c 	bl	80005f8 <__aeabi_dmul>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007bac:	f7f8 fb6c 	bl	8000288 <__aeabi_dsub>
 8007bb0:	f806 4b01 	strb.w	r4, [r6], #1
 8007bb4:	9d07      	ldr	r5, [sp, #28]
 8007bb6:	eba6 040a 	sub.w	r4, r6, sl
 8007bba:	42a5      	cmp	r5, r4
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	f040 8117 	bne.w	8007df2 <_dtoa_r+0x6e2>
 8007bc4:	f7f8 fb62 	bl	800028c <__adddf3>
 8007bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bcc:	4604      	mov	r4, r0
 8007bce:	460d      	mov	r5, r1
 8007bd0:	f7f8 ffa2 	bl	8000b18 <__aeabi_dcmpgt>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	f040 80f9 	bne.w	8007dcc <_dtoa_r+0x6bc>
 8007bda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bde:	4620      	mov	r0, r4
 8007be0:	4629      	mov	r1, r5
 8007be2:	f7f8 ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 8007be6:	b118      	cbz	r0, 8007bf0 <_dtoa_r+0x4e0>
 8007be8:	f018 0f01 	tst.w	r8, #1
 8007bec:	f040 80ee 	bne.w	8007dcc <_dtoa_r+0x6bc>
 8007bf0:	4649      	mov	r1, r9
 8007bf2:	4658      	mov	r0, fp
 8007bf4:	f000 fb98 	bl	8008328 <_Bfree>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	7033      	strb	r3, [r6, #0]
 8007bfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007bfe:	3701      	adds	r7, #1
 8007c00:	601f      	str	r7, [r3, #0]
 8007c02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 831d 	beq.w	8008244 <_dtoa_r+0xb34>
 8007c0a:	601e      	str	r6, [r3, #0]
 8007c0c:	e31a      	b.n	8008244 <_dtoa_r+0xb34>
 8007c0e:	07e2      	lsls	r2, r4, #31
 8007c10:	d505      	bpl.n	8007c1e <_dtoa_r+0x50e>
 8007c12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c16:	f7f8 fcef 	bl	80005f8 <__aeabi_dmul>
 8007c1a:	3601      	adds	r6, #1
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	1064      	asrs	r4, r4, #1
 8007c20:	3508      	adds	r5, #8
 8007c22:	e73f      	b.n	8007aa4 <_dtoa_r+0x394>
 8007c24:	2602      	movs	r6, #2
 8007c26:	e742      	b.n	8007aae <_dtoa_r+0x39e>
 8007c28:	9c07      	ldr	r4, [sp, #28]
 8007c2a:	9704      	str	r7, [sp, #16]
 8007c2c:	e761      	b.n	8007af2 <_dtoa_r+0x3e2>
 8007c2e:	4b27      	ldr	r3, [pc, #156]	@ (8007ccc <_dtoa_r+0x5bc>)
 8007c30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c3a:	4454      	add	r4, sl
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	d053      	beq.n	8007ce8 <_dtoa_r+0x5d8>
 8007c40:	4928      	ldr	r1, [pc, #160]	@ (8007ce4 <_dtoa_r+0x5d4>)
 8007c42:	2000      	movs	r0, #0
 8007c44:	f7f8 fe02 	bl	800084c <__aeabi_ddiv>
 8007c48:	4633      	mov	r3, r6
 8007c4a:	462a      	mov	r2, r5
 8007c4c:	f7f8 fb1c 	bl	8000288 <__aeabi_dsub>
 8007c50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c54:	4656      	mov	r6, sl
 8007c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c5a:	f7f8 ff67 	bl	8000b2c <__aeabi_d2iz>
 8007c5e:	4605      	mov	r5, r0
 8007c60:	f7f8 fc60 	bl	8000524 <__aeabi_i2d>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c6c:	f7f8 fb0c 	bl	8000288 <__aeabi_dsub>
 8007c70:	3530      	adds	r5, #48	@ 0x30
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c7a:	f806 5b01 	strb.w	r5, [r6], #1
 8007c7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c82:	f7f8 ff2b 	bl	8000adc <__aeabi_dcmplt>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d171      	bne.n	8007d6e <_dtoa_r+0x65e>
 8007c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c8e:	4911      	ldr	r1, [pc, #68]	@ (8007cd4 <_dtoa_r+0x5c4>)
 8007c90:	2000      	movs	r0, #0
 8007c92:	f7f8 faf9 	bl	8000288 <__aeabi_dsub>
 8007c96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c9a:	f7f8 ff1f 	bl	8000adc <__aeabi_dcmplt>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f040 8095 	bne.w	8007dce <_dtoa_r+0x6be>
 8007ca4:	42a6      	cmp	r6, r4
 8007ca6:	f43f af50 	beq.w	8007b4a <_dtoa_r+0x43a>
 8007caa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cae:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd8 <_dtoa_r+0x5c8>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f7f8 fca1 	bl	80005f8 <__aeabi_dmul>
 8007cb6:	4b08      	ldr	r3, [pc, #32]	@ (8007cd8 <_dtoa_r+0x5c8>)
 8007cb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cc2:	f7f8 fc99 	bl	80005f8 <__aeabi_dmul>
 8007cc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cca:	e7c4      	b.n	8007c56 <_dtoa_r+0x546>
 8007ccc:	0800a560 	.word	0x0800a560
 8007cd0:	0800a538 	.word	0x0800a538
 8007cd4:	3ff00000 	.word	0x3ff00000
 8007cd8:	40240000 	.word	0x40240000
 8007cdc:	401c0000 	.word	0x401c0000
 8007ce0:	40140000 	.word	0x40140000
 8007ce4:	3fe00000 	.word	0x3fe00000
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4628      	mov	r0, r5
 8007cec:	f7f8 fc84 	bl	80005f8 <__aeabi_dmul>
 8007cf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cf4:	9415      	str	r4, [sp, #84]	@ 0x54
 8007cf6:	4656      	mov	r6, sl
 8007cf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cfc:	f7f8 ff16 	bl	8000b2c <__aeabi_d2iz>
 8007d00:	4605      	mov	r5, r0
 8007d02:	f7f8 fc0f 	bl	8000524 <__aeabi_i2d>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d0e:	f7f8 fabb 	bl	8000288 <__aeabi_dsub>
 8007d12:	3530      	adds	r5, #48	@ 0x30
 8007d14:	f806 5b01 	strb.w	r5, [r6], #1
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	42a6      	cmp	r6, r4
 8007d1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d22:	f04f 0200 	mov.w	r2, #0
 8007d26:	d124      	bne.n	8007d72 <_dtoa_r+0x662>
 8007d28:	4bac      	ldr	r3, [pc, #688]	@ (8007fdc <_dtoa_r+0x8cc>)
 8007d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d2e:	f7f8 faad 	bl	800028c <__adddf3>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d3a:	f7f8 feed 	bl	8000b18 <__aeabi_dcmpgt>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	d145      	bne.n	8007dce <_dtoa_r+0x6be>
 8007d42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d46:	49a5      	ldr	r1, [pc, #660]	@ (8007fdc <_dtoa_r+0x8cc>)
 8007d48:	2000      	movs	r0, #0
 8007d4a:	f7f8 fa9d 	bl	8000288 <__aeabi_dsub>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d56:	f7f8 fec1 	bl	8000adc <__aeabi_dcmplt>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f43f aef5 	beq.w	8007b4a <_dtoa_r+0x43a>
 8007d60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007d62:	1e73      	subs	r3, r6, #1
 8007d64:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d6a:	2b30      	cmp	r3, #48	@ 0x30
 8007d6c:	d0f8      	beq.n	8007d60 <_dtoa_r+0x650>
 8007d6e:	9f04      	ldr	r7, [sp, #16]
 8007d70:	e73e      	b.n	8007bf0 <_dtoa_r+0x4e0>
 8007d72:	4b9b      	ldr	r3, [pc, #620]	@ (8007fe0 <_dtoa_r+0x8d0>)
 8007d74:	f7f8 fc40 	bl	80005f8 <__aeabi_dmul>
 8007d78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d7c:	e7bc      	b.n	8007cf8 <_dtoa_r+0x5e8>
 8007d7e:	d10c      	bne.n	8007d9a <_dtoa_r+0x68a>
 8007d80:	4b98      	ldr	r3, [pc, #608]	@ (8007fe4 <_dtoa_r+0x8d4>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d88:	f7f8 fc36 	bl	80005f8 <__aeabi_dmul>
 8007d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d90:	f7f8 feb8 	bl	8000b04 <__aeabi_dcmpge>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	f000 8157 	beq.w	8008048 <_dtoa_r+0x938>
 8007d9a:	2400      	movs	r4, #0
 8007d9c:	4625      	mov	r5, r4
 8007d9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007da0:	43db      	mvns	r3, r3
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	4656      	mov	r6, sl
 8007da6:	2700      	movs	r7, #0
 8007da8:	4621      	mov	r1, r4
 8007daa:	4658      	mov	r0, fp
 8007dac:	f000 fabc 	bl	8008328 <_Bfree>
 8007db0:	2d00      	cmp	r5, #0
 8007db2:	d0dc      	beq.n	8007d6e <_dtoa_r+0x65e>
 8007db4:	b12f      	cbz	r7, 8007dc2 <_dtoa_r+0x6b2>
 8007db6:	42af      	cmp	r7, r5
 8007db8:	d003      	beq.n	8007dc2 <_dtoa_r+0x6b2>
 8007dba:	4639      	mov	r1, r7
 8007dbc:	4658      	mov	r0, fp
 8007dbe:	f000 fab3 	bl	8008328 <_Bfree>
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	4658      	mov	r0, fp
 8007dc6:	f000 faaf 	bl	8008328 <_Bfree>
 8007dca:	e7d0      	b.n	8007d6e <_dtoa_r+0x65e>
 8007dcc:	9704      	str	r7, [sp, #16]
 8007dce:	4633      	mov	r3, r6
 8007dd0:	461e      	mov	r6, r3
 8007dd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dd6:	2a39      	cmp	r2, #57	@ 0x39
 8007dd8:	d107      	bne.n	8007dea <_dtoa_r+0x6da>
 8007dda:	459a      	cmp	sl, r3
 8007ddc:	d1f8      	bne.n	8007dd0 <_dtoa_r+0x6c0>
 8007dde:	9a04      	ldr	r2, [sp, #16]
 8007de0:	3201      	adds	r2, #1
 8007de2:	9204      	str	r2, [sp, #16]
 8007de4:	2230      	movs	r2, #48	@ 0x30
 8007de6:	f88a 2000 	strb.w	r2, [sl]
 8007dea:	781a      	ldrb	r2, [r3, #0]
 8007dec:	3201      	adds	r2, #1
 8007dee:	701a      	strb	r2, [r3, #0]
 8007df0:	e7bd      	b.n	8007d6e <_dtoa_r+0x65e>
 8007df2:	4b7b      	ldr	r3, [pc, #492]	@ (8007fe0 <_dtoa_r+0x8d0>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	f7f8 fbff 	bl	80005f8 <__aeabi_dmul>
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	4604      	mov	r4, r0
 8007e00:	460d      	mov	r5, r1
 8007e02:	f7f8 fe61 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f43f aebb 	beq.w	8007b82 <_dtoa_r+0x472>
 8007e0c:	e6f0      	b.n	8007bf0 <_dtoa_r+0x4e0>
 8007e0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e10:	2a00      	cmp	r2, #0
 8007e12:	f000 80db 	beq.w	8007fcc <_dtoa_r+0x8bc>
 8007e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e18:	2a01      	cmp	r2, #1
 8007e1a:	f300 80bf 	bgt.w	8007f9c <_dtoa_r+0x88c>
 8007e1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e20:	2a00      	cmp	r2, #0
 8007e22:	f000 80b7 	beq.w	8007f94 <_dtoa_r+0x884>
 8007e26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e2c:	4646      	mov	r6, r8
 8007e2e:	9a08      	ldr	r2, [sp, #32]
 8007e30:	2101      	movs	r1, #1
 8007e32:	441a      	add	r2, r3
 8007e34:	4658      	mov	r0, fp
 8007e36:	4498      	add	r8, r3
 8007e38:	9208      	str	r2, [sp, #32]
 8007e3a:	f000 fb29 	bl	8008490 <__i2b>
 8007e3e:	4605      	mov	r5, r0
 8007e40:	b15e      	cbz	r6, 8007e5a <_dtoa_r+0x74a>
 8007e42:	9b08      	ldr	r3, [sp, #32]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	dd08      	ble.n	8007e5a <_dtoa_r+0x74a>
 8007e48:	42b3      	cmp	r3, r6
 8007e4a:	9a08      	ldr	r2, [sp, #32]
 8007e4c:	bfa8      	it	ge
 8007e4e:	4633      	movge	r3, r6
 8007e50:	eba8 0803 	sub.w	r8, r8, r3
 8007e54:	1af6      	subs	r6, r6, r3
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	9308      	str	r3, [sp, #32]
 8007e5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e5c:	b1f3      	cbz	r3, 8007e9c <_dtoa_r+0x78c>
 8007e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 80b7 	beq.w	8007fd4 <_dtoa_r+0x8c4>
 8007e66:	b18c      	cbz	r4, 8007e8c <_dtoa_r+0x77c>
 8007e68:	4629      	mov	r1, r5
 8007e6a:	4622      	mov	r2, r4
 8007e6c:	4658      	mov	r0, fp
 8007e6e:	f000 fbcf 	bl	8008610 <__pow5mult>
 8007e72:	464a      	mov	r2, r9
 8007e74:	4601      	mov	r1, r0
 8007e76:	4605      	mov	r5, r0
 8007e78:	4658      	mov	r0, fp
 8007e7a:	f000 fb1f 	bl	80084bc <__multiply>
 8007e7e:	4649      	mov	r1, r9
 8007e80:	9004      	str	r0, [sp, #16]
 8007e82:	4658      	mov	r0, fp
 8007e84:	f000 fa50 	bl	8008328 <_Bfree>
 8007e88:	9b04      	ldr	r3, [sp, #16]
 8007e8a:	4699      	mov	r9, r3
 8007e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e8e:	1b1a      	subs	r2, r3, r4
 8007e90:	d004      	beq.n	8007e9c <_dtoa_r+0x78c>
 8007e92:	4649      	mov	r1, r9
 8007e94:	4658      	mov	r0, fp
 8007e96:	f000 fbbb 	bl	8008610 <__pow5mult>
 8007e9a:	4681      	mov	r9, r0
 8007e9c:	2101      	movs	r1, #1
 8007e9e:	4658      	mov	r0, fp
 8007ea0:	f000 faf6 	bl	8008490 <__i2b>
 8007ea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 81cf 	beq.w	800824c <_dtoa_r+0xb3c>
 8007eae:	461a      	mov	r2, r3
 8007eb0:	4601      	mov	r1, r0
 8007eb2:	4658      	mov	r0, fp
 8007eb4:	f000 fbac 	bl	8008610 <__pow5mult>
 8007eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	f300 8095 	bgt.w	8007fec <_dtoa_r+0x8dc>
 8007ec2:	9b02      	ldr	r3, [sp, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f040 8087 	bne.w	8007fd8 <_dtoa_r+0x8c8>
 8007eca:	9b03      	ldr	r3, [sp, #12]
 8007ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f040 8089 	bne.w	8007fe8 <_dtoa_r+0x8d8>
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007edc:	0d1b      	lsrs	r3, r3, #20
 8007ede:	051b      	lsls	r3, r3, #20
 8007ee0:	b12b      	cbz	r3, 8007eee <_dtoa_r+0x7de>
 8007ee2:	9b08      	ldr	r3, [sp, #32]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	9308      	str	r3, [sp, #32]
 8007ee8:	f108 0801 	add.w	r8, r8, #1
 8007eec:	2301      	movs	r3, #1
 8007eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ef0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 81b0 	beq.w	8008258 <_dtoa_r+0xb48>
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007efe:	6918      	ldr	r0, [r3, #16]
 8007f00:	f000 fa7a 	bl	80083f8 <__hi0bits>
 8007f04:	f1c0 0020 	rsb	r0, r0, #32
 8007f08:	9b08      	ldr	r3, [sp, #32]
 8007f0a:	4418      	add	r0, r3
 8007f0c:	f010 001f 	ands.w	r0, r0, #31
 8007f10:	d077      	beq.n	8008002 <_dtoa_r+0x8f2>
 8007f12:	f1c0 0320 	rsb	r3, r0, #32
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	dd6b      	ble.n	8007ff2 <_dtoa_r+0x8e2>
 8007f1a:	9b08      	ldr	r3, [sp, #32]
 8007f1c:	f1c0 001c 	rsb	r0, r0, #28
 8007f20:	4403      	add	r3, r0
 8007f22:	4480      	add	r8, r0
 8007f24:	4406      	add	r6, r0
 8007f26:	9308      	str	r3, [sp, #32]
 8007f28:	f1b8 0f00 	cmp.w	r8, #0
 8007f2c:	dd05      	ble.n	8007f3a <_dtoa_r+0x82a>
 8007f2e:	4649      	mov	r1, r9
 8007f30:	4642      	mov	r2, r8
 8007f32:	4658      	mov	r0, fp
 8007f34:	f000 fbc6 	bl	80086c4 <__lshift>
 8007f38:	4681      	mov	r9, r0
 8007f3a:	9b08      	ldr	r3, [sp, #32]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	dd05      	ble.n	8007f4c <_dtoa_r+0x83c>
 8007f40:	4621      	mov	r1, r4
 8007f42:	461a      	mov	r2, r3
 8007f44:	4658      	mov	r0, fp
 8007f46:	f000 fbbd 	bl	80086c4 <__lshift>
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d059      	beq.n	8008006 <_dtoa_r+0x8f6>
 8007f52:	4621      	mov	r1, r4
 8007f54:	4648      	mov	r0, r9
 8007f56:	f000 fc21 	bl	800879c <__mcmp>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	da53      	bge.n	8008006 <_dtoa_r+0x8f6>
 8007f5e:	1e7b      	subs	r3, r7, #1
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	4649      	mov	r1, r9
 8007f64:	2300      	movs	r3, #0
 8007f66:	220a      	movs	r2, #10
 8007f68:	4658      	mov	r0, fp
 8007f6a:	f000 f9ff 	bl	800836c <__multadd>
 8007f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f70:	4681      	mov	r9, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 8172 	beq.w	800825c <_dtoa_r+0xb4c>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	220a      	movs	r2, #10
 8007f7e:	4658      	mov	r0, fp
 8007f80:	f000 f9f4 	bl	800836c <__multadd>
 8007f84:	9b00      	ldr	r3, [sp, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	4605      	mov	r5, r0
 8007f8a:	dc67      	bgt.n	800805c <_dtoa_r+0x94c>
 8007f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	dc41      	bgt.n	8008016 <_dtoa_r+0x906>
 8007f92:	e063      	b.n	800805c <_dtoa_r+0x94c>
 8007f94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007f96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f9a:	e746      	b.n	8007e2a <_dtoa_r+0x71a>
 8007f9c:	9b07      	ldr	r3, [sp, #28]
 8007f9e:	1e5c      	subs	r4, r3, #1
 8007fa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fa2:	42a3      	cmp	r3, r4
 8007fa4:	bfbf      	itttt	lt
 8007fa6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007fa8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007faa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007fac:	1ae3      	sublt	r3, r4, r3
 8007fae:	bfb4      	ite	lt
 8007fb0:	18d2      	addlt	r2, r2, r3
 8007fb2:	1b1c      	subge	r4, r3, r4
 8007fb4:	9b07      	ldr	r3, [sp, #28]
 8007fb6:	bfbc      	itt	lt
 8007fb8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007fba:	2400      	movlt	r4, #0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	bfb5      	itete	lt
 8007fc0:	eba8 0603 	sublt.w	r6, r8, r3
 8007fc4:	9b07      	ldrge	r3, [sp, #28]
 8007fc6:	2300      	movlt	r3, #0
 8007fc8:	4646      	movge	r6, r8
 8007fca:	e730      	b.n	8007e2e <_dtoa_r+0x71e>
 8007fcc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007fce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007fd0:	4646      	mov	r6, r8
 8007fd2:	e735      	b.n	8007e40 <_dtoa_r+0x730>
 8007fd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fd6:	e75c      	b.n	8007e92 <_dtoa_r+0x782>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	e788      	b.n	8007eee <_dtoa_r+0x7de>
 8007fdc:	3fe00000 	.word	0x3fe00000
 8007fe0:	40240000 	.word	0x40240000
 8007fe4:	40140000 	.word	0x40140000
 8007fe8:	9b02      	ldr	r3, [sp, #8]
 8007fea:	e780      	b.n	8007eee <_dtoa_r+0x7de>
 8007fec:	2300      	movs	r3, #0
 8007fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ff0:	e782      	b.n	8007ef8 <_dtoa_r+0x7e8>
 8007ff2:	d099      	beq.n	8007f28 <_dtoa_r+0x818>
 8007ff4:	9a08      	ldr	r2, [sp, #32]
 8007ff6:	331c      	adds	r3, #28
 8007ff8:	441a      	add	r2, r3
 8007ffa:	4498      	add	r8, r3
 8007ffc:	441e      	add	r6, r3
 8007ffe:	9208      	str	r2, [sp, #32]
 8008000:	e792      	b.n	8007f28 <_dtoa_r+0x818>
 8008002:	4603      	mov	r3, r0
 8008004:	e7f6      	b.n	8007ff4 <_dtoa_r+0x8e4>
 8008006:	9b07      	ldr	r3, [sp, #28]
 8008008:	9704      	str	r7, [sp, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	dc20      	bgt.n	8008050 <_dtoa_r+0x940>
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008012:	2b02      	cmp	r3, #2
 8008014:	dd1e      	ble.n	8008054 <_dtoa_r+0x944>
 8008016:	9b00      	ldr	r3, [sp, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	f47f aec0 	bne.w	8007d9e <_dtoa_r+0x68e>
 800801e:	4621      	mov	r1, r4
 8008020:	2205      	movs	r2, #5
 8008022:	4658      	mov	r0, fp
 8008024:	f000 f9a2 	bl	800836c <__multadd>
 8008028:	4601      	mov	r1, r0
 800802a:	4604      	mov	r4, r0
 800802c:	4648      	mov	r0, r9
 800802e:	f000 fbb5 	bl	800879c <__mcmp>
 8008032:	2800      	cmp	r0, #0
 8008034:	f77f aeb3 	ble.w	8007d9e <_dtoa_r+0x68e>
 8008038:	4656      	mov	r6, sl
 800803a:	2331      	movs	r3, #49	@ 0x31
 800803c:	f806 3b01 	strb.w	r3, [r6], #1
 8008040:	9b04      	ldr	r3, [sp, #16]
 8008042:	3301      	adds	r3, #1
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	e6ae      	b.n	8007da6 <_dtoa_r+0x696>
 8008048:	9c07      	ldr	r4, [sp, #28]
 800804a:	9704      	str	r7, [sp, #16]
 800804c:	4625      	mov	r5, r4
 800804e:	e7f3      	b.n	8008038 <_dtoa_r+0x928>
 8008050:	9b07      	ldr	r3, [sp, #28]
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 8104 	beq.w	8008264 <_dtoa_r+0xb54>
 800805c:	2e00      	cmp	r6, #0
 800805e:	dd05      	ble.n	800806c <_dtoa_r+0x95c>
 8008060:	4629      	mov	r1, r5
 8008062:	4632      	mov	r2, r6
 8008064:	4658      	mov	r0, fp
 8008066:	f000 fb2d 	bl	80086c4 <__lshift>
 800806a:	4605      	mov	r5, r0
 800806c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800806e:	2b00      	cmp	r3, #0
 8008070:	d05a      	beq.n	8008128 <_dtoa_r+0xa18>
 8008072:	6869      	ldr	r1, [r5, #4]
 8008074:	4658      	mov	r0, fp
 8008076:	f000 f917 	bl	80082a8 <_Balloc>
 800807a:	4606      	mov	r6, r0
 800807c:	b928      	cbnz	r0, 800808a <_dtoa_r+0x97a>
 800807e:	4b84      	ldr	r3, [pc, #528]	@ (8008290 <_dtoa_r+0xb80>)
 8008080:	4602      	mov	r2, r0
 8008082:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008086:	f7ff bb5a 	b.w	800773e <_dtoa_r+0x2e>
 800808a:	692a      	ldr	r2, [r5, #16]
 800808c:	3202      	adds	r2, #2
 800808e:	0092      	lsls	r2, r2, #2
 8008090:	f105 010c 	add.w	r1, r5, #12
 8008094:	300c      	adds	r0, #12
 8008096:	f000 fca7 	bl	80089e8 <memcpy>
 800809a:	2201      	movs	r2, #1
 800809c:	4631      	mov	r1, r6
 800809e:	4658      	mov	r0, fp
 80080a0:	f000 fb10 	bl	80086c4 <__lshift>
 80080a4:	f10a 0301 	add.w	r3, sl, #1
 80080a8:	9307      	str	r3, [sp, #28]
 80080aa:	9b00      	ldr	r3, [sp, #0]
 80080ac:	4453      	add	r3, sl
 80080ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080b0:	9b02      	ldr	r3, [sp, #8]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	462f      	mov	r7, r5
 80080b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80080ba:	4605      	mov	r5, r0
 80080bc:	9b07      	ldr	r3, [sp, #28]
 80080be:	4621      	mov	r1, r4
 80080c0:	3b01      	subs	r3, #1
 80080c2:	4648      	mov	r0, r9
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	f7ff fa9b 	bl	8007600 <quorem>
 80080ca:	4639      	mov	r1, r7
 80080cc:	9002      	str	r0, [sp, #8]
 80080ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080d2:	4648      	mov	r0, r9
 80080d4:	f000 fb62 	bl	800879c <__mcmp>
 80080d8:	462a      	mov	r2, r5
 80080da:	9008      	str	r0, [sp, #32]
 80080dc:	4621      	mov	r1, r4
 80080de:	4658      	mov	r0, fp
 80080e0:	f000 fb78 	bl	80087d4 <__mdiff>
 80080e4:	68c2      	ldr	r2, [r0, #12]
 80080e6:	4606      	mov	r6, r0
 80080e8:	bb02      	cbnz	r2, 800812c <_dtoa_r+0xa1c>
 80080ea:	4601      	mov	r1, r0
 80080ec:	4648      	mov	r0, r9
 80080ee:	f000 fb55 	bl	800879c <__mcmp>
 80080f2:	4602      	mov	r2, r0
 80080f4:	4631      	mov	r1, r6
 80080f6:	4658      	mov	r0, fp
 80080f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80080fa:	f000 f915 	bl	8008328 <_Bfree>
 80080fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008100:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008102:	9e07      	ldr	r6, [sp, #28]
 8008104:	ea43 0102 	orr.w	r1, r3, r2
 8008108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800810a:	4319      	orrs	r1, r3
 800810c:	d110      	bne.n	8008130 <_dtoa_r+0xa20>
 800810e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008112:	d029      	beq.n	8008168 <_dtoa_r+0xa58>
 8008114:	9b08      	ldr	r3, [sp, #32]
 8008116:	2b00      	cmp	r3, #0
 8008118:	dd02      	ble.n	8008120 <_dtoa_r+0xa10>
 800811a:	9b02      	ldr	r3, [sp, #8]
 800811c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008120:	9b00      	ldr	r3, [sp, #0]
 8008122:	f883 8000 	strb.w	r8, [r3]
 8008126:	e63f      	b.n	8007da8 <_dtoa_r+0x698>
 8008128:	4628      	mov	r0, r5
 800812a:	e7bb      	b.n	80080a4 <_dtoa_r+0x994>
 800812c:	2201      	movs	r2, #1
 800812e:	e7e1      	b.n	80080f4 <_dtoa_r+0x9e4>
 8008130:	9b08      	ldr	r3, [sp, #32]
 8008132:	2b00      	cmp	r3, #0
 8008134:	db04      	blt.n	8008140 <_dtoa_r+0xa30>
 8008136:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008138:	430b      	orrs	r3, r1
 800813a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800813c:	430b      	orrs	r3, r1
 800813e:	d120      	bne.n	8008182 <_dtoa_r+0xa72>
 8008140:	2a00      	cmp	r2, #0
 8008142:	dded      	ble.n	8008120 <_dtoa_r+0xa10>
 8008144:	4649      	mov	r1, r9
 8008146:	2201      	movs	r2, #1
 8008148:	4658      	mov	r0, fp
 800814a:	f000 fabb 	bl	80086c4 <__lshift>
 800814e:	4621      	mov	r1, r4
 8008150:	4681      	mov	r9, r0
 8008152:	f000 fb23 	bl	800879c <__mcmp>
 8008156:	2800      	cmp	r0, #0
 8008158:	dc03      	bgt.n	8008162 <_dtoa_r+0xa52>
 800815a:	d1e1      	bne.n	8008120 <_dtoa_r+0xa10>
 800815c:	f018 0f01 	tst.w	r8, #1
 8008160:	d0de      	beq.n	8008120 <_dtoa_r+0xa10>
 8008162:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008166:	d1d8      	bne.n	800811a <_dtoa_r+0xa0a>
 8008168:	9a00      	ldr	r2, [sp, #0]
 800816a:	2339      	movs	r3, #57	@ 0x39
 800816c:	7013      	strb	r3, [r2, #0]
 800816e:	4633      	mov	r3, r6
 8008170:	461e      	mov	r6, r3
 8008172:	3b01      	subs	r3, #1
 8008174:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008178:	2a39      	cmp	r2, #57	@ 0x39
 800817a:	d052      	beq.n	8008222 <_dtoa_r+0xb12>
 800817c:	3201      	adds	r2, #1
 800817e:	701a      	strb	r2, [r3, #0]
 8008180:	e612      	b.n	8007da8 <_dtoa_r+0x698>
 8008182:	2a00      	cmp	r2, #0
 8008184:	dd07      	ble.n	8008196 <_dtoa_r+0xa86>
 8008186:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800818a:	d0ed      	beq.n	8008168 <_dtoa_r+0xa58>
 800818c:	9a00      	ldr	r2, [sp, #0]
 800818e:	f108 0301 	add.w	r3, r8, #1
 8008192:	7013      	strb	r3, [r2, #0]
 8008194:	e608      	b.n	8007da8 <_dtoa_r+0x698>
 8008196:	9b07      	ldr	r3, [sp, #28]
 8008198:	9a07      	ldr	r2, [sp, #28]
 800819a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800819e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d028      	beq.n	80081f6 <_dtoa_r+0xae6>
 80081a4:	4649      	mov	r1, r9
 80081a6:	2300      	movs	r3, #0
 80081a8:	220a      	movs	r2, #10
 80081aa:	4658      	mov	r0, fp
 80081ac:	f000 f8de 	bl	800836c <__multadd>
 80081b0:	42af      	cmp	r7, r5
 80081b2:	4681      	mov	r9, r0
 80081b4:	f04f 0300 	mov.w	r3, #0
 80081b8:	f04f 020a 	mov.w	r2, #10
 80081bc:	4639      	mov	r1, r7
 80081be:	4658      	mov	r0, fp
 80081c0:	d107      	bne.n	80081d2 <_dtoa_r+0xac2>
 80081c2:	f000 f8d3 	bl	800836c <__multadd>
 80081c6:	4607      	mov	r7, r0
 80081c8:	4605      	mov	r5, r0
 80081ca:	9b07      	ldr	r3, [sp, #28]
 80081cc:	3301      	adds	r3, #1
 80081ce:	9307      	str	r3, [sp, #28]
 80081d0:	e774      	b.n	80080bc <_dtoa_r+0x9ac>
 80081d2:	f000 f8cb 	bl	800836c <__multadd>
 80081d6:	4629      	mov	r1, r5
 80081d8:	4607      	mov	r7, r0
 80081da:	2300      	movs	r3, #0
 80081dc:	220a      	movs	r2, #10
 80081de:	4658      	mov	r0, fp
 80081e0:	f000 f8c4 	bl	800836c <__multadd>
 80081e4:	4605      	mov	r5, r0
 80081e6:	e7f0      	b.n	80081ca <_dtoa_r+0xaba>
 80081e8:	9b00      	ldr	r3, [sp, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	bfcc      	ite	gt
 80081ee:	461e      	movgt	r6, r3
 80081f0:	2601      	movle	r6, #1
 80081f2:	4456      	add	r6, sl
 80081f4:	2700      	movs	r7, #0
 80081f6:	4649      	mov	r1, r9
 80081f8:	2201      	movs	r2, #1
 80081fa:	4658      	mov	r0, fp
 80081fc:	f000 fa62 	bl	80086c4 <__lshift>
 8008200:	4621      	mov	r1, r4
 8008202:	4681      	mov	r9, r0
 8008204:	f000 faca 	bl	800879c <__mcmp>
 8008208:	2800      	cmp	r0, #0
 800820a:	dcb0      	bgt.n	800816e <_dtoa_r+0xa5e>
 800820c:	d102      	bne.n	8008214 <_dtoa_r+0xb04>
 800820e:	f018 0f01 	tst.w	r8, #1
 8008212:	d1ac      	bne.n	800816e <_dtoa_r+0xa5e>
 8008214:	4633      	mov	r3, r6
 8008216:	461e      	mov	r6, r3
 8008218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800821c:	2a30      	cmp	r2, #48	@ 0x30
 800821e:	d0fa      	beq.n	8008216 <_dtoa_r+0xb06>
 8008220:	e5c2      	b.n	8007da8 <_dtoa_r+0x698>
 8008222:	459a      	cmp	sl, r3
 8008224:	d1a4      	bne.n	8008170 <_dtoa_r+0xa60>
 8008226:	9b04      	ldr	r3, [sp, #16]
 8008228:	3301      	adds	r3, #1
 800822a:	9304      	str	r3, [sp, #16]
 800822c:	2331      	movs	r3, #49	@ 0x31
 800822e:	f88a 3000 	strb.w	r3, [sl]
 8008232:	e5b9      	b.n	8007da8 <_dtoa_r+0x698>
 8008234:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008236:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008294 <_dtoa_r+0xb84>
 800823a:	b11b      	cbz	r3, 8008244 <_dtoa_r+0xb34>
 800823c:	f10a 0308 	add.w	r3, sl, #8
 8008240:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	4650      	mov	r0, sl
 8008246:	b019      	add	sp, #100	@ 0x64
 8008248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800824e:	2b01      	cmp	r3, #1
 8008250:	f77f ae37 	ble.w	8007ec2 <_dtoa_r+0x7b2>
 8008254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008256:	930a      	str	r3, [sp, #40]	@ 0x28
 8008258:	2001      	movs	r0, #1
 800825a:	e655      	b.n	8007f08 <_dtoa_r+0x7f8>
 800825c:	9b00      	ldr	r3, [sp, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f77f aed6 	ble.w	8008010 <_dtoa_r+0x900>
 8008264:	4656      	mov	r6, sl
 8008266:	4621      	mov	r1, r4
 8008268:	4648      	mov	r0, r9
 800826a:	f7ff f9c9 	bl	8007600 <quorem>
 800826e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008272:	f806 8b01 	strb.w	r8, [r6], #1
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	eba6 020a 	sub.w	r2, r6, sl
 800827c:	4293      	cmp	r3, r2
 800827e:	ddb3      	ble.n	80081e8 <_dtoa_r+0xad8>
 8008280:	4649      	mov	r1, r9
 8008282:	2300      	movs	r3, #0
 8008284:	220a      	movs	r2, #10
 8008286:	4658      	mov	r0, fp
 8008288:	f000 f870 	bl	800836c <__multadd>
 800828c:	4681      	mov	r9, r0
 800828e:	e7ea      	b.n	8008266 <_dtoa_r+0xb56>
 8008290:	0800a4be 	.word	0x0800a4be
 8008294:	0800a440 	.word	0x0800a440

08008298 <malloc>:
 8008298:	4b02      	ldr	r3, [pc, #8]	@ (80082a4 <malloc+0xc>)
 800829a:	4601      	mov	r1, r0
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	f7fe bf27 	b.w	80070f0 <_malloc_r>
 80082a2:	bf00      	nop
 80082a4:	20000030 	.word	0x20000030

080082a8 <_Balloc>:
 80082a8:	b570      	push	{r4, r5, r6, lr}
 80082aa:	69c6      	ldr	r6, [r0, #28]
 80082ac:	4604      	mov	r4, r0
 80082ae:	460d      	mov	r5, r1
 80082b0:	b976      	cbnz	r6, 80082d0 <_Balloc+0x28>
 80082b2:	2010      	movs	r0, #16
 80082b4:	f7ff fff0 	bl	8008298 <malloc>
 80082b8:	4602      	mov	r2, r0
 80082ba:	61e0      	str	r0, [r4, #28]
 80082bc:	b920      	cbnz	r0, 80082c8 <_Balloc+0x20>
 80082be:	4b18      	ldr	r3, [pc, #96]	@ (8008320 <_Balloc+0x78>)
 80082c0:	4818      	ldr	r0, [pc, #96]	@ (8008324 <_Balloc+0x7c>)
 80082c2:	216b      	movs	r1, #107	@ 0x6b
 80082c4:	f000 fb9e 	bl	8008a04 <__assert_func>
 80082c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082cc:	6006      	str	r6, [r0, #0]
 80082ce:	60c6      	str	r6, [r0, #12]
 80082d0:	69e6      	ldr	r6, [r4, #28]
 80082d2:	68f3      	ldr	r3, [r6, #12]
 80082d4:	b183      	cbz	r3, 80082f8 <_Balloc+0x50>
 80082d6:	69e3      	ldr	r3, [r4, #28]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082de:	b9b8      	cbnz	r0, 8008310 <_Balloc+0x68>
 80082e0:	2101      	movs	r1, #1
 80082e2:	fa01 f605 	lsl.w	r6, r1, r5
 80082e6:	1d72      	adds	r2, r6, #5
 80082e8:	0092      	lsls	r2, r2, #2
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 fba8 	bl	8008a40 <_calloc_r>
 80082f0:	b160      	cbz	r0, 800830c <_Balloc+0x64>
 80082f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082f6:	e00e      	b.n	8008316 <_Balloc+0x6e>
 80082f8:	2221      	movs	r2, #33	@ 0x21
 80082fa:	2104      	movs	r1, #4
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 fb9f 	bl	8008a40 <_calloc_r>
 8008302:	69e3      	ldr	r3, [r4, #28]
 8008304:	60f0      	str	r0, [r6, #12]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1e4      	bne.n	80082d6 <_Balloc+0x2e>
 800830c:	2000      	movs	r0, #0
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	6802      	ldr	r2, [r0, #0]
 8008312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008316:	2300      	movs	r3, #0
 8008318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800831c:	e7f7      	b.n	800830e <_Balloc+0x66>
 800831e:	bf00      	nop
 8008320:	0800a44f 	.word	0x0800a44f
 8008324:	0800a4cf 	.word	0x0800a4cf

08008328 <_Bfree>:
 8008328:	b570      	push	{r4, r5, r6, lr}
 800832a:	69c6      	ldr	r6, [r0, #28]
 800832c:	4605      	mov	r5, r0
 800832e:	460c      	mov	r4, r1
 8008330:	b976      	cbnz	r6, 8008350 <_Bfree+0x28>
 8008332:	2010      	movs	r0, #16
 8008334:	f7ff ffb0 	bl	8008298 <malloc>
 8008338:	4602      	mov	r2, r0
 800833a:	61e8      	str	r0, [r5, #28]
 800833c:	b920      	cbnz	r0, 8008348 <_Bfree+0x20>
 800833e:	4b09      	ldr	r3, [pc, #36]	@ (8008364 <_Bfree+0x3c>)
 8008340:	4809      	ldr	r0, [pc, #36]	@ (8008368 <_Bfree+0x40>)
 8008342:	218f      	movs	r1, #143	@ 0x8f
 8008344:	f000 fb5e 	bl	8008a04 <__assert_func>
 8008348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800834c:	6006      	str	r6, [r0, #0]
 800834e:	60c6      	str	r6, [r0, #12]
 8008350:	b13c      	cbz	r4, 8008362 <_Bfree+0x3a>
 8008352:	69eb      	ldr	r3, [r5, #28]
 8008354:	6862      	ldr	r2, [r4, #4]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800835c:	6021      	str	r1, [r4, #0]
 800835e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	0800a44f 	.word	0x0800a44f
 8008368:	0800a4cf 	.word	0x0800a4cf

0800836c <__multadd>:
 800836c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008370:	690d      	ldr	r5, [r1, #16]
 8008372:	4607      	mov	r7, r0
 8008374:	460c      	mov	r4, r1
 8008376:	461e      	mov	r6, r3
 8008378:	f101 0c14 	add.w	ip, r1, #20
 800837c:	2000      	movs	r0, #0
 800837e:	f8dc 3000 	ldr.w	r3, [ip]
 8008382:	b299      	uxth	r1, r3
 8008384:	fb02 6101 	mla	r1, r2, r1, r6
 8008388:	0c1e      	lsrs	r6, r3, #16
 800838a:	0c0b      	lsrs	r3, r1, #16
 800838c:	fb02 3306 	mla	r3, r2, r6, r3
 8008390:	b289      	uxth	r1, r1
 8008392:	3001      	adds	r0, #1
 8008394:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008398:	4285      	cmp	r5, r0
 800839a:	f84c 1b04 	str.w	r1, [ip], #4
 800839e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083a2:	dcec      	bgt.n	800837e <__multadd+0x12>
 80083a4:	b30e      	cbz	r6, 80083ea <__multadd+0x7e>
 80083a6:	68a3      	ldr	r3, [r4, #8]
 80083a8:	42ab      	cmp	r3, r5
 80083aa:	dc19      	bgt.n	80083e0 <__multadd+0x74>
 80083ac:	6861      	ldr	r1, [r4, #4]
 80083ae:	4638      	mov	r0, r7
 80083b0:	3101      	adds	r1, #1
 80083b2:	f7ff ff79 	bl	80082a8 <_Balloc>
 80083b6:	4680      	mov	r8, r0
 80083b8:	b928      	cbnz	r0, 80083c6 <__multadd+0x5a>
 80083ba:	4602      	mov	r2, r0
 80083bc:	4b0c      	ldr	r3, [pc, #48]	@ (80083f0 <__multadd+0x84>)
 80083be:	480d      	ldr	r0, [pc, #52]	@ (80083f4 <__multadd+0x88>)
 80083c0:	21ba      	movs	r1, #186	@ 0xba
 80083c2:	f000 fb1f 	bl	8008a04 <__assert_func>
 80083c6:	6922      	ldr	r2, [r4, #16]
 80083c8:	3202      	adds	r2, #2
 80083ca:	f104 010c 	add.w	r1, r4, #12
 80083ce:	0092      	lsls	r2, r2, #2
 80083d0:	300c      	adds	r0, #12
 80083d2:	f000 fb09 	bl	80089e8 <memcpy>
 80083d6:	4621      	mov	r1, r4
 80083d8:	4638      	mov	r0, r7
 80083da:	f7ff ffa5 	bl	8008328 <_Bfree>
 80083de:	4644      	mov	r4, r8
 80083e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083e4:	3501      	adds	r5, #1
 80083e6:	615e      	str	r6, [r3, #20]
 80083e8:	6125      	str	r5, [r4, #16]
 80083ea:	4620      	mov	r0, r4
 80083ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f0:	0800a4be 	.word	0x0800a4be
 80083f4:	0800a4cf 	.word	0x0800a4cf

080083f8 <__hi0bits>:
 80083f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80083fc:	4603      	mov	r3, r0
 80083fe:	bf36      	itet	cc
 8008400:	0403      	lslcc	r3, r0, #16
 8008402:	2000      	movcs	r0, #0
 8008404:	2010      	movcc	r0, #16
 8008406:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800840a:	bf3c      	itt	cc
 800840c:	021b      	lslcc	r3, r3, #8
 800840e:	3008      	addcc	r0, #8
 8008410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008414:	bf3c      	itt	cc
 8008416:	011b      	lslcc	r3, r3, #4
 8008418:	3004      	addcc	r0, #4
 800841a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800841e:	bf3c      	itt	cc
 8008420:	009b      	lslcc	r3, r3, #2
 8008422:	3002      	addcc	r0, #2
 8008424:	2b00      	cmp	r3, #0
 8008426:	db05      	blt.n	8008434 <__hi0bits+0x3c>
 8008428:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800842c:	f100 0001 	add.w	r0, r0, #1
 8008430:	bf08      	it	eq
 8008432:	2020      	moveq	r0, #32
 8008434:	4770      	bx	lr

08008436 <__lo0bits>:
 8008436:	6803      	ldr	r3, [r0, #0]
 8008438:	4602      	mov	r2, r0
 800843a:	f013 0007 	ands.w	r0, r3, #7
 800843e:	d00b      	beq.n	8008458 <__lo0bits+0x22>
 8008440:	07d9      	lsls	r1, r3, #31
 8008442:	d421      	bmi.n	8008488 <__lo0bits+0x52>
 8008444:	0798      	lsls	r0, r3, #30
 8008446:	bf49      	itett	mi
 8008448:	085b      	lsrmi	r3, r3, #1
 800844a:	089b      	lsrpl	r3, r3, #2
 800844c:	2001      	movmi	r0, #1
 800844e:	6013      	strmi	r3, [r2, #0]
 8008450:	bf5c      	itt	pl
 8008452:	6013      	strpl	r3, [r2, #0]
 8008454:	2002      	movpl	r0, #2
 8008456:	4770      	bx	lr
 8008458:	b299      	uxth	r1, r3
 800845a:	b909      	cbnz	r1, 8008460 <__lo0bits+0x2a>
 800845c:	0c1b      	lsrs	r3, r3, #16
 800845e:	2010      	movs	r0, #16
 8008460:	b2d9      	uxtb	r1, r3
 8008462:	b909      	cbnz	r1, 8008468 <__lo0bits+0x32>
 8008464:	3008      	adds	r0, #8
 8008466:	0a1b      	lsrs	r3, r3, #8
 8008468:	0719      	lsls	r1, r3, #28
 800846a:	bf04      	itt	eq
 800846c:	091b      	lsreq	r3, r3, #4
 800846e:	3004      	addeq	r0, #4
 8008470:	0799      	lsls	r1, r3, #30
 8008472:	bf04      	itt	eq
 8008474:	089b      	lsreq	r3, r3, #2
 8008476:	3002      	addeq	r0, #2
 8008478:	07d9      	lsls	r1, r3, #31
 800847a:	d403      	bmi.n	8008484 <__lo0bits+0x4e>
 800847c:	085b      	lsrs	r3, r3, #1
 800847e:	f100 0001 	add.w	r0, r0, #1
 8008482:	d003      	beq.n	800848c <__lo0bits+0x56>
 8008484:	6013      	str	r3, [r2, #0]
 8008486:	4770      	bx	lr
 8008488:	2000      	movs	r0, #0
 800848a:	4770      	bx	lr
 800848c:	2020      	movs	r0, #32
 800848e:	4770      	bx	lr

08008490 <__i2b>:
 8008490:	b510      	push	{r4, lr}
 8008492:	460c      	mov	r4, r1
 8008494:	2101      	movs	r1, #1
 8008496:	f7ff ff07 	bl	80082a8 <_Balloc>
 800849a:	4602      	mov	r2, r0
 800849c:	b928      	cbnz	r0, 80084aa <__i2b+0x1a>
 800849e:	4b05      	ldr	r3, [pc, #20]	@ (80084b4 <__i2b+0x24>)
 80084a0:	4805      	ldr	r0, [pc, #20]	@ (80084b8 <__i2b+0x28>)
 80084a2:	f240 1145 	movw	r1, #325	@ 0x145
 80084a6:	f000 faad 	bl	8008a04 <__assert_func>
 80084aa:	2301      	movs	r3, #1
 80084ac:	6144      	str	r4, [r0, #20]
 80084ae:	6103      	str	r3, [r0, #16]
 80084b0:	bd10      	pop	{r4, pc}
 80084b2:	bf00      	nop
 80084b4:	0800a4be 	.word	0x0800a4be
 80084b8:	0800a4cf 	.word	0x0800a4cf

080084bc <__multiply>:
 80084bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	4614      	mov	r4, r2
 80084c2:	690a      	ldr	r2, [r1, #16]
 80084c4:	6923      	ldr	r3, [r4, #16]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	bfa8      	it	ge
 80084ca:	4623      	movge	r3, r4
 80084cc:	460f      	mov	r7, r1
 80084ce:	bfa4      	itt	ge
 80084d0:	460c      	movge	r4, r1
 80084d2:	461f      	movge	r7, r3
 80084d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80084d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80084dc:	68a3      	ldr	r3, [r4, #8]
 80084de:	6861      	ldr	r1, [r4, #4]
 80084e0:	eb0a 0609 	add.w	r6, sl, r9
 80084e4:	42b3      	cmp	r3, r6
 80084e6:	b085      	sub	sp, #20
 80084e8:	bfb8      	it	lt
 80084ea:	3101      	addlt	r1, #1
 80084ec:	f7ff fedc 	bl	80082a8 <_Balloc>
 80084f0:	b930      	cbnz	r0, 8008500 <__multiply+0x44>
 80084f2:	4602      	mov	r2, r0
 80084f4:	4b44      	ldr	r3, [pc, #272]	@ (8008608 <__multiply+0x14c>)
 80084f6:	4845      	ldr	r0, [pc, #276]	@ (800860c <__multiply+0x150>)
 80084f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80084fc:	f000 fa82 	bl	8008a04 <__assert_func>
 8008500:	f100 0514 	add.w	r5, r0, #20
 8008504:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008508:	462b      	mov	r3, r5
 800850a:	2200      	movs	r2, #0
 800850c:	4543      	cmp	r3, r8
 800850e:	d321      	bcc.n	8008554 <__multiply+0x98>
 8008510:	f107 0114 	add.w	r1, r7, #20
 8008514:	f104 0214 	add.w	r2, r4, #20
 8008518:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800851c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008520:	9302      	str	r3, [sp, #8]
 8008522:	1b13      	subs	r3, r2, r4
 8008524:	3b15      	subs	r3, #21
 8008526:	f023 0303 	bic.w	r3, r3, #3
 800852a:	3304      	adds	r3, #4
 800852c:	f104 0715 	add.w	r7, r4, #21
 8008530:	42ba      	cmp	r2, r7
 8008532:	bf38      	it	cc
 8008534:	2304      	movcc	r3, #4
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	9b02      	ldr	r3, [sp, #8]
 800853a:	9103      	str	r1, [sp, #12]
 800853c:	428b      	cmp	r3, r1
 800853e:	d80c      	bhi.n	800855a <__multiply+0x9e>
 8008540:	2e00      	cmp	r6, #0
 8008542:	dd03      	ble.n	800854c <__multiply+0x90>
 8008544:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008548:	2b00      	cmp	r3, #0
 800854a:	d05b      	beq.n	8008604 <__multiply+0x148>
 800854c:	6106      	str	r6, [r0, #16]
 800854e:	b005      	add	sp, #20
 8008550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008554:	f843 2b04 	str.w	r2, [r3], #4
 8008558:	e7d8      	b.n	800850c <__multiply+0x50>
 800855a:	f8b1 a000 	ldrh.w	sl, [r1]
 800855e:	f1ba 0f00 	cmp.w	sl, #0
 8008562:	d024      	beq.n	80085ae <__multiply+0xf2>
 8008564:	f104 0e14 	add.w	lr, r4, #20
 8008568:	46a9      	mov	r9, r5
 800856a:	f04f 0c00 	mov.w	ip, #0
 800856e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008572:	f8d9 3000 	ldr.w	r3, [r9]
 8008576:	fa1f fb87 	uxth.w	fp, r7
 800857a:	b29b      	uxth	r3, r3
 800857c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008580:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008584:	f8d9 7000 	ldr.w	r7, [r9]
 8008588:	4463      	add	r3, ip
 800858a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800858e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008592:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008596:	b29b      	uxth	r3, r3
 8008598:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800859c:	4572      	cmp	r2, lr
 800859e:	f849 3b04 	str.w	r3, [r9], #4
 80085a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80085a6:	d8e2      	bhi.n	800856e <__multiply+0xb2>
 80085a8:	9b01      	ldr	r3, [sp, #4]
 80085aa:	f845 c003 	str.w	ip, [r5, r3]
 80085ae:	9b03      	ldr	r3, [sp, #12]
 80085b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80085b4:	3104      	adds	r1, #4
 80085b6:	f1b9 0f00 	cmp.w	r9, #0
 80085ba:	d021      	beq.n	8008600 <__multiply+0x144>
 80085bc:	682b      	ldr	r3, [r5, #0]
 80085be:	f104 0c14 	add.w	ip, r4, #20
 80085c2:	46ae      	mov	lr, r5
 80085c4:	f04f 0a00 	mov.w	sl, #0
 80085c8:	f8bc b000 	ldrh.w	fp, [ip]
 80085cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80085d0:	fb09 770b 	mla	r7, r9, fp, r7
 80085d4:	4457      	add	r7, sl
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80085dc:	f84e 3b04 	str.w	r3, [lr], #4
 80085e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085e8:	f8be 3000 	ldrh.w	r3, [lr]
 80085ec:	fb09 330a 	mla	r3, r9, sl, r3
 80085f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80085f4:	4562      	cmp	r2, ip
 80085f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085fa:	d8e5      	bhi.n	80085c8 <__multiply+0x10c>
 80085fc:	9f01      	ldr	r7, [sp, #4]
 80085fe:	51eb      	str	r3, [r5, r7]
 8008600:	3504      	adds	r5, #4
 8008602:	e799      	b.n	8008538 <__multiply+0x7c>
 8008604:	3e01      	subs	r6, #1
 8008606:	e79b      	b.n	8008540 <__multiply+0x84>
 8008608:	0800a4be 	.word	0x0800a4be
 800860c:	0800a4cf 	.word	0x0800a4cf

08008610 <__pow5mult>:
 8008610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008614:	4615      	mov	r5, r2
 8008616:	f012 0203 	ands.w	r2, r2, #3
 800861a:	4607      	mov	r7, r0
 800861c:	460e      	mov	r6, r1
 800861e:	d007      	beq.n	8008630 <__pow5mult+0x20>
 8008620:	4c25      	ldr	r4, [pc, #148]	@ (80086b8 <__pow5mult+0xa8>)
 8008622:	3a01      	subs	r2, #1
 8008624:	2300      	movs	r3, #0
 8008626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800862a:	f7ff fe9f 	bl	800836c <__multadd>
 800862e:	4606      	mov	r6, r0
 8008630:	10ad      	asrs	r5, r5, #2
 8008632:	d03d      	beq.n	80086b0 <__pow5mult+0xa0>
 8008634:	69fc      	ldr	r4, [r7, #28]
 8008636:	b97c      	cbnz	r4, 8008658 <__pow5mult+0x48>
 8008638:	2010      	movs	r0, #16
 800863a:	f7ff fe2d 	bl	8008298 <malloc>
 800863e:	4602      	mov	r2, r0
 8008640:	61f8      	str	r0, [r7, #28]
 8008642:	b928      	cbnz	r0, 8008650 <__pow5mult+0x40>
 8008644:	4b1d      	ldr	r3, [pc, #116]	@ (80086bc <__pow5mult+0xac>)
 8008646:	481e      	ldr	r0, [pc, #120]	@ (80086c0 <__pow5mult+0xb0>)
 8008648:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800864c:	f000 f9da 	bl	8008a04 <__assert_func>
 8008650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008654:	6004      	str	r4, [r0, #0]
 8008656:	60c4      	str	r4, [r0, #12]
 8008658:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800865c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008660:	b94c      	cbnz	r4, 8008676 <__pow5mult+0x66>
 8008662:	f240 2171 	movw	r1, #625	@ 0x271
 8008666:	4638      	mov	r0, r7
 8008668:	f7ff ff12 	bl	8008490 <__i2b>
 800866c:	2300      	movs	r3, #0
 800866e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008672:	4604      	mov	r4, r0
 8008674:	6003      	str	r3, [r0, #0]
 8008676:	f04f 0900 	mov.w	r9, #0
 800867a:	07eb      	lsls	r3, r5, #31
 800867c:	d50a      	bpl.n	8008694 <__pow5mult+0x84>
 800867e:	4631      	mov	r1, r6
 8008680:	4622      	mov	r2, r4
 8008682:	4638      	mov	r0, r7
 8008684:	f7ff ff1a 	bl	80084bc <__multiply>
 8008688:	4631      	mov	r1, r6
 800868a:	4680      	mov	r8, r0
 800868c:	4638      	mov	r0, r7
 800868e:	f7ff fe4b 	bl	8008328 <_Bfree>
 8008692:	4646      	mov	r6, r8
 8008694:	106d      	asrs	r5, r5, #1
 8008696:	d00b      	beq.n	80086b0 <__pow5mult+0xa0>
 8008698:	6820      	ldr	r0, [r4, #0]
 800869a:	b938      	cbnz	r0, 80086ac <__pow5mult+0x9c>
 800869c:	4622      	mov	r2, r4
 800869e:	4621      	mov	r1, r4
 80086a0:	4638      	mov	r0, r7
 80086a2:	f7ff ff0b 	bl	80084bc <__multiply>
 80086a6:	6020      	str	r0, [r4, #0]
 80086a8:	f8c0 9000 	str.w	r9, [r0]
 80086ac:	4604      	mov	r4, r0
 80086ae:	e7e4      	b.n	800867a <__pow5mult+0x6a>
 80086b0:	4630      	mov	r0, r6
 80086b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086b6:	bf00      	nop
 80086b8:	0800a528 	.word	0x0800a528
 80086bc:	0800a44f 	.word	0x0800a44f
 80086c0:	0800a4cf 	.word	0x0800a4cf

080086c4 <__lshift>:
 80086c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c8:	460c      	mov	r4, r1
 80086ca:	6849      	ldr	r1, [r1, #4]
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086d2:	68a3      	ldr	r3, [r4, #8]
 80086d4:	4607      	mov	r7, r0
 80086d6:	4691      	mov	r9, r2
 80086d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086dc:	f108 0601 	add.w	r6, r8, #1
 80086e0:	42b3      	cmp	r3, r6
 80086e2:	db0b      	blt.n	80086fc <__lshift+0x38>
 80086e4:	4638      	mov	r0, r7
 80086e6:	f7ff fddf 	bl	80082a8 <_Balloc>
 80086ea:	4605      	mov	r5, r0
 80086ec:	b948      	cbnz	r0, 8008702 <__lshift+0x3e>
 80086ee:	4602      	mov	r2, r0
 80086f0:	4b28      	ldr	r3, [pc, #160]	@ (8008794 <__lshift+0xd0>)
 80086f2:	4829      	ldr	r0, [pc, #164]	@ (8008798 <__lshift+0xd4>)
 80086f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80086f8:	f000 f984 	bl	8008a04 <__assert_func>
 80086fc:	3101      	adds	r1, #1
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	e7ee      	b.n	80086e0 <__lshift+0x1c>
 8008702:	2300      	movs	r3, #0
 8008704:	f100 0114 	add.w	r1, r0, #20
 8008708:	f100 0210 	add.w	r2, r0, #16
 800870c:	4618      	mov	r0, r3
 800870e:	4553      	cmp	r3, sl
 8008710:	db33      	blt.n	800877a <__lshift+0xb6>
 8008712:	6920      	ldr	r0, [r4, #16]
 8008714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008718:	f104 0314 	add.w	r3, r4, #20
 800871c:	f019 091f 	ands.w	r9, r9, #31
 8008720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008724:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008728:	d02b      	beq.n	8008782 <__lshift+0xbe>
 800872a:	f1c9 0e20 	rsb	lr, r9, #32
 800872e:	468a      	mov	sl, r1
 8008730:	2200      	movs	r2, #0
 8008732:	6818      	ldr	r0, [r3, #0]
 8008734:	fa00 f009 	lsl.w	r0, r0, r9
 8008738:	4310      	orrs	r0, r2
 800873a:	f84a 0b04 	str.w	r0, [sl], #4
 800873e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008742:	459c      	cmp	ip, r3
 8008744:	fa22 f20e 	lsr.w	r2, r2, lr
 8008748:	d8f3      	bhi.n	8008732 <__lshift+0x6e>
 800874a:	ebac 0304 	sub.w	r3, ip, r4
 800874e:	3b15      	subs	r3, #21
 8008750:	f023 0303 	bic.w	r3, r3, #3
 8008754:	3304      	adds	r3, #4
 8008756:	f104 0015 	add.w	r0, r4, #21
 800875a:	4584      	cmp	ip, r0
 800875c:	bf38      	it	cc
 800875e:	2304      	movcc	r3, #4
 8008760:	50ca      	str	r2, [r1, r3]
 8008762:	b10a      	cbz	r2, 8008768 <__lshift+0xa4>
 8008764:	f108 0602 	add.w	r6, r8, #2
 8008768:	3e01      	subs	r6, #1
 800876a:	4638      	mov	r0, r7
 800876c:	612e      	str	r6, [r5, #16]
 800876e:	4621      	mov	r1, r4
 8008770:	f7ff fdda 	bl	8008328 <_Bfree>
 8008774:	4628      	mov	r0, r5
 8008776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800877a:	f842 0f04 	str.w	r0, [r2, #4]!
 800877e:	3301      	adds	r3, #1
 8008780:	e7c5      	b.n	800870e <__lshift+0x4a>
 8008782:	3904      	subs	r1, #4
 8008784:	f853 2b04 	ldr.w	r2, [r3], #4
 8008788:	f841 2f04 	str.w	r2, [r1, #4]!
 800878c:	459c      	cmp	ip, r3
 800878e:	d8f9      	bhi.n	8008784 <__lshift+0xc0>
 8008790:	e7ea      	b.n	8008768 <__lshift+0xa4>
 8008792:	bf00      	nop
 8008794:	0800a4be 	.word	0x0800a4be
 8008798:	0800a4cf 	.word	0x0800a4cf

0800879c <__mcmp>:
 800879c:	690a      	ldr	r2, [r1, #16]
 800879e:	4603      	mov	r3, r0
 80087a0:	6900      	ldr	r0, [r0, #16]
 80087a2:	1a80      	subs	r0, r0, r2
 80087a4:	b530      	push	{r4, r5, lr}
 80087a6:	d10e      	bne.n	80087c6 <__mcmp+0x2a>
 80087a8:	3314      	adds	r3, #20
 80087aa:	3114      	adds	r1, #20
 80087ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80087b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80087b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80087b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80087bc:	4295      	cmp	r5, r2
 80087be:	d003      	beq.n	80087c8 <__mcmp+0x2c>
 80087c0:	d205      	bcs.n	80087ce <__mcmp+0x32>
 80087c2:	f04f 30ff 	mov.w	r0, #4294967295
 80087c6:	bd30      	pop	{r4, r5, pc}
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	d3f3      	bcc.n	80087b4 <__mcmp+0x18>
 80087cc:	e7fb      	b.n	80087c6 <__mcmp+0x2a>
 80087ce:	2001      	movs	r0, #1
 80087d0:	e7f9      	b.n	80087c6 <__mcmp+0x2a>
	...

080087d4 <__mdiff>:
 80087d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d8:	4689      	mov	r9, r1
 80087da:	4606      	mov	r6, r0
 80087dc:	4611      	mov	r1, r2
 80087de:	4648      	mov	r0, r9
 80087e0:	4614      	mov	r4, r2
 80087e2:	f7ff ffdb 	bl	800879c <__mcmp>
 80087e6:	1e05      	subs	r5, r0, #0
 80087e8:	d112      	bne.n	8008810 <__mdiff+0x3c>
 80087ea:	4629      	mov	r1, r5
 80087ec:	4630      	mov	r0, r6
 80087ee:	f7ff fd5b 	bl	80082a8 <_Balloc>
 80087f2:	4602      	mov	r2, r0
 80087f4:	b928      	cbnz	r0, 8008802 <__mdiff+0x2e>
 80087f6:	4b3f      	ldr	r3, [pc, #252]	@ (80088f4 <__mdiff+0x120>)
 80087f8:	f240 2137 	movw	r1, #567	@ 0x237
 80087fc:	483e      	ldr	r0, [pc, #248]	@ (80088f8 <__mdiff+0x124>)
 80087fe:	f000 f901 	bl	8008a04 <__assert_func>
 8008802:	2301      	movs	r3, #1
 8008804:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008808:	4610      	mov	r0, r2
 800880a:	b003      	add	sp, #12
 800880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008810:	bfbc      	itt	lt
 8008812:	464b      	movlt	r3, r9
 8008814:	46a1      	movlt	r9, r4
 8008816:	4630      	mov	r0, r6
 8008818:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800881c:	bfba      	itte	lt
 800881e:	461c      	movlt	r4, r3
 8008820:	2501      	movlt	r5, #1
 8008822:	2500      	movge	r5, #0
 8008824:	f7ff fd40 	bl	80082a8 <_Balloc>
 8008828:	4602      	mov	r2, r0
 800882a:	b918      	cbnz	r0, 8008834 <__mdiff+0x60>
 800882c:	4b31      	ldr	r3, [pc, #196]	@ (80088f4 <__mdiff+0x120>)
 800882e:	f240 2145 	movw	r1, #581	@ 0x245
 8008832:	e7e3      	b.n	80087fc <__mdiff+0x28>
 8008834:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008838:	6926      	ldr	r6, [r4, #16]
 800883a:	60c5      	str	r5, [r0, #12]
 800883c:	f109 0310 	add.w	r3, r9, #16
 8008840:	f109 0514 	add.w	r5, r9, #20
 8008844:	f104 0e14 	add.w	lr, r4, #20
 8008848:	f100 0b14 	add.w	fp, r0, #20
 800884c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008850:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008854:	9301      	str	r3, [sp, #4]
 8008856:	46d9      	mov	r9, fp
 8008858:	f04f 0c00 	mov.w	ip, #0
 800885c:	9b01      	ldr	r3, [sp, #4]
 800885e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008862:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	fa1f f38a 	uxth.w	r3, sl
 800886c:	4619      	mov	r1, r3
 800886e:	b283      	uxth	r3, r0
 8008870:	1acb      	subs	r3, r1, r3
 8008872:	0c00      	lsrs	r0, r0, #16
 8008874:	4463      	add	r3, ip
 8008876:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800887a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800887e:	b29b      	uxth	r3, r3
 8008880:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008884:	4576      	cmp	r6, lr
 8008886:	f849 3b04 	str.w	r3, [r9], #4
 800888a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800888e:	d8e5      	bhi.n	800885c <__mdiff+0x88>
 8008890:	1b33      	subs	r3, r6, r4
 8008892:	3b15      	subs	r3, #21
 8008894:	f023 0303 	bic.w	r3, r3, #3
 8008898:	3415      	adds	r4, #21
 800889a:	3304      	adds	r3, #4
 800889c:	42a6      	cmp	r6, r4
 800889e:	bf38      	it	cc
 80088a0:	2304      	movcc	r3, #4
 80088a2:	441d      	add	r5, r3
 80088a4:	445b      	add	r3, fp
 80088a6:	461e      	mov	r6, r3
 80088a8:	462c      	mov	r4, r5
 80088aa:	4544      	cmp	r4, r8
 80088ac:	d30e      	bcc.n	80088cc <__mdiff+0xf8>
 80088ae:	f108 0103 	add.w	r1, r8, #3
 80088b2:	1b49      	subs	r1, r1, r5
 80088b4:	f021 0103 	bic.w	r1, r1, #3
 80088b8:	3d03      	subs	r5, #3
 80088ba:	45a8      	cmp	r8, r5
 80088bc:	bf38      	it	cc
 80088be:	2100      	movcc	r1, #0
 80088c0:	440b      	add	r3, r1
 80088c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80088c6:	b191      	cbz	r1, 80088ee <__mdiff+0x11a>
 80088c8:	6117      	str	r7, [r2, #16]
 80088ca:	e79d      	b.n	8008808 <__mdiff+0x34>
 80088cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80088d0:	46e6      	mov	lr, ip
 80088d2:	0c08      	lsrs	r0, r1, #16
 80088d4:	fa1c fc81 	uxtah	ip, ip, r1
 80088d8:	4471      	add	r1, lr
 80088da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80088de:	b289      	uxth	r1, r1
 80088e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80088e4:	f846 1b04 	str.w	r1, [r6], #4
 80088e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088ec:	e7dd      	b.n	80088aa <__mdiff+0xd6>
 80088ee:	3f01      	subs	r7, #1
 80088f0:	e7e7      	b.n	80088c2 <__mdiff+0xee>
 80088f2:	bf00      	nop
 80088f4:	0800a4be 	.word	0x0800a4be
 80088f8:	0800a4cf 	.word	0x0800a4cf

080088fc <__d2b>:
 80088fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008900:	460f      	mov	r7, r1
 8008902:	2101      	movs	r1, #1
 8008904:	ec59 8b10 	vmov	r8, r9, d0
 8008908:	4616      	mov	r6, r2
 800890a:	f7ff fccd 	bl	80082a8 <_Balloc>
 800890e:	4604      	mov	r4, r0
 8008910:	b930      	cbnz	r0, 8008920 <__d2b+0x24>
 8008912:	4602      	mov	r2, r0
 8008914:	4b23      	ldr	r3, [pc, #140]	@ (80089a4 <__d2b+0xa8>)
 8008916:	4824      	ldr	r0, [pc, #144]	@ (80089a8 <__d2b+0xac>)
 8008918:	f240 310f 	movw	r1, #783	@ 0x30f
 800891c:	f000 f872 	bl	8008a04 <__assert_func>
 8008920:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008928:	b10d      	cbz	r5, 800892e <__d2b+0x32>
 800892a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	f1b8 0300 	subs.w	r3, r8, #0
 8008934:	d023      	beq.n	800897e <__d2b+0x82>
 8008936:	4668      	mov	r0, sp
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	f7ff fd7c 	bl	8008436 <__lo0bits>
 800893e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008942:	b1d0      	cbz	r0, 800897a <__d2b+0x7e>
 8008944:	f1c0 0320 	rsb	r3, r0, #32
 8008948:	fa02 f303 	lsl.w	r3, r2, r3
 800894c:	430b      	orrs	r3, r1
 800894e:	40c2      	lsrs	r2, r0
 8008950:	6163      	str	r3, [r4, #20]
 8008952:	9201      	str	r2, [sp, #4]
 8008954:	9b01      	ldr	r3, [sp, #4]
 8008956:	61a3      	str	r3, [r4, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	bf0c      	ite	eq
 800895c:	2201      	moveq	r2, #1
 800895e:	2202      	movne	r2, #2
 8008960:	6122      	str	r2, [r4, #16]
 8008962:	b1a5      	cbz	r5, 800898e <__d2b+0x92>
 8008964:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008968:	4405      	add	r5, r0
 800896a:	603d      	str	r5, [r7, #0]
 800896c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008970:	6030      	str	r0, [r6, #0]
 8008972:	4620      	mov	r0, r4
 8008974:	b003      	add	sp, #12
 8008976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800897a:	6161      	str	r1, [r4, #20]
 800897c:	e7ea      	b.n	8008954 <__d2b+0x58>
 800897e:	a801      	add	r0, sp, #4
 8008980:	f7ff fd59 	bl	8008436 <__lo0bits>
 8008984:	9b01      	ldr	r3, [sp, #4]
 8008986:	6163      	str	r3, [r4, #20]
 8008988:	3020      	adds	r0, #32
 800898a:	2201      	movs	r2, #1
 800898c:	e7e8      	b.n	8008960 <__d2b+0x64>
 800898e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008992:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008996:	6038      	str	r0, [r7, #0]
 8008998:	6918      	ldr	r0, [r3, #16]
 800899a:	f7ff fd2d 	bl	80083f8 <__hi0bits>
 800899e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089a2:	e7e5      	b.n	8008970 <__d2b+0x74>
 80089a4:	0800a4be 	.word	0x0800a4be
 80089a8:	0800a4cf 	.word	0x0800a4cf

080089ac <_mprec_log10>:
 80089ac:	2817      	cmp	r0, #23
 80089ae:	b5d0      	push	{r4, r6, r7, lr}
 80089b0:	4604      	mov	r4, r0
 80089b2:	dc07      	bgt.n	80089c4 <_mprec_log10+0x18>
 80089b4:	4b09      	ldr	r3, [pc, #36]	@ (80089dc <_mprec_log10+0x30>)
 80089b6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80089ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80089be:	ec41 0b10 	vmov	d0, r0, r1
 80089c2:	bdd0      	pop	{r4, r6, r7, pc}
 80089c4:	4906      	ldr	r1, [pc, #24]	@ (80089e0 <_mprec_log10+0x34>)
 80089c6:	4f07      	ldr	r7, [pc, #28]	@ (80089e4 <_mprec_log10+0x38>)
 80089c8:	2000      	movs	r0, #0
 80089ca:	2600      	movs	r6, #0
 80089cc:	4632      	mov	r2, r6
 80089ce:	463b      	mov	r3, r7
 80089d0:	f7f7 fe12 	bl	80005f8 <__aeabi_dmul>
 80089d4:	3c01      	subs	r4, #1
 80089d6:	d1f9      	bne.n	80089cc <_mprec_log10+0x20>
 80089d8:	e7f1      	b.n	80089be <_mprec_log10+0x12>
 80089da:	bf00      	nop
 80089dc:	0800a560 	.word	0x0800a560
 80089e0:	3ff00000 	.word	0x3ff00000
 80089e4:	40240000 	.word	0x40240000

080089e8 <memcpy>:
 80089e8:	440a      	add	r2, r1
 80089ea:	4291      	cmp	r1, r2
 80089ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80089f0:	d100      	bne.n	80089f4 <memcpy+0xc>
 80089f2:	4770      	bx	lr
 80089f4:	b510      	push	{r4, lr}
 80089f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089fe:	4291      	cmp	r1, r2
 8008a00:	d1f9      	bne.n	80089f6 <memcpy+0xe>
 8008a02:	bd10      	pop	{r4, pc}

08008a04 <__assert_func>:
 8008a04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a06:	4614      	mov	r4, r2
 8008a08:	461a      	mov	r2, r3
 8008a0a:	4b09      	ldr	r3, [pc, #36]	@ (8008a30 <__assert_func+0x2c>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4605      	mov	r5, r0
 8008a10:	68d8      	ldr	r0, [r3, #12]
 8008a12:	b954      	cbnz	r4, 8008a2a <__assert_func+0x26>
 8008a14:	4b07      	ldr	r3, [pc, #28]	@ (8008a34 <__assert_func+0x30>)
 8008a16:	461c      	mov	r4, r3
 8008a18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a1c:	9100      	str	r1, [sp, #0]
 8008a1e:	462b      	mov	r3, r5
 8008a20:	4905      	ldr	r1, [pc, #20]	@ (8008a38 <__assert_func+0x34>)
 8008a22:	f000 f821 	bl	8008a68 <fiprintf>
 8008a26:	f000 f831 	bl	8008a8c <abort>
 8008a2a:	4b04      	ldr	r3, [pc, #16]	@ (8008a3c <__assert_func+0x38>)
 8008a2c:	e7f4      	b.n	8008a18 <__assert_func+0x14>
 8008a2e:	bf00      	nop
 8008a30:	20000030 	.word	0x20000030
 8008a34:	0800a663 	.word	0x0800a663
 8008a38:	0800a635 	.word	0x0800a635
 8008a3c:	0800a628 	.word	0x0800a628

08008a40 <_calloc_r>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	fba1 5402 	umull	r5, r4, r1, r2
 8008a46:	b93c      	cbnz	r4, 8008a58 <_calloc_r+0x18>
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f7fe fb51 	bl	80070f0 <_malloc_r>
 8008a4e:	4606      	mov	r6, r0
 8008a50:	b928      	cbnz	r0, 8008a5e <_calloc_r+0x1e>
 8008a52:	2600      	movs	r6, #0
 8008a54:	4630      	mov	r0, r6
 8008a56:	bd70      	pop	{r4, r5, r6, pc}
 8008a58:	220c      	movs	r2, #12
 8008a5a:	6002      	str	r2, [r0, #0]
 8008a5c:	e7f9      	b.n	8008a52 <_calloc_r+0x12>
 8008a5e:	462a      	mov	r2, r5
 8008a60:	4621      	mov	r1, r4
 8008a62:	f7fe fa4e 	bl	8006f02 <memset>
 8008a66:	e7f5      	b.n	8008a54 <_calloc_r+0x14>

08008a68 <fiprintf>:
 8008a68:	b40e      	push	{r1, r2, r3}
 8008a6a:	b503      	push	{r0, r1, lr}
 8008a6c:	4601      	mov	r1, r0
 8008a6e:	ab03      	add	r3, sp, #12
 8008a70:	4805      	ldr	r0, [pc, #20]	@ (8008a88 <fiprintf+0x20>)
 8008a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a76:	6800      	ldr	r0, [r0, #0]
 8008a78:	9301      	str	r3, [sp, #4]
 8008a7a:	f000 f837 	bl	8008aec <_vfiprintf_r>
 8008a7e:	b002      	add	sp, #8
 8008a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a84:	b003      	add	sp, #12
 8008a86:	4770      	bx	lr
 8008a88:	20000030 	.word	0x20000030

08008a8c <abort>:
 8008a8c:	b508      	push	{r3, lr}
 8008a8e:	2006      	movs	r0, #6
 8008a90:	f000 fb8e 	bl	80091b0 <raise>
 8008a94:	2001      	movs	r0, #1
 8008a96:	f7f9 ffef 	bl	8002a78 <_exit>

08008a9a <__sfputc_r>:
 8008a9a:	6893      	ldr	r3, [r2, #8]
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	b410      	push	{r4}
 8008aa2:	6093      	str	r3, [r2, #8]
 8008aa4:	da08      	bge.n	8008ab8 <__sfputc_r+0x1e>
 8008aa6:	6994      	ldr	r4, [r2, #24]
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	db01      	blt.n	8008ab0 <__sfputc_r+0x16>
 8008aac:	290a      	cmp	r1, #10
 8008aae:	d103      	bne.n	8008ab8 <__sfputc_r+0x1e>
 8008ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ab4:	f000 bac0 	b.w	8009038 <__swbuf_r>
 8008ab8:	6813      	ldr	r3, [r2, #0]
 8008aba:	1c58      	adds	r0, r3, #1
 8008abc:	6010      	str	r0, [r2, #0]
 8008abe:	7019      	strb	r1, [r3, #0]
 8008ac0:	4608      	mov	r0, r1
 8008ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <__sfputs_r>:
 8008ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aca:	4606      	mov	r6, r0
 8008acc:	460f      	mov	r7, r1
 8008ace:	4614      	mov	r4, r2
 8008ad0:	18d5      	adds	r5, r2, r3
 8008ad2:	42ac      	cmp	r4, r5
 8008ad4:	d101      	bne.n	8008ada <__sfputs_r+0x12>
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	e007      	b.n	8008aea <__sfputs_r+0x22>
 8008ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ade:	463a      	mov	r2, r7
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f7ff ffda 	bl	8008a9a <__sfputc_r>
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	d1f3      	bne.n	8008ad2 <__sfputs_r+0xa>
 8008aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008aec <_vfiprintf_r>:
 8008aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	460d      	mov	r5, r1
 8008af2:	b09d      	sub	sp, #116	@ 0x74
 8008af4:	4614      	mov	r4, r2
 8008af6:	4698      	mov	r8, r3
 8008af8:	4606      	mov	r6, r0
 8008afa:	b118      	cbz	r0, 8008b04 <_vfiprintf_r+0x18>
 8008afc:	6a03      	ldr	r3, [r0, #32]
 8008afe:	b90b      	cbnz	r3, 8008b04 <_vfiprintf_r+0x18>
 8008b00:	f7fe f986 	bl	8006e10 <__sinit>
 8008b04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b06:	07d9      	lsls	r1, r3, #31
 8008b08:	d405      	bmi.n	8008b16 <_vfiprintf_r+0x2a>
 8008b0a:	89ab      	ldrh	r3, [r5, #12]
 8008b0c:	059a      	lsls	r2, r3, #22
 8008b0e:	d402      	bmi.n	8008b16 <_vfiprintf_r+0x2a>
 8008b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b12:	f7fe fa7e 	bl	8007012 <__retarget_lock_acquire_recursive>
 8008b16:	89ab      	ldrh	r3, [r5, #12]
 8008b18:	071b      	lsls	r3, r3, #28
 8008b1a:	d501      	bpl.n	8008b20 <_vfiprintf_r+0x34>
 8008b1c:	692b      	ldr	r3, [r5, #16]
 8008b1e:	b99b      	cbnz	r3, 8008b48 <_vfiprintf_r+0x5c>
 8008b20:	4629      	mov	r1, r5
 8008b22:	4630      	mov	r0, r6
 8008b24:	f000 fac6 	bl	80090b4 <__swsetup_r>
 8008b28:	b170      	cbz	r0, 8008b48 <_vfiprintf_r+0x5c>
 8008b2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b2c:	07dc      	lsls	r4, r3, #31
 8008b2e:	d504      	bpl.n	8008b3a <_vfiprintf_r+0x4e>
 8008b30:	f04f 30ff 	mov.w	r0, #4294967295
 8008b34:	b01d      	add	sp, #116	@ 0x74
 8008b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3a:	89ab      	ldrh	r3, [r5, #12]
 8008b3c:	0598      	lsls	r0, r3, #22
 8008b3e:	d4f7      	bmi.n	8008b30 <_vfiprintf_r+0x44>
 8008b40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b42:	f7fe fa67 	bl	8007014 <__retarget_lock_release_recursive>
 8008b46:	e7f3      	b.n	8008b30 <_vfiprintf_r+0x44>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b4c:	2320      	movs	r3, #32
 8008b4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b56:	2330      	movs	r3, #48	@ 0x30
 8008b58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d08 <_vfiprintf_r+0x21c>
 8008b5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b60:	f04f 0901 	mov.w	r9, #1
 8008b64:	4623      	mov	r3, r4
 8008b66:	469a      	mov	sl, r3
 8008b68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b6c:	b10a      	cbz	r2, 8008b72 <_vfiprintf_r+0x86>
 8008b6e:	2a25      	cmp	r2, #37	@ 0x25
 8008b70:	d1f9      	bne.n	8008b66 <_vfiprintf_r+0x7a>
 8008b72:	ebba 0b04 	subs.w	fp, sl, r4
 8008b76:	d00b      	beq.n	8008b90 <_vfiprintf_r+0xa4>
 8008b78:	465b      	mov	r3, fp
 8008b7a:	4622      	mov	r2, r4
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f7ff ffa2 	bl	8008ac8 <__sfputs_r>
 8008b84:	3001      	adds	r0, #1
 8008b86:	f000 80a7 	beq.w	8008cd8 <_vfiprintf_r+0x1ec>
 8008b8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b8c:	445a      	add	r2, fp
 8008b8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b90:	f89a 3000 	ldrb.w	r3, [sl]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 809f 	beq.w	8008cd8 <_vfiprintf_r+0x1ec>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ba4:	f10a 0a01 	add.w	sl, sl, #1
 8008ba8:	9304      	str	r3, [sp, #16]
 8008baa:	9307      	str	r3, [sp, #28]
 8008bac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bb2:	4654      	mov	r4, sl
 8008bb4:	2205      	movs	r2, #5
 8008bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bba:	4853      	ldr	r0, [pc, #332]	@ (8008d08 <_vfiprintf_r+0x21c>)
 8008bbc:	f7f7 fb10 	bl	80001e0 <memchr>
 8008bc0:	9a04      	ldr	r2, [sp, #16]
 8008bc2:	b9d8      	cbnz	r0, 8008bfc <_vfiprintf_r+0x110>
 8008bc4:	06d1      	lsls	r1, r2, #27
 8008bc6:	bf44      	itt	mi
 8008bc8:	2320      	movmi	r3, #32
 8008bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bce:	0713      	lsls	r3, r2, #28
 8008bd0:	bf44      	itt	mi
 8008bd2:	232b      	movmi	r3, #43	@ 0x2b
 8008bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bde:	d015      	beq.n	8008c0c <_vfiprintf_r+0x120>
 8008be0:	9a07      	ldr	r2, [sp, #28]
 8008be2:	4654      	mov	r4, sl
 8008be4:	2000      	movs	r0, #0
 8008be6:	f04f 0c0a 	mov.w	ip, #10
 8008bea:	4621      	mov	r1, r4
 8008bec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bf0:	3b30      	subs	r3, #48	@ 0x30
 8008bf2:	2b09      	cmp	r3, #9
 8008bf4:	d94b      	bls.n	8008c8e <_vfiprintf_r+0x1a2>
 8008bf6:	b1b0      	cbz	r0, 8008c26 <_vfiprintf_r+0x13a>
 8008bf8:	9207      	str	r2, [sp, #28]
 8008bfa:	e014      	b.n	8008c26 <_vfiprintf_r+0x13a>
 8008bfc:	eba0 0308 	sub.w	r3, r0, r8
 8008c00:	fa09 f303 	lsl.w	r3, r9, r3
 8008c04:	4313      	orrs	r3, r2
 8008c06:	9304      	str	r3, [sp, #16]
 8008c08:	46a2      	mov	sl, r4
 8008c0a:	e7d2      	b.n	8008bb2 <_vfiprintf_r+0xc6>
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	1d19      	adds	r1, r3, #4
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	9103      	str	r1, [sp, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bfbb      	ittet	lt
 8008c18:	425b      	neglt	r3, r3
 8008c1a:	f042 0202 	orrlt.w	r2, r2, #2
 8008c1e:	9307      	strge	r3, [sp, #28]
 8008c20:	9307      	strlt	r3, [sp, #28]
 8008c22:	bfb8      	it	lt
 8008c24:	9204      	strlt	r2, [sp, #16]
 8008c26:	7823      	ldrb	r3, [r4, #0]
 8008c28:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c2a:	d10a      	bne.n	8008c42 <_vfiprintf_r+0x156>
 8008c2c:	7863      	ldrb	r3, [r4, #1]
 8008c2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c30:	d132      	bne.n	8008c98 <_vfiprintf_r+0x1ac>
 8008c32:	9b03      	ldr	r3, [sp, #12]
 8008c34:	1d1a      	adds	r2, r3, #4
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	9203      	str	r2, [sp, #12]
 8008c3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c3e:	3402      	adds	r4, #2
 8008c40:	9305      	str	r3, [sp, #20]
 8008c42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d18 <_vfiprintf_r+0x22c>
 8008c46:	7821      	ldrb	r1, [r4, #0]
 8008c48:	2203      	movs	r2, #3
 8008c4a:	4650      	mov	r0, sl
 8008c4c:	f7f7 fac8 	bl	80001e0 <memchr>
 8008c50:	b138      	cbz	r0, 8008c62 <_vfiprintf_r+0x176>
 8008c52:	9b04      	ldr	r3, [sp, #16]
 8008c54:	eba0 000a 	sub.w	r0, r0, sl
 8008c58:	2240      	movs	r2, #64	@ 0x40
 8008c5a:	4082      	lsls	r2, r0
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	3401      	adds	r4, #1
 8008c60:	9304      	str	r3, [sp, #16]
 8008c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c66:	4829      	ldr	r0, [pc, #164]	@ (8008d0c <_vfiprintf_r+0x220>)
 8008c68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c6c:	2206      	movs	r2, #6
 8008c6e:	f7f7 fab7 	bl	80001e0 <memchr>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d03f      	beq.n	8008cf6 <_vfiprintf_r+0x20a>
 8008c76:	4b26      	ldr	r3, [pc, #152]	@ (8008d10 <_vfiprintf_r+0x224>)
 8008c78:	bb1b      	cbnz	r3, 8008cc2 <_vfiprintf_r+0x1d6>
 8008c7a:	9b03      	ldr	r3, [sp, #12]
 8008c7c:	3307      	adds	r3, #7
 8008c7e:	f023 0307 	bic.w	r3, r3, #7
 8008c82:	3308      	adds	r3, #8
 8008c84:	9303      	str	r3, [sp, #12]
 8008c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c88:	443b      	add	r3, r7
 8008c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c8c:	e76a      	b.n	8008b64 <_vfiprintf_r+0x78>
 8008c8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c92:	460c      	mov	r4, r1
 8008c94:	2001      	movs	r0, #1
 8008c96:	e7a8      	b.n	8008bea <_vfiprintf_r+0xfe>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	3401      	adds	r4, #1
 8008c9c:	9305      	str	r3, [sp, #20]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	f04f 0c0a 	mov.w	ip, #10
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008caa:	3a30      	subs	r2, #48	@ 0x30
 8008cac:	2a09      	cmp	r2, #9
 8008cae:	d903      	bls.n	8008cb8 <_vfiprintf_r+0x1cc>
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d0c6      	beq.n	8008c42 <_vfiprintf_r+0x156>
 8008cb4:	9105      	str	r1, [sp, #20]
 8008cb6:	e7c4      	b.n	8008c42 <_vfiprintf_r+0x156>
 8008cb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e7f0      	b.n	8008ca4 <_vfiprintf_r+0x1b8>
 8008cc2:	ab03      	add	r3, sp, #12
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	462a      	mov	r2, r5
 8008cc8:	4b12      	ldr	r3, [pc, #72]	@ (8008d14 <_vfiprintf_r+0x228>)
 8008cca:	a904      	add	r1, sp, #16
 8008ccc:	4630      	mov	r0, r6
 8008cce:	f3af 8000 	nop.w
 8008cd2:	4607      	mov	r7, r0
 8008cd4:	1c78      	adds	r0, r7, #1
 8008cd6:	d1d6      	bne.n	8008c86 <_vfiprintf_r+0x19a>
 8008cd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cda:	07d9      	lsls	r1, r3, #31
 8008cdc:	d405      	bmi.n	8008cea <_vfiprintf_r+0x1fe>
 8008cde:	89ab      	ldrh	r3, [r5, #12]
 8008ce0:	059a      	lsls	r2, r3, #22
 8008ce2:	d402      	bmi.n	8008cea <_vfiprintf_r+0x1fe>
 8008ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ce6:	f7fe f995 	bl	8007014 <__retarget_lock_release_recursive>
 8008cea:	89ab      	ldrh	r3, [r5, #12]
 8008cec:	065b      	lsls	r3, r3, #25
 8008cee:	f53f af1f 	bmi.w	8008b30 <_vfiprintf_r+0x44>
 8008cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cf4:	e71e      	b.n	8008b34 <_vfiprintf_r+0x48>
 8008cf6:	ab03      	add	r3, sp, #12
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	462a      	mov	r2, r5
 8008cfc:	4b05      	ldr	r3, [pc, #20]	@ (8008d14 <_vfiprintf_r+0x228>)
 8008cfe:	a904      	add	r1, sp, #16
 8008d00:	4630      	mov	r0, r6
 8008d02:	f000 f879 	bl	8008df8 <_printf_i>
 8008d06:	e7e4      	b.n	8008cd2 <_vfiprintf_r+0x1e6>
 8008d08:	0800a664 	.word	0x0800a664
 8008d0c:	0800a66e 	.word	0x0800a66e
 8008d10:	00000000 	.word	0x00000000
 8008d14:	08008ac9 	.word	0x08008ac9
 8008d18:	0800a66a 	.word	0x0800a66a

08008d1c <_printf_common>:
 8008d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d20:	4616      	mov	r6, r2
 8008d22:	4698      	mov	r8, r3
 8008d24:	688a      	ldr	r2, [r1, #8]
 8008d26:	690b      	ldr	r3, [r1, #16]
 8008d28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	bfb8      	it	lt
 8008d30:	4613      	movlt	r3, r2
 8008d32:	6033      	str	r3, [r6, #0]
 8008d34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d38:	4607      	mov	r7, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	b10a      	cbz	r2, 8008d42 <_printf_common+0x26>
 8008d3e:	3301      	adds	r3, #1
 8008d40:	6033      	str	r3, [r6, #0]
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	0699      	lsls	r1, r3, #26
 8008d46:	bf42      	ittt	mi
 8008d48:	6833      	ldrmi	r3, [r6, #0]
 8008d4a:	3302      	addmi	r3, #2
 8008d4c:	6033      	strmi	r3, [r6, #0]
 8008d4e:	6825      	ldr	r5, [r4, #0]
 8008d50:	f015 0506 	ands.w	r5, r5, #6
 8008d54:	d106      	bne.n	8008d64 <_printf_common+0x48>
 8008d56:	f104 0a19 	add.w	sl, r4, #25
 8008d5a:	68e3      	ldr	r3, [r4, #12]
 8008d5c:	6832      	ldr	r2, [r6, #0]
 8008d5e:	1a9b      	subs	r3, r3, r2
 8008d60:	42ab      	cmp	r3, r5
 8008d62:	dc26      	bgt.n	8008db2 <_printf_common+0x96>
 8008d64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d68:	6822      	ldr	r2, [r4, #0]
 8008d6a:	3b00      	subs	r3, #0
 8008d6c:	bf18      	it	ne
 8008d6e:	2301      	movne	r3, #1
 8008d70:	0692      	lsls	r2, r2, #26
 8008d72:	d42b      	bmi.n	8008dcc <_printf_common+0xb0>
 8008d74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d78:	4641      	mov	r1, r8
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	47c8      	blx	r9
 8008d7e:	3001      	adds	r0, #1
 8008d80:	d01e      	beq.n	8008dc0 <_printf_common+0xa4>
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	6922      	ldr	r2, [r4, #16]
 8008d86:	f003 0306 	and.w	r3, r3, #6
 8008d8a:	2b04      	cmp	r3, #4
 8008d8c:	bf02      	ittt	eq
 8008d8e:	68e5      	ldreq	r5, [r4, #12]
 8008d90:	6833      	ldreq	r3, [r6, #0]
 8008d92:	1aed      	subeq	r5, r5, r3
 8008d94:	68a3      	ldr	r3, [r4, #8]
 8008d96:	bf0c      	ite	eq
 8008d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d9c:	2500      	movne	r5, #0
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	bfc4      	itt	gt
 8008da2:	1a9b      	subgt	r3, r3, r2
 8008da4:	18ed      	addgt	r5, r5, r3
 8008da6:	2600      	movs	r6, #0
 8008da8:	341a      	adds	r4, #26
 8008daa:	42b5      	cmp	r5, r6
 8008dac:	d11a      	bne.n	8008de4 <_printf_common+0xc8>
 8008dae:	2000      	movs	r0, #0
 8008db0:	e008      	b.n	8008dc4 <_printf_common+0xa8>
 8008db2:	2301      	movs	r3, #1
 8008db4:	4652      	mov	r2, sl
 8008db6:	4641      	mov	r1, r8
 8008db8:	4638      	mov	r0, r7
 8008dba:	47c8      	blx	r9
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d103      	bne.n	8008dc8 <_printf_common+0xac>
 8008dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc8:	3501      	adds	r5, #1
 8008dca:	e7c6      	b.n	8008d5a <_printf_common+0x3e>
 8008dcc:	18e1      	adds	r1, r4, r3
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	2030      	movs	r0, #48	@ 0x30
 8008dd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dd6:	4422      	add	r2, r4
 8008dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ddc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008de0:	3302      	adds	r3, #2
 8008de2:	e7c7      	b.n	8008d74 <_printf_common+0x58>
 8008de4:	2301      	movs	r3, #1
 8008de6:	4622      	mov	r2, r4
 8008de8:	4641      	mov	r1, r8
 8008dea:	4638      	mov	r0, r7
 8008dec:	47c8      	blx	r9
 8008dee:	3001      	adds	r0, #1
 8008df0:	d0e6      	beq.n	8008dc0 <_printf_common+0xa4>
 8008df2:	3601      	adds	r6, #1
 8008df4:	e7d9      	b.n	8008daa <_printf_common+0x8e>
	...

08008df8 <_printf_i>:
 8008df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dfc:	7e0f      	ldrb	r7, [r1, #24]
 8008dfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e00:	2f78      	cmp	r7, #120	@ 0x78
 8008e02:	4691      	mov	r9, r2
 8008e04:	4680      	mov	r8, r0
 8008e06:	460c      	mov	r4, r1
 8008e08:	469a      	mov	sl, r3
 8008e0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e0e:	d807      	bhi.n	8008e20 <_printf_i+0x28>
 8008e10:	2f62      	cmp	r7, #98	@ 0x62
 8008e12:	d80a      	bhi.n	8008e2a <_printf_i+0x32>
 8008e14:	2f00      	cmp	r7, #0
 8008e16:	f000 80d2 	beq.w	8008fbe <_printf_i+0x1c6>
 8008e1a:	2f58      	cmp	r7, #88	@ 0x58
 8008e1c:	f000 80b9 	beq.w	8008f92 <_printf_i+0x19a>
 8008e20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e28:	e03a      	b.n	8008ea0 <_printf_i+0xa8>
 8008e2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e2e:	2b15      	cmp	r3, #21
 8008e30:	d8f6      	bhi.n	8008e20 <_printf_i+0x28>
 8008e32:	a101      	add	r1, pc, #4	@ (adr r1, 8008e38 <_printf_i+0x40>)
 8008e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e38:	08008e91 	.word	0x08008e91
 8008e3c:	08008ea5 	.word	0x08008ea5
 8008e40:	08008e21 	.word	0x08008e21
 8008e44:	08008e21 	.word	0x08008e21
 8008e48:	08008e21 	.word	0x08008e21
 8008e4c:	08008e21 	.word	0x08008e21
 8008e50:	08008ea5 	.word	0x08008ea5
 8008e54:	08008e21 	.word	0x08008e21
 8008e58:	08008e21 	.word	0x08008e21
 8008e5c:	08008e21 	.word	0x08008e21
 8008e60:	08008e21 	.word	0x08008e21
 8008e64:	08008fa5 	.word	0x08008fa5
 8008e68:	08008ecf 	.word	0x08008ecf
 8008e6c:	08008f5f 	.word	0x08008f5f
 8008e70:	08008e21 	.word	0x08008e21
 8008e74:	08008e21 	.word	0x08008e21
 8008e78:	08008fc7 	.word	0x08008fc7
 8008e7c:	08008e21 	.word	0x08008e21
 8008e80:	08008ecf 	.word	0x08008ecf
 8008e84:	08008e21 	.word	0x08008e21
 8008e88:	08008e21 	.word	0x08008e21
 8008e8c:	08008f67 	.word	0x08008f67
 8008e90:	6833      	ldr	r3, [r6, #0]
 8008e92:	1d1a      	adds	r2, r3, #4
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6032      	str	r2, [r6, #0]
 8008e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e09d      	b.n	8008fe0 <_printf_i+0x1e8>
 8008ea4:	6833      	ldr	r3, [r6, #0]
 8008ea6:	6820      	ldr	r0, [r4, #0]
 8008ea8:	1d19      	adds	r1, r3, #4
 8008eaa:	6031      	str	r1, [r6, #0]
 8008eac:	0606      	lsls	r6, r0, #24
 8008eae:	d501      	bpl.n	8008eb4 <_printf_i+0xbc>
 8008eb0:	681d      	ldr	r5, [r3, #0]
 8008eb2:	e003      	b.n	8008ebc <_printf_i+0xc4>
 8008eb4:	0645      	lsls	r5, r0, #25
 8008eb6:	d5fb      	bpl.n	8008eb0 <_printf_i+0xb8>
 8008eb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ebc:	2d00      	cmp	r5, #0
 8008ebe:	da03      	bge.n	8008ec8 <_printf_i+0xd0>
 8008ec0:	232d      	movs	r3, #45	@ 0x2d
 8008ec2:	426d      	negs	r5, r5
 8008ec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ec8:	4859      	ldr	r0, [pc, #356]	@ (8009030 <_printf_i+0x238>)
 8008eca:	230a      	movs	r3, #10
 8008ecc:	e011      	b.n	8008ef2 <_printf_i+0xfa>
 8008ece:	6821      	ldr	r1, [r4, #0]
 8008ed0:	6833      	ldr	r3, [r6, #0]
 8008ed2:	0608      	lsls	r0, r1, #24
 8008ed4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ed8:	d402      	bmi.n	8008ee0 <_printf_i+0xe8>
 8008eda:	0649      	lsls	r1, r1, #25
 8008edc:	bf48      	it	mi
 8008ede:	b2ad      	uxthmi	r5, r5
 8008ee0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ee2:	4853      	ldr	r0, [pc, #332]	@ (8009030 <_printf_i+0x238>)
 8008ee4:	6033      	str	r3, [r6, #0]
 8008ee6:	bf14      	ite	ne
 8008ee8:	230a      	movne	r3, #10
 8008eea:	2308      	moveq	r3, #8
 8008eec:	2100      	movs	r1, #0
 8008eee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ef2:	6866      	ldr	r6, [r4, #4]
 8008ef4:	60a6      	str	r6, [r4, #8]
 8008ef6:	2e00      	cmp	r6, #0
 8008ef8:	bfa2      	ittt	ge
 8008efa:	6821      	ldrge	r1, [r4, #0]
 8008efc:	f021 0104 	bicge.w	r1, r1, #4
 8008f00:	6021      	strge	r1, [r4, #0]
 8008f02:	b90d      	cbnz	r5, 8008f08 <_printf_i+0x110>
 8008f04:	2e00      	cmp	r6, #0
 8008f06:	d04b      	beq.n	8008fa0 <_printf_i+0x1a8>
 8008f08:	4616      	mov	r6, r2
 8008f0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f0e:	fb03 5711 	mls	r7, r3, r1, r5
 8008f12:	5dc7      	ldrb	r7, [r0, r7]
 8008f14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f18:	462f      	mov	r7, r5
 8008f1a:	42bb      	cmp	r3, r7
 8008f1c:	460d      	mov	r5, r1
 8008f1e:	d9f4      	bls.n	8008f0a <_printf_i+0x112>
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d10b      	bne.n	8008f3c <_printf_i+0x144>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	07df      	lsls	r7, r3, #31
 8008f28:	d508      	bpl.n	8008f3c <_printf_i+0x144>
 8008f2a:	6923      	ldr	r3, [r4, #16]
 8008f2c:	6861      	ldr	r1, [r4, #4]
 8008f2e:	4299      	cmp	r1, r3
 8008f30:	bfde      	ittt	le
 8008f32:	2330      	movle	r3, #48	@ 0x30
 8008f34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f3c:	1b92      	subs	r2, r2, r6
 8008f3e:	6122      	str	r2, [r4, #16]
 8008f40:	f8cd a000 	str.w	sl, [sp]
 8008f44:	464b      	mov	r3, r9
 8008f46:	aa03      	add	r2, sp, #12
 8008f48:	4621      	mov	r1, r4
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	f7ff fee6 	bl	8008d1c <_printf_common>
 8008f50:	3001      	adds	r0, #1
 8008f52:	d14a      	bne.n	8008fea <_printf_i+0x1f2>
 8008f54:	f04f 30ff 	mov.w	r0, #4294967295
 8008f58:	b004      	add	sp, #16
 8008f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	f043 0320 	orr.w	r3, r3, #32
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	4833      	ldr	r0, [pc, #204]	@ (8009034 <_printf_i+0x23c>)
 8008f68:	2778      	movs	r7, #120	@ 0x78
 8008f6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	6831      	ldr	r1, [r6, #0]
 8008f72:	061f      	lsls	r7, r3, #24
 8008f74:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f78:	d402      	bmi.n	8008f80 <_printf_i+0x188>
 8008f7a:	065f      	lsls	r7, r3, #25
 8008f7c:	bf48      	it	mi
 8008f7e:	b2ad      	uxthmi	r5, r5
 8008f80:	6031      	str	r1, [r6, #0]
 8008f82:	07d9      	lsls	r1, r3, #31
 8008f84:	bf44      	itt	mi
 8008f86:	f043 0320 	orrmi.w	r3, r3, #32
 8008f8a:	6023      	strmi	r3, [r4, #0]
 8008f8c:	b11d      	cbz	r5, 8008f96 <_printf_i+0x19e>
 8008f8e:	2310      	movs	r3, #16
 8008f90:	e7ac      	b.n	8008eec <_printf_i+0xf4>
 8008f92:	4827      	ldr	r0, [pc, #156]	@ (8009030 <_printf_i+0x238>)
 8008f94:	e7e9      	b.n	8008f6a <_printf_i+0x172>
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	f023 0320 	bic.w	r3, r3, #32
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	e7f6      	b.n	8008f8e <_printf_i+0x196>
 8008fa0:	4616      	mov	r6, r2
 8008fa2:	e7bd      	b.n	8008f20 <_printf_i+0x128>
 8008fa4:	6833      	ldr	r3, [r6, #0]
 8008fa6:	6825      	ldr	r5, [r4, #0]
 8008fa8:	6961      	ldr	r1, [r4, #20]
 8008faa:	1d18      	adds	r0, r3, #4
 8008fac:	6030      	str	r0, [r6, #0]
 8008fae:	062e      	lsls	r6, r5, #24
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	d501      	bpl.n	8008fb8 <_printf_i+0x1c0>
 8008fb4:	6019      	str	r1, [r3, #0]
 8008fb6:	e002      	b.n	8008fbe <_printf_i+0x1c6>
 8008fb8:	0668      	lsls	r0, r5, #25
 8008fba:	d5fb      	bpl.n	8008fb4 <_printf_i+0x1bc>
 8008fbc:	8019      	strh	r1, [r3, #0]
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	6123      	str	r3, [r4, #16]
 8008fc2:	4616      	mov	r6, r2
 8008fc4:	e7bc      	b.n	8008f40 <_printf_i+0x148>
 8008fc6:	6833      	ldr	r3, [r6, #0]
 8008fc8:	1d1a      	adds	r2, r3, #4
 8008fca:	6032      	str	r2, [r6, #0]
 8008fcc:	681e      	ldr	r6, [r3, #0]
 8008fce:	6862      	ldr	r2, [r4, #4]
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	4630      	mov	r0, r6
 8008fd4:	f7f7 f904 	bl	80001e0 <memchr>
 8008fd8:	b108      	cbz	r0, 8008fde <_printf_i+0x1e6>
 8008fda:	1b80      	subs	r0, r0, r6
 8008fdc:	6060      	str	r0, [r4, #4]
 8008fde:	6863      	ldr	r3, [r4, #4]
 8008fe0:	6123      	str	r3, [r4, #16]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fe8:	e7aa      	b.n	8008f40 <_printf_i+0x148>
 8008fea:	6923      	ldr	r3, [r4, #16]
 8008fec:	4632      	mov	r2, r6
 8008fee:	4649      	mov	r1, r9
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	47d0      	blx	sl
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	d0ad      	beq.n	8008f54 <_printf_i+0x15c>
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	079b      	lsls	r3, r3, #30
 8008ffc:	d413      	bmi.n	8009026 <_printf_i+0x22e>
 8008ffe:	68e0      	ldr	r0, [r4, #12]
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	4298      	cmp	r0, r3
 8009004:	bfb8      	it	lt
 8009006:	4618      	movlt	r0, r3
 8009008:	e7a6      	b.n	8008f58 <_printf_i+0x160>
 800900a:	2301      	movs	r3, #1
 800900c:	4632      	mov	r2, r6
 800900e:	4649      	mov	r1, r9
 8009010:	4640      	mov	r0, r8
 8009012:	47d0      	blx	sl
 8009014:	3001      	adds	r0, #1
 8009016:	d09d      	beq.n	8008f54 <_printf_i+0x15c>
 8009018:	3501      	adds	r5, #1
 800901a:	68e3      	ldr	r3, [r4, #12]
 800901c:	9903      	ldr	r1, [sp, #12]
 800901e:	1a5b      	subs	r3, r3, r1
 8009020:	42ab      	cmp	r3, r5
 8009022:	dcf2      	bgt.n	800900a <_printf_i+0x212>
 8009024:	e7eb      	b.n	8008ffe <_printf_i+0x206>
 8009026:	2500      	movs	r5, #0
 8009028:	f104 0619 	add.w	r6, r4, #25
 800902c:	e7f5      	b.n	800901a <_printf_i+0x222>
 800902e:	bf00      	nop
 8009030:	0800a675 	.word	0x0800a675
 8009034:	0800a686 	.word	0x0800a686

08009038 <__swbuf_r>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	460e      	mov	r6, r1
 800903c:	4614      	mov	r4, r2
 800903e:	4605      	mov	r5, r0
 8009040:	b118      	cbz	r0, 800904a <__swbuf_r+0x12>
 8009042:	6a03      	ldr	r3, [r0, #32]
 8009044:	b90b      	cbnz	r3, 800904a <__swbuf_r+0x12>
 8009046:	f7fd fee3 	bl	8006e10 <__sinit>
 800904a:	69a3      	ldr	r3, [r4, #24]
 800904c:	60a3      	str	r3, [r4, #8]
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	071a      	lsls	r2, r3, #28
 8009052:	d501      	bpl.n	8009058 <__swbuf_r+0x20>
 8009054:	6923      	ldr	r3, [r4, #16]
 8009056:	b943      	cbnz	r3, 800906a <__swbuf_r+0x32>
 8009058:	4621      	mov	r1, r4
 800905a:	4628      	mov	r0, r5
 800905c:	f000 f82a 	bl	80090b4 <__swsetup_r>
 8009060:	b118      	cbz	r0, 800906a <__swbuf_r+0x32>
 8009062:	f04f 37ff 	mov.w	r7, #4294967295
 8009066:	4638      	mov	r0, r7
 8009068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	6922      	ldr	r2, [r4, #16]
 800906e:	1a98      	subs	r0, r3, r2
 8009070:	6963      	ldr	r3, [r4, #20]
 8009072:	b2f6      	uxtb	r6, r6
 8009074:	4283      	cmp	r3, r0
 8009076:	4637      	mov	r7, r6
 8009078:	dc05      	bgt.n	8009086 <__swbuf_r+0x4e>
 800907a:	4621      	mov	r1, r4
 800907c:	4628      	mov	r0, r5
 800907e:	f7fe fa7f 	bl	8007580 <_fflush_r>
 8009082:	2800      	cmp	r0, #0
 8009084:	d1ed      	bne.n	8009062 <__swbuf_r+0x2a>
 8009086:	68a3      	ldr	r3, [r4, #8]
 8009088:	3b01      	subs	r3, #1
 800908a:	60a3      	str	r3, [r4, #8]
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	6022      	str	r2, [r4, #0]
 8009092:	701e      	strb	r6, [r3, #0]
 8009094:	6962      	ldr	r2, [r4, #20]
 8009096:	1c43      	adds	r3, r0, #1
 8009098:	429a      	cmp	r2, r3
 800909a:	d004      	beq.n	80090a6 <__swbuf_r+0x6e>
 800909c:	89a3      	ldrh	r3, [r4, #12]
 800909e:	07db      	lsls	r3, r3, #31
 80090a0:	d5e1      	bpl.n	8009066 <__swbuf_r+0x2e>
 80090a2:	2e0a      	cmp	r6, #10
 80090a4:	d1df      	bne.n	8009066 <__swbuf_r+0x2e>
 80090a6:	4621      	mov	r1, r4
 80090a8:	4628      	mov	r0, r5
 80090aa:	f7fe fa69 	bl	8007580 <_fflush_r>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d0d9      	beq.n	8009066 <__swbuf_r+0x2e>
 80090b2:	e7d6      	b.n	8009062 <__swbuf_r+0x2a>

080090b4 <__swsetup_r>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	4b29      	ldr	r3, [pc, #164]	@ (800915c <__swsetup_r+0xa8>)
 80090b8:	4605      	mov	r5, r0
 80090ba:	6818      	ldr	r0, [r3, #0]
 80090bc:	460c      	mov	r4, r1
 80090be:	b118      	cbz	r0, 80090c8 <__swsetup_r+0x14>
 80090c0:	6a03      	ldr	r3, [r0, #32]
 80090c2:	b90b      	cbnz	r3, 80090c8 <__swsetup_r+0x14>
 80090c4:	f7fd fea4 	bl	8006e10 <__sinit>
 80090c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090cc:	0719      	lsls	r1, r3, #28
 80090ce:	d422      	bmi.n	8009116 <__swsetup_r+0x62>
 80090d0:	06da      	lsls	r2, r3, #27
 80090d2:	d407      	bmi.n	80090e4 <__swsetup_r+0x30>
 80090d4:	2209      	movs	r2, #9
 80090d6:	602a      	str	r2, [r5, #0]
 80090d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090dc:	81a3      	strh	r3, [r4, #12]
 80090de:	f04f 30ff 	mov.w	r0, #4294967295
 80090e2:	e033      	b.n	800914c <__swsetup_r+0x98>
 80090e4:	0758      	lsls	r0, r3, #29
 80090e6:	d512      	bpl.n	800910e <__swsetup_r+0x5a>
 80090e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090ea:	b141      	cbz	r1, 80090fe <__swsetup_r+0x4a>
 80090ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090f0:	4299      	cmp	r1, r3
 80090f2:	d002      	beq.n	80090fa <__swsetup_r+0x46>
 80090f4:	4628      	mov	r0, r5
 80090f6:	f7fd ff8f 	bl	8007018 <_free_r>
 80090fa:	2300      	movs	r3, #0
 80090fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80090fe:	89a3      	ldrh	r3, [r4, #12]
 8009100:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009104:	81a3      	strh	r3, [r4, #12]
 8009106:	2300      	movs	r3, #0
 8009108:	6063      	str	r3, [r4, #4]
 800910a:	6923      	ldr	r3, [r4, #16]
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	f043 0308 	orr.w	r3, r3, #8
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	6923      	ldr	r3, [r4, #16]
 8009118:	b94b      	cbnz	r3, 800912e <__swsetup_r+0x7a>
 800911a:	89a3      	ldrh	r3, [r4, #12]
 800911c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009124:	d003      	beq.n	800912e <__swsetup_r+0x7a>
 8009126:	4621      	mov	r1, r4
 8009128:	4628      	mov	r0, r5
 800912a:	f000 f883 	bl	8009234 <__smakebuf_r>
 800912e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009132:	f013 0201 	ands.w	r2, r3, #1
 8009136:	d00a      	beq.n	800914e <__swsetup_r+0x9a>
 8009138:	2200      	movs	r2, #0
 800913a:	60a2      	str	r2, [r4, #8]
 800913c:	6962      	ldr	r2, [r4, #20]
 800913e:	4252      	negs	r2, r2
 8009140:	61a2      	str	r2, [r4, #24]
 8009142:	6922      	ldr	r2, [r4, #16]
 8009144:	b942      	cbnz	r2, 8009158 <__swsetup_r+0xa4>
 8009146:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800914a:	d1c5      	bne.n	80090d8 <__swsetup_r+0x24>
 800914c:	bd38      	pop	{r3, r4, r5, pc}
 800914e:	0799      	lsls	r1, r3, #30
 8009150:	bf58      	it	pl
 8009152:	6962      	ldrpl	r2, [r4, #20]
 8009154:	60a2      	str	r2, [r4, #8]
 8009156:	e7f4      	b.n	8009142 <__swsetup_r+0x8e>
 8009158:	2000      	movs	r0, #0
 800915a:	e7f7      	b.n	800914c <__swsetup_r+0x98>
 800915c:	20000030 	.word	0x20000030

08009160 <_raise_r>:
 8009160:	291f      	cmp	r1, #31
 8009162:	b538      	push	{r3, r4, r5, lr}
 8009164:	4605      	mov	r5, r0
 8009166:	460c      	mov	r4, r1
 8009168:	d904      	bls.n	8009174 <_raise_r+0x14>
 800916a:	2316      	movs	r3, #22
 800916c:	6003      	str	r3, [r0, #0]
 800916e:	f04f 30ff 	mov.w	r0, #4294967295
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009176:	b112      	cbz	r2, 800917e <_raise_r+0x1e>
 8009178:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800917c:	b94b      	cbnz	r3, 8009192 <_raise_r+0x32>
 800917e:	4628      	mov	r0, r5
 8009180:	f000 f830 	bl	80091e4 <_getpid_r>
 8009184:	4622      	mov	r2, r4
 8009186:	4601      	mov	r1, r0
 8009188:	4628      	mov	r0, r5
 800918a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800918e:	f000 b817 	b.w	80091c0 <_kill_r>
 8009192:	2b01      	cmp	r3, #1
 8009194:	d00a      	beq.n	80091ac <_raise_r+0x4c>
 8009196:	1c59      	adds	r1, r3, #1
 8009198:	d103      	bne.n	80091a2 <_raise_r+0x42>
 800919a:	2316      	movs	r3, #22
 800919c:	6003      	str	r3, [r0, #0]
 800919e:	2001      	movs	r0, #1
 80091a0:	e7e7      	b.n	8009172 <_raise_r+0x12>
 80091a2:	2100      	movs	r1, #0
 80091a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80091a8:	4620      	mov	r0, r4
 80091aa:	4798      	blx	r3
 80091ac:	2000      	movs	r0, #0
 80091ae:	e7e0      	b.n	8009172 <_raise_r+0x12>

080091b0 <raise>:
 80091b0:	4b02      	ldr	r3, [pc, #8]	@ (80091bc <raise+0xc>)
 80091b2:	4601      	mov	r1, r0
 80091b4:	6818      	ldr	r0, [r3, #0]
 80091b6:	f7ff bfd3 	b.w	8009160 <_raise_r>
 80091ba:	bf00      	nop
 80091bc:	20000030 	.word	0x20000030

080091c0 <_kill_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4d07      	ldr	r5, [pc, #28]	@ (80091e0 <_kill_r+0x20>)
 80091c4:	2300      	movs	r3, #0
 80091c6:	4604      	mov	r4, r0
 80091c8:	4608      	mov	r0, r1
 80091ca:	4611      	mov	r1, r2
 80091cc:	602b      	str	r3, [r5, #0]
 80091ce:	f7f9 fc43 	bl	8002a58 <_kill>
 80091d2:	1c43      	adds	r3, r0, #1
 80091d4:	d102      	bne.n	80091dc <_kill_r+0x1c>
 80091d6:	682b      	ldr	r3, [r5, #0]
 80091d8:	b103      	cbz	r3, 80091dc <_kill_r+0x1c>
 80091da:	6023      	str	r3, [r4, #0]
 80091dc:	bd38      	pop	{r3, r4, r5, pc}
 80091de:	bf00      	nop
 80091e0:	200005e4 	.word	0x200005e4

080091e4 <_getpid_r>:
 80091e4:	f7f9 bc30 	b.w	8002a48 <_getpid>

080091e8 <__swhatbuf_r>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	460c      	mov	r4, r1
 80091ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f0:	2900      	cmp	r1, #0
 80091f2:	b096      	sub	sp, #88	@ 0x58
 80091f4:	4615      	mov	r5, r2
 80091f6:	461e      	mov	r6, r3
 80091f8:	da0d      	bge.n	8009216 <__swhatbuf_r+0x2e>
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009200:	f04f 0100 	mov.w	r1, #0
 8009204:	bf14      	ite	ne
 8009206:	2340      	movne	r3, #64	@ 0x40
 8009208:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800920c:	2000      	movs	r0, #0
 800920e:	6031      	str	r1, [r6, #0]
 8009210:	602b      	str	r3, [r5, #0]
 8009212:	b016      	add	sp, #88	@ 0x58
 8009214:	bd70      	pop	{r4, r5, r6, pc}
 8009216:	466a      	mov	r2, sp
 8009218:	f000 f848 	bl	80092ac <_fstat_r>
 800921c:	2800      	cmp	r0, #0
 800921e:	dbec      	blt.n	80091fa <__swhatbuf_r+0x12>
 8009220:	9901      	ldr	r1, [sp, #4]
 8009222:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009226:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800922a:	4259      	negs	r1, r3
 800922c:	4159      	adcs	r1, r3
 800922e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009232:	e7eb      	b.n	800920c <__swhatbuf_r+0x24>

08009234 <__smakebuf_r>:
 8009234:	898b      	ldrh	r3, [r1, #12]
 8009236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009238:	079d      	lsls	r5, r3, #30
 800923a:	4606      	mov	r6, r0
 800923c:	460c      	mov	r4, r1
 800923e:	d507      	bpl.n	8009250 <__smakebuf_r+0x1c>
 8009240:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009244:	6023      	str	r3, [r4, #0]
 8009246:	6123      	str	r3, [r4, #16]
 8009248:	2301      	movs	r3, #1
 800924a:	6163      	str	r3, [r4, #20]
 800924c:	b003      	add	sp, #12
 800924e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009250:	ab01      	add	r3, sp, #4
 8009252:	466a      	mov	r2, sp
 8009254:	f7ff ffc8 	bl	80091e8 <__swhatbuf_r>
 8009258:	9f00      	ldr	r7, [sp, #0]
 800925a:	4605      	mov	r5, r0
 800925c:	4639      	mov	r1, r7
 800925e:	4630      	mov	r0, r6
 8009260:	f7fd ff46 	bl	80070f0 <_malloc_r>
 8009264:	b948      	cbnz	r0, 800927a <__smakebuf_r+0x46>
 8009266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800926a:	059a      	lsls	r2, r3, #22
 800926c:	d4ee      	bmi.n	800924c <__smakebuf_r+0x18>
 800926e:	f023 0303 	bic.w	r3, r3, #3
 8009272:	f043 0302 	orr.w	r3, r3, #2
 8009276:	81a3      	strh	r3, [r4, #12]
 8009278:	e7e2      	b.n	8009240 <__smakebuf_r+0xc>
 800927a:	89a3      	ldrh	r3, [r4, #12]
 800927c:	6020      	str	r0, [r4, #0]
 800927e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009282:	81a3      	strh	r3, [r4, #12]
 8009284:	9b01      	ldr	r3, [sp, #4]
 8009286:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800928a:	b15b      	cbz	r3, 80092a4 <__smakebuf_r+0x70>
 800928c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009290:	4630      	mov	r0, r6
 8009292:	f000 f81d 	bl	80092d0 <_isatty_r>
 8009296:	b128      	cbz	r0, 80092a4 <__smakebuf_r+0x70>
 8009298:	89a3      	ldrh	r3, [r4, #12]
 800929a:	f023 0303 	bic.w	r3, r3, #3
 800929e:	f043 0301 	orr.w	r3, r3, #1
 80092a2:	81a3      	strh	r3, [r4, #12]
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	431d      	orrs	r5, r3
 80092a8:	81a5      	strh	r5, [r4, #12]
 80092aa:	e7cf      	b.n	800924c <__smakebuf_r+0x18>

080092ac <_fstat_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4d07      	ldr	r5, [pc, #28]	@ (80092cc <_fstat_r+0x20>)
 80092b0:	2300      	movs	r3, #0
 80092b2:	4604      	mov	r4, r0
 80092b4:	4608      	mov	r0, r1
 80092b6:	4611      	mov	r1, r2
 80092b8:	602b      	str	r3, [r5, #0]
 80092ba:	f7f9 fc2d 	bl	8002b18 <_fstat>
 80092be:	1c43      	adds	r3, r0, #1
 80092c0:	d102      	bne.n	80092c8 <_fstat_r+0x1c>
 80092c2:	682b      	ldr	r3, [r5, #0]
 80092c4:	b103      	cbz	r3, 80092c8 <_fstat_r+0x1c>
 80092c6:	6023      	str	r3, [r4, #0]
 80092c8:	bd38      	pop	{r3, r4, r5, pc}
 80092ca:	bf00      	nop
 80092cc:	200005e4 	.word	0x200005e4

080092d0 <_isatty_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4d06      	ldr	r5, [pc, #24]	@ (80092ec <_isatty_r+0x1c>)
 80092d4:	2300      	movs	r3, #0
 80092d6:	4604      	mov	r4, r0
 80092d8:	4608      	mov	r0, r1
 80092da:	602b      	str	r3, [r5, #0]
 80092dc:	f7f9 fc2c 	bl	8002b38 <_isatty>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d102      	bne.n	80092ea <_isatty_r+0x1a>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	b103      	cbz	r3, 80092ea <_isatty_r+0x1a>
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	200005e4 	.word	0x200005e4

080092f0 <cos>:
 80092f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092f2:	ec53 2b10 	vmov	r2, r3, d0
 80092f6:	4826      	ldr	r0, [pc, #152]	@ (8009390 <cos+0xa0>)
 80092f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80092fc:	4281      	cmp	r1, r0
 80092fe:	d806      	bhi.n	800930e <cos+0x1e>
 8009300:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009388 <cos+0x98>
 8009304:	b005      	add	sp, #20
 8009306:	f85d eb04 	ldr.w	lr, [sp], #4
 800930a:	f000 b899 	b.w	8009440 <__kernel_cos>
 800930e:	4821      	ldr	r0, [pc, #132]	@ (8009394 <cos+0xa4>)
 8009310:	4281      	cmp	r1, r0
 8009312:	d908      	bls.n	8009326 <cos+0x36>
 8009314:	4610      	mov	r0, r2
 8009316:	4619      	mov	r1, r3
 8009318:	f7f6 ffb6 	bl	8000288 <__aeabi_dsub>
 800931c:	ec41 0b10 	vmov	d0, r0, r1
 8009320:	b005      	add	sp, #20
 8009322:	f85d fb04 	ldr.w	pc, [sp], #4
 8009326:	4668      	mov	r0, sp
 8009328:	f000 fa0e 	bl	8009748 <__ieee754_rem_pio2>
 800932c:	f000 0003 	and.w	r0, r0, #3
 8009330:	2801      	cmp	r0, #1
 8009332:	d00b      	beq.n	800934c <cos+0x5c>
 8009334:	2802      	cmp	r0, #2
 8009336:	d015      	beq.n	8009364 <cos+0x74>
 8009338:	b9d8      	cbnz	r0, 8009372 <cos+0x82>
 800933a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800933e:	ed9d 0b00 	vldr	d0, [sp]
 8009342:	f000 f87d 	bl	8009440 <__kernel_cos>
 8009346:	ec51 0b10 	vmov	r0, r1, d0
 800934a:	e7e7      	b.n	800931c <cos+0x2c>
 800934c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009350:	ed9d 0b00 	vldr	d0, [sp]
 8009354:	f000 f93c 	bl	80095d0 <__kernel_sin>
 8009358:	ec53 2b10 	vmov	r2, r3, d0
 800935c:	4610      	mov	r0, r2
 800935e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009362:	e7db      	b.n	800931c <cos+0x2c>
 8009364:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009368:	ed9d 0b00 	vldr	d0, [sp]
 800936c:	f000 f868 	bl	8009440 <__kernel_cos>
 8009370:	e7f2      	b.n	8009358 <cos+0x68>
 8009372:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009376:	ed9d 0b00 	vldr	d0, [sp]
 800937a:	2001      	movs	r0, #1
 800937c:	f000 f928 	bl	80095d0 <__kernel_sin>
 8009380:	e7e1      	b.n	8009346 <cos+0x56>
 8009382:	bf00      	nop
 8009384:	f3af 8000 	nop.w
	...
 8009390:	3fe921fb 	.word	0x3fe921fb
 8009394:	7fefffff 	.word	0x7fefffff

08009398 <sin>:
 8009398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800939a:	ec53 2b10 	vmov	r2, r3, d0
 800939e:	4826      	ldr	r0, [pc, #152]	@ (8009438 <sin+0xa0>)
 80093a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80093a4:	4281      	cmp	r1, r0
 80093a6:	d807      	bhi.n	80093b8 <sin+0x20>
 80093a8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009430 <sin+0x98>
 80093ac:	2000      	movs	r0, #0
 80093ae:	b005      	add	sp, #20
 80093b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80093b4:	f000 b90c 	b.w	80095d0 <__kernel_sin>
 80093b8:	4820      	ldr	r0, [pc, #128]	@ (800943c <sin+0xa4>)
 80093ba:	4281      	cmp	r1, r0
 80093bc:	d908      	bls.n	80093d0 <sin+0x38>
 80093be:	4610      	mov	r0, r2
 80093c0:	4619      	mov	r1, r3
 80093c2:	f7f6 ff61 	bl	8000288 <__aeabi_dsub>
 80093c6:	ec41 0b10 	vmov	d0, r0, r1
 80093ca:	b005      	add	sp, #20
 80093cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80093d0:	4668      	mov	r0, sp
 80093d2:	f000 f9b9 	bl	8009748 <__ieee754_rem_pio2>
 80093d6:	f000 0003 	and.w	r0, r0, #3
 80093da:	2801      	cmp	r0, #1
 80093dc:	d00c      	beq.n	80093f8 <sin+0x60>
 80093de:	2802      	cmp	r0, #2
 80093e0:	d011      	beq.n	8009406 <sin+0x6e>
 80093e2:	b9e8      	cbnz	r0, 8009420 <sin+0x88>
 80093e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093e8:	ed9d 0b00 	vldr	d0, [sp]
 80093ec:	2001      	movs	r0, #1
 80093ee:	f000 f8ef 	bl	80095d0 <__kernel_sin>
 80093f2:	ec51 0b10 	vmov	r0, r1, d0
 80093f6:	e7e6      	b.n	80093c6 <sin+0x2e>
 80093f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093fc:	ed9d 0b00 	vldr	d0, [sp]
 8009400:	f000 f81e 	bl	8009440 <__kernel_cos>
 8009404:	e7f5      	b.n	80093f2 <sin+0x5a>
 8009406:	ed9d 1b02 	vldr	d1, [sp, #8]
 800940a:	ed9d 0b00 	vldr	d0, [sp]
 800940e:	2001      	movs	r0, #1
 8009410:	f000 f8de 	bl	80095d0 <__kernel_sin>
 8009414:	ec53 2b10 	vmov	r2, r3, d0
 8009418:	4610      	mov	r0, r2
 800941a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800941e:	e7d2      	b.n	80093c6 <sin+0x2e>
 8009420:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009424:	ed9d 0b00 	vldr	d0, [sp]
 8009428:	f000 f80a 	bl	8009440 <__kernel_cos>
 800942c:	e7f2      	b.n	8009414 <sin+0x7c>
 800942e:	bf00      	nop
	...
 8009438:	3fe921fb 	.word	0x3fe921fb
 800943c:	7fefffff 	.word	0x7fefffff

08009440 <__kernel_cos>:
 8009440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009444:	ec57 6b10 	vmov	r6, r7, d0
 8009448:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800944c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8009450:	ed8d 1b00 	vstr	d1, [sp]
 8009454:	d206      	bcs.n	8009464 <__kernel_cos+0x24>
 8009456:	4630      	mov	r0, r6
 8009458:	4639      	mov	r1, r7
 800945a:	f7f7 fb67 	bl	8000b2c <__aeabi_d2iz>
 800945e:	2800      	cmp	r0, #0
 8009460:	f000 8088 	beq.w	8009574 <__kernel_cos+0x134>
 8009464:	4632      	mov	r2, r6
 8009466:	463b      	mov	r3, r7
 8009468:	4630      	mov	r0, r6
 800946a:	4639      	mov	r1, r7
 800946c:	f7f7 f8c4 	bl	80005f8 <__aeabi_dmul>
 8009470:	4b51      	ldr	r3, [pc, #324]	@ (80095b8 <__kernel_cos+0x178>)
 8009472:	2200      	movs	r2, #0
 8009474:	4604      	mov	r4, r0
 8009476:	460d      	mov	r5, r1
 8009478:	f7f7 f8be 	bl	80005f8 <__aeabi_dmul>
 800947c:	a340      	add	r3, pc, #256	@ (adr r3, 8009580 <__kernel_cos+0x140>)
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	4682      	mov	sl, r0
 8009484:	468b      	mov	fp, r1
 8009486:	4620      	mov	r0, r4
 8009488:	4629      	mov	r1, r5
 800948a:	f7f7 f8b5 	bl	80005f8 <__aeabi_dmul>
 800948e:	a33e      	add	r3, pc, #248	@ (adr r3, 8009588 <__kernel_cos+0x148>)
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	f7f6 fefa 	bl	800028c <__adddf3>
 8009498:	4622      	mov	r2, r4
 800949a:	462b      	mov	r3, r5
 800949c:	f7f7 f8ac 	bl	80005f8 <__aeabi_dmul>
 80094a0:	a33b      	add	r3, pc, #236	@ (adr r3, 8009590 <__kernel_cos+0x150>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	f7f6 feef 	bl	8000288 <__aeabi_dsub>
 80094aa:	4622      	mov	r2, r4
 80094ac:	462b      	mov	r3, r5
 80094ae:	f7f7 f8a3 	bl	80005f8 <__aeabi_dmul>
 80094b2:	a339      	add	r3, pc, #228	@ (adr r3, 8009598 <__kernel_cos+0x158>)
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	f7f6 fee8 	bl	800028c <__adddf3>
 80094bc:	4622      	mov	r2, r4
 80094be:	462b      	mov	r3, r5
 80094c0:	f7f7 f89a 	bl	80005f8 <__aeabi_dmul>
 80094c4:	a336      	add	r3, pc, #216	@ (adr r3, 80095a0 <__kernel_cos+0x160>)
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	f7f6 fedd 	bl	8000288 <__aeabi_dsub>
 80094ce:	4622      	mov	r2, r4
 80094d0:	462b      	mov	r3, r5
 80094d2:	f7f7 f891 	bl	80005f8 <__aeabi_dmul>
 80094d6:	a334      	add	r3, pc, #208	@ (adr r3, 80095a8 <__kernel_cos+0x168>)
 80094d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094dc:	f7f6 fed6 	bl	800028c <__adddf3>
 80094e0:	4622      	mov	r2, r4
 80094e2:	462b      	mov	r3, r5
 80094e4:	f7f7 f888 	bl	80005f8 <__aeabi_dmul>
 80094e8:	4622      	mov	r2, r4
 80094ea:	462b      	mov	r3, r5
 80094ec:	f7f7 f884 	bl	80005f8 <__aeabi_dmul>
 80094f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094f4:	4604      	mov	r4, r0
 80094f6:	460d      	mov	r5, r1
 80094f8:	4630      	mov	r0, r6
 80094fa:	4639      	mov	r1, r7
 80094fc:	f7f7 f87c 	bl	80005f8 <__aeabi_dmul>
 8009500:	460b      	mov	r3, r1
 8009502:	4602      	mov	r2, r0
 8009504:	4629      	mov	r1, r5
 8009506:	4620      	mov	r0, r4
 8009508:	f7f6 febe 	bl	8000288 <__aeabi_dsub>
 800950c:	4b2b      	ldr	r3, [pc, #172]	@ (80095bc <__kernel_cos+0x17c>)
 800950e:	4598      	cmp	r8, r3
 8009510:	4606      	mov	r6, r0
 8009512:	460f      	mov	r7, r1
 8009514:	d810      	bhi.n	8009538 <__kernel_cos+0xf8>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4650      	mov	r0, sl
 800951c:	4659      	mov	r1, fp
 800951e:	f7f6 feb3 	bl	8000288 <__aeabi_dsub>
 8009522:	460b      	mov	r3, r1
 8009524:	4926      	ldr	r1, [pc, #152]	@ (80095c0 <__kernel_cos+0x180>)
 8009526:	4602      	mov	r2, r0
 8009528:	2000      	movs	r0, #0
 800952a:	f7f6 fead 	bl	8000288 <__aeabi_dsub>
 800952e:	ec41 0b10 	vmov	d0, r0, r1
 8009532:	b003      	add	sp, #12
 8009534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009538:	4b22      	ldr	r3, [pc, #136]	@ (80095c4 <__kernel_cos+0x184>)
 800953a:	4921      	ldr	r1, [pc, #132]	@ (80095c0 <__kernel_cos+0x180>)
 800953c:	4598      	cmp	r8, r3
 800953e:	bf8c      	ite	hi
 8009540:	4d21      	ldrhi	r5, [pc, #132]	@ (80095c8 <__kernel_cos+0x188>)
 8009542:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8009546:	2400      	movs	r4, #0
 8009548:	4622      	mov	r2, r4
 800954a:	462b      	mov	r3, r5
 800954c:	2000      	movs	r0, #0
 800954e:	f7f6 fe9b 	bl	8000288 <__aeabi_dsub>
 8009552:	4622      	mov	r2, r4
 8009554:	4680      	mov	r8, r0
 8009556:	4689      	mov	r9, r1
 8009558:	462b      	mov	r3, r5
 800955a:	4650      	mov	r0, sl
 800955c:	4659      	mov	r1, fp
 800955e:	f7f6 fe93 	bl	8000288 <__aeabi_dsub>
 8009562:	4632      	mov	r2, r6
 8009564:	463b      	mov	r3, r7
 8009566:	f7f6 fe8f 	bl	8000288 <__aeabi_dsub>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	4640      	mov	r0, r8
 8009570:	4649      	mov	r1, r9
 8009572:	e7da      	b.n	800952a <__kernel_cos+0xea>
 8009574:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80095b0 <__kernel_cos+0x170>
 8009578:	e7db      	b.n	8009532 <__kernel_cos+0xf2>
 800957a:	bf00      	nop
 800957c:	f3af 8000 	nop.w
 8009580:	be8838d4 	.word	0xbe8838d4
 8009584:	bda8fae9 	.word	0xbda8fae9
 8009588:	bdb4b1c4 	.word	0xbdb4b1c4
 800958c:	3e21ee9e 	.word	0x3e21ee9e
 8009590:	809c52ad 	.word	0x809c52ad
 8009594:	3e927e4f 	.word	0x3e927e4f
 8009598:	19cb1590 	.word	0x19cb1590
 800959c:	3efa01a0 	.word	0x3efa01a0
 80095a0:	16c15177 	.word	0x16c15177
 80095a4:	3f56c16c 	.word	0x3f56c16c
 80095a8:	5555554c 	.word	0x5555554c
 80095ac:	3fa55555 	.word	0x3fa55555
 80095b0:	00000000 	.word	0x00000000
 80095b4:	3ff00000 	.word	0x3ff00000
 80095b8:	3fe00000 	.word	0x3fe00000
 80095bc:	3fd33332 	.word	0x3fd33332
 80095c0:	3ff00000 	.word	0x3ff00000
 80095c4:	3fe90000 	.word	0x3fe90000
 80095c8:	3fd20000 	.word	0x3fd20000
 80095cc:	00000000 	.word	0x00000000

080095d0 <__kernel_sin>:
 80095d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	ec55 4b10 	vmov	r4, r5, d0
 80095d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80095dc:	b085      	sub	sp, #20
 80095de:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80095e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80095e6:	4680      	mov	r8, r0
 80095e8:	d205      	bcs.n	80095f6 <__kernel_sin+0x26>
 80095ea:	4620      	mov	r0, r4
 80095ec:	4629      	mov	r1, r5
 80095ee:	f7f7 fa9d 	bl	8000b2c <__aeabi_d2iz>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d052      	beq.n	800969c <__kernel_sin+0xcc>
 80095f6:	4622      	mov	r2, r4
 80095f8:	462b      	mov	r3, r5
 80095fa:	4620      	mov	r0, r4
 80095fc:	4629      	mov	r1, r5
 80095fe:	f7f6 fffb 	bl	80005f8 <__aeabi_dmul>
 8009602:	4682      	mov	sl, r0
 8009604:	468b      	mov	fp, r1
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	4620      	mov	r0, r4
 800960c:	4629      	mov	r1, r5
 800960e:	f7f6 fff3 	bl	80005f8 <__aeabi_dmul>
 8009612:	a342      	add	r3, pc, #264	@ (adr r3, 800971c <__kernel_sin+0x14c>)
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	e9cd 0100 	strd	r0, r1, [sp]
 800961c:	4650      	mov	r0, sl
 800961e:	4659      	mov	r1, fp
 8009620:	f7f6 ffea 	bl	80005f8 <__aeabi_dmul>
 8009624:	a33f      	add	r3, pc, #252	@ (adr r3, 8009724 <__kernel_sin+0x154>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7f6 fe2d 	bl	8000288 <__aeabi_dsub>
 800962e:	4652      	mov	r2, sl
 8009630:	465b      	mov	r3, fp
 8009632:	f7f6 ffe1 	bl	80005f8 <__aeabi_dmul>
 8009636:	a33d      	add	r3, pc, #244	@ (adr r3, 800972c <__kernel_sin+0x15c>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f6 fe26 	bl	800028c <__adddf3>
 8009640:	4652      	mov	r2, sl
 8009642:	465b      	mov	r3, fp
 8009644:	f7f6 ffd8 	bl	80005f8 <__aeabi_dmul>
 8009648:	a33a      	add	r3, pc, #232	@ (adr r3, 8009734 <__kernel_sin+0x164>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7f6 fe1b 	bl	8000288 <__aeabi_dsub>
 8009652:	4652      	mov	r2, sl
 8009654:	465b      	mov	r3, fp
 8009656:	f7f6 ffcf 	bl	80005f8 <__aeabi_dmul>
 800965a:	a338      	add	r3, pc, #224	@ (adr r3, 800973c <__kernel_sin+0x16c>)
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f7f6 fe14 	bl	800028c <__adddf3>
 8009664:	4606      	mov	r6, r0
 8009666:	460f      	mov	r7, r1
 8009668:	f1b8 0f00 	cmp.w	r8, #0
 800966c:	d11b      	bne.n	80096a6 <__kernel_sin+0xd6>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	4650      	mov	r0, sl
 8009674:	4659      	mov	r1, fp
 8009676:	f7f6 ffbf 	bl	80005f8 <__aeabi_dmul>
 800967a:	a325      	add	r3, pc, #148	@ (adr r3, 8009710 <__kernel_sin+0x140>)
 800967c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009680:	f7f6 fe02 	bl	8000288 <__aeabi_dsub>
 8009684:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009688:	f7f6 ffb6 	bl	80005f8 <__aeabi_dmul>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	4620      	mov	r0, r4
 8009692:	4629      	mov	r1, r5
 8009694:	f7f6 fdfa 	bl	800028c <__adddf3>
 8009698:	4604      	mov	r4, r0
 800969a:	460d      	mov	r5, r1
 800969c:	ec45 4b10 	vmov	d0, r4, r5
 80096a0:	b005      	add	sp, #20
 80096a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009718 <__kernel_sin+0x148>)
 80096ac:	2200      	movs	r2, #0
 80096ae:	f7f6 ffa3 	bl	80005f8 <__aeabi_dmul>
 80096b2:	4632      	mov	r2, r6
 80096b4:	4680      	mov	r8, r0
 80096b6:	4689      	mov	r9, r1
 80096b8:	463b      	mov	r3, r7
 80096ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096be:	f7f6 ff9b 	bl	80005f8 <__aeabi_dmul>
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	4640      	mov	r0, r8
 80096c8:	4649      	mov	r1, r9
 80096ca:	f7f6 fddd 	bl	8000288 <__aeabi_dsub>
 80096ce:	4652      	mov	r2, sl
 80096d0:	465b      	mov	r3, fp
 80096d2:	f7f6 ff91 	bl	80005f8 <__aeabi_dmul>
 80096d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096da:	f7f6 fdd5 	bl	8000288 <__aeabi_dsub>
 80096de:	a30c      	add	r3, pc, #48	@ (adr r3, 8009710 <__kernel_sin+0x140>)
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	4606      	mov	r6, r0
 80096e6:	460f      	mov	r7, r1
 80096e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096ec:	f7f6 ff84 	bl	80005f8 <__aeabi_dmul>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4630      	mov	r0, r6
 80096f6:	4639      	mov	r1, r7
 80096f8:	f7f6 fdc8 	bl	800028c <__adddf3>
 80096fc:	4602      	mov	r2, r0
 80096fe:	460b      	mov	r3, r1
 8009700:	4620      	mov	r0, r4
 8009702:	4629      	mov	r1, r5
 8009704:	f7f6 fdc0 	bl	8000288 <__aeabi_dsub>
 8009708:	e7c6      	b.n	8009698 <__kernel_sin+0xc8>
 800970a:	bf00      	nop
 800970c:	f3af 8000 	nop.w
 8009710:	55555549 	.word	0x55555549
 8009714:	3fc55555 	.word	0x3fc55555
 8009718:	3fe00000 	.word	0x3fe00000
 800971c:	5acfd57c 	.word	0x5acfd57c
 8009720:	3de5d93a 	.word	0x3de5d93a
 8009724:	8a2b9ceb 	.word	0x8a2b9ceb
 8009728:	3e5ae5e6 	.word	0x3e5ae5e6
 800972c:	57b1fe7d 	.word	0x57b1fe7d
 8009730:	3ec71de3 	.word	0x3ec71de3
 8009734:	19c161d5 	.word	0x19c161d5
 8009738:	3f2a01a0 	.word	0x3f2a01a0
 800973c:	1110f8a6 	.word	0x1110f8a6
 8009740:	3f811111 	.word	0x3f811111
 8009744:	00000000 	.word	0x00000000

08009748 <__ieee754_rem_pio2>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	ec57 6b10 	vmov	r6, r7, d0
 8009750:	4bc5      	ldr	r3, [pc, #788]	@ (8009a68 <__ieee754_rem_pio2+0x320>)
 8009752:	b08d      	sub	sp, #52	@ 0x34
 8009754:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009758:	4598      	cmp	r8, r3
 800975a:	4604      	mov	r4, r0
 800975c:	9704      	str	r7, [sp, #16]
 800975e:	d807      	bhi.n	8009770 <__ieee754_rem_pio2+0x28>
 8009760:	2200      	movs	r2, #0
 8009762:	2300      	movs	r3, #0
 8009764:	ed80 0b00 	vstr	d0, [r0]
 8009768:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800976c:	2500      	movs	r5, #0
 800976e:	e028      	b.n	80097c2 <__ieee754_rem_pio2+0x7a>
 8009770:	4bbe      	ldr	r3, [pc, #760]	@ (8009a6c <__ieee754_rem_pio2+0x324>)
 8009772:	4598      	cmp	r8, r3
 8009774:	d878      	bhi.n	8009868 <__ieee754_rem_pio2+0x120>
 8009776:	9b04      	ldr	r3, [sp, #16]
 8009778:	4dbd      	ldr	r5, [pc, #756]	@ (8009a70 <__ieee754_rem_pio2+0x328>)
 800977a:	2b00      	cmp	r3, #0
 800977c:	4630      	mov	r0, r6
 800977e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009a30 <__ieee754_rem_pio2+0x2e8>)
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	4639      	mov	r1, r7
 8009786:	dd38      	ble.n	80097fa <__ieee754_rem_pio2+0xb2>
 8009788:	f7f6 fd7e 	bl	8000288 <__aeabi_dsub>
 800978c:	45a8      	cmp	r8, r5
 800978e:	4606      	mov	r6, r0
 8009790:	460f      	mov	r7, r1
 8009792:	d01a      	beq.n	80097ca <__ieee754_rem_pio2+0x82>
 8009794:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009a38 <__ieee754_rem_pio2+0x2f0>)
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	f7f6 fd75 	bl	8000288 <__aeabi_dsub>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4680      	mov	r8, r0
 80097a4:	4689      	mov	r9, r1
 80097a6:	4630      	mov	r0, r6
 80097a8:	4639      	mov	r1, r7
 80097aa:	f7f6 fd6d 	bl	8000288 <__aeabi_dsub>
 80097ae:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009a38 <__ieee754_rem_pio2+0x2f0>)
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	f7f6 fd68 	bl	8000288 <__aeabi_dsub>
 80097b8:	e9c4 8900 	strd	r8, r9, [r4]
 80097bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80097c0:	2501      	movs	r5, #1
 80097c2:	4628      	mov	r0, r5
 80097c4:	b00d      	add	sp, #52	@ 0x34
 80097c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ca:	a39d      	add	r3, pc, #628	@ (adr r3, 8009a40 <__ieee754_rem_pio2+0x2f8>)
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	f7f6 fd5a 	bl	8000288 <__aeabi_dsub>
 80097d4:	a39c      	add	r3, pc, #624	@ (adr r3, 8009a48 <__ieee754_rem_pio2+0x300>)
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	4606      	mov	r6, r0
 80097dc:	460f      	mov	r7, r1
 80097de:	f7f6 fd53 	bl	8000288 <__aeabi_dsub>
 80097e2:	4602      	mov	r2, r0
 80097e4:	460b      	mov	r3, r1
 80097e6:	4680      	mov	r8, r0
 80097e8:	4689      	mov	r9, r1
 80097ea:	4630      	mov	r0, r6
 80097ec:	4639      	mov	r1, r7
 80097ee:	f7f6 fd4b 	bl	8000288 <__aeabi_dsub>
 80097f2:	a395      	add	r3, pc, #596	@ (adr r3, 8009a48 <__ieee754_rem_pio2+0x300>)
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	e7dc      	b.n	80097b4 <__ieee754_rem_pio2+0x6c>
 80097fa:	f7f6 fd47 	bl	800028c <__adddf3>
 80097fe:	45a8      	cmp	r8, r5
 8009800:	4606      	mov	r6, r0
 8009802:	460f      	mov	r7, r1
 8009804:	d018      	beq.n	8009838 <__ieee754_rem_pio2+0xf0>
 8009806:	a38c      	add	r3, pc, #560	@ (adr r3, 8009a38 <__ieee754_rem_pio2+0x2f0>)
 8009808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980c:	f7f6 fd3e 	bl	800028c <__adddf3>
 8009810:	4602      	mov	r2, r0
 8009812:	460b      	mov	r3, r1
 8009814:	4680      	mov	r8, r0
 8009816:	4689      	mov	r9, r1
 8009818:	4630      	mov	r0, r6
 800981a:	4639      	mov	r1, r7
 800981c:	f7f6 fd34 	bl	8000288 <__aeabi_dsub>
 8009820:	a385      	add	r3, pc, #532	@ (adr r3, 8009a38 <__ieee754_rem_pio2+0x2f0>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f7f6 fd31 	bl	800028c <__adddf3>
 800982a:	f04f 35ff 	mov.w	r5, #4294967295
 800982e:	e9c4 8900 	strd	r8, r9, [r4]
 8009832:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009836:	e7c4      	b.n	80097c2 <__ieee754_rem_pio2+0x7a>
 8009838:	a381      	add	r3, pc, #516	@ (adr r3, 8009a40 <__ieee754_rem_pio2+0x2f8>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f7f6 fd25 	bl	800028c <__adddf3>
 8009842:	a381      	add	r3, pc, #516	@ (adr r3, 8009a48 <__ieee754_rem_pio2+0x300>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	4606      	mov	r6, r0
 800984a:	460f      	mov	r7, r1
 800984c:	f7f6 fd1e 	bl	800028c <__adddf3>
 8009850:	4602      	mov	r2, r0
 8009852:	460b      	mov	r3, r1
 8009854:	4680      	mov	r8, r0
 8009856:	4689      	mov	r9, r1
 8009858:	4630      	mov	r0, r6
 800985a:	4639      	mov	r1, r7
 800985c:	f7f6 fd14 	bl	8000288 <__aeabi_dsub>
 8009860:	a379      	add	r3, pc, #484	@ (adr r3, 8009a48 <__ieee754_rem_pio2+0x300>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	e7de      	b.n	8009826 <__ieee754_rem_pio2+0xde>
 8009868:	4b82      	ldr	r3, [pc, #520]	@ (8009a74 <__ieee754_rem_pio2+0x32c>)
 800986a:	4598      	cmp	r8, r3
 800986c:	f200 80d1 	bhi.w	8009a12 <__ieee754_rem_pio2+0x2ca>
 8009870:	f000 f966 	bl	8009b40 <fabs>
 8009874:	ec57 6b10 	vmov	r6, r7, d0
 8009878:	a375      	add	r3, pc, #468	@ (adr r3, 8009a50 <__ieee754_rem_pio2+0x308>)
 800987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987e:	4630      	mov	r0, r6
 8009880:	4639      	mov	r1, r7
 8009882:	f7f6 feb9 	bl	80005f8 <__aeabi_dmul>
 8009886:	4b7c      	ldr	r3, [pc, #496]	@ (8009a78 <__ieee754_rem_pio2+0x330>)
 8009888:	2200      	movs	r2, #0
 800988a:	f7f6 fcff 	bl	800028c <__adddf3>
 800988e:	f7f7 f94d 	bl	8000b2c <__aeabi_d2iz>
 8009892:	4605      	mov	r5, r0
 8009894:	f7f6 fe46 	bl	8000524 <__aeabi_i2d>
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098a0:	a363      	add	r3, pc, #396	@ (adr r3, 8009a30 <__ieee754_rem_pio2+0x2e8>)
 80098a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a6:	f7f6 fea7 	bl	80005f8 <__aeabi_dmul>
 80098aa:	4602      	mov	r2, r0
 80098ac:	460b      	mov	r3, r1
 80098ae:	4630      	mov	r0, r6
 80098b0:	4639      	mov	r1, r7
 80098b2:	f7f6 fce9 	bl	8000288 <__aeabi_dsub>
 80098b6:	a360      	add	r3, pc, #384	@ (adr r3, 8009a38 <__ieee754_rem_pio2+0x2f0>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	4682      	mov	sl, r0
 80098be:	468b      	mov	fp, r1
 80098c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098c4:	f7f6 fe98 	bl	80005f8 <__aeabi_dmul>
 80098c8:	2d1f      	cmp	r5, #31
 80098ca:	4606      	mov	r6, r0
 80098cc:	460f      	mov	r7, r1
 80098ce:	dc0c      	bgt.n	80098ea <__ieee754_rem_pio2+0x1a2>
 80098d0:	4b6a      	ldr	r3, [pc, #424]	@ (8009a7c <__ieee754_rem_pio2+0x334>)
 80098d2:	1e6a      	subs	r2, r5, #1
 80098d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098d8:	4543      	cmp	r3, r8
 80098da:	d006      	beq.n	80098ea <__ieee754_rem_pio2+0x1a2>
 80098dc:	4632      	mov	r2, r6
 80098de:	463b      	mov	r3, r7
 80098e0:	4650      	mov	r0, sl
 80098e2:	4659      	mov	r1, fp
 80098e4:	f7f6 fcd0 	bl	8000288 <__aeabi_dsub>
 80098e8:	e00e      	b.n	8009908 <__ieee754_rem_pio2+0x1c0>
 80098ea:	463b      	mov	r3, r7
 80098ec:	4632      	mov	r2, r6
 80098ee:	4650      	mov	r0, sl
 80098f0:	4659      	mov	r1, fp
 80098f2:	f7f6 fcc9 	bl	8000288 <__aeabi_dsub>
 80098f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80098fa:	9305      	str	r3, [sp, #20]
 80098fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009900:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009904:	2b10      	cmp	r3, #16
 8009906:	dc02      	bgt.n	800990e <__ieee754_rem_pio2+0x1c6>
 8009908:	e9c4 0100 	strd	r0, r1, [r4]
 800990c:	e039      	b.n	8009982 <__ieee754_rem_pio2+0x23a>
 800990e:	a34c      	add	r3, pc, #304	@ (adr r3, 8009a40 <__ieee754_rem_pio2+0x2f8>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009918:	f7f6 fe6e 	bl	80005f8 <__aeabi_dmul>
 800991c:	4606      	mov	r6, r0
 800991e:	460f      	mov	r7, r1
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4650      	mov	r0, sl
 8009926:	4659      	mov	r1, fp
 8009928:	f7f6 fcae 	bl	8000288 <__aeabi_dsub>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4680      	mov	r8, r0
 8009932:	4689      	mov	r9, r1
 8009934:	4650      	mov	r0, sl
 8009936:	4659      	mov	r1, fp
 8009938:	f7f6 fca6 	bl	8000288 <__aeabi_dsub>
 800993c:	4632      	mov	r2, r6
 800993e:	463b      	mov	r3, r7
 8009940:	f7f6 fca2 	bl	8000288 <__aeabi_dsub>
 8009944:	a340      	add	r3, pc, #256	@ (adr r3, 8009a48 <__ieee754_rem_pio2+0x300>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	4606      	mov	r6, r0
 800994c:	460f      	mov	r7, r1
 800994e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009952:	f7f6 fe51 	bl	80005f8 <__aeabi_dmul>
 8009956:	4632      	mov	r2, r6
 8009958:	463b      	mov	r3, r7
 800995a:	f7f6 fc95 	bl	8000288 <__aeabi_dsub>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4606      	mov	r6, r0
 8009964:	460f      	mov	r7, r1
 8009966:	4640      	mov	r0, r8
 8009968:	4649      	mov	r1, r9
 800996a:	f7f6 fc8d 	bl	8000288 <__aeabi_dsub>
 800996e:	9a05      	ldr	r2, [sp, #20]
 8009970:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	2b31      	cmp	r3, #49	@ 0x31
 8009978:	dc20      	bgt.n	80099bc <__ieee754_rem_pio2+0x274>
 800997a:	e9c4 0100 	strd	r0, r1, [r4]
 800997e:	46c2      	mov	sl, r8
 8009980:	46cb      	mov	fp, r9
 8009982:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009986:	4650      	mov	r0, sl
 8009988:	4642      	mov	r2, r8
 800998a:	464b      	mov	r3, r9
 800998c:	4659      	mov	r1, fp
 800998e:	f7f6 fc7b 	bl	8000288 <__aeabi_dsub>
 8009992:	463b      	mov	r3, r7
 8009994:	4632      	mov	r2, r6
 8009996:	f7f6 fc77 	bl	8000288 <__aeabi_dsub>
 800999a:	9b04      	ldr	r3, [sp, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80099a2:	f6bf af0e 	bge.w	80097c2 <__ieee754_rem_pio2+0x7a>
 80099a6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80099aa:	6063      	str	r3, [r4, #4]
 80099ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099b0:	f8c4 8000 	str.w	r8, [r4]
 80099b4:	60a0      	str	r0, [r4, #8]
 80099b6:	60e3      	str	r3, [r4, #12]
 80099b8:	426d      	negs	r5, r5
 80099ba:	e702      	b.n	80097c2 <__ieee754_rem_pio2+0x7a>
 80099bc:	a326      	add	r3, pc, #152	@ (adr r3, 8009a58 <__ieee754_rem_pio2+0x310>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099c6:	f7f6 fe17 	bl	80005f8 <__aeabi_dmul>
 80099ca:	4606      	mov	r6, r0
 80099cc:	460f      	mov	r7, r1
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4640      	mov	r0, r8
 80099d4:	4649      	mov	r1, r9
 80099d6:	f7f6 fc57 	bl	8000288 <__aeabi_dsub>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4682      	mov	sl, r0
 80099e0:	468b      	mov	fp, r1
 80099e2:	4640      	mov	r0, r8
 80099e4:	4649      	mov	r1, r9
 80099e6:	f7f6 fc4f 	bl	8000288 <__aeabi_dsub>
 80099ea:	4632      	mov	r2, r6
 80099ec:	463b      	mov	r3, r7
 80099ee:	f7f6 fc4b 	bl	8000288 <__aeabi_dsub>
 80099f2:	a31b      	add	r3, pc, #108	@ (adr r3, 8009a60 <__ieee754_rem_pio2+0x318>)
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	4606      	mov	r6, r0
 80099fa:	460f      	mov	r7, r1
 80099fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a00:	f7f6 fdfa 	bl	80005f8 <__aeabi_dmul>
 8009a04:	4632      	mov	r2, r6
 8009a06:	463b      	mov	r3, r7
 8009a08:	f7f6 fc3e 	bl	8000288 <__aeabi_dsub>
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	460f      	mov	r7, r1
 8009a10:	e764      	b.n	80098dc <__ieee754_rem_pio2+0x194>
 8009a12:	4b1b      	ldr	r3, [pc, #108]	@ (8009a80 <__ieee754_rem_pio2+0x338>)
 8009a14:	4598      	cmp	r8, r3
 8009a16:	d935      	bls.n	8009a84 <__ieee754_rem_pio2+0x33c>
 8009a18:	4632      	mov	r2, r6
 8009a1a:	463b      	mov	r3, r7
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	4639      	mov	r1, r7
 8009a20:	f7f6 fc32 	bl	8000288 <__aeabi_dsub>
 8009a24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a28:	e9c4 0100 	strd	r0, r1, [r4]
 8009a2c:	e69e      	b.n	800976c <__ieee754_rem_pio2+0x24>
 8009a2e:	bf00      	nop
 8009a30:	54400000 	.word	0x54400000
 8009a34:	3ff921fb 	.word	0x3ff921fb
 8009a38:	1a626331 	.word	0x1a626331
 8009a3c:	3dd0b461 	.word	0x3dd0b461
 8009a40:	1a600000 	.word	0x1a600000
 8009a44:	3dd0b461 	.word	0x3dd0b461
 8009a48:	2e037073 	.word	0x2e037073
 8009a4c:	3ba3198a 	.word	0x3ba3198a
 8009a50:	6dc9c883 	.word	0x6dc9c883
 8009a54:	3fe45f30 	.word	0x3fe45f30
 8009a58:	2e000000 	.word	0x2e000000
 8009a5c:	3ba3198a 	.word	0x3ba3198a
 8009a60:	252049c1 	.word	0x252049c1
 8009a64:	397b839a 	.word	0x397b839a
 8009a68:	3fe921fb 	.word	0x3fe921fb
 8009a6c:	4002d97b 	.word	0x4002d97b
 8009a70:	3ff921fb 	.word	0x3ff921fb
 8009a74:	413921fb 	.word	0x413921fb
 8009a78:	3fe00000 	.word	0x3fe00000
 8009a7c:	0800a698 	.word	0x0800a698
 8009a80:	7fefffff 	.word	0x7fefffff
 8009a84:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009a88:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009a8c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009a90:	4630      	mov	r0, r6
 8009a92:	460f      	mov	r7, r1
 8009a94:	f7f7 f84a 	bl	8000b2c <__aeabi_d2iz>
 8009a98:	f7f6 fd44 	bl	8000524 <__aeabi_i2d>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009aa8:	f7f6 fbee 	bl	8000288 <__aeabi_dsub>
 8009aac:	4b22      	ldr	r3, [pc, #136]	@ (8009b38 <__ieee754_rem_pio2+0x3f0>)
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f7f6 fda2 	bl	80005f8 <__aeabi_dmul>
 8009ab4:	460f      	mov	r7, r1
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	f7f7 f838 	bl	8000b2c <__aeabi_d2iz>
 8009abc:	f7f6 fd32 	bl	8000524 <__aeabi_i2d>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009acc:	f7f6 fbdc 	bl	8000288 <__aeabi_dsub>
 8009ad0:	4b19      	ldr	r3, [pc, #100]	@ (8009b38 <__ieee754_rem_pio2+0x3f0>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f7f6 fd90 	bl	80005f8 <__aeabi_dmul>
 8009ad8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009adc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009ae0:	f04f 0803 	mov.w	r8, #3
 8009ae4:	2600      	movs	r6, #0
 8009ae6:	2700      	movs	r7, #0
 8009ae8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009aec:	4632      	mov	r2, r6
 8009aee:	463b      	mov	r3, r7
 8009af0:	46c2      	mov	sl, r8
 8009af2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009af6:	f7f6 ffe7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d1f4      	bne.n	8009ae8 <__ieee754_rem_pio2+0x3a0>
 8009afe:	4b0f      	ldr	r3, [pc, #60]	@ (8009b3c <__ieee754_rem_pio2+0x3f4>)
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	2302      	movs	r3, #2
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	462a      	mov	r2, r5
 8009b08:	4653      	mov	r3, sl
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	a806      	add	r0, sp, #24
 8009b0e:	f000 f81f 	bl	8009b50 <__kernel_rem_pio2>
 8009b12:	9b04      	ldr	r3, [sp, #16]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	4605      	mov	r5, r0
 8009b18:	f6bf ae53 	bge.w	80097c2 <__ieee754_rem_pio2+0x7a>
 8009b1c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009b20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b24:	e9c4 2300 	strd	r2, r3, [r4]
 8009b28:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009b2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b30:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009b34:	e740      	b.n	80099b8 <__ieee754_rem_pio2+0x270>
 8009b36:	bf00      	nop
 8009b38:	41700000 	.word	0x41700000
 8009b3c:	0800a718 	.word	0x0800a718

08009b40 <fabs>:
 8009b40:	ec51 0b10 	vmov	r0, r1, d0
 8009b44:	4602      	mov	r2, r0
 8009b46:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009b4a:	ec43 2b10 	vmov	d0, r2, r3
 8009b4e:	4770      	bx	lr

08009b50 <__kernel_rem_pio2>:
 8009b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b54:	ed2d 8b02 	vpush	{d8}
 8009b58:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009b5c:	f112 0f14 	cmn.w	r2, #20
 8009b60:	9306      	str	r3, [sp, #24]
 8009b62:	9104      	str	r1, [sp, #16]
 8009b64:	4bbe      	ldr	r3, [pc, #760]	@ (8009e60 <__kernel_rem_pio2+0x310>)
 8009b66:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009b68:	9008      	str	r0, [sp, #32]
 8009b6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	9b06      	ldr	r3, [sp, #24]
 8009b72:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b76:	bfa8      	it	ge
 8009b78:	1ed4      	subge	r4, r2, #3
 8009b7a:	9305      	str	r3, [sp, #20]
 8009b7c:	bfb2      	itee	lt
 8009b7e:	2400      	movlt	r4, #0
 8009b80:	2318      	movge	r3, #24
 8009b82:	fb94 f4f3 	sdivge	r4, r4, r3
 8009b86:	f06f 0317 	mvn.w	r3, #23
 8009b8a:	fb04 3303 	mla	r3, r4, r3, r3
 8009b8e:	eb03 0b02 	add.w	fp, r3, r2
 8009b92:	9b00      	ldr	r3, [sp, #0]
 8009b94:	9a05      	ldr	r2, [sp, #20]
 8009b96:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009e50 <__kernel_rem_pio2+0x300>
 8009b9a:	eb03 0802 	add.w	r8, r3, r2
 8009b9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009ba0:	1aa7      	subs	r7, r4, r2
 8009ba2:	ae20      	add	r6, sp, #128	@ 0x80
 8009ba4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009ba8:	2500      	movs	r5, #0
 8009baa:	4545      	cmp	r5, r8
 8009bac:	dd13      	ble.n	8009bd6 <__kernel_rem_pio2+0x86>
 8009bae:	9b06      	ldr	r3, [sp, #24]
 8009bb0:	aa20      	add	r2, sp, #128	@ 0x80
 8009bb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009bb6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009bba:	f04f 0800 	mov.w	r8, #0
 8009bbe:	9b00      	ldr	r3, [sp, #0]
 8009bc0:	4598      	cmp	r8, r3
 8009bc2:	dc31      	bgt.n	8009c28 <__kernel_rem_pio2+0xd8>
 8009bc4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009e50 <__kernel_rem_pio2+0x300>
 8009bc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bd0:	462f      	mov	r7, r5
 8009bd2:	2600      	movs	r6, #0
 8009bd4:	e01b      	b.n	8009c0e <__kernel_rem_pio2+0xbe>
 8009bd6:	42ef      	cmn	r7, r5
 8009bd8:	d407      	bmi.n	8009bea <__kernel_rem_pio2+0x9a>
 8009bda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009bde:	f7f6 fca1 	bl	8000524 <__aeabi_i2d>
 8009be2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009be6:	3501      	adds	r5, #1
 8009be8:	e7df      	b.n	8009baa <__kernel_rem_pio2+0x5a>
 8009bea:	ec51 0b18 	vmov	r0, r1, d8
 8009bee:	e7f8      	b.n	8009be2 <__kernel_rem_pio2+0x92>
 8009bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bf4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009bf8:	f7f6 fcfe 	bl	80005f8 <__aeabi_dmul>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c04:	f7f6 fb42 	bl	800028c <__adddf3>
 8009c08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c0c:	3601      	adds	r6, #1
 8009c0e:	9b05      	ldr	r3, [sp, #20]
 8009c10:	429e      	cmp	r6, r3
 8009c12:	f1a7 0708 	sub.w	r7, r7, #8
 8009c16:	ddeb      	ble.n	8009bf0 <__kernel_rem_pio2+0xa0>
 8009c18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c1c:	f108 0801 	add.w	r8, r8, #1
 8009c20:	ecaa 7b02 	vstmia	sl!, {d7}
 8009c24:	3508      	adds	r5, #8
 8009c26:	e7ca      	b.n	8009bbe <__kernel_rem_pio2+0x6e>
 8009c28:	9b00      	ldr	r3, [sp, #0]
 8009c2a:	f8dd 8000 	ldr.w	r8, [sp]
 8009c2e:	aa0c      	add	r2, sp, #48	@ 0x30
 8009c30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c34:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009c38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c3e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009c42:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c44:	ab98      	add	r3, sp, #608	@ 0x260
 8009c46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009c4a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009c4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c52:	ac0c      	add	r4, sp, #48	@ 0x30
 8009c54:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009c56:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009c5a:	46a1      	mov	r9, r4
 8009c5c:	46c2      	mov	sl, r8
 8009c5e:	f1ba 0f00 	cmp.w	sl, #0
 8009c62:	f1a5 0508 	sub.w	r5, r5, #8
 8009c66:	dc77      	bgt.n	8009d58 <__kernel_rem_pio2+0x208>
 8009c68:	4658      	mov	r0, fp
 8009c6a:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009c6e:	f000 fac7 	bl	800a200 <scalbn>
 8009c72:	ec57 6b10 	vmov	r6, r7, d0
 8009c76:	2200      	movs	r2, #0
 8009c78:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	4639      	mov	r1, r7
 8009c80:	f7f6 fcba 	bl	80005f8 <__aeabi_dmul>
 8009c84:	ec41 0b10 	vmov	d0, r0, r1
 8009c88:	f000 fb3a 	bl	800a300 <floor>
 8009c8c:	4b75      	ldr	r3, [pc, #468]	@ (8009e64 <__kernel_rem_pio2+0x314>)
 8009c8e:	ec51 0b10 	vmov	r0, r1, d0
 8009c92:	2200      	movs	r2, #0
 8009c94:	f7f6 fcb0 	bl	80005f8 <__aeabi_dmul>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	f7f6 faf2 	bl	8000288 <__aeabi_dsub>
 8009ca4:	460f      	mov	r7, r1
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	f7f6 ff40 	bl	8000b2c <__aeabi_d2iz>
 8009cac:	9002      	str	r0, [sp, #8]
 8009cae:	f7f6 fc39 	bl	8000524 <__aeabi_i2d>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	4639      	mov	r1, r7
 8009cba:	f7f6 fae5 	bl	8000288 <__aeabi_dsub>
 8009cbe:	f1bb 0f00 	cmp.w	fp, #0
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	460f      	mov	r7, r1
 8009cc6:	dd6c      	ble.n	8009da2 <__kernel_rem_pio2+0x252>
 8009cc8:	f108 31ff 	add.w	r1, r8, #4294967295
 8009ccc:	ab0c      	add	r3, sp, #48	@ 0x30
 8009cce:	9d02      	ldr	r5, [sp, #8]
 8009cd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009cd4:	f1cb 0018 	rsb	r0, fp, #24
 8009cd8:	fa43 f200 	asr.w	r2, r3, r0
 8009cdc:	4415      	add	r5, r2
 8009cde:	4082      	lsls	r2, r0
 8009ce0:	1a9b      	subs	r3, r3, r2
 8009ce2:	aa0c      	add	r2, sp, #48	@ 0x30
 8009ce4:	9502      	str	r5, [sp, #8]
 8009ce6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009cea:	f1cb 0217 	rsb	r2, fp, #23
 8009cee:	fa43 f902 	asr.w	r9, r3, r2
 8009cf2:	f1b9 0f00 	cmp.w	r9, #0
 8009cf6:	dd64      	ble.n	8009dc2 <__kernel_rem_pio2+0x272>
 8009cf8:	9b02      	ldr	r3, [sp, #8]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	9302      	str	r3, [sp, #8]
 8009d00:	4615      	mov	r5, r2
 8009d02:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009d06:	4590      	cmp	r8, r2
 8009d08:	f300 80b8 	bgt.w	8009e7c <__kernel_rem_pio2+0x32c>
 8009d0c:	f1bb 0f00 	cmp.w	fp, #0
 8009d10:	dd07      	ble.n	8009d22 <__kernel_rem_pio2+0x1d2>
 8009d12:	f1bb 0f01 	cmp.w	fp, #1
 8009d16:	f000 80bf 	beq.w	8009e98 <__kernel_rem_pio2+0x348>
 8009d1a:	f1bb 0f02 	cmp.w	fp, #2
 8009d1e:	f000 80c6 	beq.w	8009eae <__kernel_rem_pio2+0x35e>
 8009d22:	f1b9 0f02 	cmp.w	r9, #2
 8009d26:	d14c      	bne.n	8009dc2 <__kernel_rem_pio2+0x272>
 8009d28:	4632      	mov	r2, r6
 8009d2a:	463b      	mov	r3, r7
 8009d2c:	494e      	ldr	r1, [pc, #312]	@ (8009e68 <__kernel_rem_pio2+0x318>)
 8009d2e:	2000      	movs	r0, #0
 8009d30:	f7f6 faaa 	bl	8000288 <__aeabi_dsub>
 8009d34:	4606      	mov	r6, r0
 8009d36:	460f      	mov	r7, r1
 8009d38:	2d00      	cmp	r5, #0
 8009d3a:	d042      	beq.n	8009dc2 <__kernel_rem_pio2+0x272>
 8009d3c:	4658      	mov	r0, fp
 8009d3e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009e58 <__kernel_rem_pio2+0x308>
 8009d42:	f000 fa5d 	bl	800a200 <scalbn>
 8009d46:	4630      	mov	r0, r6
 8009d48:	4639      	mov	r1, r7
 8009d4a:	ec53 2b10 	vmov	r2, r3, d0
 8009d4e:	f7f6 fa9b 	bl	8000288 <__aeabi_dsub>
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	e034      	b.n	8009dc2 <__kernel_rem_pio2+0x272>
 8009d58:	4b44      	ldr	r3, [pc, #272]	@ (8009e6c <__kernel_rem_pio2+0x31c>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d60:	f7f6 fc4a 	bl	80005f8 <__aeabi_dmul>
 8009d64:	f7f6 fee2 	bl	8000b2c <__aeabi_d2iz>
 8009d68:	f7f6 fbdc 	bl	8000524 <__aeabi_i2d>
 8009d6c:	4b40      	ldr	r3, [pc, #256]	@ (8009e70 <__kernel_rem_pio2+0x320>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	4606      	mov	r6, r0
 8009d72:	460f      	mov	r7, r1
 8009d74:	f7f6 fc40 	bl	80005f8 <__aeabi_dmul>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d80:	f7f6 fa82 	bl	8000288 <__aeabi_dsub>
 8009d84:	f7f6 fed2 	bl	8000b2c <__aeabi_d2iz>
 8009d88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d8c:	f849 0b04 	str.w	r0, [r9], #4
 8009d90:	4639      	mov	r1, r7
 8009d92:	4630      	mov	r0, r6
 8009d94:	f7f6 fa7a 	bl	800028c <__adddf3>
 8009d98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009da0:	e75d      	b.n	8009c5e <__kernel_rem_pio2+0x10e>
 8009da2:	d107      	bne.n	8009db4 <__kernel_rem_pio2+0x264>
 8009da4:	f108 33ff 	add.w	r3, r8, #4294967295
 8009da8:	aa0c      	add	r2, sp, #48	@ 0x30
 8009daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009db2:	e79e      	b.n	8009cf2 <__kernel_rem_pio2+0x1a2>
 8009db4:	4b2f      	ldr	r3, [pc, #188]	@ (8009e74 <__kernel_rem_pio2+0x324>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	f7f6 fea4 	bl	8000b04 <__aeabi_dcmpge>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d143      	bne.n	8009e48 <__kernel_rem_pio2+0x2f8>
 8009dc0:	4681      	mov	r9, r0
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	4639      	mov	r1, r7
 8009dca:	f7f6 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	f000 80bf 	beq.w	8009f52 <__kernel_rem_pio2+0x402>
 8009dd4:	f108 33ff 	add.w	r3, r8, #4294967295
 8009dd8:	2200      	movs	r2, #0
 8009dda:	9900      	ldr	r1, [sp, #0]
 8009ddc:	428b      	cmp	r3, r1
 8009dde:	da6e      	bge.n	8009ebe <__kernel_rem_pio2+0x36e>
 8009de0:	2a00      	cmp	r2, #0
 8009de2:	f000 8089 	beq.w	8009ef8 <__kernel_rem_pio2+0x3a8>
 8009de6:	f108 38ff 	add.w	r8, r8, #4294967295
 8009dea:	ab0c      	add	r3, sp, #48	@ 0x30
 8009dec:	f1ab 0b18 	sub.w	fp, fp, #24
 8009df0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d0f6      	beq.n	8009de6 <__kernel_rem_pio2+0x296>
 8009df8:	4658      	mov	r0, fp
 8009dfa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009e58 <__kernel_rem_pio2+0x308>
 8009dfe:	f000 f9ff 	bl	800a200 <scalbn>
 8009e02:	f108 0301 	add.w	r3, r8, #1
 8009e06:	00da      	lsls	r2, r3, #3
 8009e08:	9205      	str	r2, [sp, #20]
 8009e0a:	ec55 4b10 	vmov	r4, r5, d0
 8009e0e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009e10:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009e6c <__kernel_rem_pio2+0x31c>
 8009e14:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009e18:	4646      	mov	r6, r8
 8009e1a:	f04f 0a00 	mov.w	sl, #0
 8009e1e:	2e00      	cmp	r6, #0
 8009e20:	f280 80cf 	bge.w	8009fc2 <__kernel_rem_pio2+0x472>
 8009e24:	4644      	mov	r4, r8
 8009e26:	2c00      	cmp	r4, #0
 8009e28:	f2c0 80fd 	blt.w	800a026 <__kernel_rem_pio2+0x4d6>
 8009e2c:	4b12      	ldr	r3, [pc, #72]	@ (8009e78 <__kernel_rem_pio2+0x328>)
 8009e2e:	461f      	mov	r7, r3
 8009e30:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009e32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e36:	9306      	str	r3, [sp, #24]
 8009e38:	f04f 0a00 	mov.w	sl, #0
 8009e3c:	f04f 0b00 	mov.w	fp, #0
 8009e40:	2600      	movs	r6, #0
 8009e42:	eba8 0504 	sub.w	r5, r8, r4
 8009e46:	e0e2      	b.n	800a00e <__kernel_rem_pio2+0x4be>
 8009e48:	f04f 0902 	mov.w	r9, #2
 8009e4c:	e754      	b.n	8009cf8 <__kernel_rem_pio2+0x1a8>
 8009e4e:	bf00      	nop
	...
 8009e5c:	3ff00000 	.word	0x3ff00000
 8009e60:	0800a860 	.word	0x0800a860
 8009e64:	40200000 	.word	0x40200000
 8009e68:	3ff00000 	.word	0x3ff00000
 8009e6c:	3e700000 	.word	0x3e700000
 8009e70:	41700000 	.word	0x41700000
 8009e74:	3fe00000 	.word	0x3fe00000
 8009e78:	0800a820 	.word	0x0800a820
 8009e7c:	f854 3b04 	ldr.w	r3, [r4], #4
 8009e80:	b945      	cbnz	r5, 8009e94 <__kernel_rem_pio2+0x344>
 8009e82:	b123      	cbz	r3, 8009e8e <__kernel_rem_pio2+0x33e>
 8009e84:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009e88:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	3201      	adds	r2, #1
 8009e90:	461d      	mov	r5, r3
 8009e92:	e738      	b.n	8009d06 <__kernel_rem_pio2+0x1b6>
 8009e94:	1acb      	subs	r3, r1, r3
 8009e96:	e7f7      	b.n	8009e88 <__kernel_rem_pio2+0x338>
 8009e98:	f108 32ff 	add.w	r2, r8, #4294967295
 8009e9c:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009ea6:	a90c      	add	r1, sp, #48	@ 0x30
 8009ea8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009eac:	e739      	b.n	8009d22 <__kernel_rem_pio2+0x1d2>
 8009eae:	f108 32ff 	add.w	r2, r8, #4294967295
 8009eb2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009ebc:	e7f3      	b.n	8009ea6 <__kernel_rem_pio2+0x356>
 8009ebe:	a90c      	add	r1, sp, #48	@ 0x30
 8009ec0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	430a      	orrs	r2, r1
 8009ec8:	e787      	b.n	8009dda <__kernel_rem_pio2+0x28a>
 8009eca:	3401      	adds	r4, #1
 8009ecc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009ed0:	2a00      	cmp	r2, #0
 8009ed2:	d0fa      	beq.n	8009eca <__kernel_rem_pio2+0x37a>
 8009ed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ed6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009eda:	eb0d 0503 	add.w	r5, sp, r3
 8009ede:	9b06      	ldr	r3, [sp, #24]
 8009ee0:	aa20      	add	r2, sp, #128	@ 0x80
 8009ee2:	4443      	add	r3, r8
 8009ee4:	f108 0701 	add.w	r7, r8, #1
 8009ee8:	3d98      	subs	r5, #152	@ 0x98
 8009eea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009eee:	4444      	add	r4, r8
 8009ef0:	42bc      	cmp	r4, r7
 8009ef2:	da04      	bge.n	8009efe <__kernel_rem_pio2+0x3ae>
 8009ef4:	46a0      	mov	r8, r4
 8009ef6:	e6a2      	b.n	8009c3e <__kernel_rem_pio2+0xee>
 8009ef8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009efa:	2401      	movs	r4, #1
 8009efc:	e7e6      	b.n	8009ecc <__kernel_rem_pio2+0x37c>
 8009efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f00:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009f04:	f7f6 fb0e 	bl	8000524 <__aeabi_i2d>
 8009f08:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a1d0 <__kernel_rem_pio2+0x680>
 8009f0c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009f10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f18:	46b2      	mov	sl, r6
 8009f1a:	f04f 0800 	mov.w	r8, #0
 8009f1e:	9b05      	ldr	r3, [sp, #20]
 8009f20:	4598      	cmp	r8, r3
 8009f22:	dd05      	ble.n	8009f30 <__kernel_rem_pio2+0x3e0>
 8009f24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f28:	3701      	adds	r7, #1
 8009f2a:	eca5 7b02 	vstmia	r5!, {d7}
 8009f2e:	e7df      	b.n	8009ef0 <__kernel_rem_pio2+0x3a0>
 8009f30:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009f34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009f38:	f7f6 fb5e 	bl	80005f8 <__aeabi_dmul>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f44:	f7f6 f9a2 	bl	800028c <__adddf3>
 8009f48:	f108 0801 	add.w	r8, r8, #1
 8009f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f50:	e7e5      	b.n	8009f1e <__kernel_rem_pio2+0x3ce>
 8009f52:	f1cb 0000 	rsb	r0, fp, #0
 8009f56:	ec47 6b10 	vmov	d0, r6, r7
 8009f5a:	f000 f951 	bl	800a200 <scalbn>
 8009f5e:	ec55 4b10 	vmov	r4, r5, d0
 8009f62:	4b9d      	ldr	r3, [pc, #628]	@ (800a1d8 <__kernel_rem_pio2+0x688>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	4620      	mov	r0, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7f6 fdcb 	bl	8000b04 <__aeabi_dcmpge>
 8009f6e:	b300      	cbz	r0, 8009fb2 <__kernel_rem_pio2+0x462>
 8009f70:	4b9a      	ldr	r3, [pc, #616]	@ (800a1dc <__kernel_rem_pio2+0x68c>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	4620      	mov	r0, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7f6 fb3e 	bl	80005f8 <__aeabi_dmul>
 8009f7c:	f7f6 fdd6 	bl	8000b2c <__aeabi_d2iz>
 8009f80:	4606      	mov	r6, r0
 8009f82:	f7f6 facf 	bl	8000524 <__aeabi_i2d>
 8009f86:	4b94      	ldr	r3, [pc, #592]	@ (800a1d8 <__kernel_rem_pio2+0x688>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f7f6 fb35 	bl	80005f8 <__aeabi_dmul>
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4602      	mov	r2, r0
 8009f92:	4629      	mov	r1, r5
 8009f94:	4620      	mov	r0, r4
 8009f96:	f7f6 f977 	bl	8000288 <__aeabi_dsub>
 8009f9a:	f7f6 fdc7 	bl	8000b2c <__aeabi_d2iz>
 8009f9e:	ab0c      	add	r3, sp, #48	@ 0x30
 8009fa0:	f10b 0b18 	add.w	fp, fp, #24
 8009fa4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009fa8:	f108 0801 	add.w	r8, r8, #1
 8009fac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009fb0:	e722      	b.n	8009df8 <__kernel_rem_pio2+0x2a8>
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	f7f6 fdb9 	bl	8000b2c <__aeabi_d2iz>
 8009fba:	ab0c      	add	r3, sp, #48	@ 0x30
 8009fbc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009fc0:	e71a      	b.n	8009df8 <__kernel_rem_pio2+0x2a8>
 8009fc2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009fc4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009fc8:	f7f6 faac 	bl	8000524 <__aeabi_i2d>
 8009fcc:	4622      	mov	r2, r4
 8009fce:	462b      	mov	r3, r5
 8009fd0:	f7f6 fb12 	bl	80005f8 <__aeabi_dmul>
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009fda:	465b      	mov	r3, fp
 8009fdc:	4620      	mov	r0, r4
 8009fde:	4629      	mov	r1, r5
 8009fe0:	f7f6 fb0a 	bl	80005f8 <__aeabi_dmul>
 8009fe4:	3e01      	subs	r6, #1
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	460d      	mov	r5, r1
 8009fea:	e718      	b.n	8009e1e <__kernel_rem_pio2+0x2ce>
 8009fec:	9906      	ldr	r1, [sp, #24]
 8009fee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009ff2:	9106      	str	r1, [sp, #24]
 8009ff4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009ff8:	f7f6 fafe 	bl	80005f8 <__aeabi_dmul>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	4650      	mov	r0, sl
 800a002:	4659      	mov	r1, fp
 800a004:	f7f6 f942 	bl	800028c <__adddf3>
 800a008:	3601      	adds	r6, #1
 800a00a:	4682      	mov	sl, r0
 800a00c:	468b      	mov	fp, r1
 800a00e:	9b00      	ldr	r3, [sp, #0]
 800a010:	429e      	cmp	r6, r3
 800a012:	dc01      	bgt.n	800a018 <__kernel_rem_pio2+0x4c8>
 800a014:	42b5      	cmp	r5, r6
 800a016:	dae9      	bge.n	8009fec <__kernel_rem_pio2+0x49c>
 800a018:	ab48      	add	r3, sp, #288	@ 0x120
 800a01a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a01e:	e9c5 ab00 	strd	sl, fp, [r5]
 800a022:	3c01      	subs	r4, #1
 800a024:	e6ff      	b.n	8009e26 <__kernel_rem_pio2+0x2d6>
 800a026:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a028:	2b02      	cmp	r3, #2
 800a02a:	dc0b      	bgt.n	800a044 <__kernel_rem_pio2+0x4f4>
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	dc39      	bgt.n	800a0a4 <__kernel_rem_pio2+0x554>
 800a030:	d05d      	beq.n	800a0ee <__kernel_rem_pio2+0x59e>
 800a032:	9b02      	ldr	r3, [sp, #8]
 800a034:	f003 0007 	and.w	r0, r3, #7
 800a038:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a03c:	ecbd 8b02 	vpop	{d8}
 800a040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a044:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a046:	2b03      	cmp	r3, #3
 800a048:	d1f3      	bne.n	800a032 <__kernel_rem_pio2+0x4e2>
 800a04a:	9b05      	ldr	r3, [sp, #20]
 800a04c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a050:	eb0d 0403 	add.w	r4, sp, r3
 800a054:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a058:	4625      	mov	r5, r4
 800a05a:	46c2      	mov	sl, r8
 800a05c:	f1ba 0f00 	cmp.w	sl, #0
 800a060:	f1a5 0508 	sub.w	r5, r5, #8
 800a064:	dc6b      	bgt.n	800a13e <__kernel_rem_pio2+0x5ee>
 800a066:	4645      	mov	r5, r8
 800a068:	2d01      	cmp	r5, #1
 800a06a:	f1a4 0408 	sub.w	r4, r4, #8
 800a06e:	f300 8087 	bgt.w	800a180 <__kernel_rem_pio2+0x630>
 800a072:	9c05      	ldr	r4, [sp, #20]
 800a074:	ab48      	add	r3, sp, #288	@ 0x120
 800a076:	441c      	add	r4, r3
 800a078:	2000      	movs	r0, #0
 800a07a:	2100      	movs	r1, #0
 800a07c:	f1b8 0f01 	cmp.w	r8, #1
 800a080:	f300 809c 	bgt.w	800a1bc <__kernel_rem_pio2+0x66c>
 800a084:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a088:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a08c:	f1b9 0f00 	cmp.w	r9, #0
 800a090:	f040 80a6 	bne.w	800a1e0 <__kernel_rem_pio2+0x690>
 800a094:	9b04      	ldr	r3, [sp, #16]
 800a096:	e9c3 7800 	strd	r7, r8, [r3]
 800a09a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a09e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a0a2:	e7c6      	b.n	800a032 <__kernel_rem_pio2+0x4e2>
 800a0a4:	9d05      	ldr	r5, [sp, #20]
 800a0a6:	ab48      	add	r3, sp, #288	@ 0x120
 800a0a8:	441d      	add	r5, r3
 800a0aa:	4644      	mov	r4, r8
 800a0ac:	2000      	movs	r0, #0
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	2c00      	cmp	r4, #0
 800a0b2:	da35      	bge.n	800a120 <__kernel_rem_pio2+0x5d0>
 800a0b4:	f1b9 0f00 	cmp.w	r9, #0
 800a0b8:	d038      	beq.n	800a12c <__kernel_rem_pio2+0x5dc>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0c0:	9c04      	ldr	r4, [sp, #16]
 800a0c2:	e9c4 2300 	strd	r2, r3, [r4]
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a0ce:	f7f6 f8db 	bl	8000288 <__aeabi_dsub>
 800a0d2:	ad4a      	add	r5, sp, #296	@ 0x128
 800a0d4:	2401      	movs	r4, #1
 800a0d6:	45a0      	cmp	r8, r4
 800a0d8:	da2b      	bge.n	800a132 <__kernel_rem_pio2+0x5e2>
 800a0da:	f1b9 0f00 	cmp.w	r9, #0
 800a0de:	d002      	beq.n	800a0e6 <__kernel_rem_pio2+0x596>
 800a0e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	9b04      	ldr	r3, [sp, #16]
 800a0e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a0ec:	e7a1      	b.n	800a032 <__kernel_rem_pio2+0x4e2>
 800a0ee:	9c05      	ldr	r4, [sp, #20]
 800a0f0:	ab48      	add	r3, sp, #288	@ 0x120
 800a0f2:	441c      	add	r4, r3
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	2100      	movs	r1, #0
 800a0f8:	f1b8 0f00 	cmp.w	r8, #0
 800a0fc:	da09      	bge.n	800a112 <__kernel_rem_pio2+0x5c2>
 800a0fe:	f1b9 0f00 	cmp.w	r9, #0
 800a102:	d002      	beq.n	800a10a <__kernel_rem_pio2+0x5ba>
 800a104:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a108:	4619      	mov	r1, r3
 800a10a:	9b04      	ldr	r3, [sp, #16]
 800a10c:	e9c3 0100 	strd	r0, r1, [r3]
 800a110:	e78f      	b.n	800a032 <__kernel_rem_pio2+0x4e2>
 800a112:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a116:	f7f6 f8b9 	bl	800028c <__adddf3>
 800a11a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a11e:	e7eb      	b.n	800a0f8 <__kernel_rem_pio2+0x5a8>
 800a120:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a124:	f7f6 f8b2 	bl	800028c <__adddf3>
 800a128:	3c01      	subs	r4, #1
 800a12a:	e7c1      	b.n	800a0b0 <__kernel_rem_pio2+0x560>
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	e7c6      	b.n	800a0c0 <__kernel_rem_pio2+0x570>
 800a132:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a136:	f7f6 f8a9 	bl	800028c <__adddf3>
 800a13a:	3401      	adds	r4, #1
 800a13c:	e7cb      	b.n	800a0d6 <__kernel_rem_pio2+0x586>
 800a13e:	ed95 7b00 	vldr	d7, [r5]
 800a142:	ed8d 7b00 	vstr	d7, [sp]
 800a146:	ed95 7b02 	vldr	d7, [r5, #8]
 800a14a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a14e:	ec53 2b17 	vmov	r2, r3, d7
 800a152:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a156:	f7f6 f899 	bl	800028c <__adddf3>
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	4606      	mov	r6, r0
 800a160:	460f      	mov	r7, r1
 800a162:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a166:	f7f6 f88f 	bl	8000288 <__aeabi_dsub>
 800a16a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a16e:	f7f6 f88d 	bl	800028c <__adddf3>
 800a172:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a176:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a17a:	e9c5 6700 	strd	r6, r7, [r5]
 800a17e:	e76d      	b.n	800a05c <__kernel_rem_pio2+0x50c>
 800a180:	ed94 7b00 	vldr	d7, [r4]
 800a184:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a188:	ec51 0b17 	vmov	r0, r1, d7
 800a18c:	4652      	mov	r2, sl
 800a18e:	465b      	mov	r3, fp
 800a190:	ed8d 7b00 	vstr	d7, [sp]
 800a194:	f7f6 f87a 	bl	800028c <__adddf3>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4606      	mov	r6, r0
 800a19e:	460f      	mov	r7, r1
 800a1a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1a4:	f7f6 f870 	bl	8000288 <__aeabi_dsub>
 800a1a8:	4652      	mov	r2, sl
 800a1aa:	465b      	mov	r3, fp
 800a1ac:	f7f6 f86e 	bl	800028c <__adddf3>
 800a1b0:	3d01      	subs	r5, #1
 800a1b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a1b6:	e9c4 6700 	strd	r6, r7, [r4]
 800a1ba:	e755      	b.n	800a068 <__kernel_rem_pio2+0x518>
 800a1bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a1c0:	f7f6 f864 	bl	800028c <__adddf3>
 800a1c4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1c8:	e758      	b.n	800a07c <__kernel_rem_pio2+0x52c>
 800a1ca:	bf00      	nop
 800a1cc:	f3af 8000 	nop.w
	...
 800a1d8:	41700000 	.word	0x41700000
 800a1dc:	3e700000 	.word	0x3e700000
 800a1e0:	9b04      	ldr	r3, [sp, #16]
 800a1e2:	9a04      	ldr	r2, [sp, #16]
 800a1e4:	601f      	str	r7, [r3, #0]
 800a1e6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a1ea:	605c      	str	r4, [r3, #4]
 800a1ec:	609d      	str	r5, [r3, #8]
 800a1ee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a1f2:	60d3      	str	r3, [r2, #12]
 800a1f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a1f8:	6110      	str	r0, [r2, #16]
 800a1fa:	6153      	str	r3, [r2, #20]
 800a1fc:	e719      	b.n	800a032 <__kernel_rem_pio2+0x4e2>
 800a1fe:	bf00      	nop

0800a200 <scalbn>:
 800a200:	b570      	push	{r4, r5, r6, lr}
 800a202:	ec55 4b10 	vmov	r4, r5, d0
 800a206:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a20a:	4606      	mov	r6, r0
 800a20c:	462b      	mov	r3, r5
 800a20e:	b991      	cbnz	r1, 800a236 <scalbn+0x36>
 800a210:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a214:	4323      	orrs	r3, r4
 800a216:	d03d      	beq.n	800a294 <scalbn+0x94>
 800a218:	4b35      	ldr	r3, [pc, #212]	@ (800a2f0 <scalbn+0xf0>)
 800a21a:	4620      	mov	r0, r4
 800a21c:	4629      	mov	r1, r5
 800a21e:	2200      	movs	r2, #0
 800a220:	f7f6 f9ea 	bl	80005f8 <__aeabi_dmul>
 800a224:	4b33      	ldr	r3, [pc, #204]	@ (800a2f4 <scalbn+0xf4>)
 800a226:	429e      	cmp	r6, r3
 800a228:	4604      	mov	r4, r0
 800a22a:	460d      	mov	r5, r1
 800a22c:	da0f      	bge.n	800a24e <scalbn+0x4e>
 800a22e:	a328      	add	r3, pc, #160	@ (adr r3, 800a2d0 <scalbn+0xd0>)
 800a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a234:	e01e      	b.n	800a274 <scalbn+0x74>
 800a236:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a23a:	4291      	cmp	r1, r2
 800a23c:	d10b      	bne.n	800a256 <scalbn+0x56>
 800a23e:	4622      	mov	r2, r4
 800a240:	4620      	mov	r0, r4
 800a242:	4629      	mov	r1, r5
 800a244:	f7f6 f822 	bl	800028c <__adddf3>
 800a248:	4604      	mov	r4, r0
 800a24a:	460d      	mov	r5, r1
 800a24c:	e022      	b.n	800a294 <scalbn+0x94>
 800a24e:	460b      	mov	r3, r1
 800a250:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a254:	3936      	subs	r1, #54	@ 0x36
 800a256:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a25a:	4296      	cmp	r6, r2
 800a25c:	dd0d      	ble.n	800a27a <scalbn+0x7a>
 800a25e:	2d00      	cmp	r5, #0
 800a260:	a11d      	add	r1, pc, #116	@ (adr r1, 800a2d8 <scalbn+0xd8>)
 800a262:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a266:	da02      	bge.n	800a26e <scalbn+0x6e>
 800a268:	a11d      	add	r1, pc, #116	@ (adr r1, 800a2e0 <scalbn+0xe0>)
 800a26a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a26e:	a31a      	add	r3, pc, #104	@ (adr r3, 800a2d8 <scalbn+0xd8>)
 800a270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a274:	f7f6 f9c0 	bl	80005f8 <__aeabi_dmul>
 800a278:	e7e6      	b.n	800a248 <scalbn+0x48>
 800a27a:	1872      	adds	r2, r6, r1
 800a27c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a280:	428a      	cmp	r2, r1
 800a282:	dcec      	bgt.n	800a25e <scalbn+0x5e>
 800a284:	2a00      	cmp	r2, #0
 800a286:	dd08      	ble.n	800a29a <scalbn+0x9a>
 800a288:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a28c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a290:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a294:	ec45 4b10 	vmov	d0, r4, r5
 800a298:	bd70      	pop	{r4, r5, r6, pc}
 800a29a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a29e:	da08      	bge.n	800a2b2 <scalbn+0xb2>
 800a2a0:	2d00      	cmp	r5, #0
 800a2a2:	a10b      	add	r1, pc, #44	@ (adr r1, 800a2d0 <scalbn+0xd0>)
 800a2a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2a8:	dac1      	bge.n	800a22e <scalbn+0x2e>
 800a2aa:	a10f      	add	r1, pc, #60	@ (adr r1, 800a2e8 <scalbn+0xe8>)
 800a2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2b0:	e7bd      	b.n	800a22e <scalbn+0x2e>
 800a2b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a2b6:	3236      	adds	r2, #54	@ 0x36
 800a2b8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a2bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f8 <scalbn+0xf8>)
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	e7d4      	b.n	800a274 <scalbn+0x74>
 800a2ca:	bf00      	nop
 800a2cc:	f3af 8000 	nop.w
 800a2d0:	c2f8f359 	.word	0xc2f8f359
 800a2d4:	01a56e1f 	.word	0x01a56e1f
 800a2d8:	8800759c 	.word	0x8800759c
 800a2dc:	7e37e43c 	.word	0x7e37e43c
 800a2e0:	8800759c 	.word	0x8800759c
 800a2e4:	fe37e43c 	.word	0xfe37e43c
 800a2e8:	c2f8f359 	.word	0xc2f8f359
 800a2ec:	81a56e1f 	.word	0x81a56e1f
 800a2f0:	43500000 	.word	0x43500000
 800a2f4:	ffff3cb0 	.word	0xffff3cb0
 800a2f8:	3c900000 	.word	0x3c900000
 800a2fc:	00000000 	.word	0x00000000

0800a300 <floor>:
 800a300:	ec51 0b10 	vmov	r0, r1, d0
 800a304:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a30c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a310:	2e13      	cmp	r6, #19
 800a312:	460c      	mov	r4, r1
 800a314:	4605      	mov	r5, r0
 800a316:	4680      	mov	r8, r0
 800a318:	dc34      	bgt.n	800a384 <floor+0x84>
 800a31a:	2e00      	cmp	r6, #0
 800a31c:	da17      	bge.n	800a34e <floor+0x4e>
 800a31e:	a332      	add	r3, pc, #200	@ (adr r3, 800a3e8 <floor+0xe8>)
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	f7f5 ffb2 	bl	800028c <__adddf3>
 800a328:	2200      	movs	r2, #0
 800a32a:	2300      	movs	r3, #0
 800a32c:	f7f6 fbf4 	bl	8000b18 <__aeabi_dcmpgt>
 800a330:	b150      	cbz	r0, 800a348 <floor+0x48>
 800a332:	2c00      	cmp	r4, #0
 800a334:	da55      	bge.n	800a3e2 <floor+0xe2>
 800a336:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a33a:	432c      	orrs	r4, r5
 800a33c:	2500      	movs	r5, #0
 800a33e:	42ac      	cmp	r4, r5
 800a340:	4c2b      	ldr	r4, [pc, #172]	@ (800a3f0 <floor+0xf0>)
 800a342:	bf08      	it	eq
 800a344:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a348:	4621      	mov	r1, r4
 800a34a:	4628      	mov	r0, r5
 800a34c:	e023      	b.n	800a396 <floor+0x96>
 800a34e:	4f29      	ldr	r7, [pc, #164]	@ (800a3f4 <floor+0xf4>)
 800a350:	4137      	asrs	r7, r6
 800a352:	ea01 0307 	and.w	r3, r1, r7
 800a356:	4303      	orrs	r3, r0
 800a358:	d01d      	beq.n	800a396 <floor+0x96>
 800a35a:	a323      	add	r3, pc, #140	@ (adr r3, 800a3e8 <floor+0xe8>)
 800a35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a360:	f7f5 ff94 	bl	800028c <__adddf3>
 800a364:	2200      	movs	r2, #0
 800a366:	2300      	movs	r3, #0
 800a368:	f7f6 fbd6 	bl	8000b18 <__aeabi_dcmpgt>
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d0eb      	beq.n	800a348 <floor+0x48>
 800a370:	2c00      	cmp	r4, #0
 800a372:	bfbe      	ittt	lt
 800a374:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a378:	4133      	asrlt	r3, r6
 800a37a:	18e4      	addlt	r4, r4, r3
 800a37c:	ea24 0407 	bic.w	r4, r4, r7
 800a380:	2500      	movs	r5, #0
 800a382:	e7e1      	b.n	800a348 <floor+0x48>
 800a384:	2e33      	cmp	r6, #51	@ 0x33
 800a386:	dd0a      	ble.n	800a39e <floor+0x9e>
 800a388:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a38c:	d103      	bne.n	800a396 <floor+0x96>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	f7f5 ff7b 	bl	800028c <__adddf3>
 800a396:	ec41 0b10 	vmov	d0, r0, r1
 800a39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a39e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a3a2:	f04f 37ff 	mov.w	r7, #4294967295
 800a3a6:	40df      	lsrs	r7, r3
 800a3a8:	4207      	tst	r7, r0
 800a3aa:	d0f4      	beq.n	800a396 <floor+0x96>
 800a3ac:	a30e      	add	r3, pc, #56	@ (adr r3, 800a3e8 <floor+0xe8>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	f7f5 ff6b 	bl	800028c <__adddf3>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f7f6 fbad 	bl	8000b18 <__aeabi_dcmpgt>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d0c2      	beq.n	800a348 <floor+0x48>
 800a3c2:	2c00      	cmp	r4, #0
 800a3c4:	da0a      	bge.n	800a3dc <floor+0xdc>
 800a3c6:	2e14      	cmp	r6, #20
 800a3c8:	d101      	bne.n	800a3ce <floor+0xce>
 800a3ca:	3401      	adds	r4, #1
 800a3cc:	e006      	b.n	800a3dc <floor+0xdc>
 800a3ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	40b3      	lsls	r3, r6
 800a3d6:	441d      	add	r5, r3
 800a3d8:	4545      	cmp	r5, r8
 800a3da:	d3f6      	bcc.n	800a3ca <floor+0xca>
 800a3dc:	ea25 0507 	bic.w	r5, r5, r7
 800a3e0:	e7b2      	b.n	800a348 <floor+0x48>
 800a3e2:	2500      	movs	r5, #0
 800a3e4:	462c      	mov	r4, r5
 800a3e6:	e7af      	b.n	800a348 <floor+0x48>
 800a3e8:	8800759c 	.word	0x8800759c
 800a3ec:	7e37e43c 	.word	0x7e37e43c
 800a3f0:	bff00000 	.word	0xbff00000
 800a3f4:	000fffff 	.word	0x000fffff

0800a3f8 <_init>:
 800a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fa:	bf00      	nop
 800a3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fe:	bc08      	pop	{r3}
 800a400:	469e      	mov	lr, r3
 800a402:	4770      	bx	lr

0800a404 <_fini>:
 800a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a406:	bf00      	nop
 800a408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a40a:	bc08      	pop	{r3}
 800a40c:	469e      	mov	lr, r3
 800a40e:	4770      	bx	lr
