
Aiming_Control_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ee4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009074  08009074  0000a074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090e4  080090e4  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  080090e4  080090e4  0000a0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090ec  080090ec  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090ec  080090ec  0000a0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090f0  080090f0  0000a0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080090f4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b010  2**0
                  CONTENTS
 10 .bss          00004308  20000010  20000010  0000b010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004318  20004318  0000b010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143f5  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003166  00000000  00000000  0001f435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  000225a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb7  00000000  00000000  000239c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248be  00000000  00000000  00024977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f65  00000000  00000000  00049235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0b50  00000000  00000000  0006119a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00141cea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055fc  00000000  00000000  00141d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b5  00000000  00000000  0014732c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800905c 	.word	0x0800905c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800905c 	.word	0x0800905c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b96a 	b.w	8000ca8 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	460c      	mov	r4, r1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14e      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009f8:	4694      	mov	ip, r2
 80009fa:	458c      	cmp	ip, r1
 80009fc:	4686      	mov	lr, r0
 80009fe:	fab2 f282 	clz	r2, r2
 8000a02:	d962      	bls.n	8000aca <__udivmoddi4+0xde>
 8000a04:	b14a      	cbz	r2, 8000a1a <__udivmoddi4+0x2e>
 8000a06:	f1c2 0320 	rsb	r3, r2, #32
 8000a0a:	4091      	lsls	r1, r2
 8000a0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a14:	4319      	orrs	r1, r3
 8000a16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1e:	fa1f f68c 	uxth.w	r6, ip
 8000a22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a32:	fb04 f106 	mul.w	r1, r4, r6
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a42:	f080 8112 	bcs.w	8000c6a <__udivmoddi4+0x27e>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 810f 	bls.w	8000c6a <__udivmoddi4+0x27e>
 8000a4c:	3c02      	subs	r4, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a59      	subs	r1, r3, r1
 8000a52:	fa1f f38e 	uxth.w	r3, lr
 8000a56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a62:	fb00 f606 	mul.w	r6, r0, r6
 8000a66:	429e      	cmp	r6, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x94>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a72:	f080 80fc 	bcs.w	8000c6e <__udivmoddi4+0x282>
 8000a76:	429e      	cmp	r6, r3
 8000a78:	f240 80f9 	bls.w	8000c6e <__udivmoddi4+0x282>
 8000a7c:	4463      	add	r3, ip
 8000a7e:	3802      	subs	r0, #2
 8000a80:	1b9b      	subs	r3, r3, r6
 8000a82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a86:	2100      	movs	r1, #0
 8000a88:	b11d      	cbz	r5, 8000a92 <__udivmoddi4+0xa6>
 8000a8a:	40d3      	lsrs	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d905      	bls.n	8000aa6 <__udivmoddi4+0xba>
 8000a9a:	b10d      	cbz	r5, 8000aa0 <__udivmoddi4+0xb4>
 8000a9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e7f5      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aa6:	fab3 f183 	clz	r1, r3
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d146      	bne.n	8000b3c <__udivmoddi4+0x150>
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xcc>
 8000ab2:	4290      	cmp	r0, r2
 8000ab4:	f0c0 80f0 	bcc.w	8000c98 <__udivmoddi4+0x2ac>
 8000ab8:	1a86      	subs	r6, r0, r2
 8000aba:	eb64 0303 	sbc.w	r3, r4, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d0e6      	beq.n	8000a92 <__udivmoddi4+0xa6>
 8000ac4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac8:	e7e3      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	f040 8090 	bne.w	8000bf0 <__udivmoddi4+0x204>
 8000ad0:	eba1 040c 	sub.w	r4, r1, ip
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa1f f78c 	uxth.w	r7, ip
 8000adc:	2101      	movs	r1, #1
 8000ade:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ae2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ae6:	fb08 4416 	mls	r4, r8, r6, r4
 8000aea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aee:	fb07 f006 	mul.w	r0, r7, r6
 8000af2:	4298      	cmp	r0, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x11c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x11a>
 8000b00:	4298      	cmp	r0, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b06:	4626      	mov	r6, r4
 8000b08:	1a1c      	subs	r4, r3, r0
 8000b0a:	fa1f f38e 	uxth.w	r3, lr
 8000b0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b12:	fb08 4410 	mls	r4, r8, r0, r4
 8000b16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b1a:	fb00 f707 	mul.w	r7, r0, r7
 8000b1e:	429f      	cmp	r7, r3
 8000b20:	d908      	bls.n	8000b34 <__udivmoddi4+0x148>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b2a:	d202      	bcs.n	8000b32 <__udivmoddi4+0x146>
 8000b2c:	429f      	cmp	r7, r3
 8000b2e:	f200 80b0 	bhi.w	8000c92 <__udivmoddi4+0x2a6>
 8000b32:	4620      	mov	r0, r4
 8000b34:	1bdb      	subs	r3, r3, r7
 8000b36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3a:	e7a5      	b.n	8000a88 <__udivmoddi4+0x9c>
 8000b3c:	f1c1 0620 	rsb	r6, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 f706 	lsr.w	r7, r2, r6
 8000b46:	431f      	orrs	r7, r3
 8000b48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b50:	ea43 030c 	orr.w	r3, r3, ip
 8000b54:	40f4      	lsrs	r4, r6
 8000b56:	fa00 f801 	lsl.w	r8, r0, r1
 8000b5a:	0c38      	lsrs	r0, r7, #16
 8000b5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b60:	fbb4 fef0 	udiv	lr, r4, r0
 8000b64:	fa1f fc87 	uxth.w	ip, r7
 8000b68:	fb00 441e 	mls	r4, r0, lr, r4
 8000b6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b70:	fb0e f90c 	mul.w	r9, lr, ip
 8000b74:	45a1      	cmp	r9, r4
 8000b76:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7a:	d90a      	bls.n	8000b92 <__udivmoddi4+0x1a6>
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b82:	f080 8084 	bcs.w	8000c8e <__udivmoddi4+0x2a2>
 8000b86:	45a1      	cmp	r9, r4
 8000b88:	f240 8081 	bls.w	8000c8e <__udivmoddi4+0x2a2>
 8000b8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b90:	443c      	add	r4, r7
 8000b92:	eba4 0409 	sub.w	r4, r4, r9
 8000b96:	fa1f f983 	uxth.w	r9, r3
 8000b9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ba2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000baa:	45a4      	cmp	ip, r4
 8000bac:	d907      	bls.n	8000bbe <__udivmoddi4+0x1d2>
 8000bae:	193c      	adds	r4, r7, r4
 8000bb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bb4:	d267      	bcs.n	8000c86 <__udivmoddi4+0x29a>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0x29a>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	443c      	add	r4, r7
 8000bbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000bc6:	eba4 040c 	sub.w	r4, r4, ip
 8000bca:	429c      	cmp	r4, r3
 8000bcc:	46ce      	mov	lr, r9
 8000bce:	469c      	mov	ip, r3
 8000bd0:	d351      	bcc.n	8000c76 <__udivmoddi4+0x28a>
 8000bd2:	d04e      	beq.n	8000c72 <__udivmoddi4+0x286>
 8000bd4:	b155      	cbz	r5, 8000bec <__udivmoddi4+0x200>
 8000bd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bda:	eb64 040c 	sbc.w	r4, r4, ip
 8000bde:	fa04 f606 	lsl.w	r6, r4, r6
 8000be2:	40cb      	lsrs	r3, r1
 8000be4:	431e      	orrs	r6, r3
 8000be6:	40cc      	lsrs	r4, r1
 8000be8:	e9c5 6400 	strd	r6, r4, [r5]
 8000bec:	2100      	movs	r1, #0
 8000bee:	e750      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	430c      	orrs	r4, r1
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0c:	fa1f f78c 	uxth.w	r7, ip
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3110 	mls	r1, r8, r0, r3
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb00 f107 	mul.w	r1, r0, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x24c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c2e:	d22c      	bcs.n	8000c8a <__udivmoddi4+0x29e>
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d92a      	bls.n	8000c8a <__udivmoddi4+0x29e>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c40:	fb08 3311 	mls	r3, r8, r1, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb01 f307 	mul.w	r3, r1, r7
 8000c4c:	42a3      	cmp	r3, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x276>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c58:	d213      	bcs.n	8000c82 <__udivmoddi4+0x296>
 8000c5a:	42a3      	cmp	r3, r4
 8000c5c:	d911      	bls.n	8000c82 <__udivmoddi4+0x296>
 8000c5e:	3902      	subs	r1, #2
 8000c60:	4464      	add	r4, ip
 8000c62:	1ae4      	subs	r4, r4, r3
 8000c64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c68:	e739      	b.n	8000ade <__udivmoddi4+0xf2>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	e6f0      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e706      	b.n	8000a80 <__udivmoddi4+0x94>
 8000c72:	45c8      	cmp	r8, r9
 8000c74:	d2ae      	bcs.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c7e:	3801      	subs	r0, #1
 8000c80:	e7a8      	b.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c82:	4631      	mov	r1, r6
 8000c84:	e7ed      	b.n	8000c62 <__udivmoddi4+0x276>
 8000c86:	4603      	mov	r3, r0
 8000c88:	e799      	b.n	8000bbe <__udivmoddi4+0x1d2>
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	e7d4      	b.n	8000c38 <__udivmoddi4+0x24c>
 8000c8e:	46d6      	mov	lr, sl
 8000c90:	e77f      	b.n	8000b92 <__udivmoddi4+0x1a6>
 8000c92:	4463      	add	r3, ip
 8000c94:	3802      	subs	r0, #2
 8000c96:	e74d      	b.n	8000b34 <__udivmoddi4+0x148>
 8000c98:	4606      	mov	r6, r0
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e70f      	b.n	8000ac0 <__udivmoddi4+0xd4>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	e730      	b.n	8000b08 <__udivmoddi4+0x11c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <vApplicationGetIdleTaskMemory+0x30>)
 8000cc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2280      	movs	r2, #128	@ 0x80
 8000cc8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	2000002c 	.word	0x2000002c
 8000cdc:	20000080 	.word	0x20000080

08000ce0 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	4608      	mov	r0, r1
 8000cea:	4611      	mov	r1, r2
 8000cec:	461a      	mov	r2, r3
 8000cee:	4603      	mov	r3, r0
 8000cf0:	70fb      	strb	r3, [r7, #3]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	70bb      	strb	r3, [r7, #2]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 8000cfe:	4a4f      	ldr	r2, [pc, #316]	@ (8000e3c <lcdInit+0x15c>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000e3c <lcdInit+0x15c>)
 8000d0c:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8000d0e:	4a4b      	ldr	r2, [pc, #300]	@ (8000e3c <lcdInit+0x15c>)
 8000d10:	78bb      	ldrb	r3, [r7, #2]
 8000d12:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8000d14:	4a49      	ldr	r2, [pc, #292]	@ (8000e3c <lcdInit+0x15c>)
 8000d16:	787b      	ldrb	r3, [r7, #1]
 8000d18:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8000d1a:	4b48      	ldr	r3, [pc, #288]	@ (8000e3c <lcdInit+0x15c>)
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8000d20:	4b47      	ldr	r3, [pc, #284]	@ (8000e40 <lcdInit+0x160>)
 8000d22:	2234      	movs	r2, #52	@ 0x34
 8000d24:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8000d26:	4b46      	ldr	r3, [pc, #280]	@ (8000e40 <lcdInit+0x160>)
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	4b45      	ldr	r3, [pc, #276]	@ (8000e40 <lcdInit+0x160>)
 8000d2c:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8000d2e:	4b44      	ldr	r3, [pc, #272]	@ (8000e40 <lcdInit+0x160>)
 8000d30:	2230      	movs	r2, #48	@ 0x30
 8000d32:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8000d34:	2300      	movs	r3, #0
 8000d36:	75fb      	strb	r3, [r7, #23]
 8000d38:	e030      	b.n	8000d9c <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8000d3a:	4b40      	ldr	r3, [pc, #256]	@ (8000e3c <lcdInit+0x15c>)
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	@ (8000e3c <lcdInit+0x15c>)
 8000d40:	799b      	ldrb	r3, [r3, #6]
 8000d42:	4619      	mov	r1, r3
 8000d44:	2303      	movs	r3, #3
 8000d46:	4a3e      	ldr	r2, [pc, #248]	@ (8000e40 <lcdInit+0x160>)
 8000d48:	f003 f832 	bl	8003db0 <HAL_I2C_Master_Transmit_DMA>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <lcdInit+0x76>
            return false;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e06d      	b.n	8000e32 <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 8000d56:	f007 fad5 	bl	8008304 <xTaskGetTickCount>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000d5e:	e002      	b.n	8000d66 <lcdInit+0x86>
            vTaskDelay(1);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f007 f98b 	bl	800807c <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000d66:	4b35      	ldr	r3, [pc, #212]	@ (8000e3c <lcdInit+0x15c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 fba6 	bl	80044bc <HAL_I2C_GetState>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b20      	cmp	r3, #32
 8000d74:	d1f4      	bne.n	8000d60 <lcdInit+0x80>
        }

        if (i == 2) {
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d106      	bne.n	8000d8a <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	2101      	movs	r1, #1
 8000d82:	4618      	mov	r0, r3
 8000d84:	f007 f8fa 	bl	8007f7c <vTaskDelayUntil>
 8000d88:	e005      	b.n	8000d96 <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	2105      	movs	r1, #5
 8000d90:	4618      	mov	r0, r3
 8000d92:	f007 f8f3 	bl	8007f7c <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 8000d96:	7dfb      	ldrb	r3, [r7, #23]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	75fb      	strb	r3, [r7, #23]
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d9cb      	bls.n	8000d3a <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8000da2:	4b27      	ldr	r3, [pc, #156]	@ (8000e40 <lcdInit+0x160>)
 8000da4:	222c      	movs	r2, #44	@ 0x2c
 8000da6:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8000da8:	4b25      	ldr	r3, [pc, #148]	@ (8000e40 <lcdInit+0x160>)
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	4b24      	ldr	r3, [pc, #144]	@ (8000e40 <lcdInit+0x160>)
 8000dae:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8000db0:	4b23      	ldr	r3, [pc, #140]	@ (8000e40 <lcdInit+0x160>)
 8000db2:	2228      	movs	r2, #40	@ 0x28
 8000db4:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8000db6:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <lcdInit+0x15c>)
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	4b20      	ldr	r3, [pc, #128]	@ (8000e3c <lcdInit+0x15c>)
 8000dbc:	799b      	ldrb	r3, [r3, #6]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e40 <lcdInit+0x160>)
 8000dc4:	f002 fff4 	bl	8003db0 <HAL_I2C_Master_Transmit_DMA>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d004      	beq.n	8000dd8 <lcdInit+0xf8>
        return false;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e02f      	b.n	8000e32 <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f007 f952 	bl	800807c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000dd8:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <lcdInit+0x15c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 fb6d 	bl	80044bc <HAL_I2C_GetState>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b20      	cmp	r3, #32
 8000de6:	d1f4      	bne.n	8000dd2 <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 8000df2:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <lcdInit+0x15c>)
 8000df4:	791b      	ldrb	r3, [r3, #4]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d904      	bls.n	8000e04 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8000e04:	f107 030f 	add.w	r3, r7, #15
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f956 	bl	80010bc <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8000e10:	2101      	movs	r1, #1
 8000e12:	2001      	movs	r0, #1
 8000e14:	f000 f816 	bl	8000e44 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8000e18:	2101      	movs	r1, #1
 8000e1a:	2007      	movs	r0, #7
 8000e1c:	f000 f812 	bl	8000e44 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8000e20:	2101      	movs	r1, #1
 8000e22:	2002      	movs	r0, #2
 8000e24:	f000 f80e 	bl	8000e44 <lcdCommand>
    lcdCursorHome();
 8000e28:	2101      	movs	r1, #1
 8000e2a:	2005      	movs	r0, #5
 8000e2c:	f000 f80a 	bl	8000e44 <lcdCommand>

    return true;
 8000e30:	2301      	movs	r3, #1
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000288 	.word	0x20000288
 8000e40:	20000280 	.word	0x20000280

08000e44 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	460a      	mov	r2, r1
 8000e4e:	71fb      	strb	r3, [r7, #7]
 8000e50:	4613      	mov	r3, r2
 8000e52:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8000e58:	79bb      	ldrb	r3, [r7, #6]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d06e      	beq.n	8000f3c <lcdCommand+0xf8>
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	f040 80b4 	bne.w	8000fcc <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	2b07      	cmp	r3, #7
 8000e6a:	d864      	bhi.n	8000f36 <lcdCommand+0xf2>
 8000e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e74 <lcdCommand+0x30>)
 8000e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e72:	bf00      	nop
 8000e74:	08000e95 	.word	0x08000e95
 8000e78:	08000ec5 	.word	0x08000ec5
 8000e7c:	08000ea5 	.word	0x08000ea5
 8000e80:	08000eb5 	.word	0x08000eb5
 8000e84:	08000ee9 	.word	0x08000ee9
 8000e88:	08000f1d 	.word	0x08000f1d
 8000e8c:	08000f0d 	.word	0x08000f0d
 8000e90:	08000f27 	.word	0x08000f27
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8000e94:	4b61      	ldr	r3, [pc, #388]	@ (800101c <lcdCommand+0x1d8>)
 8000e96:	7a1b      	ldrb	r3, [r3, #8]
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4b5f      	ldr	r3, [pc, #380]	@ (800101c <lcdCommand+0x1d8>)
 8000ea0:	721a      	strb	r2, [r3, #8]
                    break;
 8000ea2:	e04a      	b.n	8000f3a <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 8000ea4:	4b5d      	ldr	r3, [pc, #372]	@ (800101c <lcdCommand+0x1d8>)
 8000ea6:	7a1b      	ldrb	r3, [r3, #8]
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b5b      	ldr	r3, [pc, #364]	@ (800101c <lcdCommand+0x1d8>)
 8000eb0:	721a      	strb	r2, [r3, #8]
                    break;
 8000eb2:	e042      	b.n	8000f3a <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 8000eb4:	4b59      	ldr	r3, [pc, #356]	@ (800101c <lcdCommand+0x1d8>)
 8000eb6:	7a1b      	ldrb	r3, [r3, #8]
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b57      	ldr	r3, [pc, #348]	@ (800101c <lcdCommand+0x1d8>)
 8000ec0:	721a      	strb	r2, [r3, #8]
                    break;
 8000ec2:	e03a      	b.n	8000f3a <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8000ec8:	f107 030f 	add.w	r3, r7, #15
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f8f4 	bl	80010bc <lcdWriteByte>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <lcdCommand+0x9a>
                        return false;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e09a      	b.n	8001014 <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f007 f8cc 	bl	800807c <vTaskDelay>
                        return true;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e095      	b.n	8001014 <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8000eec:	f107 030f 	add.w	r3, r7, #15
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f8e2 	bl	80010bc <lcdWriteByte>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <lcdCommand+0xbe>
                        return false;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e088      	b.n	8001014 <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 8000f02:	2002      	movs	r0, #2
 8000f04:	f007 f8ba 	bl	800807c <vTaskDelay>
                        return true;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e083      	b.n	8001014 <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8000f0c:	4b43      	ldr	r3, [pc, #268]	@ (800101c <lcdCommand+0x1d8>)
 8000f0e:	7a5b      	ldrb	r3, [r3, #9]
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b41      	ldr	r3, [pc, #260]	@ (800101c <lcdCommand+0x1d8>)
 8000f18:	725a      	strb	r2, [r3, #9]
                    break;
 8000f1a:	e00e      	b.n	8000f3a <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8000f1c:	4b3f      	ldr	r3, [pc, #252]	@ (800101c <lcdCommand+0x1d8>)
 8000f1e:	7a5a      	ldrb	r2, [r3, #9]
 8000f20:	4b3e      	ldr	r3, [pc, #248]	@ (800101c <lcdCommand+0x1d8>)
 8000f22:	725a      	strb	r2, [r3, #9]
                    break;
 8000f24:	e009      	b.n	8000f3a <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8000f26:	4b3d      	ldr	r3, [pc, #244]	@ (800101c <lcdCommand+0x1d8>)
 8000f28:	7a5b      	ldrb	r3, [r3, #9]
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b3a      	ldr	r3, [pc, #232]	@ (800101c <lcdCommand+0x1d8>)
 8000f32:	725a      	strb	r2, [r3, #9]
                    break;
 8000f34:	e001      	b.n	8000f3a <lcdCommand+0xf6>

                default:
                    return false;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e06c      	b.n	8001014 <lcdCommand+0x1d0>
            }

            break;
 8000f3a:	e049      	b.n	8000fd0 <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	2b07      	cmp	r3, #7
 8000f42:	d840      	bhi.n	8000fc6 <lcdCommand+0x182>
 8000f44:	a201      	add	r2, pc, #4	@ (adr r2, 8000f4c <lcdCommand+0x108>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000f6d 	.word	0x08000f6d
 8000f50:	08000fc7 	.word	0x08000fc7
 8000f54:	08000f7d 	.word	0x08000f7d
 8000f58:	08000f8d 	.word	0x08000f8d
 8000f5c:	08000fc7 	.word	0x08000fc7
 8000f60:	08000fad 	.word	0x08000fad
 8000f64:	08000f9d 	.word	0x08000f9d
 8000f68:	08000fb7 	.word	0x08000fb7
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800101c <lcdCommand+0x1d8>)
 8000f6e:	7a1b      	ldrb	r3, [r3, #8]
 8000f70:	f023 0304 	bic.w	r3, r3, #4
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4b29      	ldr	r3, [pc, #164]	@ (800101c <lcdCommand+0x1d8>)
 8000f78:	721a      	strb	r2, [r3, #8]
                    break;
 8000f7a:	e026      	b.n	8000fca <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8000f7c:	4b27      	ldr	r3, [pc, #156]	@ (800101c <lcdCommand+0x1d8>)
 8000f7e:	7a1b      	ldrb	r3, [r3, #8]
 8000f80:	f023 0302 	bic.w	r3, r3, #2
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b25      	ldr	r3, [pc, #148]	@ (800101c <lcdCommand+0x1d8>)
 8000f88:	721a      	strb	r2, [r3, #8]
                    break;
 8000f8a:	e01e      	b.n	8000fca <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8000f8c:	4b23      	ldr	r3, [pc, #140]	@ (800101c <lcdCommand+0x1d8>)
 8000f8e:	7a1b      	ldrb	r3, [r3, #8]
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <lcdCommand+0x1d8>)
 8000f98:	721a      	strb	r2, [r3, #8]
                    break;
 8000f9a:	e016      	b.n	8000fca <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <lcdCommand+0x1d8>)
 8000f9e:	7a5b      	ldrb	r3, [r3, #9]
 8000fa0:	f023 0302 	bic.w	r3, r3, #2
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <lcdCommand+0x1d8>)
 8000fa8:	725a      	strb	r2, [r3, #9]
                    break;
 8000faa:	e00e      	b.n	8000fca <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <lcdCommand+0x1d8>)
 8000fae:	7a5a      	ldrb	r2, [r3, #9]
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <lcdCommand+0x1d8>)
 8000fb2:	725a      	strb	r2, [r3, #9]
                    break;
 8000fb4:	e009      	b.n	8000fca <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <lcdCommand+0x1d8>)
 8000fb8:	7a5b      	ldrb	r3, [r3, #9]
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b16      	ldr	r3, [pc, #88]	@ (800101c <lcdCommand+0x1d8>)
 8000fc2:	725a      	strb	r2, [r3, #9]
                    break;
 8000fc4:	e001      	b.n	8000fca <lcdCommand+0x186>

                default:
                    return false;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e024      	b.n	8001014 <lcdCommand+0x1d0>
            }

            break;
 8000fca:	e001      	b.n	8000fd0 <lcdCommand+0x18c>

        default:
            return false;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e021      	b.n	8001014 <lcdCommand+0x1d0>
    }

    /* Now lets send the command */
    switch (command) {
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b08      	cmp	r3, #8
 8000fd4:	dc16      	bgt.n	8001004 <lcdCommand+0x1c0>
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	da0d      	bge.n	8000ff6 <lcdCommand+0x1b2>
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d004      	beq.n	8000fe8 <lcdCommand+0x1a4>
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	dd10      	ble.n	8001004 <lcdCommand+0x1c0>
 8000fe2:	3b03      	subs	r3, #3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d80d      	bhi.n	8001004 <lcdCommand+0x1c0>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <lcdCommand+0x1d8>)
 8000fea:	7a1b      	ldrb	r3, [r3, #8]
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	73fb      	strb	r3, [r7, #15]
            break;
 8000ff4:	e007      	b.n	8001006 <lcdCommand+0x1c2>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <lcdCommand+0x1d8>)
 8000ff8:	7a5b      	ldrb	r3, [r3, #9]
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	73fb      	strb	r3, [r7, #15]
            break;
 8001002:	e000      	b.n	8001006 <lcdCommand+0x1c2>

        default:
            break;
 8001004:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8001006:	f107 030f 	add.w	r3, r7, #15
 800100a:	4619      	mov	r1, r3
 800100c:	2000      	movs	r0, #0
 800100e:	f000 f855 	bl	80010bc <lcdWriteByte>
 8001012:	4603      	mov	r3, r0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000288 	.word	0x20000288

08001020 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	460a      	mov	r2, r1
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	4613      	mov	r3, r2
 800102e:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8001030:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <lcdSetCursorPosition+0x50>)
 8001032:	791b      	ldrb	r3, [r3, #4]
 8001034:	79ba      	ldrb	r2, [r7, #6]
 8001036:	429a      	cmp	r2, r3
 8001038:	d303      	bcc.n	8001042 <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <lcdSetCursorPosition+0x50>)
 800103c:	791b      	ldrb	r3, [r3, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <lcdSetCursorPosition+0x54>)
 8001046:	5cd2      	ldrb	r2, [r2, r3]
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4413      	add	r3, r2
 800104c:	b2db      	uxtb	r3, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001054:	b25b      	sxtb	r3, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 800105a:	f107 030f 	add.w	r3, r7, #15
 800105e:	4619      	mov	r1, r3
 8001060:	2000      	movs	r0, #0
 8001062:	f000 f82b 	bl	80010bc <lcdWriteByte>
 8001066:	4603      	mov	r3, r0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000288 	.word	0x20000288
 8001074:	080090c0 	.word	0x080090c0

08001078 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e00e      	b.n	80010a8 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4413      	add	r3, r2
 8001090:	4619      	mov	r1, r3
 8001092:	2001      	movs	r0, #1
 8001094:	f000 f812 	bl	80010bc <lcdWriteByte>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <lcdPrintStr+0x2a>
            return false;
 800109e:	2300      	movs	r3, #0
 80010a0:	e007      	b.n	80010b2 <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	3301      	adds	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	78fb      	ldrb	r3, [r7, #3]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d3ec      	bcc.n	800108a <lcdPrintStr+0x12>
        }
    }

    return true;
 80010b0:	2301      	movs	r3, #1
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 80010c8:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <lcdWriteByte+0xdc>)
 80010ca:	79da      	ldrb	r2, [r3, #7]
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	f023 030f 	bic.w	r3, r3, #15
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <lcdWriteByte+0xe0>)
 80010e8:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 80010ea:	4b2c      	ldr	r3, [pc, #176]	@ (800119c <lcdWriteByte+0xe0>)
 80010ec:	781a      	ldrb	r2, [r3, #0]
 80010ee:	4b2b      	ldr	r3, [pc, #172]	@ (800119c <lcdWriteByte+0xe0>)
 80010f0:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 80010f2:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <lcdWriteByte+0xdc>)
 80010f4:	79da      	ldrb	r2, [r3, #7]
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	b25a      	sxtb	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b25b      	sxtb	r3, r3
 8001104:	f023 030f 	bic.w	r3, r3, #15
 8001108:	b25b      	sxtb	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b25b      	sxtb	r3, r3
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b22      	ldr	r3, [pc, #136]	@ (800119c <lcdWriteByte+0xe0>)
 8001112:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8001114:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <lcdWriteByte+0xdc>)
 8001116:	79da      	ldrb	r2, [r3, #7]
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	4313      	orrs	r3, r2
 800111c:	b2da      	uxtb	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <lcdWriteByte+0xe0>)
 8001132:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8001134:	4b19      	ldr	r3, [pc, #100]	@ (800119c <lcdWriteByte+0xe0>)
 8001136:	78da      	ldrb	r2, [r3, #3]
 8001138:	4b18      	ldr	r3, [pc, #96]	@ (800119c <lcdWriteByte+0xe0>)
 800113a:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 800113c:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <lcdWriteByte+0xdc>)
 800113e:	79da      	ldrb	r2, [r3, #7]
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4313      	orrs	r3, r2
 8001144:	b2db      	uxtb	r3, r3
 8001146:	b25a      	sxtb	r2, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	b25b      	sxtb	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b25b      	sxtb	r3, r3
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <lcdWriteByte+0xe0>)
 8001158:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 800115a:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <lcdWriteByte+0xdc>)
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <lcdWriteByte+0xdc>)
 8001160:	799b      	ldrb	r3, [r3, #6]
 8001162:	4619      	mov	r1, r3
 8001164:	2306      	movs	r3, #6
 8001166:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <lcdWriteByte+0xe0>)
 8001168:	f002 fe22 	bl	8003db0 <HAL_I2C_Master_Transmit_DMA>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d004      	beq.n	800117c <lcdWriteByte+0xc0>
        return false;
 8001172:	2300      	movs	r3, #0
 8001174:	e00b      	b.n	800118e <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f006 ff80 	bl	800807c <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <lcdWriteByte+0xdc>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f003 f99b 	bl	80044bc <HAL_I2C_GetState>
 8001186:	4603      	mov	r3, r0
 8001188:	2b20      	cmp	r3, #32
 800118a:	d1f4      	bne.n	8001176 <lcdWriteByte+0xba>
    }

    return true;
 800118c:	2301      	movs	r3, #1
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000288 	.word	0x20000288
 800119c:	20000280 	.word	0x20000280

080011a0 <escribirMensajeLCD>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-------------------------------------LCD Screen Code--------------------------------------*/
void escribirMensajeLCD(uint8_t r, uint8_t c, const char *mensaje) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	603a      	str	r2, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	460b      	mov	r3, r1
 80011ae:	71bb      	strb	r3, [r7, #6]
    lcdDisplayClear();
 80011b0:	2101      	movs	r1, #1
 80011b2:	2002      	movs	r0, #2
 80011b4:	f7ff fe46 	bl	8000e44 <lcdCommand>
    lcdSetCursorPosition(r, c);
 80011b8:	79ba      	ldrb	r2, [r7, #6]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff2e 	bl	8001020 <lcdSetCursorPosition>

    lcdPrintStr((uint8_t*)mensaje, (uint8_t)strlen(mensaje));
 80011c4:	6838      	ldr	r0, [r7, #0]
 80011c6:	f7ff f803 	bl	80001d0 <strlen>
 80011ca:	4603      	mov	r3, r0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	6838      	ldr	r0, [r7, #0]
 80011d2:	f7ff ff51 	bl	8001078 <lcdPrintStr>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <GetPosition>:

/*----------------------------------LCD Screen Code End----------------------------------------*/
/*-------------------------------------ServoADC Code--------------------------------------*/
float GetPosition(ADC_HandleTypeDef* hadc){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	float val = HAL_ADC_GetValue(hadc);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f001 fbc9 	bl	8002980 <HAL_ADC_GetValue>
 80011ee:	ee07 0a90 	vmov	s15, r0
 80011f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f6:	edc7 7a03 	vstr	s15, [r7, #12]
	return (val/ADCResolution)*ServoRange;
 80011fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80011fe:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001218 <GetPosition+0x38>
 8001202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001206:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800121c <GetPosition+0x3c>
 800120a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	45800000 	.word	0x45800000
 800121c:	43340000 	.word	0x43340000

08001220 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
		if(hadc->Instance == ADC1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a15      	ldr	r2, [pc, #84]	@ (8001284 <HAL_ADC_ConvCpltCallback+0x64>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d108      	bne.n	8001244 <HAL_ADC_ConvCpltCallback+0x24>
			 Pos_S1 = GetPosition(hadc);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffd4 	bl	80011e0 <GetPosition>
 8001238:	eef0 7a40 	vmov.f32	s15, s0
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <HAL_ADC_ConvCpltCallback+0x68>)
 800123e:	edc3 7a00 	vstr	s15, [r3]
		else if (hadc->Instance == ADC2)
			Pos_S2 = GetPosition(hadc);
		else if (hadc->Instance == ADC3)
			Pos_S3 = GetPosition(hadc);
	}
 8001242:	e01a      	b.n	800127a <HAL_ADC_ConvCpltCallback+0x5a>
		else if (hadc->Instance == ADC2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a10      	ldr	r2, [pc, #64]	@ (800128c <HAL_ADC_ConvCpltCallback+0x6c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d108      	bne.n	8001260 <HAL_ADC_ConvCpltCallback+0x40>
			Pos_S2 = GetPosition(hadc);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ffc6 	bl	80011e0 <GetPosition>
 8001254:	eef0 7a40 	vmov.f32	s15, s0
 8001258:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <HAL_ADC_ConvCpltCallback+0x70>)
 800125a:	edc3 7a00 	vstr	s15, [r3]
	}
 800125e:	e00c      	b.n	800127a <HAL_ADC_ConvCpltCallback+0x5a>
		else if (hadc->Instance == ADC3)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0b      	ldr	r2, [pc, #44]	@ (8001294 <HAL_ADC_ConvCpltCallback+0x74>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d107      	bne.n	800127a <HAL_ADC_ConvCpltCallback+0x5a>
			Pos_S3 = GetPosition(hadc);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffb8 	bl	80011e0 <GetPosition>
 8001270:	eef0 7a40 	vmov.f32	s15, s0
 8001274:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <HAL_ADC_ConvCpltCallback+0x78>)
 8001276:	edc3 7a00 	vstr	s15, [r3]
	}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40012000 	.word	0x40012000
 8001288:	200005a4 	.word	0x200005a4
 800128c:	40012100 	.word	0x40012100
 8001290:	200005a8 	.word	0x200005a8
 8001294:	40012200 	.word	0x40012200
 8001298:	200005ac 	.word	0x200005ac

0800129c <delay>:
}
/*-------------------------------Servo Position Code End--------------------------------------*/

/*-------------------------------------HCSR-04 Code-------------------------------------------*/
	void delay (uint16_t time)
	{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <delay+0x30>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24
		while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 80012ae:	bf00      	nop
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <delay+0x30>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d3f9      	bcc.n	80012b0 <delay+0x14>
	}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000558 	.word	0x20000558

080012d0 <HAL_TIM_IC_CaptureCallback>:


	void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
	{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  //Channel 4 is exclusively used for HCSR-04 management
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	7f1b      	ldrb	r3, [r3, #28]
 80012dc:	2b08      	cmp	r3, #8
 80012de:	f040 8083 	bne.w	80013e8 <HAL_TIM_IC_CaptureCallback+0x118>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 80012e2:	4b45      	ldr	r3, [pc, #276]	@ (80013f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d11a      	bne.n	8001320 <HAL_TIM_IC_CaptureCallback+0x50>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 80012ea:	210c      	movs	r1, #12
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f005 fe95 	bl	800701c <HAL_TIM_ReadCapturedValue>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a41      	ldr	r2, [pc, #260]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80012f6:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 80012f8:	4b3f      	ldr	r3, [pc, #252]	@ (80013f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6a1a      	ldr	r2, [r3, #32]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 800130c:	621a      	str	r2, [r3, #32]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6a1a      	ldr	r2, [r3, #32]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800131c:	621a      	str	r2, [r3, #32]
				// set polarity to rising edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
			}
		}
	}
 800131e:	e063      	b.n	80013e8 <HAL_TIM_IC_CaptureCallback+0x118>
			else if (Is_First_Captured==1)   // if the first is already captured
 8001320:	4b35      	ldr	r3, [pc, #212]	@ (80013f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d15f      	bne.n	80013e8 <HAL_TIM_IC_CaptureCallback+0x118>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8001328:	210c      	movs	r1, #12
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f005 fe76 	bl	800701c <HAL_TIM_ReadCapturedValue>
 8001330:	4603      	mov	r3, r0
 8001332:	4a33      	ldr	r2, [pc, #204]	@ (8001400 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001334:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24
				if (IC_Val2 > IC_Val1)
 800133e:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4b2e      	ldr	r3, [pc, #184]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d907      	bls.n	800135a <HAL_TIM_IC_CaptureCallback+0x8a>
					Difference = IC_Val2-IC_Val1;
 800134a:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <HAL_TIM_IC_CaptureCallback+0x130>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b2b      	ldr	r3, [pc, #172]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	4a2b      	ldr	r2, [pc, #172]	@ (8001404 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	e00f      	b.n	800137a <HAL_TIM_IC_CaptureCallback+0xaa>
				else if (IC_Val1 > IC_Val2)
 800135a:	4b28      	ldr	r3, [pc, #160]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b28      	ldr	r3, [pc, #160]	@ (8001400 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d909      	bls.n	800137a <HAL_TIM_IC_CaptureCallback+0xaa>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8001366:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4b24      	ldr	r3, [pc, #144]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x12c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001374:	33ff      	adds	r3, #255	@ 0xff
 8001376:	4a23      	ldr	r2, [pc, #140]	@ (8001404 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001378:	6013      	str	r3, [r2, #0]
				Distance = Difference * 0.34/2;
 800137a:	4b22      	ldr	r3, [pc, #136]	@ (8001404 <HAL_TIM_IC_CaptureCallback+0x134>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f870 	bl	8000464 <__aeabi_ui2d>
 8001384:	a31a      	add	r3, pc, #104	@ (adr r3, 80013f0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff f8e5 	bl	8000558 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800139e:	f7ff fa05 	bl	80007ac <__aeabi_ddiv>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f7ff fae7 	bl	800097c <__aeabi_d2uiz>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_TIM_IC_CaptureCallback+0x138>)
 80013b4:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6a1a      	ldr	r2, [r3, #32]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80013ca:	621a      	str	r2, [r3, #32]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6a12      	ldr	r2, [r2, #32]
 80013d6:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0202 	bic.w	r2, r2, #2
 80013e6:	60da      	str	r2, [r3, #12]
	}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	5c28f5c3 	.word	0x5c28f5c3
 80013f4:	3fd5c28f 	.word	0x3fd5c28f
 80013f8:	200005bc 	.word	0x200005bc
 80013fc:	200005b0 	.word	0x200005b0
 8001400:	200005b4 	.word	0x200005b4
 8001404:	200005b8 	.word	0x200005b8
 8001408:	200005bd 	.word	0x200005bd
 800140c:	20000558 	.word	0x20000558

08001410 <HCSR04_Read>:

	void HCSR04_Read (void)
	{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001414:	2201      	movs	r2, #1
 8001416:	2110      	movs	r1, #16
 8001418:	480a      	ldr	r0, [pc, #40]	@ (8001444 <HCSR04_Read+0x34>)
 800141a:	f002 fb55 	bl	8003ac8 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 800141e:	200a      	movs	r0, #10
 8001420:	f7ff ff3c 	bl	800129c <delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);// pull the TRIG pin low
 8001424:	2200      	movs	r2, #0
 8001426:	2110      	movs	r1, #16
 8001428:	4806      	ldr	r0, [pc, #24]	@ (8001444 <HCSR04_Read+0x34>)
 800142a:	f002 fb4d 	bl	8003ac8 <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HCSR04_Read+0x38>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <HCSR04_Read+0x38>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f042 0202 	orr.w	r2, r2, #2
 800143c:	60da      	str	r2, [r3, #12]
	}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40020000 	.word	0x40020000
 8001448:	20000558 	.word	0x20000558

0800144c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800144c:	b5b0      	push	{r4, r5, r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001452:	f000 ffcd 	bl	80023f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001456:	f000 f86f 	bl	8001538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145a:	f000 fbaf 	bl	8001bbc <MX_GPIO_Init>
  MX_DMA_Init();
 800145e:	f000 fb85 	bl	8001b6c <MX_DMA_Init>
  MX_ADC1_Init();
 8001462:	f000 f8d3 	bl	800160c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001466:	f000 f923 	bl	80016b0 <MX_ADC2_Init>
  MX_ADC3_Init();
 800146a:	f000 f973 	bl	8001754 <MX_ADC3_Init>
  MX_TIM1_Init();
 800146e:	f000 f9f1 	bl	8001854 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001472:	f000 fa73 	bl	800195c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001476:	f000 facb 	bl	8001a10 <MX_TIM3_Init>
  MX_TIM4_Init();
 800147a:	f000 fb23 	bl	8001ac4 <MX_TIM4_Init>
  MX_I2C1_Init();
 800147e:	f000 f9bb 	bl	80017f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_ADC_Start_IT(&hadc1);
 8001482:	4821      	ldr	r0, [pc, #132]	@ (8001508 <main+0xbc>)
 8001484:	f001 f88e 	bl	80025a4 <HAL_ADC_Start_IT>
  	  HAL_ADC_Start_IT(&hadc2);
 8001488:	4820      	ldr	r0, [pc, #128]	@ (800150c <main+0xc0>)
 800148a:	f001 f88b 	bl	80025a4 <HAL_ADC_Start_IT>
      HAL_ADC_Start_IT(&hadc3);
 800148e:	4820      	ldr	r0, [pc, #128]	@ (8001510 <main+0xc4>)
 8001490:	f001 f888 	bl	80025a4 <HAL_ADC_Start_IT>
 	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001494:	2100      	movs	r1, #0
 8001496:	481f      	ldr	r0, [pc, #124]	@ (8001514 <main+0xc8>)
 8001498:	f005 f8d6 	bl	8006648 <HAL_TIM_PWM_Start>
 	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800149c:	2104      	movs	r1, #4
 800149e:	481e      	ldr	r0, [pc, #120]	@ (8001518 <main+0xcc>)
 80014a0:	f005 f8d2 	bl	8006648 <HAL_TIM_PWM_Start>
 	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80014a4:	2108      	movs	r1, #8
 80014a6:	481d      	ldr	r0, [pc, #116]	@ (800151c <main+0xd0>)
 80014a8:	f005 f8ce 	bl	8006648 <HAL_TIM_PWM_Start>
 	  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 80014ac:	210c      	movs	r1, #12
 80014ae:	481c      	ldr	r0, [pc, #112]	@ (8001520 <main+0xd4>)
 80014b0:	f005 f9e2 	bl	8006878 <HAL_TIM_IC_Start_IT>
	  lcdInit(&hi2c1, 0x27, 4, 20); // Direction I2C 0x27, 4 rows y 20 columns
 80014b4:	2314      	movs	r3, #20
 80014b6:	2204      	movs	r2, #4
 80014b8:	2127      	movs	r1, #39	@ 0x27
 80014ba:	481a      	ldr	r0, [pc, #104]	@ (8001524 <main+0xd8>)
 80014bc:	f7ff fc10 	bl	8000ce0 <lcdInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <main+0xdc>)
 80014c2:	1d3c      	adds	r4, r7, #4
 80014c4:	461d      	mov	r5, r3
 80014c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f006 fab9 	bl	8007a4e <osThreadCreate>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a13      	ldr	r2, [pc, #76]	@ (800152c <main+0xe0>)
 80014e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80014e2:	f006 faad 	bl	8007a40 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HCSR04_Read();
 80014e6:	f7ff ff93 	bl	8001410 <HCSR04_Read>
	  if(Distance < 8)
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <main+0xe4>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b07      	cmp	r3, #7
 80014f0:	d804      	bhi.n	80014fc <main+0xb0>
		  escribirMensajeLCD(1,1,"DETECTED");
 80014f2:	4a10      	ldr	r2, [pc, #64]	@ (8001534 <main+0xe8>)
 80014f4:	2101      	movs	r1, #1
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff fe52 	bl	80011a0 <escribirMensajeLCD>
	  HAL_Delay(500);
 80014fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001500:	f000 ffe8 	bl	80024d4 <HAL_Delay>
	  HCSR04_Read();
 8001504:	e7ef      	b.n	80014e6 <main+0x9a>
 8001506:	bf00      	nop
 8001508:	20000294 	.word	0x20000294
 800150c:	200002dc 	.word	0x200002dc
 8001510:	20000324 	.word	0x20000324
 8001514:	20000480 	.word	0x20000480
 8001518:	200004c8 	.word	0x200004c8
 800151c:	20000510 	.word	0x20000510
 8001520:	20000558 	.word	0x20000558
 8001524:	2000036c 	.word	0x2000036c
 8001528:	0800908c 	.word	0x0800908c
 800152c:	200005a0 	.word	0x200005a0
 8001530:	200005bd 	.word	0x200005bd
 8001534:	08009074 	.word	0x08009074

08001538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b094      	sub	sp, #80	@ 0x50
 800153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	2230      	movs	r2, #48	@ 0x30
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f007 fd5c 	bl	8009004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <SystemClock_Config+0xcc>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001564:	4a27      	ldr	r2, [pc, #156]	@ (8001604 <SystemClock_Config+0xcc>)
 8001566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800156a:	6413      	str	r3, [r2, #64]	@ 0x40
 800156c:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <SystemClock_Config+0xcc>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <SystemClock_Config+0xd0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a21      	ldr	r2, [pc, #132]	@ (8001608 <SystemClock_Config+0xd0>)
 8001582:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <SystemClock_Config+0xd0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001598:	2301      	movs	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159c:	2310      	movs	r3, #16
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a0:	2302      	movs	r3, #2
 80015a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015a8:	2308      	movs	r3, #8
 80015aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80015ac:	2332      	movs	r3, #50	@ 0x32
 80015ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015b0:	2304      	movs	r3, #4
 80015b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015b4:	2307      	movs	r3, #7
 80015b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0320 	add.w	r3, r7, #32
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 fb21 	bl	8005c04 <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015c8:	f000 fb90 	bl	8001cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	230f      	movs	r3, #15
 80015ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d0:	2302      	movs	r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f004 fd82 	bl	80060f4 <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015f6:	f000 fb79 	bl	8001cec <Error_Handler>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3750      	adds	r7, #80	@ 0x50
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000

0800160c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800161e:	4b21      	ldr	r3, [pc, #132]	@ (80016a4 <MX_ADC1_Init+0x98>)
 8001620:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <MX_ADC1_Init+0x9c>)
 8001622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001624:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <MX_ADC1_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800162a:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <MX_ADC1_Init+0x98>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001630:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <MX_ADC1_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001636:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <MX_ADC1_Init+0x98>)
 8001638:	2200      	movs	r2, #0
 800163a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800163c:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <MX_ADC1_Init+0x98>)
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001644:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <MX_ADC1_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800164a:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <MX_ADC1_Init+0x98>)
 800164c:	4a17      	ldr	r2, [pc, #92]	@ (80016ac <MX_ADC1_Init+0xa0>)
 800164e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001650:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <MX_ADC1_Init+0x98>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001656:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <MX_ADC1_Init+0x98>)
 8001658:	2201      	movs	r2, #1
 800165a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <MX_ADC1_Init+0x98>)
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <MX_ADC1_Init+0x98>)
 8001666:	2201      	movs	r2, #1
 8001668:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800166a:	480e      	ldr	r0, [pc, #56]	@ (80016a4 <MX_ADC1_Init+0x98>)
 800166c:	f000 ff56 	bl	800251c <HAL_ADC_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001676:	f000 fb39 	bl	8001cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800167a:	2301      	movs	r3, #1
 800167c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800167e:	2301      	movs	r3, #1
 8001680:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	@ (80016a4 <MX_ADC1_Init+0x98>)
 800168c:	f001 f99a 	bl	80029c4 <HAL_ADC_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001696:	f000 fb29 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000294 	.word	0x20000294
 80016a8:	40012000 	.word	0x40012000
 80016ac:	0f000001 	.word	0x0f000001

080016b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80016c2:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <MX_ADC2_Init+0x98>)
 80016c4:	4a21      	ldr	r2, [pc, #132]	@ (800174c <MX_ADC2_Init+0x9c>)
 80016c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <MX_ADC2_Init+0x98>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <MX_ADC2_Init+0x98>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80016d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001748 <MX_ADC2_Init+0x98>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016da:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <MX_ADC2_Init+0x98>)
 80016dc:	2200      	movs	r2, #0
 80016de:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016e0:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <MX_ADC2_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016e8:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <MX_ADC2_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ee:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <MX_ADC2_Init+0x98>)
 80016f0:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <MX_ADC2_Init+0xa0>)
 80016f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <MX_ADC2_Init+0x98>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80016fa:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <MX_ADC2_Init+0x98>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <MX_ADC2_Init+0x98>)
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001708:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <MX_ADC2_Init+0x98>)
 800170a:	2201      	movs	r2, #1
 800170c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800170e:	480e      	ldr	r0, [pc, #56]	@ (8001748 <MX_ADC2_Init+0x98>)
 8001710:	f000 ff04 	bl	800251c <HAL_ADC_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800171a:	f000 fae7 	bl	8001cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800171e:	2302      	movs	r3, #2
 8001720:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001722:	2301      	movs	r3, #1
 8001724:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	4619      	mov	r1, r3
 800172e:	4806      	ldr	r0, [pc, #24]	@ (8001748 <MX_ADC2_Init+0x98>)
 8001730:	f001 f948 	bl	80029c4 <HAL_ADC_ConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800173a:	f000 fad7 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200002dc 	.word	0x200002dc
 800174c:	40012100 	.word	0x40012100
 8001750:	0f000001 	.word	0x0f000001

08001754 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800175a:	463b      	mov	r3, r7
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001766:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <MX_ADC3_Init+0x98>)
 8001768:	4a21      	ldr	r2, [pc, #132]	@ (80017f0 <MX_ADC3_Init+0x9c>)
 800176a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800176c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <MX_ADC3_Init+0x98>)
 800176e:	2200      	movs	r2, #0
 8001770:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001772:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <MX_ADC3_Init+0x98>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001778:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <MX_ADC3_Init+0x98>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800177e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <MX_ADC3_Init+0x98>)
 8001780:	2200      	movs	r2, #0
 8001782:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <MX_ADC3_Init+0x98>)
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800178c:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <MX_ADC3_Init+0x98>)
 800178e:	2200      	movs	r2, #0
 8001790:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001792:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <MX_ADC3_Init+0x98>)
 8001794:	4a17      	ldr	r2, [pc, #92]	@ (80017f4 <MX_ADC3_Init+0xa0>)
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <MX_ADC3_Init+0x98>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800179e:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <MX_ADC3_Init+0x98>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <MX_ADC3_Init+0x98>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <MX_ADC3_Init+0x98>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80017b2:	480e      	ldr	r0, [pc, #56]	@ (80017ec <MX_ADC3_Init+0x98>)
 80017b4:	f000 feb2 	bl	800251c <HAL_ADC_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80017be:	f000 fa95 	bl	8001cec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80017c2:	2303      	movs	r3, #3
 80017c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017c6:	2301      	movs	r3, #1
 80017c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80017ce:	463b      	mov	r3, r7
 80017d0:	4619      	mov	r1, r3
 80017d2:	4806      	ldr	r0, [pc, #24]	@ (80017ec <MX_ADC3_Init+0x98>)
 80017d4:	f001 f8f6 	bl	80029c4 <HAL_ADC_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80017de:	f000 fa85 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000324 	.word	0x20000324
 80017f0:	40012200 	.word	0x40012200
 80017f4:	0f000001 	.word	0x0f000001

080017f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <MX_I2C1_Init+0x50>)
 80017fe:	4a13      	ldr	r2, [pc, #76]	@ (800184c <MX_I2C1_Init+0x54>)
 8001800:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <MX_I2C1_Init+0x50>)
 8001804:	4a12      	ldr	r2, [pc, #72]	@ (8001850 <MX_I2C1_Init+0x58>)
 8001806:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001808:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <MX_I2C1_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800180e:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <MX_I2C1_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <MX_I2C1_Init+0x50>)
 8001816:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800181a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800181c:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <MX_I2C1_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <MX_I2C1_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001828:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <MX_I2C1_Init+0x50>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <MX_I2C1_Init+0x50>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	@ (8001848 <MX_I2C1_Init+0x50>)
 8001836:	f002 f961 	bl	8003afc <HAL_I2C_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001840:	f000 fa54 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	2000036c 	.word	0x2000036c
 800184c:	40005400 	.word	0x40005400
 8001850:	000186a0 	.word	0x000186a0

08001854 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b092      	sub	sp, #72	@ 0x48
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2220      	movs	r2, #32
 800187c:	2100      	movs	r1, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f007 fbc0 	bl	8009004 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001884:	4b33      	ldr	r3, [pc, #204]	@ (8001954 <MX_TIM1_Init+0x100>)
 8001886:	4a34      	ldr	r2, [pc, #208]	@ (8001958 <MX_TIM1_Init+0x104>)
 8001888:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 260-1;
 800188a:	4b32      	ldr	r3, [pc, #200]	@ (8001954 <MX_TIM1_Init+0x100>)
 800188c:	f240 1203 	movw	r2, #259	@ 0x103
 8001890:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b30      	ldr	r3, [pc, #192]	@ (8001954 <MX_TIM1_Init+0x100>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8001898:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <MX_TIM1_Init+0x100>)
 800189a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800189e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001954 <MX_TIM1_Init+0x100>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001954 <MX_TIM1_Init+0x100>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b29      	ldr	r3, [pc, #164]	@ (8001954 <MX_TIM1_Init+0x100>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018b2:	4828      	ldr	r0, [pc, #160]	@ (8001954 <MX_TIM1_Init+0x100>)
 80018b4:	f004 fe79 	bl	80065aa <HAL_TIM_PWM_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80018be:	f000 fa15 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018ce:	4619      	mov	r1, r3
 80018d0:	4820      	ldr	r0, [pc, #128]	@ (8001954 <MX_TIM1_Init+0x100>)
 80018d2:	f005 ffbb 	bl	800784c <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80018dc:	f000 fa06 	bl	8001cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e0:	2360      	movs	r3, #96	@ 0x60
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ec:	2300      	movs	r3, #0
 80018ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001900:	2200      	movs	r2, #0
 8001902:	4619      	mov	r1, r3
 8001904:	4813      	ldr	r0, [pc, #76]	@ (8001954 <MX_TIM1_Init+0x100>)
 8001906:	f005 fac7 	bl	8006e98 <HAL_TIM_PWM_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001910:	f000 f9ec 	bl	8001cec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001928:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800192c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4619      	mov	r1, r3
 8001936:	4807      	ldr	r0, [pc, #28]	@ (8001954 <MX_TIM1_Init+0x100>)
 8001938:	f006 f804 	bl	8007944 <HAL_TIMEx_ConfigBreakDeadTime>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001942:	f000 f9d3 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001946:	4803      	ldr	r0, [pc, #12]	@ (8001954 <MX_TIM1_Init+0x100>)
 8001948:	f000 fc22 	bl	8002190 <HAL_TIM_MspPostInit>

}
 800194c:	bf00      	nop
 800194e:	3748      	adds	r7, #72	@ 0x48
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000480 	.word	0x20000480
 8001958:	40010000 	.word	0x40010000

0800195c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001962:	f107 0320 	add.w	r3, r7, #32
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]
 800197a:	615a      	str	r2, [r3, #20]
 800197c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800197e:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <MX_TIM2_Init+0xb0>)
 8001980:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001984:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 260-1;
 8001986:	4b21      	ldr	r3, [pc, #132]	@ (8001a0c <MX_TIM2_Init+0xb0>)
 8001988:	f240 1203 	movw	r2, #259	@ 0x103
 800198c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <MX_TIM2_Init+0xb0>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001994:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <MX_TIM2_Init+0xb0>)
 8001996:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800199a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <MX_TIM2_Init+0xb0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a0c <MX_TIM2_Init+0xb0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019a8:	4818      	ldr	r0, [pc, #96]	@ (8001a0c <MX_TIM2_Init+0xb0>)
 80019aa:	f004 fdfe 	bl	80065aa <HAL_TIM_PWM_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80019b4:	f000 f99a 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c0:	f107 0320 	add.w	r3, r7, #32
 80019c4:	4619      	mov	r1, r3
 80019c6:	4811      	ldr	r0, [pc, #68]	@ (8001a0c <MX_TIM2_Init+0xb0>)
 80019c8:	f005 ff40 	bl	800784c <HAL_TIMEx_MasterConfigSynchronization>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80019d2:	f000 f98b 	bl	8001cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d6:	2360      	movs	r3, #96	@ 0x60
 80019d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	2204      	movs	r2, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4807      	ldr	r0, [pc, #28]	@ (8001a0c <MX_TIM2_Init+0xb0>)
 80019ee:	f005 fa53 	bl	8006e98 <HAL_TIM_PWM_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80019f8:	f000 f978 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019fc:	4803      	ldr	r0, [pc, #12]	@ (8001a0c <MX_TIM2_Init+0xb0>)
 80019fe:	f000 fbc7 	bl	8002190 <HAL_TIM_MspPostInit>

}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	@ 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200004c8 	.word	0x200004c8

08001a10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	@ 0x28
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a16:	f107 0320 	add.w	r3, r7, #32
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]
 8001a2e:	615a      	str	r2, [r3, #20]
 8001a30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a32:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <MX_TIM3_Init+0xac>)
 8001a34:	4a22      	ldr	r2, [pc, #136]	@ (8001ac0 <MX_TIM3_Init+0xb0>)
 8001a36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 260-1;
 8001a38:	4b20      	ldr	r3, [pc, #128]	@ (8001abc <MX_TIM3_Init+0xac>)
 8001a3a:	f240 1203 	movw	r2, #259	@ 0x103
 8001a3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b1e      	ldr	r3, [pc, #120]	@ (8001abc <MX_TIM3_Init+0xac>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001a46:	4b1d      	ldr	r3, [pc, #116]	@ (8001abc <MX_TIM3_Init+0xac>)
 8001a48:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001a4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <MX_TIM3_Init+0xac>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <MX_TIM3_Init+0xac>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001a5a:	4818      	ldr	r0, [pc, #96]	@ (8001abc <MX_TIM3_Init+0xac>)
 8001a5c:	f004 fd56 	bl	800650c <HAL_TIM_OC_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a66:	f000 f941 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a72:	f107 0320 	add.w	r3, r7, #32
 8001a76:	4619      	mov	r1, r3
 8001a78:	4810      	ldr	r0, [pc, #64]	@ (8001abc <MX_TIM3_Init+0xac>)
 8001a7a:	f005 fee7 	bl	800784c <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a84:	f000 f932 	bl	8001cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4807      	ldr	r0, [pc, #28]	@ (8001abc <MX_TIM3_Init+0xac>)
 8001aa0:	f005 f902 	bl	8006ca8 <HAL_TIM_OC_ConfigChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001aaa:	f000 f91f 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001aae:	4803      	ldr	r0, [pc, #12]	@ (8001abc <MX_TIM3_Init+0xac>)
 8001ab0:	f000 fb6e 	bl	8002190 <HAL_TIM_MspPostInit>

}
 8001ab4:	bf00      	nop
 8001ab6:	3728      	adds	r7, #40	@ 0x28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000510 	.word	0x20000510
 8001ac0:	40000400 	.word	0x40000400

08001ac4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ae0:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <MX_TIM4_Init+0xa0>)
 8001ae2:	4a21      	ldr	r2, [pc, #132]	@ (8001b68 <MX_TIM4_Init+0xa4>)
 8001ae4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <MX_TIM4_Init+0xa0>)
 8001ae8:	2263      	movs	r2, #99	@ 0x63
 8001aea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aec:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <MX_TIM4_Init+0xa0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001af2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <MX_TIM4_Init+0xa0>)
 8001af4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001af8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <MX_TIM4_Init+0xa0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b00:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <MX_TIM4_Init+0xa0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001b06:	4817      	ldr	r0, [pc, #92]	@ (8001b64 <MX_TIM4_Init+0xa0>)
 8001b08:	f004 fe66 	bl	80067d8 <HAL_TIM_IC_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001b12:	f000 f8eb 	bl	8001cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	4619      	mov	r1, r3
 8001b24:	480f      	ldr	r0, [pc, #60]	@ (8001b64 <MX_TIM4_Init+0xa0>)
 8001b26:	f005 fe91 	bl	800784c <HAL_TIMEx_MasterConfigSynchronization>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b30:	f000 f8dc 	bl	8001cec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b34:	2300      	movs	r3, #0
 8001b36:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001b44:	463b      	mov	r3, r7
 8001b46:	220c      	movs	r2, #12
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4806      	ldr	r0, [pc, #24]	@ (8001b64 <MX_TIM4_Init+0xa0>)
 8001b4c:	f005 f908 	bl	8006d60 <HAL_TIM_IC_ConfigChannel>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001b56:	f000 f8c9 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000558 	.word	0x20000558
 8001b68:	40000800 	.word	0x40000800

08001b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <MX_DMA_Init+0x4c>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb8 <MX_DMA_Init+0x4c>)
 8001b7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b82:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <MX_DMA_Init+0x4c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2105      	movs	r1, #5
 8001b92:	200b      	movs	r0, #11
 8001b94:	f001 fa19 	bl	8002fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b98:	200b      	movs	r0, #11
 8001b9a:	f001 fa32 	bl	8003002 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2105      	movs	r1, #5
 8001ba2:	2011      	movs	r0, #17
 8001ba4:	f001 fa11 	bl	8002fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ba8:	2011      	movs	r0, #17
 8001baa:	f001 fa2a 	bl	8003002 <HAL_NVIC_EnableIRQ>

}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800

08001bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	@ 0x28
 8001bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b31      	ldr	r3, [pc, #196]	@ (8001c9c <MX_GPIO_Init+0xe0>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4a30      	ldr	r2, [pc, #192]	@ (8001c9c <MX_GPIO_Init+0xe0>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be2:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <MX_GPIO_Init+0xe0>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <MX_GPIO_Init+0xe0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	4a29      	ldr	r2, [pc, #164]	@ (8001c9c <MX_GPIO_Init+0xe0>)
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfe:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <MX_GPIO_Init+0xe0>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <MX_GPIO_Init+0xe0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a22      	ldr	r2, [pc, #136]	@ (8001c9c <MX_GPIO_Init+0xe0>)
 8001c14:	f043 0310 	orr.w	r3, r3, #16
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <MX_GPIO_Init+0xe0>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <MX_GPIO_Init+0xe0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001c9c <MX_GPIO_Init+0xe0>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c36:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <MX_GPIO_Init+0xe0>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2110      	movs	r1, #16
 8001c46:	4816      	ldr	r0, [pc, #88]	@ (8001ca0 <MX_GPIO_Init+0xe4>)
 8001c48:	f001 ff3e 	bl	8003ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c52:	4814      	ldr	r0, [pc, #80]	@ (8001ca4 <MX_GPIO_Init+0xe8>)
 8001c54:	f001 ff38 	bl	8003ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c58:	2310      	movs	r3, #16
 8001c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480c      	ldr	r0, [pc, #48]	@ (8001ca0 <MX_GPIO_Init+0xe4>)
 8001c70:	f001 fd8e 	bl	8003790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <MX_GPIO_Init+0xe8>)
 8001c8e:	f001 fd7f 	bl	8003790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	@ 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020c00 	.word	0x40020c00

08001ca8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8001cb0:	2314      	movs	r3, #20
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	2127      	movs	r1, #39	@ 0x27
 8001cb6:	480a      	ldr	r0, [pc, #40]	@ (8001ce0 <StartDefaultTask+0x38>)
 8001cb8:	f7ff f812 	bl	8000ce0 <lcdInit>

	    // Print text and home position 0,0
	    lcdPrintStr((uint8_t*)"Hello,", 6);
 8001cbc:	2106      	movs	r1, #6
 8001cbe:	4809      	ldr	r0, [pc, #36]	@ (8001ce4 <StartDefaultTask+0x3c>)
 8001cc0:	f7ff f9da 	bl	8001078 <lcdPrintStr>

	    // Set cursor at zero position of line 3
	    lcdSetCursorPosition(0, 2);
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff f9aa 	bl	8001020 <lcdSetCursorPosition>

	    // Print text at cursor position
	    lcdPrintStr((uint8_t*)"World!", 6);
 8001ccc:	2106      	movs	r1, #6
 8001cce:	4806      	ldr	r0, [pc, #24]	@ (8001ce8 <StartDefaultTask+0x40>)
 8001cd0:	f7ff f9d2 	bl	8001078 <lcdPrintStr>

	    for (;;) {
	        vTaskDelay(1000);
 8001cd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cd8:	f006 f9d0 	bl	800807c <vTaskDelay>
 8001cdc:	e7fa      	b.n	8001cd4 <StartDefaultTask+0x2c>
 8001cde:	bf00      	nop
 8001ce0:	2000036c 	.word	0x2000036c
 8001ce4:	080090a8 	.word	0x080090a8
 8001ce8:	080090b0 	.word	0x080090b0

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <Error_Handler+0x8>

08001cf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_MspInit+0x54>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	4a11      	ldr	r2, [pc, #68]	@ (8001d4c <HAL_MspInit+0x54>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <HAL_MspInit+0x54>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_MspInit+0x54>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <HAL_MspInit+0x54>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <HAL_MspInit+0x54>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	210f      	movs	r1, #15
 8001d3a:	f06f 0001 	mvn.w	r0, #1
 8001d3e:	f001 f944 	bl	8002fca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800

08001d50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08e      	sub	sp, #56	@ 0x38
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a51      	ldr	r2, [pc, #324]	@ (8001eb4 <HAL_ADC_MspInit+0x164>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d130      	bne.n	8001dd4 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
 8001d76:	4b50      	ldr	r3, [pc, #320]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d82:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8a:	623b      	str	r3, [r7, #32]
 8001d8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	4b49      	ldr	r3, [pc, #292]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	4a48      	ldr	r2, [pc, #288]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9e:	4b46      	ldr	r3, [pc, #280]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001daa:	2302      	movs	r3, #2
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dae:	2303      	movs	r3, #3
 8001db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dba:	4619      	mov	r1, r3
 8001dbc:	483f      	ldr	r0, [pc, #252]	@ (8001ebc <HAL_ADC_MspInit+0x16c>)
 8001dbe:	f001 fce7 	bl	8003790 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2105      	movs	r1, #5
 8001dc6:	2012      	movs	r0, #18
 8001dc8:	f001 f8ff 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001dcc:	2012      	movs	r0, #18
 8001dce:	f001 f918 	bl	8003002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001dd2:	e06a      	b.n	8001eaa <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a39      	ldr	r2, [pc, #228]	@ (8001ec0 <HAL_ADC_MspInit+0x170>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d130      	bne.n	8001e40 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	4b35      	ldr	r3, [pc, #212]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	4a34      	ldr	r2, [pc, #208]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001de8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dee:	4b32      	ldr	r3, [pc, #200]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a2d      	ldr	r2, [pc, #180]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e16:	2304      	movs	r3, #4
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e26:	4619      	mov	r1, r3
 8001e28:	4824      	ldr	r0, [pc, #144]	@ (8001ebc <HAL_ADC_MspInit+0x16c>)
 8001e2a:	f001 fcb1 	bl	8003790 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2105      	movs	r1, #5
 8001e32:	2012      	movs	r0, #18
 8001e34:	f001 f8c9 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e38:	2012      	movs	r0, #18
 8001e3a:	f001 f8e2 	bl	8003002 <HAL_NVIC_EnableIRQ>
}
 8001e3e:	e034      	b.n	8001eaa <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec4 <HAL_ADC_MspInit+0x174>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d12f      	bne.n	8001eaa <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	4a19      	ldr	r2, [pc, #100]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001e54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e5a:	4b17      	ldr	r3, [pc, #92]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	4a12      	ldr	r2, [pc, #72]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <HAL_ADC_MspInit+0x168>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e82:	2308      	movs	r3, #8
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e86:	2303      	movs	r3, #3
 8001e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e92:	4619      	mov	r1, r3
 8001e94:	4809      	ldr	r0, [pc, #36]	@ (8001ebc <HAL_ADC_MspInit+0x16c>)
 8001e96:	f001 fc7b 	bl	8003790 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	2012      	movs	r0, #18
 8001ea0:	f001 f893 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ea4:	2012      	movs	r0, #18
 8001ea6:	f001 f8ac 	bl	8003002 <HAL_NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3738      	adds	r7, #56	@ 0x38
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40012000 	.word	0x40012000
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	40012100 	.word	0x40012100
 8001ec4:	40012200 	.word	0x40012200

08001ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	@ 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a4f      	ldr	r2, [pc, #316]	@ (8002024 <HAL_I2C_MspInit+0x15c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	f040 8098 	bne.w	800201c <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8002028 <HAL_I2C_MspInit+0x160>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef4:	4a4c      	ldr	r2, [pc, #304]	@ (8002028 <HAL_I2C_MspInit+0x160>)
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efc:	4b4a      	ldr	r3, [pc, #296]	@ (8002028 <HAL_I2C_MspInit+0x160>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f08:	23c0      	movs	r3, #192	@ 0xc0
 8001f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f0c:	2312      	movs	r3, #18
 8001f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f18:	2304      	movs	r3, #4
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4619      	mov	r1, r3
 8001f22:	4842      	ldr	r0, [pc, #264]	@ (800202c <HAL_I2C_MspInit+0x164>)
 8001f24:	f001 fc34 	bl	8003790 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	4b3e      	ldr	r3, [pc, #248]	@ (8002028 <HAL_I2C_MspInit+0x160>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	4a3d      	ldr	r2, [pc, #244]	@ (8002028 <HAL_I2C_MspInit+0x160>)
 8001f32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f38:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <HAL_I2C_MspInit+0x160>)
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001f44:	4b3a      	ldr	r3, [pc, #232]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f46:	4a3b      	ldr	r2, [pc, #236]	@ (8002034 <HAL_I2C_MspInit+0x16c>)
 8001f48:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001f4a:	4b39      	ldr	r3, [pc, #228]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f50:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f52:	4b37      	ldr	r3, [pc, #220]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f54:	2240      	movs	r2, #64	@ 0x40
 8001f56:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f58:	4b35      	ldr	r3, [pc, #212]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f5e:	4b34      	ldr	r3, [pc, #208]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f64:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f66:	4b32      	ldr	r3, [pc, #200]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f6c:	4b30      	ldr	r3, [pc, #192]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001f72:	4b2f      	ldr	r3, [pc, #188]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f78:	4b2d      	ldr	r3, [pc, #180]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001f84:	482a      	ldr	r0, [pc, #168]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f86:	f001 f857 	bl	8003038 <HAL_DMA_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001f90:	f7ff feac 	bl	8001cec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a26      	ldr	r2, [pc, #152]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f98:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f9a:	4a25      	ldr	r2, [pc, #148]	@ (8002030 <HAL_I2C_MspInit+0x168>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001fa0:	4b25      	ldr	r3, [pc, #148]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001fa2:	4a26      	ldr	r2, [pc, #152]	@ (800203c <HAL_I2C_MspInit+0x174>)
 8001fa4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001fa6:	4b24      	ldr	r3, [pc, #144]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001fa8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fac:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fae:	4b22      	ldr	r3, [pc, #136]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb4:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fba:	4b1f      	ldr	r3, [pc, #124]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001fbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fc0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd4:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fda:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001fe0:	4815      	ldr	r0, [pc, #84]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001fe2:	f001 f829 	bl	8003038 <HAL_DMA_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8001fec:	f7ff fe7e 	bl	8001cec <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a11      	ldr	r2, [pc, #68]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001ff4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ff6:	4a10      	ldr	r2, [pc, #64]	@ (8002038 <HAL_I2C_MspInit+0x170>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2105      	movs	r1, #5
 8002000:	201f      	movs	r0, #31
 8002002:	f000 ffe2 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002006:	201f      	movs	r0, #31
 8002008:	f000 fffb 	bl	8003002 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2105      	movs	r1, #5
 8002010:	2020      	movs	r0, #32
 8002012:	f000 ffda 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002016:	2020      	movs	r0, #32
 8002018:	f000 fff3 	bl	8003002 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800201c:	bf00      	nop
 800201e:	3728      	adds	r7, #40	@ 0x28
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40005400 	.word	0x40005400
 8002028:	40023800 	.word	0x40023800
 800202c:	40020400 	.word	0x40020400
 8002030:	200003c0 	.word	0x200003c0
 8002034:	400260a0 	.word	0x400260a0
 8002038:	20000420 	.word	0x20000420
 800203c:	40026010 	.word	0x40026010

08002040 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a15      	ldr	r2, [pc, #84]	@ (80020a4 <HAL_TIM_PWM_MspInit+0x64>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <HAL_TIM_PWM_MspInit+0x68>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	4a13      	ldr	r2, [pc, #76]	@ (80020a8 <HAL_TIM_PWM_MspInit+0x68>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6453      	str	r3, [r2, #68]	@ 0x44
 8002062:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <HAL_TIM_PWM_MspInit+0x68>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800206e:	e012      	b.n	8002096 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002078:	d10d      	bne.n	8002096 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <HAL_TIM_PWM_MspInit+0x68>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	4a09      	ldr	r2, [pc, #36]	@ (80020a8 <HAL_TIM_PWM_MspInit+0x68>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6413      	str	r3, [r2, #64]	@ 0x40
 800208a:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <HAL_TIM_PWM_MspInit+0x68>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40023800 	.word	0x40023800

080020ac <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0b      	ldr	r2, [pc, #44]	@ (80020e8 <HAL_TIM_OC_MspInit+0x3c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10d      	bne.n	80020da <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_TIM_OC_MspInit+0x40>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	4a09      	ldr	r2, [pc, #36]	@ (80020ec <HAL_TIM_OC_MspInit+0x40>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <HAL_TIM_OC_MspInit+0x40>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40000400 	.word	0x40000400
 80020ec:	40023800 	.word	0x40023800

080020f0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	@ 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1d      	ldr	r2, [pc, #116]	@ (8002184 <HAL_TIM_IC_MspInit+0x94>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d134      	bne.n	800217c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	4b1c      	ldr	r3, [pc, #112]	@ (8002188 <HAL_TIM_IC_MspInit+0x98>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	4a1b      	ldr	r2, [pc, #108]	@ (8002188 <HAL_TIM_IC_MspInit+0x98>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	6413      	str	r3, [r2, #64]	@ 0x40
 8002122:	4b19      	ldr	r3, [pc, #100]	@ (8002188 <HAL_TIM_IC_MspInit+0x98>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <HAL_TIM_IC_MspInit+0x98>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	4a14      	ldr	r2, [pc, #80]	@ (8002188 <HAL_TIM_IC_MspInit+0x98>)
 8002138:	f043 0308 	orr.w	r3, r3, #8
 800213c:	6313      	str	r3, [r2, #48]	@ 0x30
 800213e:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <HAL_TIM_IC_MspInit+0x98>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800214a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800214e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800215c:	2302      	movs	r3, #2
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4619      	mov	r1, r3
 8002166:	4809      	ldr	r0, [pc, #36]	@ (800218c <HAL_TIM_IC_MspInit+0x9c>)
 8002168:	f001 fb12 	bl	8003790 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2105      	movs	r1, #5
 8002170:	201e      	movs	r0, #30
 8002172:	f000 ff2a 	bl	8002fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002176:	201e      	movs	r0, #30
 8002178:	f000 ff43 	bl	8003002 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	@ 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40000800 	.word	0x40000800
 8002188:	40023800 	.word	0x40023800
 800218c:	40020c00 	.word	0x40020c00

08002190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a36      	ldr	r2, [pc, #216]	@ (8002288 <HAL_TIM_MspPostInit+0xf8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d11f      	bne.n	80021f2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b35      	ldr	r3, [pc, #212]	@ (800228c <HAL_TIM_MspPostInit+0xfc>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	4a34      	ldr	r2, [pc, #208]	@ (800228c <HAL_TIM_MspPostInit+0xfc>)
 80021bc:	f043 0310 	orr.w	r3, r3, #16
 80021c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c2:	4b32      	ldr	r3, [pc, #200]	@ (800228c <HAL_TIM_MspPostInit+0xfc>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021e0:	2301      	movs	r3, #1
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	4619      	mov	r1, r3
 80021ea:	4829      	ldr	r0, [pc, #164]	@ (8002290 <HAL_TIM_MspPostInit+0x100>)
 80021ec:	f001 fad0 	bl	8003790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021f0:	e046      	b.n	8002280 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021fa:	d11e      	bne.n	800223a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	4b22      	ldr	r3, [pc, #136]	@ (800228c <HAL_TIM_MspPostInit+0xfc>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	4a21      	ldr	r2, [pc, #132]	@ (800228c <HAL_TIM_MspPostInit+0xfc>)
 8002206:	f043 0302 	orr.w	r3, r3, #2
 800220a:	6313      	str	r3, [r2, #48]	@ 0x30
 800220c:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <HAL_TIM_MspPostInit+0xfc>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002218:	2308      	movs	r3, #8
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002228:	2301      	movs	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4818      	ldr	r0, [pc, #96]	@ (8002294 <HAL_TIM_MspPostInit+0x104>)
 8002234:	f001 faac 	bl	8003790 <HAL_GPIO_Init>
}
 8002238:	e022      	b.n	8002280 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a16      	ldr	r2, [pc, #88]	@ (8002298 <HAL_TIM_MspPostInit+0x108>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d11d      	bne.n	8002280 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	4b10      	ldr	r3, [pc, #64]	@ (800228c <HAL_TIM_MspPostInit+0xfc>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	4a0f      	ldr	r2, [pc, #60]	@ (800228c <HAL_TIM_MspPostInit+0xfc>)
 800224e:	f043 0302 	orr.w	r3, r3, #2
 8002252:	6313      	str	r3, [r2, #48]	@ 0x30
 8002254:	4b0d      	ldr	r3, [pc, #52]	@ (800228c <HAL_TIM_MspPostInit+0xfc>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002260:	2301      	movs	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002270:	2302      	movs	r3, #2
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	4806      	ldr	r0, [pc, #24]	@ (8002294 <HAL_TIM_MspPostInit+0x104>)
 800227c:	f001 fa88 	bl	8003790 <HAL_GPIO_Init>
}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	@ 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40010000 	.word	0x40010000
 800228c:	40023800 	.word	0x40023800
 8002290:	40021000 	.word	0x40021000
 8002294:	40020400 	.word	0x40020400
 8002298:	40000400 	.word	0x40000400

0800229c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <NMI_Handler+0x4>

080022a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <HardFault_Handler+0x4>

080022ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <MemManage_Handler+0x4>

080022b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <BusFault_Handler+0x4>

080022bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <UsageFault_Handler+0x4>

080022c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d6:	f000 f8dd 	bl	8002494 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022da:	f006 fa0f 	bl	80086fc <xTaskGetSchedulerState>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d001      	beq.n	80022e8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022e4:	f006 fc50 	bl	8008b88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}

080022ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <DMA1_Stream0_IRQHandler+0x10>)
 80022f2:	f000 ffc9 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000420 	.word	0x20000420

08002300 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002304:	4802      	ldr	r0, [pc, #8]	@ (8002310 <DMA1_Stream6_IRQHandler+0x10>)
 8002306:	f000 ffbf 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200003c0 	.word	0x200003c0

08002314 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002318:	4805      	ldr	r0, [pc, #20]	@ (8002330 <ADC_IRQHandler+0x1c>)
 800231a:	f000 fa21 	bl	8002760 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800231e:	4805      	ldr	r0, [pc, #20]	@ (8002334 <ADC_IRQHandler+0x20>)
 8002320:	f000 fa1e 	bl	8002760 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8002324:	4804      	ldr	r0, [pc, #16]	@ (8002338 <ADC_IRQHandler+0x24>)
 8002326:	f000 fa1b 	bl	8002760 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000294 	.word	0x20000294
 8002334:	200002dc 	.word	0x200002dc
 8002338:	20000324 	.word	0x20000324

0800233c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <TIM4_IRQHandler+0x10>)
 8002342:	f004 fbc1 	bl	8006ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000558 	.word	0x20000558

08002350 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <I2C1_EV_IRQHandler+0x10>)
 8002356:	f001 fe57 	bl	8004008 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2000036c 	.word	0x2000036c

08002364 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <I2C1_ER_IRQHandler+0x10>)
 800236a:	f001 ffa0 	bl	80042ae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	2000036c 	.word	0x2000036c

08002378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <SystemInit+0x20>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002382:	4a05      	ldr	r2, [pc, #20]	@ (8002398 <SystemInit+0x20>)
 8002384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800239c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023a0:	f7ff ffea 	bl	8002378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023a4:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023a6:	490d      	ldr	r1, [pc, #52]	@ (80023dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023a8:	4a0d      	ldr	r2, [pc, #52]	@ (80023e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ac:	e002      	b.n	80023b4 <LoopCopyDataInit>

080023ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023b2:	3304      	adds	r3, #4

080023b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b8:	d3f9      	bcc.n	80023ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ba:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023bc:	4c0a      	ldr	r4, [pc, #40]	@ (80023e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c0:	e001      	b.n	80023c6 <LoopFillZerobss>

080023c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c4:	3204      	adds	r2, #4

080023c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c8:	d3fb      	bcc.n	80023c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ca:	f006 fe23 	bl	8009014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ce:	f7ff f83d 	bl	800144c <main>
  bx  lr    
 80023d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023dc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80023e0:	080090f4 	.word	0x080090f4
  ldr r2, =_sbss
 80023e4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80023e8:	20004318 	.word	0x20004318

080023ec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023ec:	e7fe      	b.n	80023ec <CAN1_RX0_IRQHandler>
	...

080023f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <HAL_Init+0x40>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002430 <HAL_Init+0x40>)
 80023fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002400:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <HAL_Init+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <HAL_Init+0x40>)
 8002406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800240a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800240c:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <HAL_Init+0x40>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a07      	ldr	r2, [pc, #28]	@ (8002430 <HAL_Init+0x40>)
 8002412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002418:	2003      	movs	r0, #3
 800241a:	f000 fdcb 	bl	8002fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241e:	200f      	movs	r0, #15
 8002420:	f000 f808 	bl	8002434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002424:	f7ff fc68 	bl	8001cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40023c00 	.word	0x40023c00

08002434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_InitTick+0x54>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b12      	ldr	r3, [pc, #72]	@ (800248c <HAL_InitTick+0x58>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800244a:	fbb3 f3f1 	udiv	r3, r3, r1
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fde3 	bl	800301e <HAL_SYSTICK_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e00e      	b.n	8002480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b0f      	cmp	r3, #15
 8002466:	d80a      	bhi.n	800247e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002468:	2200      	movs	r2, #0
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f000 fdab 	bl	8002fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002474:	4a06      	ldr	r2, [pc, #24]	@ (8002490 <HAL_InitTick+0x5c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000000 	.word	0x20000000
 800248c:	20000008 	.word	0x20000008
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_IncTick+0x20>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_IncTick+0x24>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	4a04      	ldr	r2, [pc, #16]	@ (80024b8 <HAL_IncTick+0x24>)
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000008 	.word	0x20000008
 80024b8:	200005c0 	.word	0x200005c0

080024bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return uwTick;
 80024c0:	4b03      	ldr	r3, [pc, #12]	@ (80024d0 <HAL_GetTick+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	200005c0 	.word	0x200005c0

080024d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff ffee 	bl	80024bc <HAL_GetTick>
 80024e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d005      	beq.n	80024fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <HAL_Delay+0x44>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4413      	add	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024fa:	bf00      	nop
 80024fc:	f7ff ffde 	bl	80024bc <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	429a      	cmp	r2, r3
 800250a:	d8f7      	bhi.n	80024fc <HAL_Delay+0x28>
  {
  }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000008 	.word	0x20000008

0800251c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e033      	b.n	800259a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff fc08 	bl	8001d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b00      	cmp	r3, #0
 8002558:	d118      	bne.n	800258c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002562:	f023 0302 	bic.w	r3, r3, #2
 8002566:	f043 0202 	orr.w	r2, r3, #2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fb4a 	bl	8002c08 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	f023 0303 	bic.w	r3, r3, #3
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	641a      	str	r2, [r3, #64]	@ 0x40
 800258a:	e001      	b.n	8002590 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_ADC_Start_IT+0x1a>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e0bd      	b.n	800273a <HAL_ADC_Start_IT+0x196>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d018      	beq.n	8002606 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025e4:	4b58      	ldr	r3, [pc, #352]	@ (8002748 <HAL_ADC_Start_IT+0x1a4>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a58      	ldr	r2, [pc, #352]	@ (800274c <HAL_ADC_Start_IT+0x1a8>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0c9a      	lsrs	r2, r3, #18
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80025f8:	e002      	b.n	8002600 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f9      	bne.n	80025fa <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b01      	cmp	r3, #1
 8002612:	f040 8085 	bne.w	8002720 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002640:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002654:	d106      	bne.n	8002664 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	f023 0206 	bic.w	r2, r3, #6
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	645a      	str	r2, [r3, #68]	@ 0x44
 8002662:	e002      	b.n	800266a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002672:	4b37      	ldr	r3, [pc, #220]	@ (8002750 <HAL_ADC_Start_IT+0x1ac>)
 8002674:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800267e:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800268e:	f043 0320 	orr.w	r3, r3, #32
 8002692:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	2b00      	cmp	r3, #0
 800269e:	d12a      	bne.n	80026f6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002754 <HAL_ADC_Start_IT+0x1b0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d015      	beq.n	80026d6 <HAL_ADC_Start_IT+0x132>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002758 <HAL_ADC_Start_IT+0x1b4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d105      	bne.n	80026c0 <HAL_ADC_Start_IT+0x11c>
 80026b4:	4b26      	ldr	r3, [pc, #152]	@ (8002750 <HAL_ADC_Start_IT+0x1ac>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a25      	ldr	r2, [pc, #148]	@ (800275c <HAL_ADC_Start_IT+0x1b8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d136      	bne.n	8002738 <HAL_ADC_Start_IT+0x194>
 80026ca:	4b21      	ldr	r3, [pc, #132]	@ (8002750 <HAL_ADC_Start_IT+0x1ac>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d130      	bne.n	8002738 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d129      	bne.n	8002738 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	e020      	b.n	8002738 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a16      	ldr	r2, [pc, #88]	@ (8002754 <HAL_ADC_Start_IT+0x1b0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d11b      	bne.n	8002738 <HAL_ADC_Start_IT+0x194>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d114      	bne.n	8002738 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	e00b      	b.n	8002738 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	f043 0210 	orr.w	r2, r3, #16
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002730:	f043 0201 	orr.w	r2, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000000 	.word	0x20000000
 800274c:	431bde83 	.word	0x431bde83
 8002750:	40012300 	.word	0x40012300
 8002754:	40012000 	.word	0x40012000
 8002758:	40012100 	.word	0x40012100
 800275c:	40012200 	.word	0x40012200

08002760 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d049      	beq.n	800282a <HAL_ADC_IRQHandler+0xca>
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d046      	beq.n	800282a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d12b      	bne.n	800281a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d127      	bne.n	800281a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d119      	bne.n	800281a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0220 	bic.w	r2, r2, #32
 80027f4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d105      	bne.n	800281a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe fd00 	bl	8001220 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0212 	mvn.w	r2, #18
 8002828:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002838:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d057      	beq.n	80028f0 <HAL_ADC_IRQHandler+0x190>
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d054      	beq.n	80028f0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b00      	cmp	r3, #0
 8002850:	d105      	bne.n	800285e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d139      	bne.n	80028e0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002872:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002876:	2b00      	cmp	r3, #0
 8002878:	d006      	beq.n	8002888 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002884:	2b00      	cmp	r3, #0
 8002886:	d12b      	bne.n	80028e0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002892:	2b00      	cmp	r3, #0
 8002894:	d124      	bne.n	80028e0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d11d      	bne.n	80028e0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d119      	bne.n	80028e0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028ba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fa8d 	bl	8002e00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f06f 020c 	mvn.w	r2, #12
 80028ee:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fe:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d017      	beq.n	8002936 <HAL_ADC_IRQHandler+0x1d6>
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d014      	beq.n	8002936 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b01      	cmp	r3, #1
 8002918:	d10d      	bne.n	8002936 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f837 	bl	800299a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0201 	mvn.w	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002944:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d015      	beq.n	8002978 <HAL_ADC_IRQHandler+0x218>
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d012      	beq.n	8002978 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	f043 0202 	orr.w	r2, r3, #2
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f06f 0220 	mvn.w	r2, #32
 8002966:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f820 	bl	80029ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f06f 0220 	mvn.w	r2, #32
 8002976:	601a      	str	r2, [r3, #0]
  }
}
 8002978:	bf00      	nop
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x1c>
 80029dc:	2302      	movs	r3, #2
 80029de:	e105      	b.n	8002bec <HAL_ADC_ConfigChannel+0x228>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	d925      	bls.n	8002a3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68d9      	ldr	r1, [r3, #12]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	3b1e      	subs	r3, #30
 8002a06:	2207      	movs	r2, #7
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43da      	mvns	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	400a      	ands	r2, r1
 8002a14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68d9      	ldr	r1, [r3, #12]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	4618      	mov	r0, r3
 8002a28:	4603      	mov	r3, r0
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4403      	add	r3, r0
 8002a2e:	3b1e      	subs	r3, #30
 8002a30:	409a      	lsls	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	e022      	b.n	8002a82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6919      	ldr	r1, [r3, #16]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	2207      	movs	r2, #7
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43da      	mvns	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6919      	ldr	r1, [r3, #16]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	4603      	mov	r3, r0
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4403      	add	r3, r0
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d824      	bhi.n	8002ad4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	3b05      	subs	r3, #5
 8002a9c:	221f      	movs	r2, #31
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	4618      	mov	r0, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b05      	subs	r3, #5
 8002ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ad2:	e04c      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d824      	bhi.n	8002b26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	3b23      	subs	r3, #35	@ 0x23
 8002aee:	221f      	movs	r2, #31
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43da      	mvns	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	400a      	ands	r2, r1
 8002afc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	3b23      	subs	r3, #35	@ 0x23
 8002b18:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b24:	e023      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	3b41      	subs	r3, #65	@ 0x41
 8002b38:	221f      	movs	r2, #31
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	400a      	ands	r2, r1
 8002b46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	4618      	mov	r0, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	3b41      	subs	r3, #65	@ 0x41
 8002b62:	fa00 f203 	lsl.w	r2, r0, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b6e:	4b22      	ldr	r3, [pc, #136]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x234>)
 8002b70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a21      	ldr	r2, [pc, #132]	@ (8002bfc <HAL_ADC_ConfigChannel+0x238>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d109      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x1cc>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b12      	cmp	r3, #18
 8002b82:	d105      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a19      	ldr	r2, [pc, #100]	@ (8002bfc <HAL_ADC_ConfigChannel+0x238>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d123      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x21e>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b10      	cmp	r3, #16
 8002ba0:	d003      	beq.n	8002baa <HAL_ADC_ConfigChannel+0x1e6>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b11      	cmp	r3, #17
 8002ba8:	d11b      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d111      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bbe:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <HAL_ADC_ConfigChannel+0x23c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a10      	ldr	r2, [pc, #64]	@ (8002c04 <HAL_ADC_ConfigChannel+0x240>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	0c9a      	lsrs	r2, r3, #18
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bd4:	e002      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f9      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	40012300 	.word	0x40012300
 8002bfc:	40012000 	.word	0x40012000
 8002c00:	20000000 	.word	0x20000000
 8002c04:	431bde83 	.word	0x431bde83

08002c08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c10:	4b79      	ldr	r3, [pc, #484]	@ (8002df8 <ADC_Init+0x1f0>)
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	021a      	lsls	r2, r3, #8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689a      	ldr	r2, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6899      	ldr	r1, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	4a58      	ldr	r2, [pc, #352]	@ (8002dfc <ADC_Init+0x1f4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d022      	beq.n	8002ce6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6899      	ldr	r1, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6899      	ldr	r1, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	e00f      	b.n	8002d06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d04:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0202 	bic.w	r2, r2, #2
 8002d14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6899      	ldr	r1, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7e1b      	ldrb	r3, [r3, #24]
 8002d20:	005a      	lsls	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01b      	beq.n	8002d6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d42:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6859      	ldr	r1, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	035a      	lsls	r2, r3, #13
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	e007      	b.n	8002d7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d7a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	051a      	lsls	r2, r3, #20
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002db0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6899      	ldr	r1, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dbe:	025a      	lsls	r2, r3, #9
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6899      	ldr	r1, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	029a      	lsls	r2, r3, #10
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40012300 	.word	0x40012300
 8002dfc:	0f000001 	.word	0x0f000001

08002e00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e24:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <__NVIC_SetPriorityGrouping+0x44>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e30:	4013      	ands	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e46:	4a04      	ldr	r2, [pc, #16]	@ (8002e58 <__NVIC_SetPriorityGrouping+0x44>)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	60d3      	str	r3, [r2, #12]
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e60:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <__NVIC_GetPriorityGrouping+0x18>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f003 0307 	and.w	r3, r3, #7
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	db0b      	blt.n	8002ea2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	f003 021f 	and.w	r2, r3, #31
 8002e90:	4907      	ldr	r1, [pc, #28]	@ (8002eb0 <__NVIC_EnableIRQ+0x38>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2001      	movs	r0, #1
 8002e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000e100 	.word	0xe000e100

08002eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	6039      	str	r1, [r7, #0]
 8002ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	db0a      	blt.n	8002ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	490c      	ldr	r1, [pc, #48]	@ (8002f00 <__NVIC_SetPriority+0x4c>)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	0112      	lsls	r2, r2, #4
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002edc:	e00a      	b.n	8002ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	4908      	ldr	r1, [pc, #32]	@ (8002f04 <__NVIC_SetPriority+0x50>)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	3b04      	subs	r3, #4
 8002eec:	0112      	lsls	r2, r2, #4
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	761a      	strb	r2, [r3, #24]
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000e100 	.word	0xe000e100
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	@ 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f1c3 0307 	rsb	r3, r3, #7
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	bf28      	it	cs
 8002f26:	2304      	movcs	r3, #4
 8002f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d902      	bls.n	8002f38 <NVIC_EncodePriority+0x30>
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3b03      	subs	r3, #3
 8002f36:	e000      	b.n	8002f3a <NVIC_EncodePriority+0x32>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43da      	mvns	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f50:	f04f 31ff 	mov.w	r1, #4294967295
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	43d9      	mvns	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	4313      	orrs	r3, r2
         );
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3724      	adds	r7, #36	@ 0x24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f80:	d301      	bcc.n	8002f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f82:	2301      	movs	r3, #1
 8002f84:	e00f      	b.n	8002fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f86:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb0 <SysTick_Config+0x40>)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f8e:	210f      	movs	r1, #15
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	f7ff ff8e 	bl	8002eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f98:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <SysTick_Config+0x40>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f9e:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <SysTick_Config+0x40>)
 8002fa0:	2207      	movs	r2, #7
 8002fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	e000e010 	.word	0xe000e010

08002fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ff29 	bl	8002e14 <__NVIC_SetPriorityGrouping>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fdc:	f7ff ff3e 	bl	8002e5c <__NVIC_GetPriorityGrouping>
 8002fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	6978      	ldr	r0, [r7, #20]
 8002fe8:	f7ff ff8e 	bl	8002f08 <NVIC_EncodePriority>
 8002fec:	4602      	mov	r2, r0
 8002fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ff5d 	bl	8002eb4 <__NVIC_SetPriority>
}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800300c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff31 	bl	8002e78 <__NVIC_EnableIRQ>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b082      	sub	sp, #8
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ffa2 	bl	8002f70 <SysTick_Config>
 800302c:	4603      	mov	r3, r0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
	...

08003038 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003044:	f7ff fa3a 	bl	80024bc <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e099      	b.n	8003188 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003074:	e00f      	b.n	8003096 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003076:	f7ff fa21 	bl	80024bc <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b05      	cmp	r3, #5
 8003082:	d908      	bls.n	8003096 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2203      	movs	r2, #3
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e078      	b.n	8003188 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1e8      	bne.n	8003076 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	4b38      	ldr	r3, [pc, #224]	@ (8003190 <HAL_DMA_Init+0x158>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d107      	bne.n	8003100 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f8:	4313      	orrs	r3, r2
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f023 0307 	bic.w	r3, r3, #7
 8003116:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	2b04      	cmp	r3, #4
 8003128:	d117      	bne.n	800315a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00e      	beq.n	800315a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 faab 	bl	8003698 <DMA_CheckFifoParam>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2240      	movs	r2, #64	@ 0x40
 800314c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003156:	2301      	movs	r3, #1
 8003158:	e016      	b.n	8003188 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fa62 	bl	800362c <DMA_CalcBaseAndBitshift>
 8003168:	4603      	mov	r3, r0
 800316a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	223f      	movs	r2, #63	@ 0x3f
 8003172:	409a      	lsls	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	f010803f 	.word	0xf010803f

08003194 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_DMA_Start_IT+0x26>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e040      	b.n	800323c <HAL_DMA_Start_IT+0xa8>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d12f      	bne.n	800322e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f9f4 	bl	80035d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ec:	223f      	movs	r2, #63	@ 0x3f
 80031ee:	409a      	lsls	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0216 	orr.w	r2, r2, #22
 8003202:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0208 	orr.w	r2, r2, #8
 800321a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0201 	orr.w	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	e005      	b.n	800323a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003236:	2302      	movs	r3, #2
 8003238:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800323a:	7dfb      	ldrb	r3, [r7, #23]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d004      	beq.n	8003262 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2280      	movs	r2, #128	@ 0x80
 800325c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e00c      	b.n	800327c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2205      	movs	r2, #5
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003294:	4b8e      	ldr	r3, [pc, #568]	@ (80034d0 <HAL_DMA_IRQHandler+0x248>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a8e      	ldr	r2, [pc, #568]	@ (80034d4 <HAL_DMA_IRQHandler+0x24c>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	0a9b      	lsrs	r3, r3, #10
 80032a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b2:	2208      	movs	r2, #8
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01a      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0204 	bic.w	r2, r2, #4
 80032da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e0:	2208      	movs	r2, #8
 80032e2:	409a      	lsls	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f8:	2201      	movs	r2, #1
 80032fa:	409a      	lsls	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003316:	2201      	movs	r2, #1
 8003318:	409a      	lsls	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003322:	f043 0202 	orr.w	r2, r3, #2
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332e:	2204      	movs	r2, #4
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d012      	beq.n	8003360 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	2204      	movs	r2, #4
 800334e:	409a      	lsls	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003364:	2210      	movs	r2, #16
 8003366:	409a      	lsls	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d043      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d03c      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003382:	2210      	movs	r2, #16
 8003384:	409a      	lsls	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d018      	beq.n	80033ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d108      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d024      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
 80033b6:	e01f      	b.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01b      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
 80033c8:	e016      	b.n	80033f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d107      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0208 	bic.w	r2, r2, #8
 80033e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fc:	2220      	movs	r2, #32
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 808f 	beq.w	8003528 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8087 	beq.w	8003528 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	2220      	movs	r2, #32
 8003420:	409a      	lsls	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b05      	cmp	r3, #5
 8003430:	d136      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0216 	bic.w	r2, r2, #22
 8003440:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003450:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_DMA_IRQHandler+0x1da>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0208 	bic.w	r2, r2, #8
 8003470:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003476:	223f      	movs	r2, #63	@ 0x3f
 8003478:	409a      	lsls	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003492:	2b00      	cmp	r3, #0
 8003494:	d07e      	beq.n	8003594 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
        }
        return;
 800349e:	e079      	b.n	8003594 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01d      	beq.n	80034ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10d      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d031      	beq.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
 80034cc:	e02c      	b.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000
 80034d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d023      	beq.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
 80034e8:	e01e      	b.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10f      	bne.n	8003518 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0210 	bic.w	r2, r2, #16
 8003506:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352c:	2b00      	cmp	r3, #0
 800352e:	d032      	beq.n	8003596 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d022      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2205      	movs	r2, #5
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0201 	bic.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	3301      	adds	r3, #1
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	429a      	cmp	r2, r3
 800355e:	d307      	bcc.n	8003570 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f2      	bne.n	8003554 <HAL_DMA_IRQHandler+0x2cc>
 800356e:	e000      	b.n	8003572 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003570:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
 8003592:	e000      	b.n	8003596 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003594:	bf00      	nop
    }
  }
}
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035aa:	b2db      	uxtb	r3, r3
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80035ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b40      	cmp	r3, #64	@ 0x40
 80035fc:	d108      	bne.n	8003610 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800360e:	e007      	b.n	8003620 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	60da      	str	r2, [r3, #12]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	3b10      	subs	r3, #16
 800363c:	4a14      	ldr	r2, [pc, #80]	@ (8003690 <DMA_CalcBaseAndBitshift+0x64>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003646:	4a13      	ldr	r2, [pc, #76]	@ (8003694 <DMA_CalcBaseAndBitshift+0x68>)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d909      	bls.n	800366e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003662:	f023 0303 	bic.w	r3, r3, #3
 8003666:	1d1a      	adds	r2, r3, #4
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	659a      	str	r2, [r3, #88]	@ 0x58
 800366c:	e007      	b.n	800367e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003682:	4618      	mov	r0, r3
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	aaaaaaab 	.word	0xaaaaaaab
 8003694:	080090dc 	.word	0x080090dc

08003698 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11f      	bne.n	80036f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d856      	bhi.n	8003766 <DMA_CheckFifoParam+0xce>
 80036b8:	a201      	add	r2, pc, #4	@ (adr r2, 80036c0 <DMA_CheckFifoParam+0x28>)
 80036ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036be:	bf00      	nop
 80036c0:	080036d1 	.word	0x080036d1
 80036c4:	080036e3 	.word	0x080036e3
 80036c8:	080036d1 	.word	0x080036d1
 80036cc:	08003767 	.word	0x08003767
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d046      	beq.n	800376a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e0:	e043      	b.n	800376a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036ea:	d140      	bne.n	800376e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f0:	e03d      	b.n	800376e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036fa:	d121      	bne.n	8003740 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d837      	bhi.n	8003772 <DMA_CheckFifoParam+0xda>
 8003702:	a201      	add	r2, pc, #4	@ (adr r2, 8003708 <DMA_CheckFifoParam+0x70>)
 8003704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003708:	08003719 	.word	0x08003719
 800370c:	0800371f 	.word	0x0800371f
 8003710:	08003719 	.word	0x08003719
 8003714:	08003731 	.word	0x08003731
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      break;
 800371c:	e030      	b.n	8003780 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d025      	beq.n	8003776 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372e:	e022      	b.n	8003776 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003734:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003738:	d11f      	bne.n	800377a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800373e:	e01c      	b.n	800377a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d903      	bls.n	800374e <DMA_CheckFifoParam+0xb6>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b03      	cmp	r3, #3
 800374a:	d003      	beq.n	8003754 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800374c:	e018      	b.n	8003780 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
      break;
 8003752:	e015      	b.n	8003780 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00e      	beq.n	800377e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      break;
 8003764:	e00b      	b.n	800377e <DMA_CheckFifoParam+0xe6>
      break;
 8003766:	bf00      	nop
 8003768:	e00a      	b.n	8003780 <DMA_CheckFifoParam+0xe8>
      break;
 800376a:	bf00      	nop
 800376c:	e008      	b.n	8003780 <DMA_CheckFifoParam+0xe8>
      break;
 800376e:	bf00      	nop
 8003770:	e006      	b.n	8003780 <DMA_CheckFifoParam+0xe8>
      break;
 8003772:	bf00      	nop
 8003774:	e004      	b.n	8003780 <DMA_CheckFifoParam+0xe8>
      break;
 8003776:	bf00      	nop
 8003778:	e002      	b.n	8003780 <DMA_CheckFifoParam+0xe8>
      break;   
 800377a:	bf00      	nop
 800377c:	e000      	b.n	8003780 <DMA_CheckFifoParam+0xe8>
      break;
 800377e:	bf00      	nop
    }
  } 
  
  return status; 
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop

08003790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	@ 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	e16b      	b.n	8003a84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037ac:	2201      	movs	r2, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	f040 815a 	bne.w	8003a7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d005      	beq.n	80037e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d130      	bne.n	8003844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	2203      	movs	r2, #3
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4013      	ands	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003818:	2201      	movs	r2, #1
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 0201 	and.w	r2, r3, #1
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b03      	cmp	r3, #3
 800384e:	d017      	beq.n	8003880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d123      	bne.n	80038d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	08da      	lsrs	r2, r3, #3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3208      	adds	r2, #8
 8003894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	220f      	movs	r2, #15
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	08da      	lsrs	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3208      	adds	r2, #8
 80038ce:	69b9      	ldr	r1, [r7, #24]
 80038d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	2203      	movs	r2, #3
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0203 	and.w	r2, r3, #3
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80b4 	beq.w	8003a7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	4b60      	ldr	r3, [pc, #384]	@ (8003a9c <HAL_GPIO_Init+0x30c>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391e:	4a5f      	ldr	r2, [pc, #380]	@ (8003a9c <HAL_GPIO_Init+0x30c>)
 8003920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003924:	6453      	str	r3, [r2, #68]	@ 0x44
 8003926:	4b5d      	ldr	r3, [pc, #372]	@ (8003a9c <HAL_GPIO_Init+0x30c>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003932:	4a5b      	ldr	r2, [pc, #364]	@ (8003aa0 <HAL_GPIO_Init+0x310>)
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	3302      	adds	r3, #2
 800393a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	220f      	movs	r2, #15
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a52      	ldr	r2, [pc, #328]	@ (8003aa4 <HAL_GPIO_Init+0x314>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d02b      	beq.n	80039b6 <HAL_GPIO_Init+0x226>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a51      	ldr	r2, [pc, #324]	@ (8003aa8 <HAL_GPIO_Init+0x318>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d025      	beq.n	80039b2 <HAL_GPIO_Init+0x222>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a50      	ldr	r2, [pc, #320]	@ (8003aac <HAL_GPIO_Init+0x31c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d01f      	beq.n	80039ae <HAL_GPIO_Init+0x21e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a4f      	ldr	r2, [pc, #316]	@ (8003ab0 <HAL_GPIO_Init+0x320>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d019      	beq.n	80039aa <HAL_GPIO_Init+0x21a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a4e      	ldr	r2, [pc, #312]	@ (8003ab4 <HAL_GPIO_Init+0x324>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_GPIO_Init+0x216>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a4d      	ldr	r2, [pc, #308]	@ (8003ab8 <HAL_GPIO_Init+0x328>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d00d      	beq.n	80039a2 <HAL_GPIO_Init+0x212>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4c      	ldr	r2, [pc, #304]	@ (8003abc <HAL_GPIO_Init+0x32c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d007      	beq.n	800399e <HAL_GPIO_Init+0x20e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a4b      	ldr	r2, [pc, #300]	@ (8003ac0 <HAL_GPIO_Init+0x330>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d101      	bne.n	800399a <HAL_GPIO_Init+0x20a>
 8003996:	2307      	movs	r3, #7
 8003998:	e00e      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 800399a:	2308      	movs	r3, #8
 800399c:	e00c      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 800399e:	2306      	movs	r3, #6
 80039a0:	e00a      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 80039a2:	2305      	movs	r3, #5
 80039a4:	e008      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 80039a6:	2304      	movs	r3, #4
 80039a8:	e006      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 80039aa:	2303      	movs	r3, #3
 80039ac:	e004      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e002      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_GPIO_Init+0x228>
 80039b6:	2300      	movs	r3, #0
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	f002 0203 	and.w	r2, r2, #3
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	4093      	lsls	r3, r2
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039c8:	4935      	ldr	r1, [pc, #212]	@ (8003aa0 <HAL_GPIO_Init+0x310>)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	089b      	lsrs	r3, r3, #2
 80039ce:	3302      	adds	r3, #2
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039d6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac4 <HAL_GPIO_Init+0x334>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039fa:	4a32      	ldr	r2, [pc, #200]	@ (8003ac4 <HAL_GPIO_Init+0x334>)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a00:	4b30      	ldr	r3, [pc, #192]	@ (8003ac4 <HAL_GPIO_Init+0x334>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a24:	4a27      	ldr	r2, [pc, #156]	@ (8003ac4 <HAL_GPIO_Init+0x334>)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a2a:	4b26      	ldr	r3, [pc, #152]	@ (8003ac4 <HAL_GPIO_Init+0x334>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	4013      	ands	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac4 <HAL_GPIO_Init+0x334>)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a54:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac4 <HAL_GPIO_Init+0x334>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a78:	4a12      	ldr	r2, [pc, #72]	@ (8003ac4 <HAL_GPIO_Init+0x334>)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3301      	adds	r3, #1
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b0f      	cmp	r3, #15
 8003a88:	f67f ae90 	bls.w	80037ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	3724      	adds	r7, #36	@ 0x24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40013800 	.word	0x40013800
 8003aa4:	40020000 	.word	0x40020000
 8003aa8:	40020400 	.word	0x40020400
 8003aac:	40020800 	.word	0x40020800
 8003ab0:	40020c00 	.word	0x40020c00
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40021400 	.word	0x40021400
 8003abc:	40021800 	.word	0x40021800
 8003ac0:	40021c00 	.word	0x40021c00
 8003ac4:	40013c00 	.word	0x40013c00

08003ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ad8:	787b      	ldrb	r3, [r7, #1]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ade:	887a      	ldrh	r2, [r7, #2]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ae4:	e003      	b.n	8003aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ae6:	887b      	ldrh	r3, [r7, #2]
 8003ae8:	041a      	lsls	r2, r3, #16
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	619a      	str	r2, [r3, #24]
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e12b      	b.n	8003d66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fe f9d0 	bl	8001ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	@ 0x24
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b60:	f002 fcc0 	bl	80064e4 <HAL_RCC_GetPCLK1Freq>
 8003b64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4a81      	ldr	r2, [pc, #516]	@ (8003d70 <HAL_I2C_Init+0x274>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d807      	bhi.n	8003b80 <HAL_I2C_Init+0x84>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a80      	ldr	r2, [pc, #512]	@ (8003d74 <HAL_I2C_Init+0x278>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	bf94      	ite	ls
 8003b78:	2301      	movls	r3, #1
 8003b7a:	2300      	movhi	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	e006      	b.n	8003b8e <HAL_I2C_Init+0x92>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4a7d      	ldr	r2, [pc, #500]	@ (8003d78 <HAL_I2C_Init+0x27c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	bf94      	ite	ls
 8003b88:	2301      	movls	r3, #1
 8003b8a:	2300      	movhi	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0e7      	b.n	8003d66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4a78      	ldr	r2, [pc, #480]	@ (8003d7c <HAL_I2C_Init+0x280>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0c9b      	lsrs	r3, r3, #18
 8003ba0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	4a6a      	ldr	r2, [pc, #424]	@ (8003d70 <HAL_I2C_Init+0x274>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d802      	bhi.n	8003bd0 <HAL_I2C_Init+0xd4>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	e009      	b.n	8003be4 <HAL_I2C_Init+0xe8>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	4a69      	ldr	r2, [pc, #420]	@ (8003d80 <HAL_I2C_Init+0x284>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	3301      	adds	r3, #1
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bf6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	495c      	ldr	r1, [pc, #368]	@ (8003d70 <HAL_I2C_Init+0x274>)
 8003c00:	428b      	cmp	r3, r1
 8003c02:	d819      	bhi.n	8003c38 <HAL_I2C_Init+0x13c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	1e59      	subs	r1, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c12:	1c59      	adds	r1, r3, #1
 8003c14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c18:	400b      	ands	r3, r1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_I2C_Init+0x138>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1e59      	subs	r1, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c32:	e051      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c34:	2304      	movs	r3, #4
 8003c36:	e04f      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d111      	bne.n	8003c64 <HAL_I2C_Init+0x168>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1e58      	subs	r0, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	440b      	add	r3, r1
 8003c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c52:	3301      	adds	r3, #1
 8003c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e012      	b.n	8003c8a <HAL_I2C_Init+0x18e>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1e58      	subs	r0, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	0099      	lsls	r1, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf0c      	ite	eq
 8003c84:	2301      	moveq	r3, #1
 8003c86:	2300      	movne	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Init+0x196>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e022      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10e      	bne.n	8003cb8 <HAL_I2C_Init+0x1bc>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1e58      	subs	r0, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	440b      	add	r3, r1
 8003ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cac:	3301      	adds	r3, #1
 8003cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cb6:	e00f      	b.n	8003cd8 <HAL_I2C_Init+0x1dc>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1e58      	subs	r0, r3, #1
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6859      	ldr	r1, [r3, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	0099      	lsls	r1, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	6809      	ldr	r1, [r1, #0]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69da      	ldr	r2, [r3, #28]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6911      	ldr	r1, [r2, #16]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	68d2      	ldr	r2, [r2, #12]
 8003d12:	4311      	orrs	r1, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	000186a0 	.word	0x000186a0
 8003d74:	001e847f 	.word	0x001e847f
 8003d78:	003d08ff 	.word	0x003d08ff
 8003d7c:	431bde83 	.word	0x431bde83
 8003d80:	10624dd3 	.word	0x10624dd3

08003d84 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d96:	2b80      	cmp	r3, #128	@ 0x80
 8003d98:	d103      	bne.n	8003da2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	611a      	str	r2, [r3, #16]
  }
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	817b      	strh	r3, [r7, #10]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	f040 8109 	bne.w	8003fe8 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003dd6:	4b87      	ldr	r3, [pc, #540]	@ (8003ff4 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	4a86      	ldr	r2, [pc, #536]	@ (8003ff8 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	0a1a      	lsrs	r2, r3, #8
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009a      	lsls	r2, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d112      	bne.n	8003e22 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	f043 0220 	orr.w	r2, r3, #32
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e0e3      	b.n	8003fea <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d0df      	beq.n	8003df0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_I2C_Master_Transmit_DMA+0x8e>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e0d5      	b.n	8003fea <HAL_I2C_Master_Transmit_DMA+0x23a>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d007      	beq.n	8003e64 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2221      	movs	r2, #33	@ 0x21
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2210      	movs	r2, #16
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	893a      	ldrh	r2, [r7, #8]
 8003e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4a56      	ldr	r2, [pc, #344]	@ (8003ffc <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8003ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003ea6:	897a      	ldrh	r2, [r7, #10]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d07b      	beq.n	8003fac <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d02a      	beq.n	8003f12 <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec0:	4a4f      	ldr	r2, [pc, #316]	@ (8004000 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8003ec2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec8:	4a4e      	ldr	r2, [pc, #312]	@ (8004004 <HAL_I2C_Master_Transmit_DMA+0x254>)
 8003eca:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed8:	2200      	movs	r2, #0
 8003eda:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee8:	2200      	movs	r2, #0
 8003eea:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3310      	adds	r3, #16
 8003efc:	461a      	mov	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f02:	f7ff f947 	bl	8003194 <HAL_DMA_Start_IT>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d139      	bne.n	8003f84 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8003f10:	e013      	b.n	8003f3a <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e057      	b.n	8003fea <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003f50:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f60:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f70:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e02f      	b.n	8003fe4 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	f043 0210 	orr.w	r2, r3, #16
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e01e      	b.n	8003fea <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fba:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fca:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003fe2:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e000      	b.n	8003fea <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8003fe8:	2302      	movs	r3, #2
  }
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000000 	.word	0x20000000
 8003ff8:	14f8b589 	.word	0x14f8b589
 8003ffc:	ffff0000 	.word	0xffff0000
 8004000:	080057e1 	.word	0x080057e1
 8004004:	0800599f 	.word	0x0800599f

08004008 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004028:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004030:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b10      	cmp	r3, #16
 8004036:	d003      	beq.n	8004040 <HAL_I2C_EV_IRQHandler+0x38>
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b40      	cmp	r3, #64	@ 0x40
 800403c:	f040 80b1 	bne.w	80041a2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10d      	bne.n	8004076 <HAL_I2C_EV_IRQHandler+0x6e>
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004060:	d003      	beq.n	800406a <HAL_I2C_EV_IRQHandler+0x62>
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004068:	d101      	bne.n	800406e <HAL_I2C_EV_IRQHandler+0x66>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <HAL_I2C_EV_IRQHandler+0x68>
 800406e:	2300      	movs	r3, #0
 8004070:	2b01      	cmp	r3, #1
 8004072:	f000 8114 	beq.w	800429e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00b      	beq.n	8004098 <HAL_I2C_EV_IRQHandler+0x90>
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f001 fd9e 	bl	8005bcc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fd88 	bl	8004ba6 <I2C_Master_SB>
 8004096:	e083      	b.n	80041a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_I2C_EV_IRQHandler+0xac>
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fe00 	bl	8004cb2 <I2C_Master_ADD10>
 80040b2:	e075      	b.n	80041a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_I2C_EV_IRQHandler+0xc8>
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fe1c 	bl	8004d06 <I2C_Master_ADDR>
 80040ce:	e067      	b.n	80041a0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d036      	beq.n	8004148 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040e8:	f000 80db 	beq.w	80042a2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00d      	beq.n	8004112 <HAL_I2C_EV_IRQHandler+0x10a>
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_I2C_EV_IRQHandler+0x10a>
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f9e4 	bl	80044d8 <I2C_MasterTransmit_TXE>
 8004110:	e046      	b.n	80041a0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80c2 	beq.w	80042a2 <HAL_I2C_EV_IRQHandler+0x29a>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80bc 	beq.w	80042a2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800412a:	7bbb      	ldrb	r3, [r7, #14]
 800412c:	2b21      	cmp	r3, #33	@ 0x21
 800412e:	d103      	bne.n	8004138 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fa6d 	bl	8004610 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004136:	e0b4      	b.n	80042a2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	f040 80b1 	bne.w	80042a2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fadb 	bl	80046fc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004146:	e0ac      	b.n	80042a2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004152:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004156:	f000 80a4 	beq.w	80042a2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <HAL_I2C_EV_IRQHandler+0x178>
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_I2C_EV_IRQHandler+0x178>
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d103      	bne.n	8004180 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fb57 	bl	800482c <I2C_MasterReceive_RXNE>
 800417e:	e00f      	b.n	80041a0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 808b 	beq.w	80042a2 <HAL_I2C_EV_IRQHandler+0x29a>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8085 	beq.w	80042a2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fc0f 	bl	80049bc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800419e:	e080      	b.n	80042a2 <HAL_I2C_EV_IRQHandler+0x29a>
 80041a0:	e07f      	b.n	80042a2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d004      	beq.n	80041b4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	e007      	b.n	80041c4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d011      	beq.n	80041f2 <HAL_I2C_EV_IRQHandler+0x1ea>
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00c      	beq.n	80041f2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80041e8:	69b9      	ldr	r1, [r7, #24]
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 ffda 	bl	80051a4 <I2C_Slave_ADDR>
 80041f0:	e05a      	b.n	80042a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_I2C_EV_IRQHandler+0x206>
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f001 f814 	bl	8005234 <I2C_Slave_STOPF>
 800420c:	e04c      	b.n	80042a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800420e:	7bbb      	ldrb	r3, [r7, #14]
 8004210:	2b21      	cmp	r3, #33	@ 0x21
 8004212:	d002      	beq.n	800421a <HAL_I2C_EV_IRQHandler+0x212>
 8004214:	7bbb      	ldrb	r3, [r7, #14]
 8004216:	2b29      	cmp	r3, #41	@ 0x29
 8004218:	d120      	bne.n	800425c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00d      	beq.n	8004240 <HAL_I2C_EV_IRQHandler+0x238>
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800422a:	2b00      	cmp	r3, #0
 800422c:	d008      	beq.n	8004240 <HAL_I2C_EV_IRQHandler+0x238>
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fef5 	bl	8005028 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800423e:	e032      	b.n	80042a6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d02d      	beq.n	80042a6 <HAL_I2C_EV_IRQHandler+0x29e>
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004250:	2b00      	cmp	r3, #0
 8004252:	d028      	beq.n	80042a6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 ff24 	bl	80050a2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800425a:	e024      	b.n	80042a6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <HAL_I2C_EV_IRQHandler+0x27a>
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <HAL_I2C_EV_IRQHandler+0x27a>
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d103      	bne.n	8004282 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 ff32 	bl	80050e4 <I2C_SlaveReceive_RXNE>
 8004280:	e012      	b.n	80042a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00d      	beq.n	80042a8 <HAL_I2C_EV_IRQHandler+0x2a0>
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004292:	2b00      	cmp	r3, #0
 8004294:	d008      	beq.n	80042a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 ff62 	bl	8005160 <I2C_SlaveReceive_BTF>
 800429c:	e004      	b.n	80042a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042a6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80042a8:	3720      	adds	r7, #32
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b08a      	sub	sp, #40	@ 0x28
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042d0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00d      	beq.n	80042f8 <HAL_I2C_ER_IRQHandler+0x4a>
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d008      	beq.n	80042f8 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80042f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <HAL_I2C_ER_IRQHandler+0x70>
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	f043 0302 	orr.w	r3, r3, #2
 8004312:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800431c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004324:	2b00      	cmp	r3, #0
 8004326:	d03e      	beq.n	80043a6 <HAL_I2C_ER_IRQHandler+0xf8>
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d039      	beq.n	80043a6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004332:	7efb      	ldrb	r3, [r7, #27]
 8004334:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004344:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800434c:	7ebb      	ldrb	r3, [r7, #26]
 800434e:	2b20      	cmp	r3, #32
 8004350:	d112      	bne.n	8004378 <HAL_I2C_ER_IRQHandler+0xca>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10f      	bne.n	8004378 <HAL_I2C_ER_IRQHandler+0xca>
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	2b21      	cmp	r3, #33	@ 0x21
 800435c:	d008      	beq.n	8004370 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800435e:	7cfb      	ldrb	r3, [r7, #19]
 8004360:	2b29      	cmp	r3, #41	@ 0x29
 8004362:	d005      	beq.n	8004370 <HAL_I2C_ER_IRQHandler+0xc2>
 8004364:	7cfb      	ldrb	r3, [r7, #19]
 8004366:	2b28      	cmp	r3, #40	@ 0x28
 8004368:	d106      	bne.n	8004378 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b21      	cmp	r3, #33	@ 0x21
 800436e:	d103      	bne.n	8004378 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f001 f88f 	bl	8005494 <I2C_Slave_AF>
 8004376:	e016      	b.n	80043a6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004380:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	f043 0304 	orr.w	r3, r3, #4
 8004388:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800438a:	7efb      	ldrb	r3, [r7, #27]
 800438c:	2b10      	cmp	r3, #16
 800438e:	d002      	beq.n	8004396 <HAL_I2C_ER_IRQHandler+0xe8>
 8004390:	7efb      	ldrb	r3, [r7, #27]
 8004392:	2b40      	cmp	r3, #64	@ 0x40
 8004394:	d107      	bne.n	80043a6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00d      	beq.n	80043cc <HAL_I2C_ER_IRQHandler+0x11e>
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	f043 0308 	orr.w	r3, r3, #8
 80043c0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80043ca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80043cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f001 f8cc 	bl	800557c <I2C_ITError>
  }
}
 80043e4:	bf00      	nop
 80043e6:	3728      	adds	r7, #40	@ 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
 8004448:	4613      	mov	r3, r2
 800444a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ca:	b2db      	uxtb	r3, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d150      	bne.n	80045a0 <I2C_MasterTransmit_TXE+0xc8>
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b21      	cmp	r3, #33	@ 0x21
 8004502:	d14d      	bne.n	80045a0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b08      	cmp	r3, #8
 8004508:	d01d      	beq.n	8004546 <I2C_MasterTransmit_TXE+0x6e>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b20      	cmp	r3, #32
 800450e:	d01a      	beq.n	8004546 <I2C_MasterTransmit_TXE+0x6e>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004516:	d016      	beq.n	8004546 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004526:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2211      	movs	r2, #17
 800452c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff ff54 	bl	80043ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004544:	e060      	b.n	8004608 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004554:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004564:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b40      	cmp	r3, #64	@ 0x40
 800457e:	d107      	bne.n	8004590 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff ff6f 	bl	800446c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800458e:	e03b      	b.n	8004608 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ff27 	bl	80043ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800459e:	e033      	b.n	8004608 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	2b21      	cmp	r3, #33	@ 0x21
 80045a4:	d005      	beq.n	80045b2 <I2C_MasterTransmit_TXE+0xda>
 80045a6:	7bbb      	ldrb	r3, [r7, #14]
 80045a8:	2b40      	cmp	r3, #64	@ 0x40
 80045aa:	d12d      	bne.n	8004608 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	2b22      	cmp	r3, #34	@ 0x22
 80045b0:	d12a      	bne.n	8004608 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d108      	bne.n	80045ce <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ca:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80045cc:	e01c      	b.n	8004608 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b40      	cmp	r3, #64	@ 0x40
 80045d8:	d103      	bne.n	80045e2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f88e 	bl	80046fc <I2C_MemoryTransmit_TXE_BTF>
}
 80045e0:	e012      	b.n	8004608 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	781a      	ldrb	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004606:	e7ff      	b.n	8004608 <I2C_MasterTransmit_TXE+0x130>
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b21      	cmp	r3, #33	@ 0x21
 8004628:	d164      	bne.n	80046f4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d012      	beq.n	800465a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004658:	e04c      	b.n	80046f4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b08      	cmp	r3, #8
 800465e:	d01d      	beq.n	800469c <I2C_MasterTransmit_BTF+0x8c>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b20      	cmp	r3, #32
 8004664:	d01a      	beq.n	800469c <I2C_MasterTransmit_BTF+0x8c>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800466c:	d016      	beq.n	800469c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800467c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2211      	movs	r2, #17
 8004682:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff fea9 	bl	80043ec <HAL_I2C_MasterTxCpltCallback>
}
 800469a:	e02b      	b.n	80046f4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046aa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ba:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b40      	cmp	r3, #64	@ 0x40
 80046d4:	d107      	bne.n	80046e6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff fec4 	bl	800446c <HAL_I2C_MemTxCpltCallback>
}
 80046e4:	e006      	b.n	80046f4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff fe7c 	bl	80043ec <HAL_I2C_MasterTxCpltCallback>
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004710:	2b00      	cmp	r3, #0
 8004712:	d11d      	bne.n	8004750 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d10b      	bne.n	8004734 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004720:	b2da      	uxtb	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800472c:	1c9a      	adds	r2, r3, #2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004732:	e077      	b.n	8004824 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004738:	b29b      	uxth	r3, r3
 800473a:	121b      	asrs	r3, r3, #8
 800473c:	b2da      	uxtb	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800474e:	e069      	b.n	8004824 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004754:	2b01      	cmp	r3, #1
 8004756:	d10b      	bne.n	8004770 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800475c:	b2da      	uxtb	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800476e:	e059      	b.n	8004824 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004774:	2b02      	cmp	r3, #2
 8004776:	d152      	bne.n	800481e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b22      	cmp	r3, #34	@ 0x22
 800477c:	d10d      	bne.n	800479a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800478c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004798:	e044      	b.n	8004824 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d015      	beq.n	80047d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b21      	cmp	r3, #33	@ 0x21
 80047a8:	d112      	bne.n	80047d0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80047ce:	e029      	b.n	8004824 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d124      	bne.n	8004824 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	2b21      	cmp	r3, #33	@ 0x21
 80047de:	d121      	bne.n	8004824 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047ee:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fe28 	bl	800446c <HAL_I2C_MemTxCpltCallback>
}
 800481c:	e002      	b.n	8004824 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fab0 	bl	8003d84 <I2C_Flush_DR>
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b22      	cmp	r3, #34	@ 0x22
 800483e:	f040 80b9 	bne.w	80049b4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b03      	cmp	r3, #3
 8004854:	d921      	bls.n	800489a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b03      	cmp	r3, #3
 8004884:	f040 8096 	bne.w	80049b4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004896:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004898:	e08c      	b.n	80049b4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d07f      	beq.n	80049a2 <I2C_MasterReceive_RXNE+0x176>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d002      	beq.n	80048ae <I2C_MasterReceive_RXNE+0x82>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d179      	bne.n	80049a2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f001 f95a 	bl	8005b68 <I2C_WaitOnSTOPRequestThroughIT>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d14c      	bne.n	8004954 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048c8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b40      	cmp	r3, #64	@ 0x40
 8004912:	d10a      	bne.n	800492a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff fdac 	bl	8004480 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004928:	e044      	b.n	80049b4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d002      	beq.n	800493e <I2C_MasterReceive_RXNE+0x112>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b20      	cmp	r3, #32
 800493c:	d103      	bne.n	8004946 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	631a      	str	r2, [r3, #48]	@ 0x30
 8004944:	e002      	b.n	800494c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2212      	movs	r2, #18
 800494a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff fd57 	bl	8004400 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004952:	e02f      	b.n	80049b4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004962:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691a      	ldr	r2, [r3, #16]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff fd7a 	bl	8004494 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80049a0:	e008      	b.n	80049b4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b0:	605a      	str	r2, [r3, #4]
}
 80049b2:	e7ff      	b.n	80049b4 <I2C_MasterReceive_RXNE+0x188>
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d11b      	bne.n	8004a0c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049e2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004a0a:	e0c8      	b.n	8004b9e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d129      	bne.n	8004a6a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a24:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d00a      	beq.n	8004a42 <I2C_MasterReceive_BTF+0x86>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d007      	beq.n	8004a42 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a40:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004a68:	e099      	b.n	8004b9e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	f040 8081 	bne.w	8004b78 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d002      	beq.n	8004a82 <I2C_MasterReceive_BTF+0xc6>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b10      	cmp	r3, #16
 8004a80:	d108      	bne.n	8004a94 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e019      	b.n	8004ac8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d002      	beq.n	8004aa0 <I2C_MasterReceive_BTF+0xe4>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d108      	bne.n	8004ab2 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	e00a      	b.n	8004ac8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d007      	beq.n	8004ac8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004b22:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b40      	cmp	r3, #64	@ 0x40
 8004b36:	d10a      	bne.n	8004b4e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff fc9a 	bl	8004480 <HAL_I2C_MemRxCpltCallback>
}
 8004b4c:	e027      	b.n	8004b9e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d002      	beq.n	8004b62 <I2C_MasterReceive_BTF+0x1a6>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d103      	bne.n	8004b6a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b68:	e002      	b.n	8004b70 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2212      	movs	r2, #18
 8004b6e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff fc45 	bl	8004400 <HAL_I2C_MasterRxCpltCallback>
}
 8004b76:	e012      	b.n	8004b9e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004b9e:	bf00      	nop
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b40      	cmp	r3, #64	@ 0x40
 8004bb8:	d117      	bne.n	8004bea <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d109      	bne.n	8004bd6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	461a      	mov	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bd2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004bd4:	e067      	b.n	8004ca6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	611a      	str	r2, [r3, #16]
}
 8004be8:	e05d      	b.n	8004ca6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bf2:	d133      	bne.n	8004c5c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b21      	cmp	r3, #33	@ 0x21
 8004bfe:	d109      	bne.n	8004c14 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	461a      	mov	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c10:	611a      	str	r2, [r3, #16]
 8004c12:	e008      	b.n	8004c26 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <I2C_Master_SB+0x92>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d108      	bne.n	8004c4a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d032      	beq.n	8004ca6 <I2C_Master_SB+0x100>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02d      	beq.n	8004ca6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c58:	605a      	str	r2, [r3, #4]
}
 8004c5a:	e024      	b.n	8004ca6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10e      	bne.n	8004c82 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	11db      	asrs	r3, r3, #7
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f003 0306 	and.w	r3, r3, #6
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f063 030f 	orn	r3, r3, #15
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	611a      	str	r2, [r3, #16]
}
 8004c80:	e011      	b.n	8004ca6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d10d      	bne.n	8004ca6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	11db      	asrs	r3, r3, #7
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f003 0306 	and.w	r3, r3, #6
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	f063 030e 	orn	r3, r3, #14
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	611a      	str	r2, [r3, #16]
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d004      	beq.n	8004cd8 <I2C_Master_ADD10+0x26>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d108      	bne.n	8004cea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00c      	beq.n	8004cfa <I2C_Master_ADD10+0x48>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cf8:	605a      	str	r2, [r3, #4]
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b091      	sub	sp, #68	@ 0x44
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d22:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b22      	cmp	r3, #34	@ 0x22
 8004d2e:	f040 8169 	bne.w	8005004 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10f      	bne.n	8004d5a <I2C_Master_ADDR+0x54>
 8004d3a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004d3e:	2b40      	cmp	r3, #64	@ 0x40
 8004d40:	d10b      	bne.n	8004d5a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d42:	2300      	movs	r3, #0
 8004d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	e160      	b.n	800501c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d11d      	bne.n	8004d9e <I2C_Master_ADDR+0x98>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004d6a:	d118      	bne.n	8004d9e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d90:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d9c:	e13e      	b.n	800501c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d113      	bne.n	8004dd0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da8:	2300      	movs	r3, #0
 8004daa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	e115      	b.n	8004ffc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	f040 808a 	bne.w	8004ef0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dde:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004de2:	d137      	bne.n	8004e54 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004df2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e02:	d113      	bne.n	8004e2c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e12:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e14:	2300      	movs	r3, #0
 8004e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	e0e7      	b.n	8004ffc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	623b      	str	r3, [r7, #32]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	623b      	str	r3, [r7, #32]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	623b      	str	r3, [r7, #32]
 8004e40:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e0d3      	b.n	8004ffc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d02e      	beq.n	8004eb8 <I2C_Master_ADDR+0x1b2>
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d02b      	beq.n	8004eb8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e62:	2b12      	cmp	r3, #18
 8004e64:	d102      	bne.n	8004e6c <I2C_Master_ADDR+0x166>
 8004e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d125      	bne.n	8004eb8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d00e      	beq.n	8004e90 <I2C_Master_ADDR+0x18a>
 8004e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d00b      	beq.n	8004e90 <I2C_Master_ADDR+0x18a>
 8004e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7a:	2b10      	cmp	r3, #16
 8004e7c:	d008      	beq.n	8004e90 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e007      	b.n	8004ea0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e9e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	61fb      	str	r3, [r7, #28]
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	e0a1      	b.n	8004ffc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ec6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61bb      	str	r3, [r7, #24]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	61bb      	str	r3, [r7, #24]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e085      	b.n	8004ffc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d14d      	bne.n	8004f96 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d016      	beq.n	8004f2e <I2C_Master_ADDR+0x228>
 8004f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d013      	beq.n	8004f2e <I2C_Master_ADDR+0x228>
 8004f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d010      	beq.n	8004f2e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f1a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e007      	b.n	8004f3e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f3c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f4c:	d117      	bne.n	8004f7e <I2C_Master_ADDR+0x278>
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f54:	d00b      	beq.n	8004f6e <I2C_Master_ADDR+0x268>
 8004f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d008      	beq.n	8004f6e <I2C_Master_ADDR+0x268>
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d005      	beq.n	8004f6e <I2C_Master_ADDR+0x268>
 8004f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d002      	beq.n	8004f6e <I2C_Master_ADDR+0x268>
 8004f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	d107      	bne.n	8004f7e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	e032      	b.n	8004ffc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fa4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fb4:	d117      	bne.n	8004fe6 <I2C_Master_ADDR+0x2e0>
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fbc:	d00b      	beq.n	8004fd6 <I2C_Master_ADDR+0x2d0>
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d008      	beq.n	8004fd6 <I2C_Master_ADDR+0x2d0>
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d005      	beq.n	8004fd6 <I2C_Master_ADDR+0x2d0>
 8004fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d002      	beq.n	8004fd6 <I2C_Master_ADDR+0x2d0>
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d107      	bne.n	8004fe6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004fe4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005002:	e00b      	b.n	800501c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
}
 800501a:	e7ff      	b.n	800501c <I2C_Master_ADDR+0x316>
 800501c:	bf00      	nop
 800501e:	3744      	adds	r7, #68	@ 0x44
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005036:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d02b      	beq.n	800509a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d114      	bne.n	800509a <I2C_SlaveTransmit_TXE+0x72>
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	2b29      	cmp	r3, #41	@ 0x29
 8005074:	d111      	bne.n	800509a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005084:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2221      	movs	r2, #33	@ 0x21
 800508a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2228      	movs	r2, #40	@ 0x28
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff f9bd 	bl	8004414 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800509a:	bf00      	nop
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d011      	beq.n	80050d8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	781a      	ldrb	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d02c      	beq.n	8005158 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d114      	bne.n	8005158 <I2C_SlaveReceive_RXNE+0x74>
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	2b2a      	cmp	r3, #42	@ 0x2a
 8005132:	d111      	bne.n	8005158 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005142:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2222      	movs	r2, #34	@ 0x22
 8005148:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2228      	movs	r2, #40	@ 0x28
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff f968 	bl	8004428 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005158:	bf00      	nop
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d012      	beq.n	8005198 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051be:	2b28      	cmp	r3, #40	@ 0x28
 80051c0:	d125      	bne.n	800520e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051d0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80051dc:	2301      	movs	r3, #1
 80051de:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d103      	bne.n	80051f2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	81bb      	strh	r3, [r7, #12]
 80051f0:	e002      	b.n	80051f8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005200:	89ba      	ldrh	r2, [r7, #12]
 8005202:	7bfb      	ldrb	r3, [r7, #15]
 8005204:	4619      	mov	r1, r3
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff f918 	bl	800443c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800520c:	e00e      	b.n	800522c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520e:	2300      	movs	r3, #0
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005242:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005252:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005254:	2300      	movs	r3, #0
 8005256:	60bb      	str	r3, [r7, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005280:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800528c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005290:	d172      	bne.n	8005378 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	2b22      	cmp	r3, #34	@ 0x22
 8005296:	d002      	beq.n	800529e <I2C_Slave_STOPF+0x6a>
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	2b2a      	cmp	r3, #42	@ 0x2a
 800529c:	d135      	bne.n	800530a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ba:	f043 0204 	orr.w	r2, r3, #4
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fe f960 	bl	800359c <HAL_DMA_GetState>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d049      	beq.n	8005376 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e6:	4a69      	ldr	r2, [pc, #420]	@ (800548c <I2C_Slave_STOPF+0x258>)
 80052e8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fd ffa8 	bl	8003244 <HAL_DMA_Abort_IT>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d03d      	beq.n	8005376 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005304:	4610      	mov	r0, r2
 8005306:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005308:	e035      	b.n	8005376 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	b29a      	uxth	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800531c:	b29b      	uxth	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	f043 0204 	orr.w	r2, r3, #4
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800533c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005342:	4618      	mov	r0, r3
 8005344:	f7fe f92a 	bl	800359c <HAL_DMA_GetState>
 8005348:	4603      	mov	r3, r0
 800534a:	2b01      	cmp	r3, #1
 800534c:	d014      	beq.n	8005378 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005352:	4a4e      	ldr	r2, [pc, #312]	@ (800548c <I2C_Slave_STOPF+0x258>)
 8005354:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800535a:	4618      	mov	r0, r3
 800535c:	f7fd ff72 	bl	8003244 <HAL_DMA_Abort_IT>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005370:	4610      	mov	r0, r2
 8005372:	4798      	blx	r3
 8005374:	e000      	b.n	8005378 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005376:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d03e      	beq.n	8005400 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b04      	cmp	r3, #4
 800538e:	d112      	bne.n	80053b6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b40      	cmp	r3, #64	@ 0x40
 80053c2:	d112      	bne.n	80053ea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f8:	f043 0204 	orr.w	r2, r3, #4
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f8b7 	bl	800557c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800540e:	e039      	b.n	8005484 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	2b2a      	cmp	r3, #42	@ 0x2a
 8005414:	d109      	bne.n	800542a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2228      	movs	r2, #40	@ 0x28
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7fe ffff 	bl	8004428 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b28      	cmp	r3, #40	@ 0x28
 8005434:	d111      	bne.n	800545a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a15      	ldr	r2, [pc, #84]	@ (8005490 <I2C_Slave_STOPF+0x25c>)
 800543a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff f800 	bl	8004458 <HAL_I2C_ListenCpltCallback>
}
 8005458:	e014      	b.n	8005484 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545e:	2b22      	cmp	r3, #34	@ 0x22
 8005460:	d002      	beq.n	8005468 <I2C_Slave_STOPF+0x234>
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	2b22      	cmp	r3, #34	@ 0x22
 8005466:	d10d      	bne.n	8005484 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f7fe ffd2 	bl	8004428 <HAL_I2C_SlaveRxCpltCallback>
}
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	08005a19 	.word	0x08005a19
 8005490:	ffff0000 	.word	0xffff0000

08005494 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d002      	beq.n	80054b6 <I2C_Slave_AF+0x22>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d129      	bne.n	800550a <I2C_Slave_AF+0x76>
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
 80054b8:	2b28      	cmp	r3, #40	@ 0x28
 80054ba:	d126      	bne.n	800550a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a2e      	ldr	r2, [pc, #184]	@ (8005578 <I2C_Slave_AF+0xe4>)
 80054c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054d0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054da:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fe ffa8 	bl	8004458 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005508:	e031      	b.n	800556e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	2b21      	cmp	r3, #33	@ 0x21
 800550e:	d129      	bne.n	8005564 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a19      	ldr	r2, [pc, #100]	@ (8005578 <I2C_Slave_AF+0xe4>)
 8005514:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2221      	movs	r2, #33	@ 0x21
 800551a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800553a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005544:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005554:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fe fc14 	bl	8003d84 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7fe ff59 	bl	8004414 <HAL_I2C_SlaveTxCpltCallback>
}
 8005562:	e004      	b.n	800556e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800556c:	615a      	str	r2, [r3, #20]
}
 800556e:	bf00      	nop
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	ffff0000 	.word	0xffff0000

0800557c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800558a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005592:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005594:	7bbb      	ldrb	r3, [r7, #14]
 8005596:	2b10      	cmp	r3, #16
 8005598:	d002      	beq.n	80055a0 <I2C_ITError+0x24>
 800559a:	7bbb      	ldrb	r3, [r7, #14]
 800559c:	2b40      	cmp	r3, #64	@ 0x40
 800559e:	d10a      	bne.n	80055b6 <I2C_ITError+0x3a>
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b22      	cmp	r3, #34	@ 0x22
 80055a4:	d107      	bne.n	80055b6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055b4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
 80055b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80055bc:	2b28      	cmp	r3, #40	@ 0x28
 80055be:	d107      	bne.n	80055d0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2228      	movs	r2, #40	@ 0x28
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80055ce:	e015      	b.n	80055fc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055de:	d00a      	beq.n	80055f6 <I2C_ITError+0x7a>
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	2b60      	cmp	r3, #96	@ 0x60
 80055e4:	d007      	beq.n	80055f6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005606:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800560a:	d162      	bne.n	80056d2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800561a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005620:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b01      	cmp	r3, #1
 8005628:	d020      	beq.n	800566c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800562e:	4a6a      	ldr	r2, [pc, #424]	@ (80057d8 <I2C_ITError+0x25c>)
 8005630:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005636:	4618      	mov	r0, r3
 8005638:	f7fd fe04 	bl	8003244 <HAL_DMA_Abort_IT>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 8089 	beq.w	8005756 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f022 0201 	bic.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005666:	4610      	mov	r0, r2
 8005668:	4798      	blx	r3
 800566a:	e074      	b.n	8005756 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	4a59      	ldr	r2, [pc, #356]	@ (80057d8 <I2C_ITError+0x25c>)
 8005672:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005678:	4618      	mov	r0, r3
 800567a:	f7fd fde3 	bl	8003244 <HAL_DMA_Abort_IT>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d068      	beq.n	8005756 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568e:	2b40      	cmp	r3, #64	@ 0x40
 8005690:	d10b      	bne.n	80056aa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056cc:	4610      	mov	r0, r2
 80056ce:	4798      	blx	r3
 80056d0:	e041      	b.n	8005756 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b60      	cmp	r3, #96	@ 0x60
 80056dc:	d125      	bne.n	800572a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f6:	2b40      	cmp	r3, #64	@ 0x40
 80056f8:	d10b      	bne.n	8005712 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0201 	bic.w	r2, r2, #1
 8005720:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fe fec0 	bl	80044a8 <HAL_I2C_AbortCpltCallback>
 8005728:	e015      	b.n	8005756 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005734:	2b40      	cmp	r3, #64	@ 0x40
 8005736:	d10b      	bne.n	8005750 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691a      	ldr	r2, [r3, #16]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7fe fe9f 	bl	8004494 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10e      	bne.n	8005784 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800576c:	2b00      	cmp	r3, #0
 800576e:	d109      	bne.n	8005784 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005776:	2b00      	cmp	r3, #0
 8005778:	d104      	bne.n	8005784 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005792:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800579a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a0:	f003 0304 	and.w	r3, r3, #4
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d113      	bne.n	80057d0 <I2C_ITError+0x254>
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b28      	cmp	r3, #40	@ 0x28
 80057ac:	d110      	bne.n	80057d0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a0a      	ldr	r2, [pc, #40]	@ (80057dc <I2C_ITError+0x260>)
 80057b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fe fe44 	bl	8004458 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	08005a19 	.word	0x08005a19
 80057dc:	ffff0000 	.word	0xffff0000

080057e0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057fc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005802:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005812:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005820:	2200      	movs	r2, #0
 8005822:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005830:	2200      	movs	r2, #0
 8005832:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800583a:	2b21      	cmp	r3, #33	@ 0x21
 800583c:	d007      	beq.n	800584e <I2C_DMAXferCplt+0x6e>
 800583e:	7cfb      	ldrb	r3, [r7, #19]
 8005840:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005844:	2b22      	cmp	r3, #34	@ 0x22
 8005846:	d131      	bne.n	80058ac <I2C_DMAXferCplt+0xcc>
 8005848:	7cbb      	ldrb	r3, [r7, #18]
 800584a:	2b20      	cmp	r3, #32
 800584c:	d12e      	bne.n	80058ac <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800585c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2200      	movs	r2, #0
 8005862:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005864:	7cfb      	ldrb	r3, [r7, #19]
 8005866:	2b29      	cmp	r3, #41	@ 0x29
 8005868:	d10a      	bne.n	8005880 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2221      	movs	r2, #33	@ 0x21
 800586e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2228      	movs	r2, #40	@ 0x28
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005878:	6978      	ldr	r0, [r7, #20]
 800587a:	f7fe fdcb 	bl	8004414 <HAL_I2C_SlaveTxCpltCallback>
 800587e:	e00c      	b.n	800589a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005880:	7cfb      	ldrb	r3, [r7, #19]
 8005882:	2b2a      	cmp	r3, #42	@ 0x2a
 8005884:	d109      	bne.n	800589a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	2222      	movs	r2, #34	@ 0x22
 800588a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2228      	movs	r2, #40	@ 0x28
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005894:	6978      	ldr	r0, [r7, #20]
 8005896:	f7fe fdc7 	bl	8004428 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80058a8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80058aa:	e074      	b.n	8005996 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d06e      	beq.n	8005996 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d107      	bne.n	80058d2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058d0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80058e0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058e8:	d009      	beq.n	80058fe <I2C_DMAXferCplt+0x11e>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d006      	beq.n	80058fe <I2C_DMAXferCplt+0x11e>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80058f6:	d002      	beq.n	80058fe <I2C_DMAXferCplt+0x11e>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d107      	bne.n	800590e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800590c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800591c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800592c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2200      	movs	r2, #0
 8005932:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800593c:	6978      	ldr	r0, [r7, #20]
 800593e:	f7fe fda9 	bl	8004494 <HAL_I2C_ErrorCallback>
}
 8005942:	e028      	b.n	8005996 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b40      	cmp	r3, #64	@ 0x40
 8005956:	d10a      	bne.n	800596e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	2200      	movs	r2, #0
 8005964:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005966:	6978      	ldr	r0, [r7, #20]
 8005968:	f7fe fd8a 	bl	8004480 <HAL_I2C_MemRxCpltCallback>
}
 800596c:	e013      	b.n	8005996 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d002      	beq.n	8005982 <I2C_DMAXferCplt+0x1a2>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b20      	cmp	r3, #32
 8005980:	d103      	bne.n	800598a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2200      	movs	r2, #0
 8005986:	631a      	str	r2, [r3, #48]	@ 0x30
 8005988:	e002      	b.n	8005990 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2212      	movs	r2, #18
 800598e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005990:	6978      	ldr	r0, [r7, #20]
 8005992:	f7fe fd35 	bl	8004400 <HAL_I2C_MasterRxCpltCallback>
}
 8005996:	bf00      	nop
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b8:	2200      	movs	r2, #0
 80059ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c8:	2200      	movs	r2, #0
 80059ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fd fdf3 	bl	80035b8 <HAL_DMA_GetError>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d01b      	beq.n	8005a10 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059e6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a02:	f043 0210 	orr.w	r2, r3, #16
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f7fe fd42 	bl	8004494 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a10:	bf00      	nop
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a28:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a30:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a32:	4b4b      	ldr	r3, [pc, #300]	@ (8005b60 <I2C_DMAAbort+0x148>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	08db      	lsrs	r3, r3, #3
 8005a38:	4a4a      	ldr	r2, [pc, #296]	@ (8005b64 <I2C_DMAAbort+0x14c>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	0a1a      	lsrs	r2, r3, #8
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	00da      	lsls	r2, r3, #3
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	f043 0220 	orr.w	r2, r3, #32
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005a5e:	e00a      	b.n	8005a76 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a74:	d0ea      	beq.n	8005a4c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a82:	2200      	movs	r2, #0
 8005a84:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a92:	2200      	movs	r2, #0
 8005a94:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aa4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab8:	2200      	movs	r2, #0
 8005aba:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac8:	2200      	movs	r2, #0
 8005aca:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0201 	bic.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b60      	cmp	r3, #96	@ 0x60
 8005ae6:	d10e      	bne.n	8005b06 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2200      	movs	r2, #0
 8005afc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005afe:	6978      	ldr	r0, [r7, #20]
 8005b00:	f7fe fcd2 	bl	80044a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b04:	e027      	b.n	8005b56 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b06:	7cfb      	ldrb	r3, [r7, #19]
 8005b08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b0c:	2b28      	cmp	r3, #40	@ 0x28
 8005b0e:	d117      	bne.n	8005b40 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b2e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2200      	movs	r2, #0
 8005b34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2228      	movs	r2, #40	@ 0x28
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005b3e:	e007      	b.n	8005b50 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005b50:	6978      	ldr	r0, [r7, #20]
 8005b52:	f7fe fc9f 	bl	8004494 <HAL_I2C_ErrorCallback>
}
 8005b56:	bf00      	nop
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20000000 	.word	0x20000000
 8005b64:	14f8b589 	.word	0x14f8b589

08005b68 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005b74:	4b13      	ldr	r3, [pc, #76]	@ (8005bc4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	08db      	lsrs	r3, r3, #3
 8005b7a:	4a13      	ldr	r2, [pc, #76]	@ (8005bc8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	0a1a      	lsrs	r2, r3, #8
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d107      	bne.n	8005ba6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9a:	f043 0220 	orr.w	r2, r3, #32
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e008      	b.n	8005bb8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bb4:	d0e9      	beq.n	8005b8a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	20000000 	.word	0x20000000
 8005bc8:	14f8b589 	.word	0x14f8b589

08005bcc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005bdc:	d103      	bne.n	8005be6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005be4:	e007      	b.n	8005bf6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bea:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005bee:	d102      	bne.n	8005bf6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
	...

08005c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e267      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d075      	beq.n	8005d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c22:	4b88      	ldr	r3, [pc, #544]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d00c      	beq.n	8005c48 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c2e:	4b85      	ldr	r3, [pc, #532]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d112      	bne.n	8005c60 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c3a:	4b82      	ldr	r3, [pc, #520]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c46:	d10b      	bne.n	8005c60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c48:	4b7e      	ldr	r3, [pc, #504]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d05b      	beq.n	8005d0c <HAL_RCC_OscConfig+0x108>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d157      	bne.n	8005d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e242      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c68:	d106      	bne.n	8005c78 <HAL_RCC_OscConfig+0x74>
 8005c6a:	4b76      	ldr	r3, [pc, #472]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a75      	ldr	r2, [pc, #468]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	e01d      	b.n	8005cb4 <HAL_RCC_OscConfig+0xb0>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c80:	d10c      	bne.n	8005c9c <HAL_RCC_OscConfig+0x98>
 8005c82:	4b70      	ldr	r3, [pc, #448]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a6f      	ldr	r2, [pc, #444]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a6c      	ldr	r2, [pc, #432]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	e00b      	b.n	8005cb4 <HAL_RCC_OscConfig+0xb0>
 8005c9c:	4b69      	ldr	r3, [pc, #420]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a68      	ldr	r2, [pc, #416]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	4b66      	ldr	r3, [pc, #408]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a65      	ldr	r2, [pc, #404]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d013      	beq.n	8005ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cbc:	f7fc fbfe 	bl	80024bc <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cc4:	f7fc fbfa 	bl	80024bc <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b64      	cmp	r3, #100	@ 0x64
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e207      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0f0      	beq.n	8005cc4 <HAL_RCC_OscConfig+0xc0>
 8005ce2:	e014      	b.n	8005d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce4:	f7fc fbea 	bl	80024bc <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cec:	f7fc fbe6 	bl	80024bc <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b64      	cmp	r3, #100	@ 0x64
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e1f3      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cfe:	4b51      	ldr	r3, [pc, #324]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f0      	bne.n	8005cec <HAL_RCC_OscConfig+0xe8>
 8005d0a:	e000      	b.n	8005d0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d063      	beq.n	8005de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 030c 	and.w	r3, r3, #12
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00b      	beq.n	8005d3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d26:	4b47      	ldr	r3, [pc, #284]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d11c      	bne.n	8005d6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d32:	4b44      	ldr	r3, [pc, #272]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d116      	bne.n	8005d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d3e:	4b41      	ldr	r3, [pc, #260]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <HAL_RCC_OscConfig+0x152>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d001      	beq.n	8005d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e1c7      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d56:	4b3b      	ldr	r3, [pc, #236]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4937      	ldr	r1, [pc, #220]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d6a:	e03a      	b.n	8005de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d020      	beq.n	8005db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d74:	4b34      	ldr	r3, [pc, #208]	@ (8005e48 <HAL_RCC_OscConfig+0x244>)
 8005d76:	2201      	movs	r2, #1
 8005d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7a:	f7fc fb9f 	bl	80024bc <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d82:	f7fc fb9b 	bl	80024bc <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e1a8      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d94:	4b2b      	ldr	r3, [pc, #172]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0f0      	beq.n	8005d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da0:	4b28      	ldr	r3, [pc, #160]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	4925      	ldr	r1, [pc, #148]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	600b      	str	r3, [r1, #0]
 8005db4:	e015      	b.n	8005de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005db6:	4b24      	ldr	r3, [pc, #144]	@ (8005e48 <HAL_RCC_OscConfig+0x244>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dbc:	f7fc fb7e 	bl	80024bc <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dc4:	f7fc fb7a 	bl	80024bc <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e187      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f0      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d036      	beq.n	8005e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d016      	beq.n	8005e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005df6:	4b15      	ldr	r3, [pc, #84]	@ (8005e4c <HAL_RCC_OscConfig+0x248>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dfc:	f7fc fb5e 	bl	80024bc <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e04:	f7fc fb5a 	bl	80024bc <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e167      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e16:	4b0b      	ldr	r3, [pc, #44]	@ (8005e44 <HAL_RCC_OscConfig+0x240>)
 8005e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f0      	beq.n	8005e04 <HAL_RCC_OscConfig+0x200>
 8005e22:	e01b      	b.n	8005e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e24:	4b09      	ldr	r3, [pc, #36]	@ (8005e4c <HAL_RCC_OscConfig+0x248>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e2a:	f7fc fb47 	bl	80024bc <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e30:	e00e      	b.n	8005e50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e32:	f7fc fb43 	bl	80024bc <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d907      	bls.n	8005e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e150      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
 8005e44:	40023800 	.word	0x40023800
 8005e48:	42470000 	.word	0x42470000
 8005e4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e50:	4b88      	ldr	r3, [pc, #544]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1ea      	bne.n	8005e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 8097 	beq.w	8005f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e6e:	4b81      	ldr	r3, [pc, #516]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10f      	bne.n	8005e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60bb      	str	r3, [r7, #8]
 8005e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e82:	4a7c      	ldr	r2, [pc, #496]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e8a:	4b7a      	ldr	r3, [pc, #488]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e96:	2301      	movs	r3, #1
 8005e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e9a:	4b77      	ldr	r3, [pc, #476]	@ (8006078 <HAL_RCC_OscConfig+0x474>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d118      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ea6:	4b74      	ldr	r3, [pc, #464]	@ (8006078 <HAL_RCC_OscConfig+0x474>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a73      	ldr	r2, [pc, #460]	@ (8006078 <HAL_RCC_OscConfig+0x474>)
 8005eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eb2:	f7fc fb03 	bl	80024bc <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eba:	f7fc faff 	bl	80024bc <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e10c      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ecc:	4b6a      	ldr	r3, [pc, #424]	@ (8006078 <HAL_RCC_OscConfig+0x474>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0f0      	beq.n	8005eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d106      	bne.n	8005eee <HAL_RCC_OscConfig+0x2ea>
 8005ee0:	4b64      	ldr	r3, [pc, #400]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee4:	4a63      	ldr	r2, [pc, #396]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eec:	e01c      	b.n	8005f28 <HAL_RCC_OscConfig+0x324>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	2b05      	cmp	r3, #5
 8005ef4:	d10c      	bne.n	8005f10 <HAL_RCC_OscConfig+0x30c>
 8005ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005efa:	4a5e      	ldr	r2, [pc, #376]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005efc:	f043 0304 	orr.w	r3, r3, #4
 8005f00:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f02:	4b5c      	ldr	r3, [pc, #368]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f06:	4a5b      	ldr	r2, [pc, #364]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f0e:	e00b      	b.n	8005f28 <HAL_RCC_OscConfig+0x324>
 8005f10:	4b58      	ldr	r3, [pc, #352]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f14:	4a57      	ldr	r2, [pc, #348]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005f16:	f023 0301 	bic.w	r3, r3, #1
 8005f1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f1c:	4b55      	ldr	r3, [pc, #340]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f20:	4a54      	ldr	r2, [pc, #336]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005f22:	f023 0304 	bic.w	r3, r3, #4
 8005f26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d015      	beq.n	8005f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f30:	f7fc fac4 	bl	80024bc <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f36:	e00a      	b.n	8005f4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f38:	f7fc fac0 	bl	80024bc <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e0cb      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f4e:	4b49      	ldr	r3, [pc, #292]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0ee      	beq.n	8005f38 <HAL_RCC_OscConfig+0x334>
 8005f5a:	e014      	b.n	8005f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f5c:	f7fc faae 	bl	80024bc <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f62:	e00a      	b.n	8005f7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f64:	f7fc faaa 	bl	80024bc <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e0b5      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1ee      	bne.n	8005f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d105      	bne.n	8005f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f8c:	4b39      	ldr	r3, [pc, #228]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f90:	4a38      	ldr	r2, [pc, #224]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 80a1 	beq.w	80060e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fa2:	4b34      	ldr	r3, [pc, #208]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 030c 	and.w	r3, r3, #12
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d05c      	beq.n	8006068 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d141      	bne.n	800603a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fb6:	4b31      	ldr	r3, [pc, #196]	@ (800607c <HAL_RCC_OscConfig+0x478>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbc:	f7fc fa7e 	bl	80024bc <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fc4:	f7fc fa7a 	bl	80024bc <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e087      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fd6:	4b27      	ldr	r3, [pc, #156]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1f0      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69da      	ldr	r2, [r3, #28]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff0:	019b      	lsls	r3, r3, #6
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff8:	085b      	lsrs	r3, r3, #1
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	041b      	lsls	r3, r3, #16
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006004:	061b      	lsls	r3, r3, #24
 8006006:	491b      	ldr	r1, [pc, #108]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 8006008:	4313      	orrs	r3, r2
 800600a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800600c:	4b1b      	ldr	r3, [pc, #108]	@ (800607c <HAL_RCC_OscConfig+0x478>)
 800600e:	2201      	movs	r2, #1
 8006010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006012:	f7fc fa53 	bl	80024bc <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006018:	e008      	b.n	800602c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800601a:	f7fc fa4f 	bl	80024bc <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e05c      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602c:	4b11      	ldr	r3, [pc, #68]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0f0      	beq.n	800601a <HAL_RCC_OscConfig+0x416>
 8006038:	e054      	b.n	80060e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800603a:	4b10      	ldr	r3, [pc, #64]	@ (800607c <HAL_RCC_OscConfig+0x478>)
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006040:	f7fc fa3c 	bl	80024bc <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006048:	f7fc fa38 	bl	80024bc <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e045      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605a:	4b06      	ldr	r3, [pc, #24]	@ (8006074 <HAL_RCC_OscConfig+0x470>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f0      	bne.n	8006048 <HAL_RCC_OscConfig+0x444>
 8006066:	e03d      	b.n	80060e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d107      	bne.n	8006080 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e038      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
 8006074:	40023800 	.word	0x40023800
 8006078:	40007000 	.word	0x40007000
 800607c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006080:	4b1b      	ldr	r3, [pc, #108]	@ (80060f0 <HAL_RCC_OscConfig+0x4ec>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d028      	beq.n	80060e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006098:	429a      	cmp	r2, r3
 800609a:	d121      	bne.n	80060e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d11a      	bne.n	80060e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060b0:	4013      	ands	r3, r2
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d111      	bne.n	80060e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	3b01      	subs	r3, #1
 80060ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d107      	bne.n	80060e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060dc:	429a      	cmp	r2, r3
 80060de:	d001      	beq.n	80060e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e000      	b.n	80060e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3718      	adds	r7, #24
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40023800 	.word	0x40023800

080060f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e0cc      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006108:	4b68      	ldr	r3, [pc, #416]	@ (80062ac <HAL_RCC_ClockConfig+0x1b8>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	429a      	cmp	r2, r3
 8006114:	d90c      	bls.n	8006130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006116:	4b65      	ldr	r3, [pc, #404]	@ (80062ac <HAL_RCC_ClockConfig+0x1b8>)
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800611e:	4b63      	ldr	r3, [pc, #396]	@ (80062ac <HAL_RCC_ClockConfig+0x1b8>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d001      	beq.n	8006130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e0b8      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d020      	beq.n	800617e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006148:	4b59      	ldr	r3, [pc, #356]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	4a58      	ldr	r2, [pc, #352]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 800614e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006152:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b00      	cmp	r3, #0
 800615e:	d005      	beq.n	800616c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006160:	4b53      	ldr	r3, [pc, #332]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	4a52      	ldr	r2, [pc, #328]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006166:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800616a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800616c:	4b50      	ldr	r3, [pc, #320]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	494d      	ldr	r1, [pc, #308]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 800617a:	4313      	orrs	r3, r2
 800617c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d044      	beq.n	8006214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d107      	bne.n	80061a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006192:	4b47      	ldr	r3, [pc, #284]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d119      	bne.n	80061d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e07f      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d003      	beq.n	80061b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d107      	bne.n	80061c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061b2:	4b3f      	ldr	r3, [pc, #252]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d109      	bne.n	80061d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e06f      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061c2:	4b3b      	ldr	r3, [pc, #236]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e067      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061d2:	4b37      	ldr	r3, [pc, #220]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f023 0203 	bic.w	r2, r3, #3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	4934      	ldr	r1, [pc, #208]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061e4:	f7fc f96a 	bl	80024bc <HAL_GetTick>
 80061e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ea:	e00a      	b.n	8006202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ec:	f7fc f966 	bl	80024bc <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e04f      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006202:	4b2b      	ldr	r3, [pc, #172]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 020c 	and.w	r2, r3, #12
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	429a      	cmp	r2, r3
 8006212:	d1eb      	bne.n	80061ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006214:	4b25      	ldr	r3, [pc, #148]	@ (80062ac <HAL_RCC_ClockConfig+0x1b8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d20c      	bcs.n	800623c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006222:	4b22      	ldr	r3, [pc, #136]	@ (80062ac <HAL_RCC_ClockConfig+0x1b8>)
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800622a:	4b20      	ldr	r3, [pc, #128]	@ (80062ac <HAL_RCC_ClockConfig+0x1b8>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	429a      	cmp	r2, r3
 8006236:	d001      	beq.n	800623c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e032      	b.n	80062a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006248:	4b19      	ldr	r3, [pc, #100]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4916      	ldr	r1, [pc, #88]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006256:	4313      	orrs	r3, r2
 8006258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b00      	cmp	r3, #0
 8006264:	d009      	beq.n	800627a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006266:	4b12      	ldr	r3, [pc, #72]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	490e      	ldr	r1, [pc, #56]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	4313      	orrs	r3, r2
 8006278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800627a:	f000 f821 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 800627e:	4602      	mov	r2, r0
 8006280:	4b0b      	ldr	r3, [pc, #44]	@ (80062b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	091b      	lsrs	r3, r3, #4
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	490a      	ldr	r1, [pc, #40]	@ (80062b4 <HAL_RCC_ClockConfig+0x1c0>)
 800628c:	5ccb      	ldrb	r3, [r1, r3]
 800628e:	fa22 f303 	lsr.w	r3, r2, r3
 8006292:	4a09      	ldr	r2, [pc, #36]	@ (80062b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006296:	4b09      	ldr	r3, [pc, #36]	@ (80062bc <HAL_RCC_ClockConfig+0x1c8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f7fc f8ca 	bl	8002434 <HAL_InitTick>

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40023c00 	.word	0x40023c00
 80062b0:	40023800 	.word	0x40023800
 80062b4:	080090c4 	.word	0x080090c4
 80062b8:	20000000 	.word	0x20000000
 80062bc:	20000004 	.word	0x20000004

080062c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062c4:	b094      	sub	sp, #80	@ 0x50
 80062c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062d8:	4b79      	ldr	r3, [pc, #484]	@ (80064c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 030c 	and.w	r3, r3, #12
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d00d      	beq.n	8006300 <HAL_RCC_GetSysClockFreq+0x40>
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	f200 80e1 	bhi.w	80064ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <HAL_RCC_GetSysClockFreq+0x34>
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d003      	beq.n	80062fa <HAL_RCC_GetSysClockFreq+0x3a>
 80062f2:	e0db      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062f4:	4b73      	ldr	r3, [pc, #460]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80062f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062f8:	e0db      	b.n	80064b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062fa:	4b73      	ldr	r3, [pc, #460]	@ (80064c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80062fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062fe:	e0d8      	b.n	80064b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006300:	4b6f      	ldr	r3, [pc, #444]	@ (80064c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006308:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800630a:	4b6d      	ldr	r3, [pc, #436]	@ (80064c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d063      	beq.n	80063de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006316:	4b6a      	ldr	r3, [pc, #424]	@ (80064c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	099b      	lsrs	r3, r3, #6
 800631c:	2200      	movs	r2, #0
 800631e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006320:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006328:	633b      	str	r3, [r7, #48]	@ 0x30
 800632a:	2300      	movs	r3, #0
 800632c:	637b      	str	r3, [r7, #52]	@ 0x34
 800632e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006332:	4622      	mov	r2, r4
 8006334:	462b      	mov	r3, r5
 8006336:	f04f 0000 	mov.w	r0, #0
 800633a:	f04f 0100 	mov.w	r1, #0
 800633e:	0159      	lsls	r1, r3, #5
 8006340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006344:	0150      	lsls	r0, r2, #5
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4621      	mov	r1, r4
 800634c:	1a51      	subs	r1, r2, r1
 800634e:	6139      	str	r1, [r7, #16]
 8006350:	4629      	mov	r1, r5
 8006352:	eb63 0301 	sbc.w	r3, r3, r1
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	f04f 0200 	mov.w	r2, #0
 800635c:	f04f 0300 	mov.w	r3, #0
 8006360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006364:	4659      	mov	r1, fp
 8006366:	018b      	lsls	r3, r1, #6
 8006368:	4651      	mov	r1, sl
 800636a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800636e:	4651      	mov	r1, sl
 8006370:	018a      	lsls	r2, r1, #6
 8006372:	4651      	mov	r1, sl
 8006374:	ebb2 0801 	subs.w	r8, r2, r1
 8006378:	4659      	mov	r1, fp
 800637a:	eb63 0901 	sbc.w	r9, r3, r1
 800637e:	f04f 0200 	mov.w	r2, #0
 8006382:	f04f 0300 	mov.w	r3, #0
 8006386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800638a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800638e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006392:	4690      	mov	r8, r2
 8006394:	4699      	mov	r9, r3
 8006396:	4623      	mov	r3, r4
 8006398:	eb18 0303 	adds.w	r3, r8, r3
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	462b      	mov	r3, r5
 80063a0:	eb49 0303 	adc.w	r3, r9, r3
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	f04f 0300 	mov.w	r3, #0
 80063ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063b2:	4629      	mov	r1, r5
 80063b4:	024b      	lsls	r3, r1, #9
 80063b6:	4621      	mov	r1, r4
 80063b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063bc:	4621      	mov	r1, r4
 80063be:	024a      	lsls	r2, r1, #9
 80063c0:	4610      	mov	r0, r2
 80063c2:	4619      	mov	r1, r3
 80063c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063c6:	2200      	movs	r2, #0
 80063c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063d0:	f7fa faf4 	bl	80009bc <__aeabi_uldivmod>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4613      	mov	r3, r2
 80063da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063dc:	e058      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063de:	4b38      	ldr	r3, [pc, #224]	@ (80064c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	099b      	lsrs	r3, r3, #6
 80063e4:	2200      	movs	r2, #0
 80063e6:	4618      	mov	r0, r3
 80063e8:	4611      	mov	r1, r2
 80063ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063ee:	623b      	str	r3, [r7, #32]
 80063f0:	2300      	movs	r3, #0
 80063f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063f8:	4642      	mov	r2, r8
 80063fa:	464b      	mov	r3, r9
 80063fc:	f04f 0000 	mov.w	r0, #0
 8006400:	f04f 0100 	mov.w	r1, #0
 8006404:	0159      	lsls	r1, r3, #5
 8006406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800640a:	0150      	lsls	r0, r2, #5
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4641      	mov	r1, r8
 8006412:	ebb2 0a01 	subs.w	sl, r2, r1
 8006416:	4649      	mov	r1, r9
 8006418:	eb63 0b01 	sbc.w	fp, r3, r1
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	f04f 0300 	mov.w	r3, #0
 8006424:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006428:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800642c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006430:	ebb2 040a 	subs.w	r4, r2, sl
 8006434:	eb63 050b 	sbc.w	r5, r3, fp
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	f04f 0300 	mov.w	r3, #0
 8006440:	00eb      	lsls	r3, r5, #3
 8006442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006446:	00e2      	lsls	r2, r4, #3
 8006448:	4614      	mov	r4, r2
 800644a:	461d      	mov	r5, r3
 800644c:	4643      	mov	r3, r8
 800644e:	18e3      	adds	r3, r4, r3
 8006450:	603b      	str	r3, [r7, #0]
 8006452:	464b      	mov	r3, r9
 8006454:	eb45 0303 	adc.w	r3, r5, r3
 8006458:	607b      	str	r3, [r7, #4]
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	f04f 0300 	mov.w	r3, #0
 8006462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006466:	4629      	mov	r1, r5
 8006468:	028b      	lsls	r3, r1, #10
 800646a:	4621      	mov	r1, r4
 800646c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006470:	4621      	mov	r1, r4
 8006472:	028a      	lsls	r2, r1, #10
 8006474:	4610      	mov	r0, r2
 8006476:	4619      	mov	r1, r3
 8006478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800647a:	2200      	movs	r2, #0
 800647c:	61bb      	str	r3, [r7, #24]
 800647e:	61fa      	str	r2, [r7, #28]
 8006480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006484:	f7fa fa9a 	bl	80009bc <__aeabi_uldivmod>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4613      	mov	r3, r2
 800648e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006490:	4b0b      	ldr	r3, [pc, #44]	@ (80064c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	0c1b      	lsrs	r3, r3, #16
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	3301      	adds	r3, #1
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80064a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064aa:	e002      	b.n	80064b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064ac:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80064ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3750      	adds	r7, #80	@ 0x50
 80064b8:	46bd      	mov	sp, r7
 80064ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064be:	bf00      	nop
 80064c0:	40023800 	.word	0x40023800
 80064c4:	00f42400 	.word	0x00f42400
 80064c8:	007a1200 	.word	0x007a1200

080064cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064d0:	4b03      	ldr	r3, [pc, #12]	@ (80064e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80064d2:	681b      	ldr	r3, [r3, #0]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	20000000 	.word	0x20000000

080064e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064e8:	f7ff fff0 	bl	80064cc <HAL_RCC_GetHCLKFreq>
 80064ec:	4602      	mov	r2, r0
 80064ee:	4b05      	ldr	r3, [pc, #20]	@ (8006504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	0a9b      	lsrs	r3, r3, #10
 80064f4:	f003 0307 	and.w	r3, r3, #7
 80064f8:	4903      	ldr	r1, [pc, #12]	@ (8006508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064fa:	5ccb      	ldrb	r3, [r1, r3]
 80064fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006500:	4618      	mov	r0, r3
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40023800 	.word	0x40023800
 8006508:	080090d4 	.word	0x080090d4

0800650c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e041      	b.n	80065a2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fb fdba 	bl	80020ac <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	4619      	mov	r1, r3
 800654a:	4610      	mov	r0, r2
 800654c:	f000 fdd2 	bl	80070f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b082      	sub	sp, #8
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e041      	b.n	8006640 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d106      	bne.n	80065d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7fb fd35 	bl	8002040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3304      	adds	r3, #4
 80065e6:	4619      	mov	r1, r3
 80065e8:	4610      	mov	r0, r2
 80065ea:	f000 fd83 	bl	80070f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d109      	bne.n	800666c <HAL_TIM_PWM_Start+0x24>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b01      	cmp	r3, #1
 8006662:	bf14      	ite	ne
 8006664:	2301      	movne	r3, #1
 8006666:	2300      	moveq	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	e022      	b.n	80066b2 <HAL_TIM_PWM_Start+0x6a>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b04      	cmp	r3, #4
 8006670:	d109      	bne.n	8006686 <HAL_TIM_PWM_Start+0x3e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b01      	cmp	r3, #1
 800667c:	bf14      	ite	ne
 800667e:	2301      	movne	r3, #1
 8006680:	2300      	moveq	r3, #0
 8006682:	b2db      	uxtb	r3, r3
 8006684:	e015      	b.n	80066b2 <HAL_TIM_PWM_Start+0x6a>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b08      	cmp	r3, #8
 800668a:	d109      	bne.n	80066a0 <HAL_TIM_PWM_Start+0x58>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b01      	cmp	r3, #1
 8006696:	bf14      	ite	ne
 8006698:	2301      	movne	r3, #1
 800669a:	2300      	moveq	r3, #0
 800669c:	b2db      	uxtb	r3, r3
 800669e:	e008      	b.n	80066b2 <HAL_TIM_PWM_Start+0x6a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	bf14      	ite	ne
 80066ac:	2301      	movne	r3, #1
 80066ae:	2300      	moveq	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e07c      	b.n	80067b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <HAL_TIM_PWM_Start+0x82>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066c8:	e013      	b.n	80066f2 <HAL_TIM_PWM_Start+0xaa>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d104      	bne.n	80066da <HAL_TIM_PWM_Start+0x92>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066d8:	e00b      	b.n	80066f2 <HAL_TIM_PWM_Start+0xaa>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d104      	bne.n	80066ea <HAL_TIM_PWM_Start+0xa2>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066e8:	e003      	b.n	80066f2 <HAL_TIM_PWM_Start+0xaa>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2202      	movs	r2, #2
 80066ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2201      	movs	r2, #1
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f001 f880 	bl	8007800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a2d      	ldr	r2, [pc, #180]	@ (80067bc <HAL_TIM_PWM_Start+0x174>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d004      	beq.n	8006714 <HAL_TIM_PWM_Start+0xcc>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2c      	ldr	r2, [pc, #176]	@ (80067c0 <HAL_TIM_PWM_Start+0x178>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d101      	bne.n	8006718 <HAL_TIM_PWM_Start+0xd0>
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <HAL_TIM_PWM_Start+0xd2>
 8006718:	2300      	movs	r3, #0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d007      	beq.n	800672e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800672c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a22      	ldr	r2, [pc, #136]	@ (80067bc <HAL_TIM_PWM_Start+0x174>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d022      	beq.n	800677e <HAL_TIM_PWM_Start+0x136>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006740:	d01d      	beq.n	800677e <HAL_TIM_PWM_Start+0x136>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1f      	ldr	r2, [pc, #124]	@ (80067c4 <HAL_TIM_PWM_Start+0x17c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d018      	beq.n	800677e <HAL_TIM_PWM_Start+0x136>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a1d      	ldr	r2, [pc, #116]	@ (80067c8 <HAL_TIM_PWM_Start+0x180>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d013      	beq.n	800677e <HAL_TIM_PWM_Start+0x136>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a1c      	ldr	r2, [pc, #112]	@ (80067cc <HAL_TIM_PWM_Start+0x184>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d00e      	beq.n	800677e <HAL_TIM_PWM_Start+0x136>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a16      	ldr	r2, [pc, #88]	@ (80067c0 <HAL_TIM_PWM_Start+0x178>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d009      	beq.n	800677e <HAL_TIM_PWM_Start+0x136>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a18      	ldr	r2, [pc, #96]	@ (80067d0 <HAL_TIM_PWM_Start+0x188>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d004      	beq.n	800677e <HAL_TIM_PWM_Start+0x136>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a16      	ldr	r2, [pc, #88]	@ (80067d4 <HAL_TIM_PWM_Start+0x18c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d111      	bne.n	80067a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b06      	cmp	r3, #6
 800678e:	d010      	beq.n	80067b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a0:	e007      	b.n	80067b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40010000 	.word	0x40010000
 80067c0:	40010400 	.word	0x40010400
 80067c4:	40000400 	.word	0x40000400
 80067c8:	40000800 	.word	0x40000800
 80067cc:	40000c00 	.word	0x40000c00
 80067d0:	40014000 	.word	0x40014000
 80067d4:	40001800 	.word	0x40001800

080067d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e041      	b.n	800686e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d106      	bne.n	8006804 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fb fc76 	bl	80020f0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3304      	adds	r3, #4
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f000 fc6c 	bl	80070f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d104      	bne.n	8006896 <HAL_TIM_IC_Start_IT+0x1e>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006892:	b2db      	uxtb	r3, r3
 8006894:	e013      	b.n	80068be <HAL_TIM_IC_Start_IT+0x46>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b04      	cmp	r3, #4
 800689a:	d104      	bne.n	80068a6 <HAL_TIM_IC_Start_IT+0x2e>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	e00b      	b.n	80068be <HAL_TIM_IC_Start_IT+0x46>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d104      	bne.n	80068b6 <HAL_TIM_IC_Start_IT+0x3e>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	e003      	b.n	80068be <HAL_TIM_IC_Start_IT+0x46>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d104      	bne.n	80068d0 <HAL_TIM_IC_Start_IT+0x58>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	e013      	b.n	80068f8 <HAL_TIM_IC_Start_IT+0x80>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b04      	cmp	r3, #4
 80068d4:	d104      	bne.n	80068e0 <HAL_TIM_IC_Start_IT+0x68>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	e00b      	b.n	80068f8 <HAL_TIM_IC_Start_IT+0x80>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	d104      	bne.n	80068f0 <HAL_TIM_IC_Start_IT+0x78>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	e003      	b.n	80068f8 <HAL_TIM_IC_Start_IT+0x80>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80068fa:	7bbb      	ldrb	r3, [r7, #14]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d102      	bne.n	8006906 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006900:	7b7b      	ldrb	r3, [r7, #13]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d001      	beq.n	800690a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e0cc      	b.n	8006aa4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d104      	bne.n	800691a <HAL_TIM_IC_Start_IT+0xa2>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006918:	e013      	b.n	8006942 <HAL_TIM_IC_Start_IT+0xca>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b04      	cmp	r3, #4
 800691e:	d104      	bne.n	800692a <HAL_TIM_IC_Start_IT+0xb2>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006928:	e00b      	b.n	8006942 <HAL_TIM_IC_Start_IT+0xca>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b08      	cmp	r3, #8
 800692e:	d104      	bne.n	800693a <HAL_TIM_IC_Start_IT+0xc2>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006938:	e003      	b.n	8006942 <HAL_TIM_IC_Start_IT+0xca>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2202      	movs	r2, #2
 800693e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d104      	bne.n	8006952 <HAL_TIM_IC_Start_IT+0xda>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006950:	e013      	b.n	800697a <HAL_TIM_IC_Start_IT+0x102>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b04      	cmp	r3, #4
 8006956:	d104      	bne.n	8006962 <HAL_TIM_IC_Start_IT+0xea>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006960:	e00b      	b.n	800697a <HAL_TIM_IC_Start_IT+0x102>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b08      	cmp	r3, #8
 8006966:	d104      	bne.n	8006972 <HAL_TIM_IC_Start_IT+0xfa>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006970:	e003      	b.n	800697a <HAL_TIM_IC_Start_IT+0x102>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2202      	movs	r2, #2
 8006976:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b0c      	cmp	r3, #12
 800697e:	d841      	bhi.n	8006a04 <HAL_TIM_IC_Start_IT+0x18c>
 8006980:	a201      	add	r2, pc, #4	@ (adr r2, 8006988 <HAL_TIM_IC_Start_IT+0x110>)
 8006982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006986:	bf00      	nop
 8006988:	080069bd 	.word	0x080069bd
 800698c:	08006a05 	.word	0x08006a05
 8006990:	08006a05 	.word	0x08006a05
 8006994:	08006a05 	.word	0x08006a05
 8006998:	080069cf 	.word	0x080069cf
 800699c:	08006a05 	.word	0x08006a05
 80069a0:	08006a05 	.word	0x08006a05
 80069a4:	08006a05 	.word	0x08006a05
 80069a8:	080069e1 	.word	0x080069e1
 80069ac:	08006a05 	.word	0x08006a05
 80069b0:	08006a05 	.word	0x08006a05
 80069b4:	08006a05 	.word	0x08006a05
 80069b8:	080069f3 	.word	0x080069f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0202 	orr.w	r2, r2, #2
 80069ca:	60da      	str	r2, [r3, #12]
      break;
 80069cc:	e01d      	b.n	8006a0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f042 0204 	orr.w	r2, r2, #4
 80069dc:	60da      	str	r2, [r3, #12]
      break;
 80069de:	e014      	b.n	8006a0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f042 0208 	orr.w	r2, r2, #8
 80069ee:	60da      	str	r2, [r3, #12]
      break;
 80069f0:	e00b      	b.n	8006a0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68da      	ldr	r2, [r3, #12]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f042 0210 	orr.w	r2, r2, #16
 8006a00:	60da      	str	r2, [r3, #12]
      break;
 8006a02:	e002      	b.n	8006a0a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	73fb      	strb	r3, [r7, #15]
      break;
 8006a08:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d148      	bne.n	8006aa2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2201      	movs	r2, #1
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fef1 	bl	8007800 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a22      	ldr	r2, [pc, #136]	@ (8006aac <HAL_TIM_IC_Start_IT+0x234>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d022      	beq.n	8006a6e <HAL_TIM_IC_Start_IT+0x1f6>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a30:	d01d      	beq.n	8006a6e <HAL_TIM_IC_Start_IT+0x1f6>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab0 <HAL_TIM_IC_Start_IT+0x238>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d018      	beq.n	8006a6e <HAL_TIM_IC_Start_IT+0x1f6>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab4 <HAL_TIM_IC_Start_IT+0x23c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d013      	beq.n	8006a6e <HAL_TIM_IC_Start_IT+0x1f6>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab8 <HAL_TIM_IC_Start_IT+0x240>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00e      	beq.n	8006a6e <HAL_TIM_IC_Start_IT+0x1f6>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a19      	ldr	r2, [pc, #100]	@ (8006abc <HAL_TIM_IC_Start_IT+0x244>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d009      	beq.n	8006a6e <HAL_TIM_IC_Start_IT+0x1f6>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a18      	ldr	r2, [pc, #96]	@ (8006ac0 <HAL_TIM_IC_Start_IT+0x248>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d004      	beq.n	8006a6e <HAL_TIM_IC_Start_IT+0x1f6>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a16      	ldr	r2, [pc, #88]	@ (8006ac4 <HAL_TIM_IC_Start_IT+0x24c>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d111      	bne.n	8006a92 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b06      	cmp	r3, #6
 8006a7e:	d010      	beq.n	8006aa2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a90:	e007      	b.n	8006aa2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f042 0201 	orr.w	r2, r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	40010000 	.word	0x40010000
 8006ab0:	40000400 	.word	0x40000400
 8006ab4:	40000800 	.word	0x40000800
 8006ab8:	40000c00 	.word	0x40000c00
 8006abc:	40010400 	.word	0x40010400
 8006ac0:	40014000 	.word	0x40014000
 8006ac4:	40001800 	.word	0x40001800

08006ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d020      	beq.n	8006b2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01b      	beq.n	8006b2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0202 	mvn.w	r2, #2
 8006afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fa fbdc 	bl	80012d0 <HAL_TIM_IC_CaptureCallback>
 8006b18:	e005      	b.n	8006b26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 facc 	bl	80070b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fad3 	bl	80070cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f003 0304 	and.w	r3, r3, #4
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d020      	beq.n	8006b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01b      	beq.n	8006b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f06f 0204 	mvn.w	r2, #4
 8006b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fa fbb6 	bl	80012d0 <HAL_TIM_IC_CaptureCallback>
 8006b64:	e005      	b.n	8006b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 faa6 	bl	80070b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 faad 	bl	80070cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f003 0308 	and.w	r3, r3, #8
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d020      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f003 0308 	and.w	r3, r3, #8
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01b      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0208 	mvn.w	r2, #8
 8006b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2204      	movs	r2, #4
 8006b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f7fa fb90 	bl	80012d0 <HAL_TIM_IC_CaptureCallback>
 8006bb0:	e005      	b.n	8006bbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fa80 	bl	80070b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fa87 	bl	80070cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 0310 	and.w	r3, r3, #16
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d020      	beq.n	8006c10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01b      	beq.n	8006c10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0210 	mvn.w	r2, #16
 8006be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2208      	movs	r2, #8
 8006be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fa fb6a 	bl	80012d0 <HAL_TIM_IC_CaptureCallback>
 8006bfc:	e005      	b.n	8006c0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fa5a 	bl	80070b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa61 	bl	80070cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00c      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d007      	beq.n	8006c34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f06f 0201 	mvn.w	r2, #1
 8006c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fa38 	bl	80070a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00c      	beq.n	8006c58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d007      	beq.n	8006c58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fed2 	bl	80079fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00c      	beq.n	8006c7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fa32 	bl	80070e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f003 0320 	and.w	r3, r3, #32
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00c      	beq.n	8006ca0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f003 0320 	and.w	r3, r3, #32
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f06f 0220 	mvn.w	r2, #32
 8006c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fea4 	bl	80079e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e048      	b.n	8006d58 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b0c      	cmp	r3, #12
 8006cd2:	d839      	bhi.n	8006d48 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cdc <HAL_TIM_OC_ConfigChannel+0x34>)
 8006cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cda:	bf00      	nop
 8006cdc:	08006d11 	.word	0x08006d11
 8006ce0:	08006d49 	.word	0x08006d49
 8006ce4:	08006d49 	.word	0x08006d49
 8006ce8:	08006d49 	.word	0x08006d49
 8006cec:	08006d1f 	.word	0x08006d1f
 8006cf0:	08006d49 	.word	0x08006d49
 8006cf4:	08006d49 	.word	0x08006d49
 8006cf8:	08006d49 	.word	0x08006d49
 8006cfc:	08006d2d 	.word	0x08006d2d
 8006d00:	08006d49 	.word	0x08006d49
 8006d04:	08006d49 	.word	0x08006d49
 8006d08:	08006d49 	.word	0x08006d49
 8006d0c:	08006d3b 	.word	0x08006d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fa98 	bl	800724c <TIM_OC1_SetConfig>
      break;
 8006d1c:	e017      	b.n	8006d4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fb01 	bl	800732c <TIM_OC2_SetConfig>
      break;
 8006d2a:	e010      	b.n	8006d4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68b9      	ldr	r1, [r7, #8]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 fb70 	bl	8007418 <TIM_OC3_SetConfig>
      break;
 8006d38:	e009      	b.n	8006d4e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 fbdd 	bl	8007500 <TIM_OC4_SetConfig>
      break;
 8006d46:	e002      	b.n	8006d4e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_TIM_IC_ConfigChannel+0x1e>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e088      	b.n	8006e90 <HAL_TIM_IC_ConfigChannel+0x130>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d11b      	bne.n	8006dc4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006d9c:	f000 fc06 	bl	80075ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699a      	ldr	r2, [r3, #24]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 020c 	bic.w	r2, r2, #12
 8006dae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6999      	ldr	r1, [r3, #24]
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	619a      	str	r2, [r3, #24]
 8006dc2:	e060      	b.n	8006e86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d11c      	bne.n	8006e04 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006dda:	f000 fc5b 	bl	8007694 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699a      	ldr	r2, [r3, #24]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006dec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6999      	ldr	r1, [r3, #24]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	021a      	lsls	r2, r3, #8
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	619a      	str	r2, [r3, #24]
 8006e02:	e040      	b.n	8006e86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d11b      	bne.n	8006e42 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006e1a:	f000 fc78 	bl	800770e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 020c 	bic.w	r2, r2, #12
 8006e2c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69d9      	ldr	r1, [r3, #28]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	61da      	str	r2, [r3, #28]
 8006e40:	e021      	b.n	8006e86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b0c      	cmp	r3, #12
 8006e46:	d11c      	bne.n	8006e82 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006e58:	f000 fc95 	bl	8007786 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69da      	ldr	r2, [r3, #28]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006e6a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69d9      	ldr	r1, [r3, #28]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	021a      	lsls	r2, r3, #8
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	61da      	str	r2, [r3, #28]
 8006e80:	e001      	b.n	8006e86 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d101      	bne.n	8006eb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	e0ae      	b.n	8007014 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b0c      	cmp	r3, #12
 8006ec2:	f200 809f 	bhi.w	8007004 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ecc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ecc:	08006f01 	.word	0x08006f01
 8006ed0:	08007005 	.word	0x08007005
 8006ed4:	08007005 	.word	0x08007005
 8006ed8:	08007005 	.word	0x08007005
 8006edc:	08006f41 	.word	0x08006f41
 8006ee0:	08007005 	.word	0x08007005
 8006ee4:	08007005 	.word	0x08007005
 8006ee8:	08007005 	.word	0x08007005
 8006eec:	08006f83 	.word	0x08006f83
 8006ef0:	08007005 	.word	0x08007005
 8006ef4:	08007005 	.word	0x08007005
 8006ef8:	08007005 	.word	0x08007005
 8006efc:	08006fc3 	.word	0x08006fc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 f9a0 	bl	800724c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	699a      	ldr	r2, [r3, #24]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0208 	orr.w	r2, r2, #8
 8006f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699a      	ldr	r2, [r3, #24]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0204 	bic.w	r2, r2, #4
 8006f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6999      	ldr	r1, [r3, #24]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	691a      	ldr	r2, [r3, #16]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	619a      	str	r2, [r3, #24]
      break;
 8006f3e:	e064      	b.n	800700a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68b9      	ldr	r1, [r7, #8]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 f9f0 	bl	800732c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699a      	ldr	r2, [r3, #24]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	699a      	ldr	r2, [r3, #24]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6999      	ldr	r1, [r3, #24]
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	021a      	lsls	r2, r3, #8
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	619a      	str	r2, [r3, #24]
      break;
 8006f80:	e043      	b.n	800700a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 fa45 	bl	8007418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69da      	ldr	r2, [r3, #28]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f042 0208 	orr.w	r2, r2, #8
 8006f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69da      	ldr	r2, [r3, #28]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0204 	bic.w	r2, r2, #4
 8006fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69d9      	ldr	r1, [r3, #28]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	691a      	ldr	r2, [r3, #16]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	61da      	str	r2, [r3, #28]
      break;
 8006fc0:	e023      	b.n	800700a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68b9      	ldr	r1, [r7, #8]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fa99 	bl	8007500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	69da      	ldr	r2, [r3, #28]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69da      	ldr	r2, [r3, #28]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69d9      	ldr	r1, [r3, #28]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	021a      	lsls	r2, r3, #8
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	61da      	str	r2, [r3, #28]
      break;
 8007002:	e002      	b.n	800700a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	75fb      	strb	r3, [r7, #23]
      break;
 8007008:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007012:	7dfb      	ldrb	r3, [r7, #23]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b0c      	cmp	r3, #12
 800702e:	d831      	bhi.n	8007094 <HAL_TIM_ReadCapturedValue+0x78>
 8007030:	a201      	add	r2, pc, #4	@ (adr r2, 8007038 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007036:	bf00      	nop
 8007038:	0800706d 	.word	0x0800706d
 800703c:	08007095 	.word	0x08007095
 8007040:	08007095 	.word	0x08007095
 8007044:	08007095 	.word	0x08007095
 8007048:	08007077 	.word	0x08007077
 800704c:	08007095 	.word	0x08007095
 8007050:	08007095 	.word	0x08007095
 8007054:	08007095 	.word	0x08007095
 8007058:	08007081 	.word	0x08007081
 800705c:	08007095 	.word	0x08007095
 8007060:	08007095 	.word	0x08007095
 8007064:	08007095 	.word	0x08007095
 8007068:	0800708b 	.word	0x0800708b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007072:	60fb      	str	r3, [r7, #12]

      break;
 8007074:	e00f      	b.n	8007096 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707c:	60fb      	str	r3, [r7, #12]

      break;
 800707e:	e00a      	b.n	8007096 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007086:	60fb      	str	r3, [r7, #12]

      break;
 8007088:	e005      	b.n	8007096 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007090:	60fb      	str	r3, [r7, #12]

      break;
 8007092:	e000      	b.n	8007096 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007094:	bf00      	nop
  }

  return tmpreg;
 8007096:	68fb      	ldr	r3, [r7, #12]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070c0:	bf00      	nop
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a46      	ldr	r2, [pc, #280]	@ (8007220 <TIM_Base_SetConfig+0x12c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d013      	beq.n	8007134 <TIM_Base_SetConfig+0x40>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007112:	d00f      	beq.n	8007134 <TIM_Base_SetConfig+0x40>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a43      	ldr	r2, [pc, #268]	@ (8007224 <TIM_Base_SetConfig+0x130>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d00b      	beq.n	8007134 <TIM_Base_SetConfig+0x40>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a42      	ldr	r2, [pc, #264]	@ (8007228 <TIM_Base_SetConfig+0x134>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d007      	beq.n	8007134 <TIM_Base_SetConfig+0x40>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	4a41      	ldr	r2, [pc, #260]	@ (800722c <TIM_Base_SetConfig+0x138>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d003      	beq.n	8007134 <TIM_Base_SetConfig+0x40>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a40      	ldr	r2, [pc, #256]	@ (8007230 <TIM_Base_SetConfig+0x13c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d108      	bne.n	8007146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a35      	ldr	r2, [pc, #212]	@ (8007220 <TIM_Base_SetConfig+0x12c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d02b      	beq.n	80071a6 <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007154:	d027      	beq.n	80071a6 <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a32      	ldr	r2, [pc, #200]	@ (8007224 <TIM_Base_SetConfig+0x130>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d023      	beq.n	80071a6 <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a31      	ldr	r2, [pc, #196]	@ (8007228 <TIM_Base_SetConfig+0x134>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d01f      	beq.n	80071a6 <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a30      	ldr	r2, [pc, #192]	@ (800722c <TIM_Base_SetConfig+0x138>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d01b      	beq.n	80071a6 <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a2f      	ldr	r2, [pc, #188]	@ (8007230 <TIM_Base_SetConfig+0x13c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d017      	beq.n	80071a6 <TIM_Base_SetConfig+0xb2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a2e      	ldr	r2, [pc, #184]	@ (8007234 <TIM_Base_SetConfig+0x140>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d013      	beq.n	80071a6 <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a2d      	ldr	r2, [pc, #180]	@ (8007238 <TIM_Base_SetConfig+0x144>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d00f      	beq.n	80071a6 <TIM_Base_SetConfig+0xb2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a2c      	ldr	r2, [pc, #176]	@ (800723c <TIM_Base_SetConfig+0x148>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00b      	beq.n	80071a6 <TIM_Base_SetConfig+0xb2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a2b      	ldr	r2, [pc, #172]	@ (8007240 <TIM_Base_SetConfig+0x14c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d007      	beq.n	80071a6 <TIM_Base_SetConfig+0xb2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2a      	ldr	r2, [pc, #168]	@ (8007244 <TIM_Base_SetConfig+0x150>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d003      	beq.n	80071a6 <TIM_Base_SetConfig+0xb2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a29      	ldr	r2, [pc, #164]	@ (8007248 <TIM_Base_SetConfig+0x154>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d108      	bne.n	80071b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	689a      	ldr	r2, [r3, #8]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a10      	ldr	r2, [pc, #64]	@ (8007220 <TIM_Base_SetConfig+0x12c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d003      	beq.n	80071ec <TIM_Base_SetConfig+0xf8>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a12      	ldr	r2, [pc, #72]	@ (8007230 <TIM_Base_SetConfig+0x13c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d103      	bne.n	80071f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	691a      	ldr	r2, [r3, #16]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b01      	cmp	r3, #1
 8007204:	d105      	bne.n	8007212 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	f023 0201 	bic.w	r2, r3, #1
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	611a      	str	r2, [r3, #16]
  }
}
 8007212:	bf00      	nop
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	40010000 	.word	0x40010000
 8007224:	40000400 	.word	0x40000400
 8007228:	40000800 	.word	0x40000800
 800722c:	40000c00 	.word	0x40000c00
 8007230:	40010400 	.word	0x40010400
 8007234:	40014000 	.word	0x40014000
 8007238:	40014400 	.word	0x40014400
 800723c:	40014800 	.word	0x40014800
 8007240:	40001800 	.word	0x40001800
 8007244:	40001c00 	.word	0x40001c00
 8007248:	40002000 	.word	0x40002000

0800724c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	f023 0201 	bic.w	r2, r3, #1
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800727a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0303 	bic.w	r3, r3, #3
 8007282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4313      	orrs	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f023 0302 	bic.w	r3, r3, #2
 8007294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a20      	ldr	r2, [pc, #128]	@ (8007324 <TIM_OC1_SetConfig+0xd8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d003      	beq.n	80072b0 <TIM_OC1_SetConfig+0x64>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007328 <TIM_OC1_SetConfig+0xdc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d10c      	bne.n	80072ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f023 0308 	bic.w	r3, r3, #8
 80072b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	4313      	orrs	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f023 0304 	bic.w	r3, r3, #4
 80072c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a15      	ldr	r2, [pc, #84]	@ (8007324 <TIM_OC1_SetConfig+0xd8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d003      	beq.n	80072da <TIM_OC1_SetConfig+0x8e>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a14      	ldr	r2, [pc, #80]	@ (8007328 <TIM_OC1_SetConfig+0xdc>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d111      	bne.n	80072fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	621a      	str	r2, [r3, #32]
}
 8007318:	bf00      	nop
 800731a:	371c      	adds	r7, #28
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	40010000 	.word	0x40010000
 8007328:	40010400 	.word	0x40010400

0800732c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	f023 0210 	bic.w	r2, r3, #16
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800735a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f023 0320 	bic.w	r3, r3, #32
 8007376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	011b      	lsls	r3, r3, #4
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	4313      	orrs	r3, r2
 8007382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a22      	ldr	r2, [pc, #136]	@ (8007410 <TIM_OC2_SetConfig+0xe4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d003      	beq.n	8007394 <TIM_OC2_SetConfig+0x68>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a21      	ldr	r2, [pc, #132]	@ (8007414 <TIM_OC2_SetConfig+0xe8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d10d      	bne.n	80073b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800739a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	011b      	lsls	r3, r3, #4
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a17      	ldr	r2, [pc, #92]	@ (8007410 <TIM_OC2_SetConfig+0xe4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d003      	beq.n	80073c0 <TIM_OC2_SetConfig+0x94>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a16      	ldr	r2, [pc, #88]	@ (8007414 <TIM_OC2_SetConfig+0xe8>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d113      	bne.n	80073e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40010000 	.word	0x40010000
 8007414:	40010400 	.word	0x40010400

08007418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0303 	bic.w	r3, r3, #3
 800744e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	4313      	orrs	r3, r2
 800746c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a21      	ldr	r2, [pc, #132]	@ (80074f8 <TIM_OC3_SetConfig+0xe0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_OC3_SetConfig+0x66>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a20      	ldr	r2, [pc, #128]	@ (80074fc <TIM_OC3_SetConfig+0xe4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d10d      	bne.n	800749a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007484:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	021b      	lsls	r3, r3, #8
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	4313      	orrs	r3, r2
 8007490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a16      	ldr	r2, [pc, #88]	@ (80074f8 <TIM_OC3_SetConfig+0xe0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d003      	beq.n	80074aa <TIM_OC3_SetConfig+0x92>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a15      	ldr	r2, [pc, #84]	@ (80074fc <TIM_OC3_SetConfig+0xe4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d113      	bne.n	80074d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	621a      	str	r2, [r3, #32]
}
 80074ec:	bf00      	nop
 80074ee:	371c      	adds	r7, #28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	40010000 	.word	0x40010000
 80074fc:	40010400 	.word	0x40010400

08007500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800752e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	4313      	orrs	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800754a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	031b      	lsls	r3, r3, #12
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	4313      	orrs	r3, r2
 8007556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a12      	ldr	r2, [pc, #72]	@ (80075a4 <TIM_OC4_SetConfig+0xa4>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d003      	beq.n	8007568 <TIM_OC4_SetConfig+0x68>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a11      	ldr	r2, [pc, #68]	@ (80075a8 <TIM_OC4_SetConfig+0xa8>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d109      	bne.n	800757c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800756e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	019b      	lsls	r3, r3, #6
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4313      	orrs	r3, r2
 800757a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	621a      	str	r2, [r3, #32]
}
 8007596:	bf00      	nop
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40010000 	.word	0x40010000
 80075a8:	40010400 	.word	0x40010400

080075ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	f023 0201 	bic.w	r2, r3, #1
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4a28      	ldr	r2, [pc, #160]	@ (8007678 <TIM_TI1_SetConfig+0xcc>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d01b      	beq.n	8007612 <TIM_TI1_SetConfig+0x66>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075e0:	d017      	beq.n	8007612 <TIM_TI1_SetConfig+0x66>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4a25      	ldr	r2, [pc, #148]	@ (800767c <TIM_TI1_SetConfig+0xd0>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d013      	beq.n	8007612 <TIM_TI1_SetConfig+0x66>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4a24      	ldr	r2, [pc, #144]	@ (8007680 <TIM_TI1_SetConfig+0xd4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00f      	beq.n	8007612 <TIM_TI1_SetConfig+0x66>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4a23      	ldr	r2, [pc, #140]	@ (8007684 <TIM_TI1_SetConfig+0xd8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00b      	beq.n	8007612 <TIM_TI1_SetConfig+0x66>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4a22      	ldr	r2, [pc, #136]	@ (8007688 <TIM_TI1_SetConfig+0xdc>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d007      	beq.n	8007612 <TIM_TI1_SetConfig+0x66>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4a21      	ldr	r2, [pc, #132]	@ (800768c <TIM_TI1_SetConfig+0xe0>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d003      	beq.n	8007612 <TIM_TI1_SetConfig+0x66>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4a20      	ldr	r2, [pc, #128]	@ (8007690 <TIM_TI1_SetConfig+0xe4>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d101      	bne.n	8007616 <TIM_TI1_SetConfig+0x6a>
 8007612:	2301      	movs	r3, #1
 8007614:	e000      	b.n	8007618 <TIM_TI1_SetConfig+0x6c>
 8007616:	2300      	movs	r3, #0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d008      	beq.n	800762e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4313      	orrs	r3, r2
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	e003      	b.n	8007636 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f043 0301 	orr.w	r3, r3, #1
 8007634:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800763c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	b2db      	uxtb	r3, r3
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f023 030a 	bic.w	r3, r3, #10
 8007650:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	f003 030a 	and.w	r3, r3, #10
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	621a      	str	r2, [r3, #32]
}
 800766a:	bf00      	nop
 800766c:	371c      	adds	r7, #28
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	40010000 	.word	0x40010000
 800767c:	40000400 	.word	0x40000400
 8007680:	40000800 	.word	0x40000800
 8007684:	40000c00 	.word	0x40000c00
 8007688:	40010400 	.word	0x40010400
 800768c:	40014000 	.word	0x40014000
 8007690:	40001800 	.word	0x40001800

08007694 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	f023 0210 	bic.w	r2, r3, #16
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	031b      	lsls	r3, r3, #12
 80076d8:	b29b      	uxth	r3, r3
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80076e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	621a      	str	r2, [r3, #32]
}
 8007702:	bf00      	nop
 8007704:	371c      	adds	r7, #28
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800770e:	b480      	push	{r7}
 8007710:	b087      	sub	sp, #28
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	607a      	str	r2, [r7, #4]
 800771a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800774a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	011b      	lsls	r3, r3, #4
 8007750:	b2db      	uxtb	r3, r3
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800775e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	021b      	lsls	r3, r3, #8
 8007764:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	4313      	orrs	r3, r2
 800776c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	621a      	str	r2, [r3, #32]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007786:	b480      	push	{r7}
 8007788:	b087      	sub	sp, #28
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	021b      	lsls	r3, r3, #8
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	031b      	lsls	r3, r3, #12
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80077d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	031b      	lsls	r3, r3, #12
 80077de:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	621a      	str	r2, [r3, #32]
}
 80077f4:	bf00      	nop
 80077f6:	371c      	adds	r7, #28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f003 031f 	and.w	r3, r3, #31
 8007812:	2201      	movs	r2, #1
 8007814:	fa02 f303 	lsl.w	r3, r2, r3
 8007818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6a1a      	ldr	r2, [r3, #32]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	43db      	mvns	r3, r3
 8007822:	401a      	ands	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a1a      	ldr	r2, [r3, #32]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f003 031f 	and.w	r3, r3, #31
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	fa01 f303 	lsl.w	r3, r1, r3
 8007838:	431a      	orrs	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	621a      	str	r2, [r3, #32]
}
 800783e:	bf00      	nop
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
	...

0800784c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800785c:	2b01      	cmp	r3, #1
 800785e:	d101      	bne.n	8007864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007860:	2302      	movs	r3, #2
 8007862:	e05a      	b.n	800791a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800788a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4313      	orrs	r3, r2
 8007894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a21      	ldr	r2, [pc, #132]	@ (8007928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d022      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078b0:	d01d      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a1d      	ldr	r2, [pc, #116]	@ (800792c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d018      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007930 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d013      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007934 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d00e      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a18      	ldr	r2, [pc, #96]	@ (8007938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d009      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a17      	ldr	r2, [pc, #92]	@ (800793c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d004      	beq.n	80078ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a15      	ldr	r2, [pc, #84]	@ (8007940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d10c      	bne.n	8007908 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	40010000 	.word	0x40010000
 800792c:	40000400 	.word	0x40000400
 8007930:	40000800 	.word	0x40000800
 8007934:	40000c00 	.word	0x40000c00
 8007938:	40010400 	.word	0x40010400
 800793c:	40014000 	.word	0x40014000
 8007940:	40001800 	.word	0x40001800

08007944 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800795c:	2302      	movs	r3, #2
 800795e:	e03d      	b.n	80079dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	4313      	orrs	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4313      	orrs	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	4603      	mov	r3, r0
 8007a18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a22:	2b84      	cmp	r3, #132	@ 0x84
 8007a24:	d005      	beq.n	8007a32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007a26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	3303      	adds	r3, #3
 8007a30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007a32:	68fb      	ldr	r3, [r7, #12]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007a44:	f000 fb50 	bl	80080e8 <vTaskStartScheduler>
  
  return osOK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a50:	b089      	sub	sp, #36	@ 0x24
 8007a52:	af04      	add	r7, sp, #16
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d020      	beq.n	8007aa2 <osThreadCreate+0x54>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01c      	beq.n	8007aa2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685c      	ldr	r4, [r3, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	691e      	ldr	r6, [r3, #16]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff ffc8 	bl	8007a10 <makeFreeRtosPriority>
 8007a80:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007a8a:	9202      	str	r2, [sp, #8]
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	9100      	str	r1, [sp, #0]
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	4632      	mov	r2, r6
 8007a94:	4629      	mov	r1, r5
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 f8d9 	bl	8007c4e <xTaskCreateStatic>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	e01c      	b.n	8007adc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685c      	ldr	r4, [r3, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007aae:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7ff ffaa 	bl	8007a10 <makeFreeRtosPriority>
 8007abc:	4602      	mov	r2, r0
 8007abe:	f107 030c 	add.w	r3, r7, #12
 8007ac2:	9301      	str	r3, [sp, #4]
 8007ac4:	9200      	str	r2, [sp, #0]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	4632      	mov	r2, r6
 8007aca:	4629      	mov	r1, r5
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 f91e 	bl	8007d0e <xTaskCreate>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d001      	beq.n	8007adc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e000      	b.n	8007ade <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007adc:	68fb      	ldr	r3, [r7, #12]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ae6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f103 0208 	add.w	r2, r3, #8
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f04f 32ff 	mov.w	r2, #4294967295
 8007afe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f103 0208 	add.w	r2, r3, #8
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f103 0208 	add.w	r2, r3, #8
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	601a      	str	r2, [r3, #0]
}
 8007b7c:	bf00      	nop
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9e:	d103      	bne.n	8007ba8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	e00c      	b.n	8007bc2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3308      	adds	r3, #8
 8007bac:	60fb      	str	r3, [r7, #12]
 8007bae:	e002      	b.n	8007bb6 <vListInsert+0x2e>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d2f6      	bcs.n	8007bb0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	601a      	str	r2, [r3, #0]
}
 8007bee:	bf00      	nop
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	6892      	ldr	r2, [r2, #8]
 8007c10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	6852      	ldr	r2, [r2, #4]
 8007c1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d103      	bne.n	8007c2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	1e5a      	subs	r2, r3, #1
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b08e      	sub	sp, #56	@ 0x38
 8007c52:	af04      	add	r7, sp, #16
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
 8007c5a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10b      	bne.n	8007c7a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	e7fd      	b.n	8007c76 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10b      	bne.n	8007c98 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	61fb      	str	r3, [r7, #28]
}
 8007c92:	bf00      	nop
 8007c94:	bf00      	nop
 8007c96:	e7fd      	b.n	8007c94 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c98:	2354      	movs	r3, #84	@ 0x54
 8007c9a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	2b54      	cmp	r3, #84	@ 0x54
 8007ca0:	d00b      	beq.n	8007cba <xTaskCreateStatic+0x6c>
	__asm volatile
 8007ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca6:	f383 8811 	msr	BASEPRI, r3
 8007caa:	f3bf 8f6f 	isb	sy
 8007cae:	f3bf 8f4f 	dsb	sy
 8007cb2:	61bb      	str	r3, [r7, #24]
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop
 8007cb8:	e7fd      	b.n	8007cb6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007cba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d01e      	beq.n	8007d00 <xTaskCreateStatic+0xb2>
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01b      	beq.n	8007d00 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cd0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007cda:	2300      	movs	r3, #0
 8007cdc:	9303      	str	r3, [sp, #12]
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	9302      	str	r3, [sp, #8]
 8007ce2:	f107 0314 	add.w	r3, r7, #20
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 f850 	bl	8007d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cf8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007cfa:	f000 f8d5 	bl	8007ea8 <prvAddNewTaskToReadyList>
 8007cfe:	e001      	b.n	8007d04 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007d00:	2300      	movs	r3, #0
 8007d02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d04:	697b      	ldr	r3, [r7, #20]
	}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3728      	adds	r7, #40	@ 0x28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b08c      	sub	sp, #48	@ 0x30
 8007d12:	af04      	add	r7, sp, #16
 8007d14:	60f8      	str	r0, [r7, #12]
 8007d16:	60b9      	str	r1, [r7, #8]
 8007d18:	603b      	str	r3, [r7, #0]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d1e:	88fb      	ldrh	r3, [r7, #6]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 ff80 	bl	8008c28 <pvPortMalloc>
 8007d28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00e      	beq.n	8007d4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d30:	2054      	movs	r0, #84	@ 0x54
 8007d32:	f000 ff79 	bl	8008c28 <pvPortMalloc>
 8007d36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d44:	e005      	b.n	8007d52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d46:	6978      	ldr	r0, [r7, #20]
 8007d48:	f001 f83c 	bl	8008dc4 <vPortFree>
 8007d4c:	e001      	b.n	8007d52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d017      	beq.n	8007d88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d60:	88fa      	ldrh	r2, [r7, #6]
 8007d62:	2300      	movs	r3, #0
 8007d64:	9303      	str	r3, [sp, #12]
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	9302      	str	r3, [sp, #8]
 8007d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68b9      	ldr	r1, [r7, #8]
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 f80e 	bl	8007d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d7c:	69f8      	ldr	r0, [r7, #28]
 8007d7e:	f000 f893 	bl	8007ea8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d82:	2301      	movs	r3, #1
 8007d84:	61bb      	str	r3, [r7, #24]
 8007d86:	e002      	b.n	8007d8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d88:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
	}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3720      	adds	r7, #32
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007db0:	3b01      	subs	r3, #1
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	f023 0307 	bic.w	r3, r3, #7
 8007dbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00b      	beq.n	8007de2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	617b      	str	r3, [r7, #20]
}
 8007ddc:	bf00      	nop
 8007dde:	bf00      	nop
 8007de0:	e7fd      	b.n	8007dde <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01f      	beq.n	8007e28 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007de8:	2300      	movs	r3, #0
 8007dea:	61fb      	str	r3, [r7, #28]
 8007dec:	e012      	b.n	8007e14 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	4413      	add	r3, r2
 8007df4:	7819      	ldrb	r1, [r3, #0]
 8007df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	3334      	adds	r3, #52	@ 0x34
 8007dfe:	460a      	mov	r2, r1
 8007e00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	4413      	add	r3, r2
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d006      	beq.n	8007e1c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	3301      	adds	r3, #1
 8007e12:	61fb      	str	r3, [r7, #28]
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	2b0f      	cmp	r3, #15
 8007e18:	d9e9      	bls.n	8007dee <prvInitialiseNewTask+0x56>
 8007e1a:	e000      	b.n	8007e1e <prvInitialiseNewTask+0x86>
			{
				break;
 8007e1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e26:	e003      	b.n	8007e30 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e32:	2b06      	cmp	r3, #6
 8007e34:	d901      	bls.n	8007e3a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e36:	2306      	movs	r3, #6
 8007e38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e44:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e48:	2200      	movs	r2, #0
 8007e4a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4e:	3304      	adds	r3, #4
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff fe68 	bl	8007b26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e58:	3318      	adds	r3, #24
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff fe63 	bl	8007b26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e68:	f1c3 0207 	rsb	r2, r3, #7
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	2200      	movs	r2, #0
 8007e7a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	68f9      	ldr	r1, [r7, #12]
 8007e88:	69b8      	ldr	r0, [r7, #24]
 8007e8a:	f000 fcbb 	bl	8008804 <pxPortInitialiseStack>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e92:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d002      	beq.n	8007ea0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ea0:	bf00      	nop
 8007ea2:	3720      	adds	r7, #32
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007eb0:	f000 fdda 	bl	8008a68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8007f60 <prvAddNewTaskToReadyList+0xb8>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	4a29      	ldr	r2, [pc, #164]	@ (8007f60 <prvAddNewTaskToReadyList+0xb8>)
 8007ebc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ebe:	4b29      	ldr	r3, [pc, #164]	@ (8007f64 <prvAddNewTaskToReadyList+0xbc>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d109      	bne.n	8007eda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ec6:	4a27      	ldr	r2, [pc, #156]	@ (8007f64 <prvAddNewTaskToReadyList+0xbc>)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ecc:	4b24      	ldr	r3, [pc, #144]	@ (8007f60 <prvAddNewTaskToReadyList+0xb8>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d110      	bne.n	8007ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ed4:	f000 fb54 	bl	8008580 <prvInitialiseTaskLists>
 8007ed8:	e00d      	b.n	8007ef6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007eda:	4b23      	ldr	r3, [pc, #140]	@ (8007f68 <prvAddNewTaskToReadyList+0xc0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d109      	bne.n	8007ef6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ee2:	4b20      	ldr	r3, [pc, #128]	@ (8007f64 <prvAddNewTaskToReadyList+0xbc>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d802      	bhi.n	8007ef6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8007f64 <prvAddNewTaskToReadyList+0xbc>)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f6c <prvAddNewTaskToReadyList+0xc4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3301      	adds	r3, #1
 8007efc:	4a1b      	ldr	r2, [pc, #108]	@ (8007f6c <prvAddNewTaskToReadyList+0xc4>)
 8007efe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f04:	2201      	movs	r2, #1
 8007f06:	409a      	lsls	r2, r3
 8007f08:	4b19      	ldr	r3, [pc, #100]	@ (8007f70 <prvAddNewTaskToReadyList+0xc8>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	4a18      	ldr	r2, [pc, #96]	@ (8007f70 <prvAddNewTaskToReadyList+0xc8>)
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4a15      	ldr	r2, [pc, #84]	@ (8007f74 <prvAddNewTaskToReadyList+0xcc>)
 8007f20:	441a      	add	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4619      	mov	r1, r3
 8007f28:	4610      	mov	r0, r2
 8007f2a:	f7ff fe09 	bl	8007b40 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f2e:	f000 fdcd 	bl	8008acc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f32:	4b0d      	ldr	r3, [pc, #52]	@ (8007f68 <prvAddNewTaskToReadyList+0xc0>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00e      	beq.n	8007f58 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f64 <prvAddNewTaskToReadyList+0xbc>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d207      	bcs.n	8007f58 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f48:	4b0b      	ldr	r3, [pc, #44]	@ (8007f78 <prvAddNewTaskToReadyList+0xd0>)
 8007f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f58:	bf00      	nop
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	200006c4 	.word	0x200006c4
 8007f64:	200005c4 	.word	0x200005c4
 8007f68:	200006d0 	.word	0x200006d0
 8007f6c:	200006e0 	.word	0x200006e0
 8007f70:	200006cc 	.word	0x200006cc
 8007f74:	200005c8 	.word	0x200005c8
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08a      	sub	sp, #40	@ 0x28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007f86:	2300      	movs	r3, #0
 8007f88:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10b      	bne.n	8007fa8 <vTaskDelayUntil+0x2c>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	617b      	str	r3, [r7, #20]
}
 8007fa2:	bf00      	nop
 8007fa4:	bf00      	nop
 8007fa6:	e7fd      	b.n	8007fa4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10b      	bne.n	8007fc6 <vTaskDelayUntil+0x4a>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	613b      	str	r3, [r7, #16]
}
 8007fc0:	bf00      	nop
 8007fc2:	bf00      	nop
 8007fc4:	e7fd      	b.n	8007fc2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8007fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8008070 <vTaskDelayUntil+0xf4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <vTaskDelayUntil+0x6a>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	60fb      	str	r3, [r7, #12]
}
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop
 8007fe4:	e7fd      	b.n	8007fe2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8007fe6:	f000 f8e1 	bl	80081ac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007fea:	4b22      	ldr	r3, [pc, #136]	@ (8008074 <vTaskDelayUntil+0xf8>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6a3a      	ldr	r2, [r7, #32]
 8008000:	429a      	cmp	r2, r3
 8008002:	d20b      	bcs.n	800801c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	429a      	cmp	r2, r3
 800800c:	d211      	bcs.n	8008032 <vTaskDelayUntil+0xb6>
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	429a      	cmp	r2, r3
 8008014:	d90d      	bls.n	8008032 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8008016:	2301      	movs	r3, #1
 8008018:	627b      	str	r3, [r7, #36]	@ 0x24
 800801a:	e00a      	b.n	8008032 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	69fa      	ldr	r2, [r7, #28]
 8008022:	429a      	cmp	r2, r3
 8008024:	d303      	bcc.n	800802e <vTaskDelayUntil+0xb2>
 8008026:	69fa      	ldr	r2, [r7, #28]
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	429a      	cmp	r2, r3
 800802c:	d901      	bls.n	8008032 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800802e:	2301      	movs	r3, #1
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	69fa      	ldr	r2, [r7, #28]
 8008036:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803a:	2b00      	cmp	r3, #0
 800803c:	d006      	beq.n	800804c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800803e:	69fa      	ldr	r2, [r7, #28]
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fb76 	bl	8008738 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800804c:	f000 f8bc 	bl	80081c8 <xTaskResumeAll>
 8008050:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d107      	bne.n	8008068 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8008058:	4b07      	ldr	r3, [pc, #28]	@ (8008078 <vTaskDelayUntil+0xfc>)
 800805a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008068:	bf00      	nop
 800806a:	3728      	adds	r7, #40	@ 0x28
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	200006ec 	.word	0x200006ec
 8008074:	200006c8 	.word	0x200006c8
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d018      	beq.n	80080c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800808e:	4b14      	ldr	r3, [pc, #80]	@ (80080e0 <vTaskDelay+0x64>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00b      	beq.n	80080ae <vTaskDelay+0x32>
	__asm volatile
 8008096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	60bb      	str	r3, [r7, #8]
}
 80080a8:	bf00      	nop
 80080aa:	bf00      	nop
 80080ac:	e7fd      	b.n	80080aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80080ae:	f000 f87d 	bl	80081ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80080b2:	2100      	movs	r1, #0
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fb3f 	bl	8008738 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80080ba:	f000 f885 	bl	80081c8 <xTaskResumeAll>
 80080be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d107      	bne.n	80080d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80080c6:	4b07      	ldr	r3, [pc, #28]	@ (80080e4 <vTaskDelay+0x68>)
 80080c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080d6:	bf00      	nop
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	200006ec 	.word	0x200006ec
 80080e4:	e000ed04 	.word	0xe000ed04

080080e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08a      	sub	sp, #40	@ 0x28
 80080ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80080f6:	463a      	mov	r2, r7
 80080f8:	1d39      	adds	r1, r7, #4
 80080fa:	f107 0308 	add.w	r3, r7, #8
 80080fe:	4618      	mov	r0, r3
 8008100:	f7f8 fdd4 	bl	8000cac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	9202      	str	r2, [sp, #8]
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	2300      	movs	r3, #0
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	2300      	movs	r3, #0
 8008114:	460a      	mov	r2, r1
 8008116:	491f      	ldr	r1, [pc, #124]	@ (8008194 <vTaskStartScheduler+0xac>)
 8008118:	481f      	ldr	r0, [pc, #124]	@ (8008198 <vTaskStartScheduler+0xb0>)
 800811a:	f7ff fd98 	bl	8007c4e <xTaskCreateStatic>
 800811e:	4603      	mov	r3, r0
 8008120:	4a1e      	ldr	r2, [pc, #120]	@ (800819c <vTaskStartScheduler+0xb4>)
 8008122:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008124:	4b1d      	ldr	r3, [pc, #116]	@ (800819c <vTaskStartScheduler+0xb4>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800812c:	2301      	movs	r3, #1
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	e001      	b.n	8008136 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008132:	2300      	movs	r3, #0
 8008134:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d116      	bne.n	800816a <vTaskStartScheduler+0x82>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	613b      	str	r3, [r7, #16]
}
 800814e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008150:	4b13      	ldr	r3, [pc, #76]	@ (80081a0 <vTaskStartScheduler+0xb8>)
 8008152:	f04f 32ff 	mov.w	r2, #4294967295
 8008156:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008158:	4b12      	ldr	r3, [pc, #72]	@ (80081a4 <vTaskStartScheduler+0xbc>)
 800815a:	2201      	movs	r2, #1
 800815c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800815e:	4b12      	ldr	r3, [pc, #72]	@ (80081a8 <vTaskStartScheduler+0xc0>)
 8008160:	2200      	movs	r2, #0
 8008162:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008164:	f000 fbdc 	bl	8008920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008168:	e00f      	b.n	800818a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008170:	d10b      	bne.n	800818a <vTaskStartScheduler+0xa2>
	__asm volatile
 8008172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008176:	f383 8811 	msr	BASEPRI, r3
 800817a:	f3bf 8f6f 	isb	sy
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	60fb      	str	r3, [r7, #12]
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop
 8008188:	e7fd      	b.n	8008186 <vTaskStartScheduler+0x9e>
}
 800818a:	bf00      	nop
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	080090b8 	.word	0x080090b8
 8008198:	08008551 	.word	0x08008551
 800819c:	200006e8 	.word	0x200006e8
 80081a0:	200006e4 	.word	0x200006e4
 80081a4:	200006d0 	.word	0x200006d0
 80081a8:	200006c8 	.word	0x200006c8

080081ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081ac:	b480      	push	{r7}
 80081ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80081b0:	4b04      	ldr	r3, [pc, #16]	@ (80081c4 <vTaskSuspendAll+0x18>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	4a03      	ldr	r2, [pc, #12]	@ (80081c4 <vTaskSuspendAll+0x18>)
 80081b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80081ba:	bf00      	nop
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	200006ec 	.word	0x200006ec

080081c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80081ce:	2300      	movs	r3, #0
 80081d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80081d2:	2300      	movs	r3, #0
 80081d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80081d6:	4b42      	ldr	r3, [pc, #264]	@ (80082e0 <xTaskResumeAll+0x118>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10b      	bne.n	80081f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	603b      	str	r3, [r7, #0]
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	e7fd      	b.n	80081f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081f6:	f000 fc37 	bl	8008a68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081fa:	4b39      	ldr	r3, [pc, #228]	@ (80082e0 <xTaskResumeAll+0x118>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3b01      	subs	r3, #1
 8008200:	4a37      	ldr	r2, [pc, #220]	@ (80082e0 <xTaskResumeAll+0x118>)
 8008202:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008204:	4b36      	ldr	r3, [pc, #216]	@ (80082e0 <xTaskResumeAll+0x118>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d161      	bne.n	80082d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800820c:	4b35      	ldr	r3, [pc, #212]	@ (80082e4 <xTaskResumeAll+0x11c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d05d      	beq.n	80082d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008214:	e02e      	b.n	8008274 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008216:	4b34      	ldr	r3, [pc, #208]	@ (80082e8 <xTaskResumeAll+0x120>)
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3318      	adds	r3, #24
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff fce9 	bl	8007bfa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	3304      	adds	r3, #4
 800822c:	4618      	mov	r0, r3
 800822e:	f7ff fce4 	bl	8007bfa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008236:	2201      	movs	r2, #1
 8008238:	409a      	lsls	r2, r3
 800823a:	4b2c      	ldr	r3, [pc, #176]	@ (80082ec <xTaskResumeAll+0x124>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4313      	orrs	r3, r2
 8008240:	4a2a      	ldr	r2, [pc, #168]	@ (80082ec <xTaskResumeAll+0x124>)
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008248:	4613      	mov	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4a27      	ldr	r2, [pc, #156]	@ (80082f0 <xTaskResumeAll+0x128>)
 8008252:	441a      	add	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	3304      	adds	r3, #4
 8008258:	4619      	mov	r1, r3
 800825a:	4610      	mov	r0, r2
 800825c:	f7ff fc70 	bl	8007b40 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008264:	4b23      	ldr	r3, [pc, #140]	@ (80082f4 <xTaskResumeAll+0x12c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800826a:	429a      	cmp	r2, r3
 800826c:	d302      	bcc.n	8008274 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800826e:	4b22      	ldr	r3, [pc, #136]	@ (80082f8 <xTaskResumeAll+0x130>)
 8008270:	2201      	movs	r2, #1
 8008272:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008274:	4b1c      	ldr	r3, [pc, #112]	@ (80082e8 <xTaskResumeAll+0x120>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1cc      	bne.n	8008216 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008282:	f000 fa1b 	bl	80086bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008286:	4b1d      	ldr	r3, [pc, #116]	@ (80082fc <xTaskResumeAll+0x134>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d010      	beq.n	80082b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008292:	f000 f847 	bl	8008324 <xTaskIncrementTick>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800829c:	4b16      	ldr	r3, [pc, #88]	@ (80082f8 <xTaskResumeAll+0x130>)
 800829e:	2201      	movs	r2, #1
 80082a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1f1      	bne.n	8008292 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80082ae:	4b13      	ldr	r3, [pc, #76]	@ (80082fc <xTaskResumeAll+0x134>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082b4:	4b10      	ldr	r3, [pc, #64]	@ (80082f8 <xTaskResumeAll+0x130>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d009      	beq.n	80082d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082bc:	2301      	movs	r3, #1
 80082be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008300 <xTaskResumeAll+0x138>)
 80082c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082d0:	f000 fbfc 	bl	8008acc <vPortExitCritical>

	return xAlreadyYielded;
 80082d4:	68bb      	ldr	r3, [r7, #8]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	200006ec 	.word	0x200006ec
 80082e4:	200006c4 	.word	0x200006c4
 80082e8:	20000684 	.word	0x20000684
 80082ec:	200006cc 	.word	0x200006cc
 80082f0:	200005c8 	.word	0x200005c8
 80082f4:	200005c4 	.word	0x200005c4
 80082f8:	200006d8 	.word	0x200006d8
 80082fc:	200006d4 	.word	0x200006d4
 8008300:	e000ed04 	.word	0xe000ed04

08008304 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800830a:	4b05      	ldr	r3, [pc, #20]	@ (8008320 <xTaskGetTickCount+0x1c>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008310:	687b      	ldr	r3, [r7, #4]
}
 8008312:	4618      	mov	r0, r3
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
 800831e:	bf00      	nop
 8008320:	200006c8 	.word	0x200006c8

08008324 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800832e:	4b4f      	ldr	r3, [pc, #316]	@ (800846c <xTaskIncrementTick+0x148>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f040 808f 	bne.w	8008456 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008338:	4b4d      	ldr	r3, [pc, #308]	@ (8008470 <xTaskIncrementTick+0x14c>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	3301      	adds	r3, #1
 800833e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008340:	4a4b      	ldr	r2, [pc, #300]	@ (8008470 <xTaskIncrementTick+0x14c>)
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d121      	bne.n	8008390 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800834c:	4b49      	ldr	r3, [pc, #292]	@ (8008474 <xTaskIncrementTick+0x150>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00b      	beq.n	800836e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	603b      	str	r3, [r7, #0]
}
 8008368:	bf00      	nop
 800836a:	bf00      	nop
 800836c:	e7fd      	b.n	800836a <xTaskIncrementTick+0x46>
 800836e:	4b41      	ldr	r3, [pc, #260]	@ (8008474 <xTaskIncrementTick+0x150>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	4b40      	ldr	r3, [pc, #256]	@ (8008478 <xTaskIncrementTick+0x154>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a3e      	ldr	r2, [pc, #248]	@ (8008474 <xTaskIncrementTick+0x150>)
 800837a:	6013      	str	r3, [r2, #0]
 800837c:	4a3e      	ldr	r2, [pc, #248]	@ (8008478 <xTaskIncrementTick+0x154>)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6013      	str	r3, [r2, #0]
 8008382:	4b3e      	ldr	r3, [pc, #248]	@ (800847c <xTaskIncrementTick+0x158>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3301      	adds	r3, #1
 8008388:	4a3c      	ldr	r2, [pc, #240]	@ (800847c <xTaskIncrementTick+0x158>)
 800838a:	6013      	str	r3, [r2, #0]
 800838c:	f000 f996 	bl	80086bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008390:	4b3b      	ldr	r3, [pc, #236]	@ (8008480 <xTaskIncrementTick+0x15c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	429a      	cmp	r2, r3
 8008398:	d348      	bcc.n	800842c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800839a:	4b36      	ldr	r3, [pc, #216]	@ (8008474 <xTaskIncrementTick+0x150>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d104      	bne.n	80083ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a4:	4b36      	ldr	r3, [pc, #216]	@ (8008480 <xTaskIncrementTick+0x15c>)
 80083a6:	f04f 32ff 	mov.w	r2, #4294967295
 80083aa:	601a      	str	r2, [r3, #0]
					break;
 80083ac:	e03e      	b.n	800842c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ae:	4b31      	ldr	r3, [pc, #196]	@ (8008474 <xTaskIncrementTick+0x150>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68db      	ldr	r3, [r3, #12]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d203      	bcs.n	80083ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083c6:	4a2e      	ldr	r2, [pc, #184]	@ (8008480 <xTaskIncrementTick+0x15c>)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80083cc:	e02e      	b.n	800842c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	3304      	adds	r3, #4
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff fc11 	bl	8007bfa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d004      	beq.n	80083ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	3318      	adds	r3, #24
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff fc08 	bl	8007bfa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ee:	2201      	movs	r2, #1
 80083f0:	409a      	lsls	r2, r3
 80083f2:	4b24      	ldr	r3, [pc, #144]	@ (8008484 <xTaskIncrementTick+0x160>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	4a22      	ldr	r2, [pc, #136]	@ (8008484 <xTaskIncrementTick+0x160>)
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4a1f      	ldr	r2, [pc, #124]	@ (8008488 <xTaskIncrementTick+0x164>)
 800840a:	441a      	add	r2, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	3304      	adds	r3, #4
 8008410:	4619      	mov	r1, r3
 8008412:	4610      	mov	r0, r2
 8008414:	f7ff fb94 	bl	8007b40 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800841c:	4b1b      	ldr	r3, [pc, #108]	@ (800848c <xTaskIncrementTick+0x168>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008422:	429a      	cmp	r2, r3
 8008424:	d3b9      	bcc.n	800839a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008426:	2301      	movs	r3, #1
 8008428:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800842a:	e7b6      	b.n	800839a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800842c:	4b17      	ldr	r3, [pc, #92]	@ (800848c <xTaskIncrementTick+0x168>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008432:	4915      	ldr	r1, [pc, #84]	@ (8008488 <xTaskIncrementTick+0x164>)
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d901      	bls.n	8008448 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008444:	2301      	movs	r3, #1
 8008446:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008448:	4b11      	ldr	r3, [pc, #68]	@ (8008490 <xTaskIncrementTick+0x16c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d007      	beq.n	8008460 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008450:	2301      	movs	r3, #1
 8008452:	617b      	str	r3, [r7, #20]
 8008454:	e004      	b.n	8008460 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008456:	4b0f      	ldr	r3, [pc, #60]	@ (8008494 <xTaskIncrementTick+0x170>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3301      	adds	r3, #1
 800845c:	4a0d      	ldr	r2, [pc, #52]	@ (8008494 <xTaskIncrementTick+0x170>)
 800845e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008460:	697b      	ldr	r3, [r7, #20]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	200006ec 	.word	0x200006ec
 8008470:	200006c8 	.word	0x200006c8
 8008474:	2000067c 	.word	0x2000067c
 8008478:	20000680 	.word	0x20000680
 800847c:	200006dc 	.word	0x200006dc
 8008480:	200006e4 	.word	0x200006e4
 8008484:	200006cc 	.word	0x200006cc
 8008488:	200005c8 	.word	0x200005c8
 800848c:	200005c4 	.word	0x200005c4
 8008490:	200006d8 	.word	0x200006d8
 8008494:	200006d4 	.word	0x200006d4

08008498 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008498:	b480      	push	{r7}
 800849a:	b087      	sub	sp, #28
 800849c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800849e:	4b27      	ldr	r3, [pc, #156]	@ (800853c <vTaskSwitchContext+0xa4>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084a6:	4b26      	ldr	r3, [pc, #152]	@ (8008540 <vTaskSwitchContext+0xa8>)
 80084a8:	2201      	movs	r2, #1
 80084aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084ac:	e040      	b.n	8008530 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80084ae:	4b24      	ldr	r3, [pc, #144]	@ (8008540 <vTaskSwitchContext+0xa8>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084b4:	4b23      	ldr	r3, [pc, #140]	@ (8008544 <vTaskSwitchContext+0xac>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	fab3 f383 	clz	r3, r3
 80084c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80084c2:	7afb      	ldrb	r3, [r7, #11]
 80084c4:	f1c3 031f 	rsb	r3, r3, #31
 80084c8:	617b      	str	r3, [r7, #20]
 80084ca:	491f      	ldr	r1, [pc, #124]	@ (8008548 <vTaskSwitchContext+0xb0>)
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	4613      	mov	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	440b      	add	r3, r1
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10b      	bne.n	80084f6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	607b      	str	r3, [r7, #4]
}
 80084f0:	bf00      	nop
 80084f2:	bf00      	nop
 80084f4:	e7fd      	b.n	80084f2 <vTaskSwitchContext+0x5a>
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4a11      	ldr	r2, [pc, #68]	@ (8008548 <vTaskSwitchContext+0xb0>)
 8008502:	4413      	add	r3, r2
 8008504:	613b      	str	r3, [r7, #16]
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	605a      	str	r2, [r3, #4]
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	3308      	adds	r3, #8
 8008518:	429a      	cmp	r2, r3
 800851a:	d104      	bne.n	8008526 <vTaskSwitchContext+0x8e>
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	605a      	str	r2, [r3, #4]
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	4a07      	ldr	r2, [pc, #28]	@ (800854c <vTaskSwitchContext+0xb4>)
 800852e:	6013      	str	r3, [r2, #0]
}
 8008530:	bf00      	nop
 8008532:	371c      	adds	r7, #28
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	200006ec 	.word	0x200006ec
 8008540:	200006d8 	.word	0x200006d8
 8008544:	200006cc 	.word	0x200006cc
 8008548:	200005c8 	.word	0x200005c8
 800854c:	200005c4 	.word	0x200005c4

08008550 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008558:	f000 f852 	bl	8008600 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800855c:	4b06      	ldr	r3, [pc, #24]	@ (8008578 <prvIdleTask+0x28>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d9f9      	bls.n	8008558 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008564:	4b05      	ldr	r3, [pc, #20]	@ (800857c <prvIdleTask+0x2c>)
 8008566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	f3bf 8f4f 	dsb	sy
 8008570:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008574:	e7f0      	b.n	8008558 <prvIdleTask+0x8>
 8008576:	bf00      	nop
 8008578:	200005c8 	.word	0x200005c8
 800857c:	e000ed04 	.word	0xe000ed04

08008580 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008586:	2300      	movs	r3, #0
 8008588:	607b      	str	r3, [r7, #4]
 800858a:	e00c      	b.n	80085a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4a12      	ldr	r2, [pc, #72]	@ (80085e0 <prvInitialiseTaskLists+0x60>)
 8008598:	4413      	add	r3, r2
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff faa3 	bl	8007ae6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3301      	adds	r3, #1
 80085a4:	607b      	str	r3, [r7, #4]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b06      	cmp	r3, #6
 80085aa:	d9ef      	bls.n	800858c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085ac:	480d      	ldr	r0, [pc, #52]	@ (80085e4 <prvInitialiseTaskLists+0x64>)
 80085ae:	f7ff fa9a 	bl	8007ae6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085b2:	480d      	ldr	r0, [pc, #52]	@ (80085e8 <prvInitialiseTaskLists+0x68>)
 80085b4:	f7ff fa97 	bl	8007ae6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085b8:	480c      	ldr	r0, [pc, #48]	@ (80085ec <prvInitialiseTaskLists+0x6c>)
 80085ba:	f7ff fa94 	bl	8007ae6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085be:	480c      	ldr	r0, [pc, #48]	@ (80085f0 <prvInitialiseTaskLists+0x70>)
 80085c0:	f7ff fa91 	bl	8007ae6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085c4:	480b      	ldr	r0, [pc, #44]	@ (80085f4 <prvInitialiseTaskLists+0x74>)
 80085c6:	f7ff fa8e 	bl	8007ae6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085ca:	4b0b      	ldr	r3, [pc, #44]	@ (80085f8 <prvInitialiseTaskLists+0x78>)
 80085cc:	4a05      	ldr	r2, [pc, #20]	@ (80085e4 <prvInitialiseTaskLists+0x64>)
 80085ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085d0:	4b0a      	ldr	r3, [pc, #40]	@ (80085fc <prvInitialiseTaskLists+0x7c>)
 80085d2:	4a05      	ldr	r2, [pc, #20]	@ (80085e8 <prvInitialiseTaskLists+0x68>)
 80085d4:	601a      	str	r2, [r3, #0]
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	200005c8 	.word	0x200005c8
 80085e4:	20000654 	.word	0x20000654
 80085e8:	20000668 	.word	0x20000668
 80085ec:	20000684 	.word	0x20000684
 80085f0:	20000698 	.word	0x20000698
 80085f4:	200006b0 	.word	0x200006b0
 80085f8:	2000067c 	.word	0x2000067c
 80085fc:	20000680 	.word	0x20000680

08008600 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008606:	e019      	b.n	800863c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008608:	f000 fa2e 	bl	8008a68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800860c:	4b10      	ldr	r3, [pc, #64]	@ (8008650 <prvCheckTasksWaitingTermination+0x50>)
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3304      	adds	r3, #4
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff faee 	bl	8007bfa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800861e:	4b0d      	ldr	r3, [pc, #52]	@ (8008654 <prvCheckTasksWaitingTermination+0x54>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3b01      	subs	r3, #1
 8008624:	4a0b      	ldr	r2, [pc, #44]	@ (8008654 <prvCheckTasksWaitingTermination+0x54>)
 8008626:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008628:	4b0b      	ldr	r3, [pc, #44]	@ (8008658 <prvCheckTasksWaitingTermination+0x58>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3b01      	subs	r3, #1
 800862e:	4a0a      	ldr	r2, [pc, #40]	@ (8008658 <prvCheckTasksWaitingTermination+0x58>)
 8008630:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008632:	f000 fa4b 	bl	8008acc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f810 	bl	800865c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800863c:	4b06      	ldr	r3, [pc, #24]	@ (8008658 <prvCheckTasksWaitingTermination+0x58>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e1      	bne.n	8008608 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	20000698 	.word	0x20000698
 8008654:	200006c4 	.word	0x200006c4
 8008658:	200006ac 	.word	0x200006ac

0800865c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800866a:	2b00      	cmp	r3, #0
 800866c:	d108      	bne.n	8008680 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fba6 	bl	8008dc4 <vPortFree>
				vPortFree( pxTCB );
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fba3 	bl	8008dc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800867e:	e019      	b.n	80086b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008686:	2b01      	cmp	r3, #1
 8008688:	d103      	bne.n	8008692 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fb9a 	bl	8008dc4 <vPortFree>
	}
 8008690:	e010      	b.n	80086b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008698:	2b02      	cmp	r3, #2
 800869a:	d00b      	beq.n	80086b4 <prvDeleteTCB+0x58>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	60fb      	str	r3, [r7, #12]
}
 80086ae:	bf00      	nop
 80086b0:	bf00      	nop
 80086b2:	e7fd      	b.n	80086b0 <prvDeleteTCB+0x54>
	}
 80086b4:	bf00      	nop
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086c2:	4b0c      	ldr	r3, [pc, #48]	@ (80086f4 <prvResetNextTaskUnblockTime+0x38>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d104      	bne.n	80086d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086cc:	4b0a      	ldr	r3, [pc, #40]	@ (80086f8 <prvResetNextTaskUnblockTime+0x3c>)
 80086ce:	f04f 32ff 	mov.w	r2, #4294967295
 80086d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086d4:	e008      	b.n	80086e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086d6:	4b07      	ldr	r3, [pc, #28]	@ (80086f4 <prvResetNextTaskUnblockTime+0x38>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	4a04      	ldr	r2, [pc, #16]	@ (80086f8 <prvResetNextTaskUnblockTime+0x3c>)
 80086e6:	6013      	str	r3, [r2, #0]
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	2000067c 	.word	0x2000067c
 80086f8:	200006e4 	.word	0x200006e4

080086fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008702:	4b0b      	ldr	r3, [pc, #44]	@ (8008730 <xTaskGetSchedulerState+0x34>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d102      	bne.n	8008710 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800870a:	2301      	movs	r3, #1
 800870c:	607b      	str	r3, [r7, #4]
 800870e:	e008      	b.n	8008722 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008710:	4b08      	ldr	r3, [pc, #32]	@ (8008734 <xTaskGetSchedulerState+0x38>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d102      	bne.n	800871e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008718:	2302      	movs	r3, #2
 800871a:	607b      	str	r3, [r7, #4]
 800871c:	e001      	b.n	8008722 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800871e:	2300      	movs	r3, #0
 8008720:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008722:	687b      	ldr	r3, [r7, #4]
	}
 8008724:	4618      	mov	r0, r3
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	200006d0 	.word	0x200006d0
 8008734:	200006ec 	.word	0x200006ec

08008738 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008742:	4b29      	ldr	r3, [pc, #164]	@ (80087e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008748:	4b28      	ldr	r3, [pc, #160]	@ (80087ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3304      	adds	r3, #4
 800874e:	4618      	mov	r0, r3
 8008750:	f7ff fa53 	bl	8007bfa <uxListRemove>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10b      	bne.n	8008772 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800875a:	4b24      	ldr	r3, [pc, #144]	@ (80087ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008760:	2201      	movs	r2, #1
 8008762:	fa02 f303 	lsl.w	r3, r2, r3
 8008766:	43da      	mvns	r2, r3
 8008768:	4b21      	ldr	r3, [pc, #132]	@ (80087f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4013      	ands	r3, r2
 800876e:	4a20      	ldr	r2, [pc, #128]	@ (80087f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008770:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008778:	d10a      	bne.n	8008790 <prvAddCurrentTaskToDelayedList+0x58>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008780:	4b1a      	ldr	r3, [pc, #104]	@ (80087ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3304      	adds	r3, #4
 8008786:	4619      	mov	r1, r3
 8008788:	481a      	ldr	r0, [pc, #104]	@ (80087f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800878a:	f7ff f9d9 	bl	8007b40 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800878e:	e026      	b.n	80087de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4413      	add	r3, r2
 8008796:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008798:	4b14      	ldr	r3, [pc, #80]	@ (80087ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d209      	bcs.n	80087bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087a8:	4b13      	ldr	r3, [pc, #76]	@ (80087f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	4b0f      	ldr	r3, [pc, #60]	@ (80087ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3304      	adds	r3, #4
 80087b2:	4619      	mov	r1, r3
 80087b4:	4610      	mov	r0, r2
 80087b6:	f7ff f9e7 	bl	8007b88 <vListInsert>
}
 80087ba:	e010      	b.n	80087de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087bc:	4b0f      	ldr	r3, [pc, #60]	@ (80087fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	4b0a      	ldr	r3, [pc, #40]	@ (80087ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3304      	adds	r3, #4
 80087c6:	4619      	mov	r1, r3
 80087c8:	4610      	mov	r0, r2
 80087ca:	f7ff f9dd 	bl	8007b88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80087ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008800 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d202      	bcs.n	80087de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80087d8:	4a09      	ldr	r2, [pc, #36]	@ (8008800 <prvAddCurrentTaskToDelayedList+0xc8>)
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	6013      	str	r3, [r2, #0]
}
 80087de:	bf00      	nop
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	200006c8 	.word	0x200006c8
 80087ec:	200005c4 	.word	0x200005c4
 80087f0:	200006cc 	.word	0x200006cc
 80087f4:	200006b0 	.word	0x200006b0
 80087f8:	20000680 	.word	0x20000680
 80087fc:	2000067c 	.word	0x2000067c
 8008800:	200006e4 	.word	0x200006e4

08008804 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3b04      	subs	r3, #4
 8008814:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800881c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3b04      	subs	r3, #4
 8008822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f023 0201 	bic.w	r2, r3, #1
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3b04      	subs	r3, #4
 8008832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008834:	4a0c      	ldr	r2, [pc, #48]	@ (8008868 <pxPortInitialiseStack+0x64>)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3b14      	subs	r3, #20
 800883e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3b04      	subs	r3, #4
 800884a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f06f 0202 	mvn.w	r2, #2
 8008852:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3b20      	subs	r3, #32
 8008858:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800885a:	68fb      	ldr	r3, [r7, #12]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	0800886d 	.word	0x0800886d

0800886c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008876:	4b13      	ldr	r3, [pc, #76]	@ (80088c4 <prvTaskExitError+0x58>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d00b      	beq.n	8008898 <prvTaskExitError+0x2c>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	60fb      	str	r3, [r7, #12]
}
 8008892:	bf00      	nop
 8008894:	bf00      	nop
 8008896:	e7fd      	b.n	8008894 <prvTaskExitError+0x28>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	60bb      	str	r3, [r7, #8]
}
 80088aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80088ac:	bf00      	nop
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0fc      	beq.n	80088ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	2000000c 	.word	0x2000000c
	...

080088d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088d0:	4b07      	ldr	r3, [pc, #28]	@ (80088f0 <pxCurrentTCBConst2>)
 80088d2:	6819      	ldr	r1, [r3, #0]
 80088d4:	6808      	ldr	r0, [r1, #0]
 80088d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088da:	f380 8809 	msr	PSP, r0
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f04f 0000 	mov.w	r0, #0
 80088e6:	f380 8811 	msr	BASEPRI, r0
 80088ea:	4770      	bx	lr
 80088ec:	f3af 8000 	nop.w

080088f0 <pxCurrentTCBConst2>:
 80088f0:	200005c4 	.word	0x200005c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop

080088f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088f8:	4808      	ldr	r0, [pc, #32]	@ (800891c <prvPortStartFirstTask+0x24>)
 80088fa:	6800      	ldr	r0, [r0, #0]
 80088fc:	6800      	ldr	r0, [r0, #0]
 80088fe:	f380 8808 	msr	MSP, r0
 8008902:	f04f 0000 	mov.w	r0, #0
 8008906:	f380 8814 	msr	CONTROL, r0
 800890a:	b662      	cpsie	i
 800890c:	b661      	cpsie	f
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	df00      	svc	0
 8008918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800891a:	bf00      	nop
 800891c:	e000ed08 	.word	0xe000ed08

08008920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008926:	4b47      	ldr	r3, [pc, #284]	@ (8008a44 <xPortStartScheduler+0x124>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a47      	ldr	r2, [pc, #284]	@ (8008a48 <xPortStartScheduler+0x128>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d10b      	bne.n	8008948 <xPortStartScheduler+0x28>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	613b      	str	r3, [r7, #16]
}
 8008942:	bf00      	nop
 8008944:	bf00      	nop
 8008946:	e7fd      	b.n	8008944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008948:	4b3e      	ldr	r3, [pc, #248]	@ (8008a44 <xPortStartScheduler+0x124>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a3f      	ldr	r2, [pc, #252]	@ (8008a4c <xPortStartScheduler+0x12c>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d10b      	bne.n	800896a <xPortStartScheduler+0x4a>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008956:	f383 8811 	msr	BASEPRI, r3
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	60fb      	str	r3, [r7, #12]
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop
 8008968:	e7fd      	b.n	8008966 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800896a:	4b39      	ldr	r3, [pc, #228]	@ (8008a50 <xPortStartScheduler+0x130>)
 800896c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	22ff      	movs	r2, #255	@ 0xff
 800897a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	b2db      	uxtb	r3, r3
 8008982:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	b2db      	uxtb	r3, r3
 8008988:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800898c:	b2da      	uxtb	r2, r3
 800898e:	4b31      	ldr	r3, [pc, #196]	@ (8008a54 <xPortStartScheduler+0x134>)
 8008990:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008992:	4b31      	ldr	r3, [pc, #196]	@ (8008a58 <xPortStartScheduler+0x138>)
 8008994:	2207      	movs	r2, #7
 8008996:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008998:	e009      	b.n	80089ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800899a:	4b2f      	ldr	r3, [pc, #188]	@ (8008a58 <xPortStartScheduler+0x138>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3b01      	subs	r3, #1
 80089a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008a58 <xPortStartScheduler+0x138>)
 80089a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089b6:	2b80      	cmp	r3, #128	@ 0x80
 80089b8:	d0ef      	beq.n	800899a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089ba:	4b27      	ldr	r3, [pc, #156]	@ (8008a58 <xPortStartScheduler+0x138>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f1c3 0307 	rsb	r3, r3, #7
 80089c2:	2b04      	cmp	r3, #4
 80089c4:	d00b      	beq.n	80089de <xPortStartScheduler+0xbe>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	60bb      	str	r3, [r7, #8]
}
 80089d8:	bf00      	nop
 80089da:	bf00      	nop
 80089dc:	e7fd      	b.n	80089da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089de:	4b1e      	ldr	r3, [pc, #120]	@ (8008a58 <xPortStartScheduler+0x138>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	021b      	lsls	r3, r3, #8
 80089e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008a58 <xPortStartScheduler+0x138>)
 80089e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008a58 <xPortStartScheduler+0x138>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089f0:	4a19      	ldr	r2, [pc, #100]	@ (8008a58 <xPortStartScheduler+0x138>)
 80089f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089fc:	4b17      	ldr	r3, [pc, #92]	@ (8008a5c <xPortStartScheduler+0x13c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a16      	ldr	r2, [pc, #88]	@ (8008a5c <xPortStartScheduler+0x13c>)
 8008a02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a08:	4b14      	ldr	r3, [pc, #80]	@ (8008a5c <xPortStartScheduler+0x13c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a13      	ldr	r2, [pc, #76]	@ (8008a5c <xPortStartScheduler+0x13c>)
 8008a0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a14:	f000 f8da 	bl	8008bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a18:	4b11      	ldr	r3, [pc, #68]	@ (8008a60 <xPortStartScheduler+0x140>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a1e:	f000 f8f9 	bl	8008c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a22:	4b10      	ldr	r3, [pc, #64]	@ (8008a64 <xPortStartScheduler+0x144>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a0f      	ldr	r2, [pc, #60]	@ (8008a64 <xPortStartScheduler+0x144>)
 8008a28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a2e:	f7ff ff63 	bl	80088f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a32:	f7ff fd31 	bl	8008498 <vTaskSwitchContext>
	prvTaskExitError();
 8008a36:	f7ff ff19 	bl	800886c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	e000ed00 	.word	0xe000ed00
 8008a48:	410fc271 	.word	0x410fc271
 8008a4c:	410fc270 	.word	0x410fc270
 8008a50:	e000e400 	.word	0xe000e400
 8008a54:	200006f0 	.word	0x200006f0
 8008a58:	200006f4 	.word	0x200006f4
 8008a5c:	e000ed20 	.word	0xe000ed20
 8008a60:	2000000c 	.word	0x2000000c
 8008a64:	e000ef34 	.word	0xe000ef34

08008a68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	607b      	str	r3, [r7, #4]
}
 8008a80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a82:	4b10      	ldr	r3, [pc, #64]	@ (8008ac4 <vPortEnterCritical+0x5c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3301      	adds	r3, #1
 8008a88:	4a0e      	ldr	r2, [pc, #56]	@ (8008ac4 <vPortEnterCritical+0x5c>)
 8008a8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ac4 <vPortEnterCritical+0x5c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d110      	bne.n	8008ab6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a94:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac8 <vPortEnterCritical+0x60>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	603b      	str	r3, [r7, #0]
}
 8008ab0:	bf00      	nop
 8008ab2:	bf00      	nop
 8008ab4:	e7fd      	b.n	8008ab2 <vPortEnterCritical+0x4a>
	}
}
 8008ab6:	bf00      	nop
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	2000000c 	.word	0x2000000c
 8008ac8:	e000ed04 	.word	0xe000ed04

08008acc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ad2:	4b12      	ldr	r3, [pc, #72]	@ (8008b1c <vPortExitCritical+0x50>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10b      	bne.n	8008af2 <vPortExitCritical+0x26>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	607b      	str	r3, [r7, #4]
}
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	e7fd      	b.n	8008aee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008af2:	4b0a      	ldr	r3, [pc, #40]	@ (8008b1c <vPortExitCritical+0x50>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3b01      	subs	r3, #1
 8008af8:	4a08      	ldr	r2, [pc, #32]	@ (8008b1c <vPortExitCritical+0x50>)
 8008afa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008afc:	4b07      	ldr	r3, [pc, #28]	@ (8008b1c <vPortExitCritical+0x50>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d105      	bne.n	8008b10 <vPortExitCritical+0x44>
 8008b04:	2300      	movs	r3, #0
 8008b06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	2000000c 	.word	0x2000000c

08008b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b20:	f3ef 8009 	mrs	r0, PSP
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	4b15      	ldr	r3, [pc, #84]	@ (8008b80 <pxCurrentTCBConst>)
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	f01e 0f10 	tst.w	lr, #16
 8008b30:	bf08      	it	eq
 8008b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3a:	6010      	str	r0, [r2, #0]
 8008b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008b44:	f380 8811 	msr	BASEPRI, r0
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f7ff fca2 	bl	8008498 <vTaskSwitchContext>
 8008b54:	f04f 0000 	mov.w	r0, #0
 8008b58:	f380 8811 	msr	BASEPRI, r0
 8008b5c:	bc09      	pop	{r0, r3}
 8008b5e:	6819      	ldr	r1, [r3, #0]
 8008b60:	6808      	ldr	r0, [r1, #0]
 8008b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b66:	f01e 0f10 	tst.w	lr, #16
 8008b6a:	bf08      	it	eq
 8008b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b70:	f380 8809 	msr	PSP, r0
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	f3af 8000 	nop.w

08008b80 <pxCurrentTCBConst>:
 8008b80:	200005c4 	.word	0x200005c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop

08008b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	607b      	str	r3, [r7, #4]
}
 8008ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ba2:	f7ff fbbf 	bl	8008324 <xTaskIncrementTick>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bac:	4b06      	ldr	r3, [pc, #24]	@ (8008bc8 <xPortSysTickHandler+0x40>)
 8008bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	f383 8811 	msr	BASEPRI, r3
}
 8008bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	e000ed04 	.word	0xe000ed04

08008bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bcc:	b480      	push	{r7}
 8008bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8008c00 <vPortSetupTimerInterrupt+0x34>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008c04 <vPortSetupTimerInterrupt+0x38>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8008c08 <vPortSetupTimerInterrupt+0x3c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a0a      	ldr	r2, [pc, #40]	@ (8008c0c <vPortSetupTimerInterrupt+0x40>)
 8008be2:	fba2 2303 	umull	r2, r3, r2, r3
 8008be6:	099b      	lsrs	r3, r3, #6
 8008be8:	4a09      	ldr	r2, [pc, #36]	@ (8008c10 <vPortSetupTimerInterrupt+0x44>)
 8008bea:	3b01      	subs	r3, #1
 8008bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bee:	4b04      	ldr	r3, [pc, #16]	@ (8008c00 <vPortSetupTimerInterrupt+0x34>)
 8008bf0:	2207      	movs	r2, #7
 8008bf2:	601a      	str	r2, [r3, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	e000e010 	.word	0xe000e010
 8008c04:	e000e018 	.word	0xe000e018
 8008c08:	20000000 	.word	0x20000000
 8008c0c:	10624dd3 	.word	0x10624dd3
 8008c10:	e000e014 	.word	0xe000e014

08008c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c24 <vPortEnableVFP+0x10>
 8008c18:	6801      	ldr	r1, [r0, #0]
 8008c1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c1e:	6001      	str	r1, [r0, #0]
 8008c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c22:	bf00      	nop
 8008c24:	e000ed88 	.word	0xe000ed88

08008c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08a      	sub	sp, #40	@ 0x28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c34:	f7ff faba 	bl	80081ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c38:	4b5c      	ldr	r3, [pc, #368]	@ (8008dac <pvPortMalloc+0x184>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c40:	f000 f924 	bl	8008e8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c44:	4b5a      	ldr	r3, [pc, #360]	@ (8008db0 <pvPortMalloc+0x188>)
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f040 8095 	bne.w	8008d7c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d01e      	beq.n	8008c96 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008c58:	2208      	movs	r2, #8
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d015      	beq.n	8008c96 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f023 0307 	bic.w	r3, r3, #7
 8008c70:	3308      	adds	r3, #8
 8008c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00b      	beq.n	8008c96 <pvPortMalloc+0x6e>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	617b      	str	r3, [r7, #20]
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	e7fd      	b.n	8008c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d06f      	beq.n	8008d7c <pvPortMalloc+0x154>
 8008c9c:	4b45      	ldr	r3, [pc, #276]	@ (8008db4 <pvPortMalloc+0x18c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d86a      	bhi.n	8008d7c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ca6:	4b44      	ldr	r3, [pc, #272]	@ (8008db8 <pvPortMalloc+0x190>)
 8008ca8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008caa:	4b43      	ldr	r3, [pc, #268]	@ (8008db8 <pvPortMalloc+0x190>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cb0:	e004      	b.n	8008cbc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d903      	bls.n	8008cce <pvPortMalloc+0xa6>
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1f1      	bne.n	8008cb2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008cce:	4b37      	ldr	r3, [pc, #220]	@ (8008dac <pvPortMalloc+0x184>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d051      	beq.n	8008d7c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008cd8:	6a3b      	ldr	r3, [r7, #32]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2208      	movs	r2, #8
 8008cde:	4413      	add	r3, r2
 8008ce0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	1ad2      	subs	r2, r2, r3
 8008cf2:	2308      	movs	r3, #8
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d920      	bls.n	8008d3c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4413      	add	r3, r2
 8008d00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <pvPortMalloc+0xfc>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	613b      	str	r3, [r7, #16]
}
 8008d1e:	bf00      	nop
 8008d20:	bf00      	nop
 8008d22:	e7fd      	b.n	8008d20 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	1ad2      	subs	r2, r2, r3
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d36:	69b8      	ldr	r0, [r7, #24]
 8008d38:	f000 f90a 	bl	8008f50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8008db4 <pvPortMalloc+0x18c>)
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	4a1b      	ldr	r2, [pc, #108]	@ (8008db4 <pvPortMalloc+0x18c>)
 8008d48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8008db4 <pvPortMalloc+0x18c>)
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8008dbc <pvPortMalloc+0x194>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d203      	bcs.n	8008d5e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d56:	4b17      	ldr	r3, [pc, #92]	@ (8008db4 <pvPortMalloc+0x18c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a18      	ldr	r2, [pc, #96]	@ (8008dbc <pvPortMalloc+0x194>)
 8008d5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	4b13      	ldr	r3, [pc, #76]	@ (8008db0 <pvPortMalloc+0x188>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	431a      	orrs	r2, r3
 8008d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d72:	4b13      	ldr	r3, [pc, #76]	@ (8008dc0 <pvPortMalloc+0x198>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3301      	adds	r3, #1
 8008d78:	4a11      	ldr	r2, [pc, #68]	@ (8008dc0 <pvPortMalloc+0x198>)
 8008d7a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d7c:	f7ff fa24 	bl	80081c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00b      	beq.n	8008da2 <pvPortMalloc+0x17a>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	60fb      	str	r3, [r7, #12]
}
 8008d9c:	bf00      	nop
 8008d9e:	bf00      	nop
 8008da0:	e7fd      	b.n	8008d9e <pvPortMalloc+0x176>
	return pvReturn;
 8008da2:	69fb      	ldr	r3, [r7, #28]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3728      	adds	r7, #40	@ 0x28
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	20004300 	.word	0x20004300
 8008db0:	20004314 	.word	0x20004314
 8008db4:	20004304 	.word	0x20004304
 8008db8:	200042f8 	.word	0x200042f8
 8008dbc:	20004308 	.word	0x20004308
 8008dc0:	2000430c 	.word	0x2000430c

08008dc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d04f      	beq.n	8008e76 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008dd6:	2308      	movs	r3, #8
 8008dd8:	425b      	negs	r3, r3
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	4413      	add	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	4b25      	ldr	r3, [pc, #148]	@ (8008e80 <vPortFree+0xbc>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4013      	ands	r3, r2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10b      	bne.n	8008e0a <vPortFree+0x46>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	60fb      	str	r3, [r7, #12]
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop
 8008e08:	e7fd      	b.n	8008e06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <vPortFree+0x66>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	60bb      	str	r3, [r7, #8]
}
 8008e24:	bf00      	nop
 8008e26:	bf00      	nop
 8008e28:	e7fd      	b.n	8008e26 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	4b14      	ldr	r3, [pc, #80]	@ (8008e80 <vPortFree+0xbc>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4013      	ands	r3, r2
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01e      	beq.n	8008e76 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d11a      	bne.n	8008e76 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	4b0e      	ldr	r3, [pc, #56]	@ (8008e80 <vPortFree+0xbc>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	43db      	mvns	r3, r3
 8008e4a:	401a      	ands	r2, r3
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e50:	f7ff f9ac 	bl	80081ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	4b0a      	ldr	r3, [pc, #40]	@ (8008e84 <vPortFree+0xc0>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	4a09      	ldr	r2, [pc, #36]	@ (8008e84 <vPortFree+0xc0>)
 8008e60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e62:	6938      	ldr	r0, [r7, #16]
 8008e64:	f000 f874 	bl	8008f50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e68:	4b07      	ldr	r3, [pc, #28]	@ (8008e88 <vPortFree+0xc4>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	4a06      	ldr	r2, [pc, #24]	@ (8008e88 <vPortFree+0xc4>)
 8008e70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e72:	f7ff f9a9 	bl	80081c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e76:	bf00      	nop
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	20004314 	.word	0x20004314
 8008e84:	20004304 	.word	0x20004304
 8008e88:	20004310 	.word	0x20004310

08008e8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e92:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008e96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e98:	4b27      	ldr	r3, [pc, #156]	@ (8008f38 <prvHeapInit+0xac>)
 8008e9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f003 0307 	and.w	r3, r3, #7
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00c      	beq.n	8008ec0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3307      	adds	r3, #7
 8008eaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f023 0307 	bic.w	r3, r3, #7
 8008eb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	4a1f      	ldr	r2, [pc, #124]	@ (8008f38 <prvHeapInit+0xac>)
 8008ebc:	4413      	add	r3, r2
 8008ebe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8008f3c <prvHeapInit+0xb0>)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008eca:	4b1c      	ldr	r3, [pc, #112]	@ (8008f3c <prvHeapInit+0xb0>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ed8:	2208      	movs	r2, #8
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	1a9b      	subs	r3, r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f023 0307 	bic.w	r3, r3, #7
 8008ee6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4a15      	ldr	r2, [pc, #84]	@ (8008f40 <prvHeapInit+0xb4>)
 8008eec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008eee:	4b14      	ldr	r3, [pc, #80]	@ (8008f40 <prvHeapInit+0xb4>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ef6:	4b12      	ldr	r3, [pc, #72]	@ (8008f40 <prvHeapInit+0xb4>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	68fa      	ldr	r2, [r7, #12]
 8008f06:	1ad2      	subs	r2, r2, r3
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f40 <prvHeapInit+0xb4>)
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	4a0a      	ldr	r2, [pc, #40]	@ (8008f44 <prvHeapInit+0xb8>)
 8008f1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	4a09      	ldr	r2, [pc, #36]	@ (8008f48 <prvHeapInit+0xbc>)
 8008f22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f24:	4b09      	ldr	r3, [pc, #36]	@ (8008f4c <prvHeapInit+0xc0>)
 8008f26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f2a:	601a      	str	r2, [r3, #0]
}
 8008f2c:	bf00      	nop
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	200006f8 	.word	0x200006f8
 8008f3c:	200042f8 	.word	0x200042f8
 8008f40:	20004300 	.word	0x20004300
 8008f44:	20004308 	.word	0x20004308
 8008f48:	20004304 	.word	0x20004304
 8008f4c:	20004314 	.word	0x20004314

08008f50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f58:	4b28      	ldr	r3, [pc, #160]	@ (8008ffc <prvInsertBlockIntoFreeList+0xac>)
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	e002      	b.n	8008f64 <prvInsertBlockIntoFreeList+0x14>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d8f7      	bhi.n	8008f5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	4413      	add	r3, r2
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d108      	bne.n	8008f92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	441a      	add	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	68ba      	ldr	r2, [r7, #8]
 8008f9c:	441a      	add	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d118      	bne.n	8008fd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	4b15      	ldr	r3, [pc, #84]	@ (8009000 <prvInsertBlockIntoFreeList+0xb0>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d00d      	beq.n	8008fce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	441a      	add	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	e008      	b.n	8008fe0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fce:	4b0c      	ldr	r3, [pc, #48]	@ (8009000 <prvInsertBlockIntoFreeList+0xb0>)
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	e003      	b.n	8008fe0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d002      	beq.n	8008fee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fee:	bf00      	nop
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	200042f8 	.word	0x200042f8
 8009000:	20004300 	.word	0x20004300

08009004 <memset>:
 8009004:	4402      	add	r2, r0
 8009006:	4603      	mov	r3, r0
 8009008:	4293      	cmp	r3, r2
 800900a:	d100      	bne.n	800900e <memset+0xa>
 800900c:	4770      	bx	lr
 800900e:	f803 1b01 	strb.w	r1, [r3], #1
 8009012:	e7f9      	b.n	8009008 <memset+0x4>

08009014 <__libc_init_array>:
 8009014:	b570      	push	{r4, r5, r6, lr}
 8009016:	4d0d      	ldr	r5, [pc, #52]	@ (800904c <__libc_init_array+0x38>)
 8009018:	4c0d      	ldr	r4, [pc, #52]	@ (8009050 <__libc_init_array+0x3c>)
 800901a:	1b64      	subs	r4, r4, r5
 800901c:	10a4      	asrs	r4, r4, #2
 800901e:	2600      	movs	r6, #0
 8009020:	42a6      	cmp	r6, r4
 8009022:	d109      	bne.n	8009038 <__libc_init_array+0x24>
 8009024:	4d0b      	ldr	r5, [pc, #44]	@ (8009054 <__libc_init_array+0x40>)
 8009026:	4c0c      	ldr	r4, [pc, #48]	@ (8009058 <__libc_init_array+0x44>)
 8009028:	f000 f818 	bl	800905c <_init>
 800902c:	1b64      	subs	r4, r4, r5
 800902e:	10a4      	asrs	r4, r4, #2
 8009030:	2600      	movs	r6, #0
 8009032:	42a6      	cmp	r6, r4
 8009034:	d105      	bne.n	8009042 <__libc_init_array+0x2e>
 8009036:	bd70      	pop	{r4, r5, r6, pc}
 8009038:	f855 3b04 	ldr.w	r3, [r5], #4
 800903c:	4798      	blx	r3
 800903e:	3601      	adds	r6, #1
 8009040:	e7ee      	b.n	8009020 <__libc_init_array+0xc>
 8009042:	f855 3b04 	ldr.w	r3, [r5], #4
 8009046:	4798      	blx	r3
 8009048:	3601      	adds	r6, #1
 800904a:	e7f2      	b.n	8009032 <__libc_init_array+0x1e>
 800904c:	080090ec 	.word	0x080090ec
 8009050:	080090ec 	.word	0x080090ec
 8009054:	080090ec 	.word	0x080090ec
 8009058:	080090f0 	.word	0x080090f0

0800905c <_init>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	bf00      	nop
 8009060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009062:	bc08      	pop	{r3}
 8009064:	469e      	mov	lr, r3
 8009066:	4770      	bx	lr

08009068 <_fini>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	bf00      	nop
 800906c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906e:	bc08      	pop	{r3}
 8009070:	469e      	mov	lr, r3
 8009072:	4770      	bx	lr
