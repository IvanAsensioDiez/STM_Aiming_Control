
Aiming_Control_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007300  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08007488  08007488  00008488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007678  08007678  00009024  2**0
                  CONTENTS
  4 .ARM          00000008  08007678  08007678  00008678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007680  08007680  00009024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007680  08007680  00008680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007684  08007684  00008684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08007688  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009024  2**0
                  CONTENTS
 10 .bss          00000304  20000028  20000028  00009028  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000032c  2000032c  00009028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f35f  00000000  00000000  00009054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020b2  00000000  00000000  000183b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fd8  00000000  00000000  0001a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c7a  00000000  00000000  0001b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226cc  00000000  00000000  0001c0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001277c  00000000  00000000  0003e786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9525  00000000  00000000  00050f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a427  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004834  00000000  00000000  0012a46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  0012eca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007470 	.word	0x08007470

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08007470 	.word	0x08007470

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b96a 	b.w	8000df0 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	460c      	mov	r4, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d14e      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b40:	4694      	mov	ip, r2
 8000b42:	458c      	cmp	ip, r1
 8000b44:	4686      	mov	lr, r0
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	d962      	bls.n	8000c12 <__udivmoddi4+0xde>
 8000b4c:	b14a      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b4e:	f1c2 0320 	rsb	r3, r2, #32
 8000b52:	4091      	lsls	r1, r2
 8000b54:	fa20 f303 	lsr.w	r3, r0, r3
 8000b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5c:	4319      	orrs	r1, r3
 8000b5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b66:	fa1f f68c 	uxth.w	r6, ip
 8000b6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b72:	fb07 1114 	mls	r1, r7, r4, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb04 f106 	mul.w	r1, r4, r6
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b8a:	f080 8112 	bcs.w	8000db2 <__udivmoddi4+0x27e>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 810f 	bls.w	8000db2 <__udivmoddi4+0x27e>
 8000b94:	3c02      	subs	r4, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a59      	subs	r1, r3, r1
 8000b9a:	fa1f f38e 	uxth.w	r3, lr
 8000b9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000baa:	fb00 f606 	mul.w	r6, r0, r6
 8000bae:	429e      	cmp	r6, r3
 8000bb0:	d90a      	bls.n	8000bc8 <__udivmoddi4+0x94>
 8000bb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bba:	f080 80fc 	bcs.w	8000db6 <__udivmoddi4+0x282>
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	f240 80f9 	bls.w	8000db6 <__udivmoddi4+0x282>
 8000bc4:	4463      	add	r3, ip
 8000bc6:	3802      	subs	r0, #2
 8000bc8:	1b9b      	subs	r3, r3, r6
 8000bca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bce:	2100      	movs	r1, #0
 8000bd0:	b11d      	cbz	r5, 8000bda <__udivmoddi4+0xa6>
 8000bd2:	40d3      	lsrs	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d905      	bls.n	8000bee <__udivmoddi4+0xba>
 8000be2:	b10d      	cbz	r5, 8000be8 <__udivmoddi4+0xb4>
 8000be4:	e9c5 0100 	strd	r0, r1, [r5]
 8000be8:	2100      	movs	r1, #0
 8000bea:	4608      	mov	r0, r1
 8000bec:	e7f5      	b.n	8000bda <__udivmoddi4+0xa6>
 8000bee:	fab3 f183 	clz	r1, r3
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	d146      	bne.n	8000c84 <__udivmoddi4+0x150>
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xcc>
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	f0c0 80f0 	bcc.w	8000de0 <__udivmoddi4+0x2ac>
 8000c00:	1a86      	subs	r6, r0, r2
 8000c02:	eb64 0303 	sbc.w	r3, r4, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d0e6      	beq.n	8000bda <__udivmoddi4+0xa6>
 8000c0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c10:	e7e3      	b.n	8000bda <__udivmoddi4+0xa6>
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	f040 8090 	bne.w	8000d38 <__udivmoddi4+0x204>
 8000c18:	eba1 040c 	sub.w	r4, r1, ip
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	fa1f f78c 	uxth.w	r7, ip
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c36:	fb07 f006 	mul.w	r0, r7, r6
 8000c3a:	4298      	cmp	r0, r3
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x11c>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x11a>
 8000c48:	4298      	cmp	r0, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c4e:	4626      	mov	r6, r4
 8000c50:	1a1c      	subs	r4, r3, r0
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c62:	fb00 f707 	mul.w	r7, r0, r7
 8000c66:	429f      	cmp	r7, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x148>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x146>
 8000c74:	429f      	cmp	r7, r3
 8000c76:	f200 80b0 	bhi.w	8000dda <__udivmoddi4+0x2a6>
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	1bdb      	subs	r3, r3, r7
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	e7a5      	b.n	8000bd0 <__udivmoddi4+0x9c>
 8000c84:	f1c1 0620 	rsb	r6, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8e:	431f      	orrs	r7, r3
 8000c90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c94:	fa04 f301 	lsl.w	r3, r4, r1
 8000c98:	ea43 030c 	orr.w	r3, r3, ip
 8000c9c:	40f4      	lsrs	r4, r6
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	0c38      	lsrs	r0, r7, #16
 8000ca4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cbc:	45a1      	cmp	r9, r4
 8000cbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x1a6>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cca:	f080 8084 	bcs.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cce:	45a1      	cmp	r9, r4
 8000cd0:	f240 8081 	bls.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd8:	443c      	add	r4, r7
 8000cda:	eba4 0409 	sub.w	r4, r4, r9
 8000cde:	fa1f f983 	uxth.w	r9, r3
 8000ce2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ce6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x1d2>
 8000cf6:	193c      	adds	r4, r7, r4
 8000cf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cfc:	d267      	bcs.n	8000dce <__udivmoddi4+0x29a>
 8000cfe:	45a4      	cmp	ip, r4
 8000d00:	d965      	bls.n	8000dce <__udivmoddi4+0x29a>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	443c      	add	r4, r7
 8000d06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d0e:	eba4 040c 	sub.w	r4, r4, ip
 8000d12:	429c      	cmp	r4, r3
 8000d14:	46ce      	mov	lr, r9
 8000d16:	469c      	mov	ip, r3
 8000d18:	d351      	bcc.n	8000dbe <__udivmoddi4+0x28a>
 8000d1a:	d04e      	beq.n	8000dba <__udivmoddi4+0x286>
 8000d1c:	b155      	cbz	r5, 8000d34 <__udivmoddi4+0x200>
 8000d1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d22:	eb64 040c 	sbc.w	r4, r4, ip
 8000d26:	fa04 f606 	lsl.w	r6, r4, r6
 8000d2a:	40cb      	lsrs	r3, r1
 8000d2c:	431e      	orrs	r6, r3
 8000d2e:	40cc      	lsrs	r4, r1
 8000d30:	e9c5 6400 	strd	r6, r4, [r5]
 8000d34:	2100      	movs	r1, #0
 8000d36:	e750      	b.n	8000bda <__udivmoddi4+0xa6>
 8000d38:	f1c2 0320 	rsb	r3, r2, #32
 8000d3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d44:	fa24 f303 	lsr.w	r3, r4, r3
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	430c      	orrs	r4, r1
 8000d4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d66:	fb00 f107 	mul.w	r1, r0, r7
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x24c>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d76:	d22c      	bcs.n	8000dd2 <__udivmoddi4+0x29e>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d92a      	bls.n	8000dd2 <__udivmoddi4+0x29e>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d88:	fb08 3311 	mls	r3, r8, r1, r3
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb01 f307 	mul.w	r3, r1, r7
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x276>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da0:	d213      	bcs.n	8000dca <__udivmoddi4+0x296>
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	d911      	bls.n	8000dca <__udivmoddi4+0x296>
 8000da6:	3902      	subs	r1, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	1ae4      	subs	r4, r4, r3
 8000dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db0:	e739      	b.n	8000c26 <__udivmoddi4+0xf2>
 8000db2:	4604      	mov	r4, r0
 8000db4:	e6f0      	b.n	8000b98 <__udivmoddi4+0x64>
 8000db6:	4608      	mov	r0, r1
 8000db8:	e706      	b.n	8000bc8 <__udivmoddi4+0x94>
 8000dba:	45c8      	cmp	r8, r9
 8000dbc:	d2ae      	bcs.n	8000d1c <__udivmoddi4+0x1e8>
 8000dbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	e7a8      	b.n	8000d1c <__udivmoddi4+0x1e8>
 8000dca:	4631      	mov	r1, r6
 8000dcc:	e7ed      	b.n	8000daa <__udivmoddi4+0x276>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e799      	b.n	8000d06 <__udivmoddi4+0x1d2>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e7d4      	b.n	8000d80 <__udivmoddi4+0x24c>
 8000dd6:	46d6      	mov	lr, sl
 8000dd8:	e77f      	b.n	8000cda <__udivmoddi4+0x1a6>
 8000dda:	4463      	add	r3, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	e74d      	b.n	8000c7c <__udivmoddi4+0x148>
 8000de0:	4606      	mov	r6, r0
 8000de2:	4623      	mov	r3, r4
 8000de4:	4608      	mov	r0, r1
 8000de6:	e70f      	b.n	8000c08 <__udivmoddi4+0xd4>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	e730      	b.n	8000c50 <__udivmoddi4+0x11c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f023 030f 	bic.w	r3, r3, #15
 8000e04:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	f043 030c 	orr.w	r3, r3, #12
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e20:	7bbb      	ldrb	r3, [r7, #14]
 8000e22:	f043 030c 	orr.w	r3, r3, #12
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e34:	f107 0208 	add.w	r2, r7, #8
 8000e38:	2364      	movs	r3, #100	@ 0x64
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	214e      	movs	r1, #78	@ 0x4e
 8000e40:	4803      	ldr	r0, [pc, #12]	@ (8000e50 <lcd_send_cmd+0x5c>)
 8000e42:	f002 fadd 	bl	8003400 <HAL_I2C_Master_Transmit>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000011c 	.word	0x2000011c

08000e54 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f023 030f 	bic.w	r3, r3, #15
 8000e64:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	f043 030d 	orr.w	r3, r3, #13
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	f043 0309 	orr.w	r3, r3, #9
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000e80:	7bbb      	ldrb	r3, [r7, #14]
 8000e82:	f043 030d 	orr.w	r3, r3, #13
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	f043 0309 	orr.w	r3, r3, #9
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e94:	f107 0208 	add.w	r2, r7, #8
 8000e98:	2364      	movs	r3, #100	@ 0x64
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	214e      	movs	r1, #78	@ 0x4e
 8000ea0:	4803      	ldr	r0, [pc, #12]	@ (8000eb0 <lcd_send_data+0x5c>)
 8000ea2:	f002 faad 	bl	8003400 <HAL_I2C_Master_Transmit>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000011c 	.word	0x2000011c

08000eb4 <lcd_clear>:
	lcd_put_cur(row,col);
	lcd_send_string(string);
}

void lcd_clear (void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000eba:	2080      	movs	r0, #128	@ 0x80
 8000ebc:	f7ff ff9a 	bl	8000df4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	e005      	b.n	8000ed2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000ec6:	2020      	movs	r0, #32
 8000ec8:	f7ff ffc4 	bl	8000e54 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b45      	cmp	r3, #69	@ 0x45
 8000ed6:	ddf6      	ble.n	8000ec6 <lcd_clear+0x12>
	}
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000ee6:	2032      	movs	r0, #50	@ 0x32
 8000ee8:	f001 fbf8 	bl	80026dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000eec:	2030      	movs	r0, #48	@ 0x30
 8000eee:	f7ff ff81 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000ef2:	2005      	movs	r0, #5
 8000ef4:	f001 fbf2 	bl	80026dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ef8:	2030      	movs	r0, #48	@ 0x30
 8000efa:	f7ff ff7b 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000efe:	2001      	movs	r0, #1
 8000f00:	f001 fbec 	bl	80026dc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f04:	2030      	movs	r0, #48	@ 0x30
 8000f06:	f7ff ff75 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(10);
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f001 fbe6 	bl	80026dc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000f10:	2020      	movs	r0, #32
 8000f12:	f7ff ff6f 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(10);
 8000f16:	200a      	movs	r0, #10
 8000f18:	f001 fbe0 	bl	80026dc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f1c:	2028      	movs	r0, #40	@ 0x28
 8000f1e:	f7ff ff69 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f001 fbda 	bl	80026dc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f28:	2008      	movs	r0, #8
 8000f2a:	f7ff ff63 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(1);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f001 fbd4 	bl	80026dc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000f34:	2001      	movs	r0, #1
 8000f36:	f7ff ff5d 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(1);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f001 fbce 	bl	80026dc <HAL_Delay>
	HAL_Delay(1);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f001 fbcb 	bl	80026dc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f46:	2006      	movs	r0, #6
 8000f48:	f7ff ff54 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f001 fbc5 	bl	80026dc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f52:	200c      	movs	r0, #12
 8000f54:	f7ff ff4e 	bl	8000df4 <lcd_send_cmd>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <SetPosition>:
	}

/*----------------------------------ServoADC Code End--------------------------------------*/

/*---------------------------------Servo Position Code--------------------------------------*/
void SetPosition(TIM_HandleTypeDef *htim,uint16_t PulseWidth){
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
	if(htim->Instance == TIM1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a10      	ldr	r2, [pc, #64]	@ (8000fb0 <SetPosition+0x54>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d104      	bne.n	8000f7c <SetPosition+0x20>
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, PulseWidth);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	635a      	str	r2, [r3, #52]	@ 0x34
	else if(htim->Instance == TIM2)
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, PulseWidth);
	else if(htim->Instance == TIM3)
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, PulseWidth);
}
 8000f7a:	e012      	b.n	8000fa2 <SetPosition+0x46>
	else if(htim->Instance == TIM2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f84:	d104      	bne.n	8000f90 <SetPosition+0x34>
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, PulseWidth);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f8e:	e008      	b.n	8000fa2 <SetPosition+0x46>
	else if(htim->Instance == TIM3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <SetPosition+0x58>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d103      	bne.n	8000fa2 <SetPosition+0x46>
		__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, PulseWidth);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40010000 	.word	0x40010000
 8000fb4:	40000400 	.word	0x40000400

08000fb8 <Rotate>:

void Rotate(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

    HAL_Delay(10);
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f001 fb8d 	bl	80026dc <HAL_Delay>
	if(dir == 0 && coord1 <= 210) {
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <Rotate+0x74>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d114      	bne.n	8000ff4 <Rotate+0x3c>
 8000fca:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <Rotate+0x78>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2bd2      	cmp	r3, #210	@ 0xd2
 8000fd0:	dc10      	bgt.n	8000ff4 <Rotate+0x3c>
		coord1=coord1+3;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <Rotate+0x78>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3303      	adds	r3, #3
 8000fd8:	4a15      	ldr	r2, [pc, #84]	@ (8001030 <Rotate+0x78>)
 8000fda:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, coord1);//2,1ms represents 180º
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <Rotate+0x78>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <Rotate+0x7c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	635a      	str	r2, [r3, #52]	@ 0x34
			if (coord1==210)
 8000fe6:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <Rotate+0x78>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2bd2      	cmp	r3, #210	@ 0xd2
 8000fec:	d102      	bne.n	8000ff4 <Rotate+0x3c>
				dir = 1;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <Rotate+0x74>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
		}
	if(dir == 1 && coord1 >= 90) {
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800102c <Rotate+0x74>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d114      	bne.n	8001026 <Rotate+0x6e>
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <Rotate+0x78>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b59      	cmp	r3, #89	@ 0x59
 8001002:	dd10      	ble.n	8001026 <Rotate+0x6e>
		coord1-=3;
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <Rotate+0x78>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3b03      	subs	r3, #3
 800100a:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <Rotate+0x78>)
 800100c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, coord1);//2,1ms represents 180º
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <Rotate+0x78>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <Rotate+0x7c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	635a      	str	r2, [r3, #52]	@ 0x34
			if (coord1<=90)
 8001018:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <Rotate+0x78>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b5a      	cmp	r3, #90	@ 0x5a
 800101e:	dc02      	bgt.n	8001026 <Rotate+0x6e>
				dir = 0;
 8001020:	4b02      	ldr	r3, [pc, #8]	@ (800102c <Rotate+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pos); //0,9ms represents 0º
				if (Pos_S1 < ServoRange*(Tolerance))
					dir = 0;
	}
	*/
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200002e8 	.word	0x200002e8
 8001030:	20000000 	.word	0x20000000
 8001034:	200001c8 	.word	0x200001c8

08001038 <delay>:
/*-------------------------------Servo Position Code End--------------------------------------*/

/*-------------------------------------HCSR-04 Code--------------------------------------*/
	void delay (uint16_t time)
	{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <delay+0x30>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	@ 0x24
		while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 800104a:	bf00      	nop
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <delay+0x30>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	429a      	cmp	r2, r3
 8001056:	d3f9      	bcc.n	800104c <delay+0x14>
	}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200002a0 	.word	0x200002a0
 800106c:	00000000 	.word	0x00000000

08001070 <HAL_TIM_IC_CaptureCallback>:


	void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
	{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  //Channel 4 is exclusively used for HCSR-04 management
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7f1b      	ldrb	r3, [r3, #28]
 800107c:	2b08      	cmp	r3, #8
 800107e:	d178      	bne.n	8001172 <HAL_TIM_IC_CaptureCallback+0x102>
		{
			if (Is_First_Captured==0) // if the first value is not captured
 8001080:	4b41      	ldr	r3, [pc, #260]	@ (8001188 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d11a      	bne.n	80010be <HAL_TIM_IC_CaptureCallback+0x4e>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 8001088:	210c      	movs	r1, #12
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f004 fc46 	bl	800591c <HAL_TIM_ReadCapturedValue>
 8001090:	4603      	mov	r3, r0
 8001092:	4a3e      	ldr	r2, [pc, #248]	@ (800118c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001094:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 8001096:	4b3c      	ldr	r3, [pc, #240]	@ (8001188 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
				// Now change the polarity to falling edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6a1a      	ldr	r2, [r3, #32]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80010aa:	621a      	str	r2, [r3, #32]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6a1a      	ldr	r2, [r3, #32]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80010ba:	621a      	str	r2, [r3, #32]
				// set polarity to rising edge
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
			}
		}
	}
 80010bc:	e059      	b.n	8001172 <HAL_TIM_IC_CaptureCallback+0x102>
			else if (Is_First_Captured==1)   // if the first is already captured
 80010be:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <HAL_TIM_IC_CaptureCallback+0x118>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d155      	bne.n	8001172 <HAL_TIM_IC_CaptureCallback+0x102>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 80010c6:	210c      	movs	r1, #12
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f004 fc27 	bl	800591c <HAL_TIM_ReadCapturedValue>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001190 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010d2:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	@ 0x24
				if (IC_Val2 > IC_Val1)
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b2a      	ldr	r3, [pc, #168]	@ (800118c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d907      	bls.n	80010f8 <HAL_TIM_IC_CaptureCallback+0x88>
					Difference = IC_Val2-IC_Val1;
 80010e8:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b27      	ldr	r3, [pc, #156]	@ (800118c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	4a28      	ldr	r2, [pc, #160]	@ (8001194 <HAL_TIM_IC_CaptureCallback+0x124>)
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e00f      	b.n	8001118 <HAL_TIM_IC_CaptureCallback+0xa8>
				else if (IC_Val1 > IC_Val2)
 80010f8:	4b24      	ldr	r3, [pc, #144]	@ (800118c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d909      	bls.n	8001118 <HAL_TIM_IC_CaptureCallback+0xa8>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b20      	ldr	r3, [pc, #128]	@ (800118c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001112:	33ff      	adds	r3, #255	@ 0xff
 8001114:	4a1f      	ldr	r2, [pc, #124]	@ (8001194 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001116:	6013      	str	r3, [r2, #0]
				Distance = Difference * (0.34/2);
 8001118:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <HAL_TIM_IC_CaptureCallback+0x124>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f995 	bl	800044c <__aeabi_ui2d>
 8001122:	a317      	add	r3, pc, #92	@ (adr r3, 8001180 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fa0a 	bl	8000540 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fcc6 	bl	8000ac4 <__aeabi_d2uiz>
 8001138:	4603      	mov	r3, r0
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <HAL_TIM_IC_CaptureCallback+0x128>)
 800113e:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; // set it back to false
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6a1a      	ldr	r2, [r3, #32]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8001154:	621a      	str	r2, [r3, #32]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6a12      	ldr	r2, [r2, #32]
 8001160:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0202 	bic.w	r2, r2, #2
 8001170:	60da      	str	r2, [r3, #12]
	}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	f3af 8000 	nop.w
 8001180:	5c28f5c3 	.word	0x5c28f5c3
 8001184:	3fc5c28f 	.word	0x3fc5c28f
 8001188:	200002f8 	.word	0x200002f8
 800118c:	200002ec 	.word	0x200002ec
 8001190:	200002f0 	.word	0x200002f0
 8001194:	200002f4 	.word	0x200002f4
 8001198:	200002f9 	.word	0x200002f9
 800119c:	200002a0 	.word	0x200002a0

080011a0 <HCSR04_Read>:

	void HCSR04_Read (void)
	{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // pull the TRIG pin HIGH
 80011a4:	2201      	movs	r2, #1
 80011a6:	2110      	movs	r1, #16
 80011a8:	480a      	ldr	r0, [pc, #40]	@ (80011d4 <HCSR04_Read+0x34>)
 80011aa:	f001 ffcb 	bl	8003144 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 80011ae:	200a      	movs	r0, #10
 80011b0:	f7ff ff42 	bl	8001038 <delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);// pull the TRIG pin low
 80011b4:	2200      	movs	r2, #0
 80011b6:	2110      	movs	r1, #16
 80011b8:	4806      	ldr	r0, [pc, #24]	@ (80011d4 <HCSR04_Read+0x34>)
 80011ba:	f001 ffc3 	bl	8003144 <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HCSR04_Read+0x38>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <HCSR04_Read+0x38>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0202 	orr.w	r2, r2, #2
 80011cc:	60da      	str	r2, [r3, #12]
	}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40020000 	.word	0x40020000
 80011d8:	200002a0 	.word	0x200002a0
 80011dc:	00000000 	.word	0x00000000

080011e0 <read_joystick_position>:

	/*---------------------------------HCSR-04 Code End--------------------------------------*/


	//Lectura y tratamiento de coordenadas
	void read_joystick_position(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
	    uint8_t command = 0x00;  // Comando para leer datos del joystick (según el manual)
 80011e6:	2300      	movs	r3, #0
 80011e8:	71fb      	strb	r3, [r7, #7]

	    // Activamos el CS
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011f0:	48a7      	ldr	r0, [pc, #668]	@ (8001490 <read_joystick_position+0x2b0>)
 80011f2:	f001 ffa7 	bl	8003144 <HAL_GPIO_WritePin>

	    //Transmitimos para leer
	    HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY);
 80011f6:	1df9      	adds	r1, r7, #7
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295
 80011fc:	2201      	movs	r2, #1
 80011fe:	48a5      	ldr	r0, [pc, #660]	@ (8001494 <read_joystick_position+0x2b4>)
 8001200:	f003 f965 	bl	80044ce <HAL_SPI_Transmit>

	    // Recibimos el buffer de datos del joystick
	    HAL_SPI_Receive(&hspi1, joystick_data, 5, HAL_MAX_DELAY);
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
 8001208:	2205      	movs	r2, #5
 800120a:	49a3      	ldr	r1, [pc, #652]	@ (8001498 <read_joystick_position+0x2b8>)
 800120c:	48a1      	ldr	r0, [pc, #644]	@ (8001494 <read_joystick_position+0x2b4>)
 800120e:	f003 faa2 	bl	8004756 <HAL_SPI_Receive>

	    // Cerramos el CS
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001218:	489d      	ldr	r0, [pc, #628]	@ (8001490 <read_joystick_position+0x2b0>)
 800121a:	f001 ff93 	bl	8003144 <HAL_GPIO_WritePin>

	    // Procesar los datos: joystick_data[1] y joystick_data[2] son las posiciones X e Y
	    v_directorx = joystick_data[0];
 800121e:	4b9e      	ldr	r3, [pc, #632]	@ (8001498 <read_joystick_position+0x2b8>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4b9d      	ldr	r3, [pc, #628]	@ (800149c <read_joystick_position+0x2bc>)
 8001226:	801a      	strh	r2, [r3, #0]
	    angulo = joystick_data[1];  //Valores de angulo
 8001228:	4b9b      	ldr	r3, [pc, #620]	@ (8001498 <read_joystick_position+0x2b8>)
 800122a:	785b      	ldrb	r3, [r3, #1]
 800122c:	461a      	mov	r2, r3
 800122e:	4b9c      	ldr	r3, [pc, #624]	@ (80014a0 <read_joystick_position+0x2c0>)
 8001230:	801a      	strh	r2, [r3, #0]
	    v_directory = joystick_data[2];  //Sectores de angulo
 8001232:	4b99      	ldr	r3, [pc, #612]	@ (8001498 <read_joystick_position+0x2b8>)
 8001234:	789b      	ldrb	r3, [r3, #2]
 8001236:	461a      	mov	r2, r3
 8001238:	4b9a      	ldr	r3, [pc, #616]	@ (80014a4 <read_joystick_position+0x2c4>)
 800123a:	801a      	strh	r2, [r3, #0]
	    boton1 = joystick_data[3]; //Boton central y lateral
 800123c:	4b96      	ldr	r3, [pc, #600]	@ (8001498 <read_joystick_position+0x2b8>)
 800123e:	78db      	ldrb	r3, [r3, #3]
 8001240:	461a      	mov	r2, r3
 8001242:	4b99      	ldr	r3, [pc, #612]	@ (80014a8 <read_joystick_position+0x2c8>)
 8001244:	801a      	strh	r2, [r3, #0]
	    boton2 = joystick_data[4]; //Confirmación de boton central y lateral
 8001246:	4b94      	ldr	r3, [pc, #592]	@ (8001498 <read_joystick_position+0x2b8>)
 8001248:	791b      	ldrb	r3, [r3, #4]
 800124a:	461a      	mov	r2, r3
 800124c:	4b97      	ldr	r3, [pc, #604]	@ (80014ac <read_joystick_position+0x2cc>)
 800124e:	801a      	strh	r2, [r3, #0]


	    //Boton lateral o central como seguro
	    if(boton2)
 8001250:	4b96      	ldr	r3, [pc, #600]	@ (80014ac <read_joystick_position+0x2cc>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 825c 	beq.w	8001712 <read_joystick_position+0x532>
	    	          {
	    	//Valores de coordenadas en x e y para azimut y giro
	    		          x_value= 100-100*cos((M_PI*angulo_grados)/180);
 800125a:	4b95      	ldr	r3, [pc, #596]	@ (80014b0 <read_joystick_position+0x2d0>)
 800125c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001260:	a385      	add	r3, pc, #532	@ (adr r3, 8001478 <read_joystick_position+0x298>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f96b 	bl	8000540 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b8f      	ldr	r3, [pc, #572]	@ (80014b4 <read_joystick_position+0x2d4>)
 8001278:	f7ff fa8c 	bl	8000794 <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	ec43 2b17 	vmov	d7, r2, r3
 8001284:	eeb0 0a47 	vmov.f32	s0, s14
 8001288:	eef0 0a67 	vmov.f32	s1, s15
 800128c:	f005 f86c 	bl	8006368 <cos>
 8001290:	ec51 0b10 	vmov	r0, r1, d0
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	4b87      	ldr	r3, [pc, #540]	@ (80014b8 <read_joystick_position+0x2d8>)
 800129a:	f7ff f951 	bl	8000540 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	f04f 0000 	mov.w	r0, #0
 80012a6:	4984      	ldr	r1, [pc, #528]	@ (80014b8 <read_joystick_position+0x2d8>)
 80012a8:	f7fe ff92 	bl	80001d0 <__aeabi_dsub>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4982      	ldr	r1, [pc, #520]	@ (80014bc <read_joystick_position+0x2dc>)
 80012b2:	e9c1 2300 	strd	r2, r3, [r1]
	    		          y_value= 100+100*sin((M_PI*angulo_grados)/180);
 80012b6:	4b7e      	ldr	r3, [pc, #504]	@ (80014b0 <read_joystick_position+0x2d0>)
 80012b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012bc:	a36e      	add	r3, pc, #440	@ (adr r3, 8001478 <read_joystick_position+0x298>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff f93d 	bl	8000540 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	4b78      	ldr	r3, [pc, #480]	@ (80014b4 <read_joystick_position+0x2d4>)
 80012d4:	f7ff fa5e 	bl	8000794 <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	ec43 2b17 	vmov	d7, r2, r3
 80012e0:	eeb0 0a47 	vmov.f32	s0, s14
 80012e4:	eef0 0a67 	vmov.f32	s1, s15
 80012e8:	f005 f892 	bl	8006410 <sin>
 80012ec:	ec51 0b10 	vmov	r0, r1, d0
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b70      	ldr	r3, [pc, #448]	@ (80014b8 <read_joystick_position+0x2d8>)
 80012f6:	f7ff f923 	bl	8000540 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b6c      	ldr	r3, [pc, #432]	@ (80014b8 <read_joystick_position+0x2d8>)
 8001308:	f7fe ff64 	bl	80001d4 <__adddf3>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	496b      	ldr	r1, [pc, #428]	@ (80014c0 <read_joystick_position+0x2e0>)
 8001312:	e9c1 2300 	strd	r2, r3, [r1]

	    		          //pos_servo2=90.0+(120.0/200.0)*(x_value);
						  if(x_value>50.0 && pos_servo2<210.0)pos_servo2+=1;
 8001316:	4b69      	ldr	r3, [pc, #420]	@ (80014bc <read_joystick_position+0x2dc>)
 8001318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b68      	ldr	r3, [pc, #416]	@ (80014c4 <read_joystick_position+0x2e4>)
 8001322:	f7ff fb9d 	bl	8000a60 <__aeabi_dcmpgt>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d017      	beq.n	800135c <read_joystick_position+0x17c>
 800132c:	4b66      	ldr	r3, [pc, #408]	@ (80014c8 <read_joystick_position+0x2e8>)
 800132e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b65      	ldr	r3, [pc, #404]	@ (80014cc <read_joystick_position+0x2ec>)
 8001338:	f7ff fb74 	bl	8000a24 <__aeabi_dcmplt>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00c      	beq.n	800135c <read_joystick_position+0x17c>
 8001342:	4b61      	ldr	r3, [pc, #388]	@ (80014c8 <read_joystick_position+0x2e8>)
 8001344:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b60      	ldr	r3, [pc, #384]	@ (80014d0 <read_joystick_position+0x2f0>)
 800134e:	f7fe ff41 	bl	80001d4 <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	495c      	ldr	r1, [pc, #368]	@ (80014c8 <read_joystick_position+0x2e8>)
 8001358:	e9c1 2300 	strd	r2, r3, [r1]
						  if(x_value<150.0 && pos_servo2>90.0)pos_servo2-=1;
 800135c:	4b57      	ldr	r3, [pc, #348]	@ (80014bc <read_joystick_position+0x2dc>)
 800135e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001362:	a347      	add	r3, pc, #284	@ (adr r3, 8001480 <read_joystick_position+0x2a0>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff fb5c 	bl	8000a24 <__aeabi_dcmplt>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d017      	beq.n	80013a2 <read_joystick_position+0x1c2>
 8001372:	4b55      	ldr	r3, [pc, #340]	@ (80014c8 <read_joystick_position+0x2e8>)
 8001374:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	4b55      	ldr	r3, [pc, #340]	@ (80014d4 <read_joystick_position+0x2f4>)
 800137e:	f7ff fb6f 	bl	8000a60 <__aeabi_dcmpgt>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00c      	beq.n	80013a2 <read_joystick_position+0x1c2>
 8001388:	4b4f      	ldr	r3, [pc, #316]	@ (80014c8 <read_joystick_position+0x2e8>)
 800138a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b4f      	ldr	r3, [pc, #316]	@ (80014d0 <read_joystick_position+0x2f0>)
 8001394:	f7fe ff1c 	bl	80001d0 <__aeabi_dsub>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	494a      	ldr	r1, [pc, #296]	@ (80014c8 <read_joystick_position+0x2e8>)
 800139e:	e9c1 2300 	strd	r2, r3, [r1]
						  //pos_servo3=90.0+(120.0/200.0)*(y_value);
						  if(y_value<50.0 && pos_servo3<210.0)pos_servo3+=1;
 80013a2:	4b47      	ldr	r3, [pc, #284]	@ (80014c0 <read_joystick_position+0x2e0>)
 80013a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b45      	ldr	r3, [pc, #276]	@ (80014c4 <read_joystick_position+0x2e4>)
 80013ae:	f7ff fb39 	bl	8000a24 <__aeabi_dcmplt>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d017      	beq.n	80013e8 <read_joystick_position+0x208>
 80013b8:	4b47      	ldr	r3, [pc, #284]	@ (80014d8 <read_joystick_position+0x2f8>)
 80013ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	4b42      	ldr	r3, [pc, #264]	@ (80014cc <read_joystick_position+0x2ec>)
 80013c4:	f7ff fb2e 	bl	8000a24 <__aeabi_dcmplt>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00c      	beq.n	80013e8 <read_joystick_position+0x208>
 80013ce:	4b42      	ldr	r3, [pc, #264]	@ (80014d8 <read_joystick_position+0x2f8>)
 80013d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b3d      	ldr	r3, [pc, #244]	@ (80014d0 <read_joystick_position+0x2f0>)
 80013da:	f7fe fefb 	bl	80001d4 <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	493d      	ldr	r1, [pc, #244]	@ (80014d8 <read_joystick_position+0x2f8>)
 80013e4:	e9c1 2300 	strd	r2, r3, [r1]
						  if(y_value>150.0 && pos_servo3>90.0)pos_servo3-=1;
 80013e8:	4b35      	ldr	r3, [pc, #212]	@ (80014c0 <read_joystick_position+0x2e0>)
 80013ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ee:	a324      	add	r3, pc, #144	@ (adr r3, 8001480 <read_joystick_position+0x2a0>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	f7ff fb34 	bl	8000a60 <__aeabi_dcmpgt>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d017      	beq.n	800142e <read_joystick_position+0x24e>
 80013fe:	4b36      	ldr	r3, [pc, #216]	@ (80014d8 <read_joystick_position+0x2f8>)
 8001400:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b32      	ldr	r3, [pc, #200]	@ (80014d4 <read_joystick_position+0x2f4>)
 800140a:	f7ff fb29 	bl	8000a60 <__aeabi_dcmpgt>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00c      	beq.n	800142e <read_joystick_position+0x24e>
 8001414:	4b30      	ldr	r3, [pc, #192]	@ (80014d8 <read_joystick_position+0x2f8>)
 8001416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b2c      	ldr	r3, [pc, #176]	@ (80014d0 <read_joystick_position+0x2f0>)
 8001420:	f7fe fed6 	bl	80001d0 <__aeabi_dsub>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	492b      	ldr	r1, [pc, #172]	@ (80014d8 <read_joystick_position+0x2f8>)
 800142a:	e9c1 2300 	strd	r2, r3, [r1]

	    		          //Sector 0-60
	    		          if(v_directorx>1 && v_directory> 1 && v_directory< 3)
 800142e:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <read_joystick_position+0x2bc>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d954      	bls.n	80014e0 <read_joystick_position+0x300>
 8001436:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <read_joystick_position+0x2c4>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d950      	bls.n	80014e0 <read_joystick_position+0x300>
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <read_joystick_position+0x2c4>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d84c      	bhi.n	80014e0 <read_joystick_position+0x300>
	    		            {
	    		          	 angulo_grados=60*1.0*angulo/255;
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <read_joystick_position+0x2c0>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f80e 	bl	800046c <__aeabi_i2d>
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	4b21      	ldr	r3, [pc, #132]	@ (80014dc <read_joystick_position+0x2fc>)
 8001456:	f7ff f873 	bl	8000540 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	a309      	add	r3, pc, #36	@ (adr r3, 8001488 <read_joystick_position+0x2a8>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f994 	bl	8000794 <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	490f      	ldr	r1, [pc, #60]	@ (80014b0 <read_joystick_position+0x2d0>)
 8001472:	e9c1 2300 	strd	r2, r3, [r1]
 8001476:	e14c      	b.n	8001712 <read_joystick_position+0x532>
 8001478:	54442d18 	.word	0x54442d18
 800147c:	400921fb 	.word	0x400921fb
 8001480:	00000000 	.word	0x00000000
 8001484:	4062c000 	.word	0x4062c000
 8001488:	00000000 	.word	0x00000000
 800148c:	406fe000 	.word	0x406fe000
 8001490:	40020400 	.word	0x40020400
 8001494:	20000170 	.word	0x20000170
 8001498:	200002fc 	.word	0x200002fc
 800149c:	20000308 	.word	0x20000308
 80014a0:	20000306 	.word	0x20000306
 80014a4:	2000030a 	.word	0x2000030a
 80014a8:	20000302 	.word	0x20000302
 80014ac:	20000304 	.word	0x20000304
 80014b0:	20000310 	.word	0x20000310
 80014b4:	40668000 	.word	0x40668000
 80014b8:	40590000 	.word	0x40590000
 80014bc:	20000318 	.word	0x20000318
 80014c0:	20000320 	.word	0x20000320
 80014c4:	40490000 	.word	0x40490000
 80014c8:	20000008 	.word	0x20000008
 80014cc:	406a4000 	.word	0x406a4000
 80014d0:	3ff00000 	.word	0x3ff00000
 80014d4:	40568000 	.word	0x40568000
 80014d8:	20000010 	.word	0x20000010
 80014dc:	404e0000 	.word	0x404e0000
	    		            }
	    		          //Sector 60-90
	    		            else if(v_directory== 3 && v_directorx>1)
 80014e0:	4b95      	ldr	r3, [pc, #596]	@ (8001738 <read_joystick_position+0x558>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d121      	bne.n	800152c <read_joystick_position+0x34c>
 80014e8:	4b94      	ldr	r3, [pc, #592]	@ (800173c <read_joystick_position+0x55c>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d91d      	bls.n	800152c <read_joystick_position+0x34c>
	    		            {
	    		          	 angulo_grados= 60+30*angulo*1.0/68;
 80014f0:	4b93      	ldr	r3, [pc, #588]	@ (8001740 <read_joystick_position+0x560>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4613      	mov	r3, r2
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe ffb4 	bl	800046c <__aeabi_i2d>
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	4b8e      	ldr	r3, [pc, #568]	@ (8001744 <read_joystick_position+0x564>)
 800150a:	f7ff f943 	bl	8000794 <__aeabi_ddiv>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4b8b      	ldr	r3, [pc, #556]	@ (8001748 <read_joystick_position+0x568>)
 800151c:	f7fe fe5a 	bl	80001d4 <__adddf3>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4989      	ldr	r1, [pc, #548]	@ (800174c <read_joystick_position+0x56c>)
 8001526:	e9c1 2300 	strd	r2, r3, [r1]
 800152a:	e0f2      	b.n	8001712 <read_joystick_position+0x532>
	    		            }
	    		          //Sector 90-120
	    		            else if(v_directory== 3 && v_directorx<2)
 800152c:	4b82      	ldr	r3, [pc, #520]	@ (8001738 <read_joystick_position+0x558>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d122      	bne.n	800157a <read_joystick_position+0x39a>
 8001534:	4b81      	ldr	r3, [pc, #516]	@ (800173c <read_joystick_position+0x55c>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d81e      	bhi.n	800157a <read_joystick_position+0x39a>
	    		            {
	    		            	 angulo_grados= 90+30*(68-angulo)*1.0/68;
 800153c:	4b80      	ldr	r3, [pc, #512]	@ (8001740 <read_joystick_position+0x560>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	f1c3 0244 	rsb	r2, r3, #68	@ 0x44
 8001544:	4613      	mov	r3, r2
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ff8d 	bl	800046c <__aeabi_i2d>
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b7b      	ldr	r3, [pc, #492]	@ (8001744 <read_joystick_position+0x564>)
 8001558:	f7ff f91c 	bl	8000794 <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4b79      	ldr	r3, [pc, #484]	@ (8001750 <read_joystick_position+0x570>)
 800156a:	f7fe fe33 	bl	80001d4 <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4976      	ldr	r1, [pc, #472]	@ (800174c <read_joystick_position+0x56c>)
 8001574:	e9c1 2300 	strd	r2, r3, [r1]
 8001578:	e0cb      	b.n	8001712 <read_joystick_position+0x532>
	    		            }
	    		          //Sector 120-180
	    		            else if(v_directorx<2 && v_directory> 1 && v_directory< 3)
 800157a:	4b70      	ldr	r3, [pc, #448]	@ (800173c <read_joystick_position+0x55c>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d826      	bhi.n	80015d0 <read_joystick_position+0x3f0>
 8001582:	4b6d      	ldr	r3, [pc, #436]	@ (8001738 <read_joystick_position+0x558>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d922      	bls.n	80015d0 <read_joystick_position+0x3f0>
 800158a:	4b6b      	ldr	r3, [pc, #428]	@ (8001738 <read_joystick_position+0x558>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d81e      	bhi.n	80015d0 <read_joystick_position+0x3f0>
	    		            {
	    		               angulo_grados= 120+60*(255-angulo)*1.0/255;
 8001592:	4b6b      	ldr	r3, [pc, #428]	@ (8001740 <read_joystick_position+0x560>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 800159a:	4613      	mov	r3, r2
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff62 	bl	800046c <__aeabi_i2d>
 80015a8:	a35d      	add	r3, pc, #372	@ (adr r3, 8001720 <read_joystick_position+0x540>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7ff f8f1 	bl	8000794 <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	4b65      	ldr	r3, [pc, #404]	@ (8001754 <read_joystick_position+0x574>)
 80015c0:	f7fe fe08 	bl	80001d4 <__adddf3>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4960      	ldr	r1, [pc, #384]	@ (800174c <read_joystick_position+0x56c>)
 80015ca:	e9c1 2300 	strd	r2, r3, [r1]
 80015ce:	e0a0      	b.n	8001712 <read_joystick_position+0x532>
	    		            }
	    		          //Sector 180-240
	    		            else if(v_directorx<2 && v_directory< 2 && v_directory> 0)
 80015d0:	4b5a      	ldr	r3, [pc, #360]	@ (800173c <read_joystick_position+0x55c>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d826      	bhi.n	8001626 <read_joystick_position+0x446>
 80015d8:	4b57      	ldr	r3, [pc, #348]	@ (8001738 <read_joystick_position+0x558>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d822      	bhi.n	8001626 <read_joystick_position+0x446>
 80015e0:	4b55      	ldr	r3, [pc, #340]	@ (8001738 <read_joystick_position+0x558>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d01e      	beq.n	8001626 <read_joystick_position+0x446>
	    		            {
	    		               angulo_grados= 180+60*(255-angulo)*1.0/255;
 80015e8:	4b55      	ldr	r3, [pc, #340]	@ (8001740 <read_joystick_position+0x560>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80015f0:	4613      	mov	r3, r2
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff37 	bl	800046c <__aeabi_i2d>
 80015fe:	a348      	add	r3, pc, #288	@ (adr r3, 8001720 <read_joystick_position+0x540>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7ff f8c6 	bl	8000794 <__aeabi_ddiv>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	4b50      	ldr	r3, [pc, #320]	@ (8001758 <read_joystick_position+0x578>)
 8001616:	f7fe fddd 	bl	80001d4 <__adddf3>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	494b      	ldr	r1, [pc, #300]	@ (800174c <read_joystick_position+0x56c>)
 8001620:	e9c1 2300 	strd	r2, r3, [r1]
 8001624:	e075      	b.n	8001712 <read_joystick_position+0x532>
	    		            }
	    		          //Sector 240-270
	    		            else if(v_directory== 0 && v_directorx<2)
 8001626:	4b44      	ldr	r3, [pc, #272]	@ (8001738 <read_joystick_position+0x558>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d120      	bne.n	8001670 <read_joystick_position+0x490>
 800162e:	4b43      	ldr	r3, [pc, #268]	@ (800173c <read_joystick_position+0x55c>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d81c      	bhi.n	8001670 <read_joystick_position+0x490>
	    		            {
	    		               angulo_grados= 240-30*(angulo-255)*1.0/68;
 8001636:	4b42      	ldr	r3, [pc, #264]	@ (8001740 <read_joystick_position+0x560>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	f1a3 02ff 	sub.w	r2, r3, #255	@ 0xff
 800163e:	4613      	mov	r3, r2
 8001640:	011b      	lsls	r3, r3, #4
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff10 	bl	800046c <__aeabi_i2d>
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b3c      	ldr	r3, [pc, #240]	@ (8001744 <read_joystick_position+0x564>)
 8001652:	f7ff f89f 	bl	8000794 <__aeabi_ddiv>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	f04f 0000 	mov.w	r0, #0
 800165e:	493f      	ldr	r1, [pc, #252]	@ (800175c <read_joystick_position+0x57c>)
 8001660:	f7fe fdb6 	bl	80001d0 <__aeabi_dsub>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4938      	ldr	r1, [pc, #224]	@ (800174c <read_joystick_position+0x56c>)
 800166a:	e9c1 2300 	strd	r2, r3, [r1]
 800166e:	e050      	b.n	8001712 <read_joystick_position+0x532>
	    		            }
	    		          //Sector 270-300
	    		            else if(v_directory== 0 && v_directorx>1)
 8001670:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <read_joystick_position+0x558>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d122      	bne.n	80016be <read_joystick_position+0x4de>
 8001678:	4b30      	ldr	r3, [pc, #192]	@ (800173c <read_joystick_position+0x55c>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d91e      	bls.n	80016be <read_joystick_position+0x4de>
	    		            {
	    		                 angulo_grados= 270+30*(angulo-255+68)*1.0/68;
 8001680:	4b2f      	ldr	r3, [pc, #188]	@ (8001740 <read_joystick_position+0x560>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	f1a3 02bb 	sub.w	r2, r3, #187	@ 0xbb
 8001688:	4613      	mov	r3, r2
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe feeb 	bl	800046c <__aeabi_i2d>
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	4b2a      	ldr	r3, [pc, #168]	@ (8001744 <read_joystick_position+0x564>)
 800169c:	f7ff f87a 	bl	8000794 <__aeabi_ddiv>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	a31f      	add	r3, pc, #124	@ (adr r3, 8001728 <read_joystick_position+0x548>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7fe fd91 	bl	80001d4 <__adddf3>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4925      	ldr	r1, [pc, #148]	@ (800174c <read_joystick_position+0x56c>)
 80016b8:	e9c1 2300 	strd	r2, r3, [r1]
 80016bc:	e029      	b.n	8001712 <read_joystick_position+0x532>
	    		            }
	    		          //Sector 300-330
	    		            else if(v_directorx>1 && v_directory< 2 && v_directory> 0)
 80016be:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <read_joystick_position+0x55c>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d925      	bls.n	8001712 <read_joystick_position+0x532>
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <read_joystick_position+0x558>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d821      	bhi.n	8001712 <read_joystick_position+0x532>
 80016ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <read_joystick_position+0x558>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d01d      	beq.n	8001712 <read_joystick_position+0x532>
	    		            {
	    		          	 angulo_grados= 300+60*(angulo)*1.0/255;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <read_joystick_position+0x560>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	4613      	mov	r3, r2
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fec1 	bl	800046c <__aeabi_i2d>
 80016ea:	a30d      	add	r3, pc, #52	@ (adr r3, 8001720 <read_joystick_position+0x540>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7ff f850 	bl	8000794 <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	a30c      	add	r3, pc, #48	@ (adr r3, 8001730 <read_joystick_position+0x550>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7fe fd67 	bl	80001d4 <__adddf3>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4910      	ldr	r1, [pc, #64]	@ (800174c <read_joystick_position+0x56c>)
 800170c:	e9c1 2300 	strd	r2, r3, [r1]
	    	          {
	    	        	  //Si se ha quitado el seguro valores por defecto a cero y la torreta se queda inmovil
	    	        	  //x_value= 0;
	    	        	  //y_value= 0;
	    	          }
	}
 8001710:	e7ff      	b.n	8001712 <read_joystick_position+0x532>
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	f3af 8000 	nop.w
 8001720:	00000000 	.word	0x00000000
 8001724:	406fe000 	.word	0x406fe000
 8001728:	00000000 	.word	0x00000000
 800172c:	4070e000 	.word	0x4070e000
 8001730:	00000000 	.word	0x00000000
 8001734:	4072c000 	.word	0x4072c000
 8001738:	2000030a 	.word	0x2000030a
 800173c:	20000308 	.word	0x20000308
 8001740:	20000306 	.word	0x20000306
 8001744:	40510000 	.word	0x40510000
 8001748:	404e0000 	.word	0x404e0000
 800174c:	20000310 	.word	0x20000310
 8001750:	40568000 	.word	0x40568000
 8001754:	405e0000 	.word	0x405e0000
 8001758:	40668000 	.word	0x40668000
 800175c:	406e0000 	.word	0x406e0000

08001760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001766:	f000 ff47 	bl	80025f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176a:	f000 f871 	bl	8001850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176e:	f000 fbbd 	bl	8001eec <MX_GPIO_Init>
  MX_ADC1_Init();
 8001772:	f000 f8d7 	bl	8001924 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001776:	f000 f927 	bl	80019c8 <MX_ADC2_Init>
  MX_ADC3_Init();
 800177a:	f000 f977 	bl	8001a6c <MX_ADC3_Init>
  MX_TIM1_Init();
 800177e:	f000 fa2b 	bl	8001bd8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001782:	f000 faad 	bl	8001ce0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001786:	f000 fb03 	bl	8001d90 <MX_TIM3_Init>
  MX_TIM4_Init();
 800178a:	f000 fb5b 	bl	8001e44 <MX_TIM4_Init>
  MX_I2C1_Init();
 800178e:	f000 f9bf 	bl	8001b10 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001792:	f000 f9eb 	bl	8001b6c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
 	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001796:	2100      	movs	r1, #0
 8001798:	4825      	ldr	r0, [pc, #148]	@ (8001830 <main+0xd0>)
 800179a:	f003 fc31 	bl	8005000 <HAL_TIM_PWM_Start>
 	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800179e:	2104      	movs	r1, #4
 80017a0:	4824      	ldr	r0, [pc, #144]	@ (8001834 <main+0xd4>)
 80017a2:	f003 fc2d 	bl	8005000 <HAL_TIM_PWM_Start>
 	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80017a6:	2108      	movs	r1, #8
 80017a8:	4823      	ldr	r0, [pc, #140]	@ (8001838 <main+0xd8>)
 80017aa:	f003 fc29 	bl	8005000 <HAL_TIM_PWM_Start>
 	  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 80017ae:	210c      	movs	r1, #12
 80017b0:	4822      	ldr	r0, [pc, #136]	@ (800183c <main+0xdc>)
 80017b2:	f003 fd3d 	bl	8005230 <HAL_TIM_IC_Start_IT>
 	  lcd_init();
 80017b6:	f7ff fb94 	bl	8000ee2 <lcd_init>
 	  int a=90;
 80017ba:	235a      	movs	r3, #90	@ 0x5a
 80017bc:	607b      	str	r3, [r7, #4]
 	  int b=0;
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]

 	  //int pantalla=0;
 	 lcd_clear();
 80017c2:	f7ff fb77 	bl	8000eb4 <lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HCSR04_Read();
 80017c6:	f7ff fceb 	bl	80011a0 <HCSR04_Read>
			  	 }
			  	 else a=90;


*/
	Rotate();
 80017ca:	f7ff fbf5 	bl	8000fb8 <Rotate>
	SetPosition(&htim2, pos_servo2);
 80017ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001840 <main+0xe0>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f974 	bl	8000ac4 <__aeabi_d2uiz>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4619      	mov	r1, r3
 80017e2:	4814      	ldr	r0, [pc, #80]	@ (8001834 <main+0xd4>)
 80017e4:	f7ff fbba 	bl	8000f5c <SetPosition>
	SetPosition(&htim3, pos_servo3);
 80017e8:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <main+0xe4>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7ff f967 	bl	8000ac4 <__aeabi_d2uiz>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	4619      	mov	r1, r3
 80017fc:	480e      	ldr	r0, [pc, #56]	@ (8001838 <main+0xd8>)
 80017fe:	f7ff fbad 	bl	8000f5c <SetPosition>
	//  Pos_S3 = GetPosition(ReadServo(&hadc3));

	  if(Distance < 10){
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <main+0xe8>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b09      	cmp	r3, #9
 8001808:	d806      	bhi.n	8001818 <main+0xb8>
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,1);
 800180a:	2201      	movs	r2, #1
 800180c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001810:	480e      	ldr	r0, [pc, #56]	@ (800184c <main+0xec>)
 8001812:	f001 fc97 	bl	8003144 <HAL_GPIO_WritePin>
 8001816:	e005      	b.n	8001824 <main+0xc4>
	  	  lcd_enviar( "TARGET", 0, 2);
		  pantalla=1;
		  }*/
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,0);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800181e:	480b      	ldr	r0, [pc, #44]	@ (800184c <main+0xec>)
 8001820:	f001 fc90 	bl	8003144 <HAL_GPIO_WritePin>
		  pantalla=0;
		  }*/
	  }

	  //Llamada a la función de lectura
	  	          read_joystick_position();
 8001824:	f7ff fcdc 	bl	80011e0 <read_joystick_position>

	  	          // Retardo recomendado en la DATASHEET
	  	          HAL_Delay(10);
 8001828:	200a      	movs	r0, #10
 800182a:	f000 ff57 	bl	80026dc <HAL_Delay>
	HCSR04_Read();
 800182e:	e7ca      	b.n	80017c6 <main+0x66>
 8001830:	200001c8 	.word	0x200001c8
 8001834:	20000210 	.word	0x20000210
 8001838:	20000258 	.word	0x20000258
 800183c:	200002a0 	.word	0x200002a0
 8001840:	20000008 	.word	0x20000008
 8001844:	20000010 	.word	0x20000010
 8001848:	200002f9 	.word	0x200002f9
 800184c:	40020c00 	.word	0x40020c00

08001850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b094      	sub	sp, #80	@ 0x50
 8001854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001856:	f107 0320 	add.w	r3, r7, #32
 800185a:	2230      	movs	r2, #48	@ 0x30
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f004 fd56 	bl	8006310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	4b28      	ldr	r3, [pc, #160]	@ (800191c <SystemClock_Config+0xcc>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	4a27      	ldr	r2, [pc, #156]	@ (800191c <SystemClock_Config+0xcc>)
 800187e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001882:	6413      	str	r3, [r2, #64]	@ 0x40
 8001884:	4b25      	ldr	r3, [pc, #148]	@ (800191c <SystemClock_Config+0xcc>)
 8001886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	4b22      	ldr	r3, [pc, #136]	@ (8001920 <SystemClock_Config+0xd0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a21      	ldr	r2, [pc, #132]	@ (8001920 <SystemClock_Config+0xd0>)
 800189a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001920 <SystemClock_Config+0xd0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ac:	2302      	movs	r3, #2
 80018ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b0:	2301      	movs	r3, #1
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b4:	2310      	movs	r3, #16
 80018b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b8:	2302      	movs	r3, #2
 80018ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018bc:	2300      	movs	r3, #0
 80018be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018c0:	2308      	movs	r3, #8
 80018c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80018c4:	2332      	movs	r3, #50	@ 0x32
 80018c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018c8:	2304      	movs	r3, #4
 80018ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018cc:	2307      	movs	r3, #7
 80018ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d0:	f107 0320 	add.w	r3, r7, #32
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 f8ed 	bl	8003ab4 <HAL_RCC_OscConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018e0:	f000 fb90 	bl	8002004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e4:	230f      	movs	r3, #15
 80018e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e8:	2302      	movs	r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f002 fb4e 	bl	8003fa4 <HAL_RCC_ClockConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800190e:	f000 fb79 	bl	8002004 <Error_Handler>
  }
}
 8001912:	bf00      	nop
 8001914:	3750      	adds	r7, #80	@ 0x50
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	40007000 	.word	0x40007000

08001924 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800192a:	463b      	mov	r3, r7
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001936:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <MX_ADC1_Init+0x98>)
 8001938:	4a21      	ldr	r2, [pc, #132]	@ (80019c0 <MX_ADC1_Init+0x9c>)
 800193a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800193c:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <MX_ADC1_Init+0x98>)
 800193e:	2200      	movs	r2, #0
 8001940:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <MX_ADC1_Init+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001948:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <MX_ADC1_Init+0x98>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800194e:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <MX_ADC1_Init+0x98>)
 8001950:	2200      	movs	r2, #0
 8001952:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <MX_ADC1_Init+0x98>)
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800195c:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <MX_ADC1_Init+0x98>)
 800195e:	2200      	movs	r2, #0
 8001960:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <MX_ADC1_Init+0x98>)
 8001964:	4a17      	ldr	r2, [pc, #92]	@ (80019c4 <MX_ADC1_Init+0xa0>)
 8001966:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001968:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <MX_ADC1_Init+0x98>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800196e:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <MX_ADC1_Init+0x98>)
 8001970:	2201      	movs	r2, #1
 8001972:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <MX_ADC1_Init+0x98>)
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <MX_ADC1_Init+0x98>)
 800197e:	2201      	movs	r2, #1
 8001980:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001982:	480e      	ldr	r0, [pc, #56]	@ (80019bc <MX_ADC1_Init+0x98>)
 8001984:	f000 fece 	bl	8002724 <HAL_ADC_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800198e:	f000 fb39 	bl	8002004 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001992:	2301      	movs	r3, #1
 8001994:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001996:	2301      	movs	r3, #1
 8001998:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800199e:	463b      	mov	r3, r7
 80019a0:	4619      	mov	r1, r3
 80019a2:	4806      	ldr	r0, [pc, #24]	@ (80019bc <MX_ADC1_Init+0x98>)
 80019a4:	f000 ff02 	bl	80027ac <HAL_ADC_ConfigChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80019ae:	f000 fb29 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000044 	.word	0x20000044
 80019c0:	40012000 	.word	0x40012000
 80019c4:	0f000001 	.word	0x0f000001

080019c8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ce:	463b      	mov	r3, r7
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80019da:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <MX_ADC2_Init+0x98>)
 80019dc:	4a21      	ldr	r2, [pc, #132]	@ (8001a64 <MX_ADC2_Init+0x9c>)
 80019de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <MX_ADC2_Init+0x98>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80019e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <MX_ADC2_Init+0x98>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80019ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <MX_ADC2_Init+0x98>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80019f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <MX_ADC2_Init+0x98>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <MX_ADC2_Init+0x98>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <MX_ADC2_Init+0x98>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_ADC2_Init+0x98>)
 8001a08:	4a17      	ldr	r2, [pc, #92]	@ (8001a68 <MX_ADC2_Init+0xa0>)
 8001a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_ADC2_Init+0x98>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001a12:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <MX_ADC2_Init+0x98>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <MX_ADC2_Init+0x98>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <MX_ADC2_Init+0x98>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a26:	480e      	ldr	r0, [pc, #56]	@ (8001a60 <MX_ADC2_Init+0x98>)
 8001a28:	f000 fe7c 	bl	8002724 <HAL_ADC_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001a32:	f000 fae7 	bl	8002004 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a36:	2302      	movs	r3, #2
 8001a38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a42:	463b      	mov	r3, r7
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	@ (8001a60 <MX_ADC2_Init+0x98>)
 8001a48:	f000 feb0 	bl	80027ac <HAL_ADC_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001a52:	f000 fad7 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000008c 	.word	0x2000008c
 8001a64:	40012100 	.word	0x40012100
 8001a68:	0f000001 	.word	0x0f000001

08001a6c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a72:	463b      	mov	r3, r7
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001a7e:	4b21      	ldr	r3, [pc, #132]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001a80:	4a21      	ldr	r2, [pc, #132]	@ (8001b08 <MX_ADC3_Init+0x9c>)
 8001a82:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a84:	4b1f      	ldr	r3, [pc, #124]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aa4:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aaa:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001aac:	4a17      	ldr	r2, [pc, #92]	@ (8001b0c <MX_ADC3_Init+0xa0>)
 8001aae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001abc:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001aca:	480e      	ldr	r0, [pc, #56]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001acc:	f000 fe2a 	bl	8002724 <HAL_ADC_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001ad6:	f000 fa95 	bl	8002004 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001ada:	2303      	movs	r3, #3
 8001adc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4806      	ldr	r0, [pc, #24]	@ (8001b04 <MX_ADC3_Init+0x98>)
 8001aec:	f000 fe5e 	bl	80027ac <HAL_ADC_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001af6:	f000 fa85 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200000d4 	.word	0x200000d4
 8001b08:	40012200 	.word	0x40012200
 8001b0c:	0f000001 	.word	0x0f000001

08001b10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <MX_I2C1_Init+0x50>)
 8001b16:	4a13      	ldr	r2, [pc, #76]	@ (8001b64 <MX_I2C1_Init+0x54>)
 8001b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <MX_I2C1_Init+0x50>)
 8001b1c:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <MX_I2C1_Init+0x58>)
 8001b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <MX_I2C1_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <MX_I2C1_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <MX_I2C1_Init+0x50>)
 8001b2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <MX_I2C1_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <MX_I2C1_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <MX_I2C1_Init+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <MX_I2C1_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	@ (8001b60 <MX_I2C1_Init+0x50>)
 8001b4e:	f001 fb13 	bl	8003178 <HAL_I2C_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b58:	f000 fa54 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2000011c 	.word	0x2000011c
 8001b64:	40005400 	.word	0x40005400
 8001b68:	000186a0 	.word	0x000186a0

08001b6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b70:	4b17      	ldr	r3, [pc, #92]	@ (8001bd0 <MX_SPI1_Init+0x64>)
 8001b72:	4a18      	ldr	r2, [pc, #96]	@ (8001bd4 <MX_SPI1_Init+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b76:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <MX_SPI1_Init+0x64>)
 8001b78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <MX_SPI1_Init+0x64>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <MX_SPI1_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b8a:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <MX_SPI1_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b90:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <MX_SPI1_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <MX_SPI1_Init+0x64>)
 8001b98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <MX_SPI1_Init+0x64>)
 8001ba0:	2218      	movs	r2, #24
 8001ba2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <MX_SPI1_Init+0x64>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001baa:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <MX_SPI1_Init+0x64>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <MX_SPI1_Init+0x64>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bb6:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <MX_SPI1_Init+0x64>)
 8001bb8:	220a      	movs	r2, #10
 8001bba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bbc:	4804      	ldr	r0, [pc, #16]	@ (8001bd0 <MX_SPI1_Init+0x64>)
 8001bbe:	f002 fbfd 	bl	80043bc <HAL_SPI_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bc8:	f000 fa1c 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000170 	.word	0x20000170
 8001bd4:	40013000 	.word	0x40013000

08001bd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b092      	sub	sp, #72	@ 0x48
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
 8001bf8:	615a      	str	r2, [r3, #20]
 8001bfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2220      	movs	r2, #32
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f004 fb84 	bl	8006310 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c08:	4b33      	ldr	r3, [pc, #204]	@ (8001cd8 <MX_TIM1_Init+0x100>)
 8001c0a:	4a34      	ldr	r2, [pc, #208]	@ (8001cdc <MX_TIM1_Init+0x104>)
 8001c0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 8001c0e:	4b32      	ldr	r3, [pc, #200]	@ (8001cd8 <MX_TIM1_Init+0x100>)
 8001c10:	229f      	movs	r2, #159	@ 0x9f
 8001c12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c14:	4b30      	ldr	r3, [pc, #192]	@ (8001cd8 <MX_TIM1_Init+0x100>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd8 <MX_TIM1_Init+0x100>)
 8001c1c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001c20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c22:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <MX_TIM1_Init+0x100>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c28:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd8 <MX_TIM1_Init+0x100>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd8 <MX_TIM1_Init+0x100>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c34:	4828      	ldr	r0, [pc, #160]	@ (8001cd8 <MX_TIM1_Init+0x100>)
 8001c36:	f003 f993 	bl	8004f60 <HAL_TIM_PWM_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c40:	f000 f9e0 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c50:	4619      	mov	r1, r3
 8001c52:	4821      	ldr	r0, [pc, #132]	@ (8001cd8 <MX_TIM1_Init+0x100>)
 8001c54:	f004 fa7a 	bl	800614c <HAL_TIMEx_MasterConfigSynchronization>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c5e:	f000 f9d1 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c62:	2360      	movs	r3, #96	@ 0x60
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c82:	2200      	movs	r2, #0
 8001c84:	4619      	mov	r1, r3
 8001c86:	4814      	ldr	r0, [pc, #80]	@ (8001cd8 <MX_TIM1_Init+0x100>)
 8001c88:	f003 fd86 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001c92:	f000 f9b7 	bl	8002004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001caa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4807      	ldr	r0, [pc, #28]	@ (8001cd8 <MX_TIM1_Init+0x100>)
 8001cba:	f004 fac3 	bl	8006244 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001cc4:	f000 f99e 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cc8:	4803      	ldr	r0, [pc, #12]	@ (8001cd8 <MX_TIM1_Init+0x100>)
 8001cca:	f000 fb99 	bl	8002400 <HAL_TIM_MspPostInit>

}
 8001cce:	bf00      	nop
 8001cd0:	3748      	adds	r7, #72	@ 0x48
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200001c8 	.word	0x200001c8
 8001cdc:	40010000 	.word	0x40010000

08001ce0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	@ 0x28
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce6:	f107 0320 	add.w	r3, r7, #32
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
 8001cfc:	611a      	str	r2, [r3, #16]
 8001cfe:	615a      	str	r2, [r3, #20]
 8001d00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d02:	4b22      	ldr	r3, [pc, #136]	@ (8001d8c <MX_TIM2_Init+0xac>)
 8001d04:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8001d0a:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <MX_TIM2_Init+0xac>)
 8001d0c:	229f      	movs	r2, #159	@ 0x9f
 8001d0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d10:	4b1e      	ldr	r3, [pc, #120]	@ (8001d8c <MX_TIM2_Init+0xac>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001d16:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <MX_TIM2_Init+0xac>)
 8001d18:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001d1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <MX_TIM2_Init+0xac>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d24:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <MX_TIM2_Init+0xac>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d2a:	4818      	ldr	r0, [pc, #96]	@ (8001d8c <MX_TIM2_Init+0xac>)
 8001d2c:	f003 f918 	bl	8004f60 <HAL_TIM_PWM_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d36:	f000 f965 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d42:	f107 0320 	add.w	r3, r7, #32
 8001d46:	4619      	mov	r1, r3
 8001d48:	4810      	ldr	r0, [pc, #64]	@ (8001d8c <MX_TIM2_Init+0xac>)
 8001d4a:	f004 f9ff 	bl	800614c <HAL_TIMEx_MasterConfigSynchronization>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d54:	f000 f956 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d58:	2360      	movs	r3, #96	@ 0x60
 8001d5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4807      	ldr	r0, [pc, #28]	@ (8001d8c <MX_TIM2_Init+0xac>)
 8001d70:	f003 fd12 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001d7a:	f000 f943 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d7e:	4803      	ldr	r0, [pc, #12]	@ (8001d8c <MX_TIM2_Init+0xac>)
 8001d80:	f000 fb3e 	bl	8002400 <HAL_TIM_MspPostInit>

}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	@ 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000210 	.word	0x20000210

08001d90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	@ 0x28
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d96:	f107 0320 	add.w	r3, r7, #32
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]
 8001dae:	615a      	str	r2, [r3, #20]
 8001db0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001db2:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001db4:	4a22      	ldr	r2, [pc, #136]	@ (8001e40 <MX_TIM3_Init+0xb0>)
 8001db6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8001db8:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001dba:	229f      	movs	r2, #159	@ 0x9f
 8001dbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001dc6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001dca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dd8:	4818      	ldr	r0, [pc, #96]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001dda:	f003 f8c1 	bl	8004f60 <HAL_TIM_PWM_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001de4:	f000 f90e 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001df0:	f107 0320 	add.w	r3, r7, #32
 8001df4:	4619      	mov	r1, r3
 8001df6:	4811      	ldr	r0, [pc, #68]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001df8:	f004 f9a8 	bl	800614c <HAL_TIMEx_MasterConfigSynchronization>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001e02:	f000 f8ff 	bl	8002004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e06:	2360      	movs	r3, #96	@ 0x60
 8001e08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2208      	movs	r2, #8
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4807      	ldr	r0, [pc, #28]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001e1e:	f003 fcbb 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001e28:	f000 f8ec 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e2c:	4803      	ldr	r0, [pc, #12]	@ (8001e3c <MX_TIM3_Init+0xac>)
 8001e2e:	f000 fae7 	bl	8002400 <HAL_TIM_MspPostInit>

}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	@ 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000258 	.word	0x20000258
 8001e40:	40000400 	.word	0x40000400

08001e44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4a:	f107 0310 	add.w	r3, r7, #16
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e54:	463b      	mov	r3, r7
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e60:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001e62:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <MX_TIM4_Init+0xa4>)
 8001e64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001e66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001e68:	2263      	movs	r2, #99	@ 0x63
 8001e6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 8001e72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001e74:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001e78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001e86:	4817      	ldr	r0, [pc, #92]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001e88:	f003 f982 	bl	8005190 <HAL_TIM_IC_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001e92:	f000 f8b7 	bl	8002004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480f      	ldr	r0, [pc, #60]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001ea6:	f004 f951 	bl	800614c <HAL_TIMEx_MasterConfigSynchronization>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001eb0:	f000 f8a8 	bl	8002004 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4806      	ldr	r0, [pc, #24]	@ (8001ee4 <MX_TIM4_Init+0xa0>)
 8001ecc:	f003 fbc8 	bl	8005660 <HAL_TIM_IC_ConfigChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001ed6:	f000 f895 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200002a0 	.word	0x200002a0
 8001ee8:	40000800 	.word	0x40000800

08001eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff4 <MX_GPIO_Init+0x108>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a3a      	ldr	r2, [pc, #232]	@ (8001ff4 <MX_GPIO_Init+0x108>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b38      	ldr	r3, [pc, #224]	@ (8001ff4 <MX_GPIO_Init+0x108>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b34      	ldr	r3, [pc, #208]	@ (8001ff4 <MX_GPIO_Init+0x108>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a33      	ldr	r2, [pc, #204]	@ (8001ff4 <MX_GPIO_Init+0x108>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b31      	ldr	r3, [pc, #196]	@ (8001ff4 <MX_GPIO_Init+0x108>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <MX_GPIO_Init+0x108>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff4 <MX_GPIO_Init+0x108>)
 8001f44:	f043 0310 	orr.w	r3, r3, #16
 8001f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <MX_GPIO_Init+0x108>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ff4 <MX_GPIO_Init+0x108>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	4a25      	ldr	r2, [pc, #148]	@ (8001ff4 <MX_GPIO_Init+0x108>)
 8001f60:	f043 0308 	orr.w	r3, r3, #8
 8001f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f66:	4b23      	ldr	r3, [pc, #140]	@ (8001ff4 <MX_GPIO_Init+0x108>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2110      	movs	r1, #16
 8001f76:	4820      	ldr	r0, [pc, #128]	@ (8001ff8 <MX_GPIO_Init+0x10c>)
 8001f78:	f001 f8e4 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f82:	481e      	ldr	r0, [pc, #120]	@ (8001ffc <MX_GPIO_Init+0x110>)
 8001f84:	f001 f8de 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f8e:	481c      	ldr	r0, [pc, #112]	@ (8002000 <MX_GPIO_Init+0x114>)
 8001f90:	f001 f8d8 	bl	8003144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f94:	2310      	movs	r3, #16
 8001f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4813      	ldr	r0, [pc, #76]	@ (8001ff8 <MX_GPIO_Init+0x10c>)
 8001fac:	f000 ff2e 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fb0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480c      	ldr	r0, [pc, #48]	@ (8001ffc <MX_GPIO_Init+0x110>)
 8001fca:	f000 ff1f 	bl	8002e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4806      	ldr	r0, [pc, #24]	@ (8002000 <MX_GPIO_Init+0x114>)
 8001fe8:	f000 ff10 	bl	8002e0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fec:	bf00      	nop
 8001fee:	3728      	adds	r7, #40	@ 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40020c00 	.word	0x40020c00

08002004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002008:	b672      	cpsid	i
}
 800200a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <Error_Handler+0x8>

08002010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	4b10      	ldr	r3, [pc, #64]	@ (800205c <HAL_MspInit+0x4c>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	4a0f      	ldr	r2, [pc, #60]	@ (800205c <HAL_MspInit+0x4c>)
 8002020:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002024:	6453      	str	r3, [r2, #68]	@ 0x44
 8002026:	4b0d      	ldr	r3, [pc, #52]	@ (800205c <HAL_MspInit+0x4c>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	603b      	str	r3, [r7, #0]
 8002036:	4b09      	ldr	r3, [pc, #36]	@ (800205c <HAL_MspInit+0x4c>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	4a08      	ldr	r2, [pc, #32]	@ (800205c <HAL_MspInit+0x4c>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002040:	6413      	str	r3, [r2, #64]	@ 0x40
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_MspInit+0x4c>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800204e:	2007      	movs	r0, #7
 8002050:	f000 fe9a 	bl	8002d88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800

08002060 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08e      	sub	sp, #56	@ 0x38
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a45      	ldr	r2, [pc, #276]	@ (8002194 <HAL_ADC_MspInit+0x134>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d128      	bne.n	80020d4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
 8002086:	4b44      	ldr	r3, [pc, #272]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	4a43      	ldr	r2, [pc, #268]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002090:	6453      	str	r3, [r2, #68]	@ 0x44
 8002092:	4b41      	ldr	r3, [pc, #260]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800209a:	623b      	str	r3, [r7, #32]
 800209c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020ba:	2302      	movs	r3, #2
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020be:	2303      	movs	r3, #3
 80020c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ca:	4619      	mov	r1, r3
 80020cc:	4833      	ldr	r0, [pc, #204]	@ (800219c <HAL_ADC_MspInit+0x13c>)
 80020ce:	f000 fe9d 	bl	8002e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020d2:	e05a      	b.n	800218a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a31      	ldr	r2, [pc, #196]	@ (80021a0 <HAL_ADC_MspInit+0x140>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d128      	bne.n	8002130 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	4a2c      	ldr	r2, [pc, #176]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 80020e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	4b26      	ldr	r3, [pc, #152]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	4a25      	ldr	r2, [pc, #148]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6313      	str	r3, [r2, #48]	@ 0x30
 800210a:	4b23      	ldr	r3, [pc, #140]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002116:	2304      	movs	r3, #4
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800211a:	2303      	movs	r3, #3
 800211c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002126:	4619      	mov	r1, r3
 8002128:	481c      	ldr	r0, [pc, #112]	@ (800219c <HAL_ADC_MspInit+0x13c>)
 800212a:	f000 fe6f 	bl	8002e0c <HAL_GPIO_Init>
}
 800212e:	e02c      	b.n	800218a <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1b      	ldr	r2, [pc, #108]	@ (80021a4 <HAL_ADC_MspInit+0x144>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d127      	bne.n	800218a <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b16      	ldr	r3, [pc, #88]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	4a15      	ldr	r2, [pc, #84]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 8002144:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002148:	6453      	str	r3, [r2, #68]	@ 0x44
 800214a:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4a0e      	ldr	r2, [pc, #56]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <HAL_ADC_MspInit+0x138>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002172:	2308      	movs	r3, #8
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002176:	2303      	movs	r3, #3
 8002178:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	@ (800219c <HAL_ADC_MspInit+0x13c>)
 8002186:	f000 fe41 	bl	8002e0c <HAL_GPIO_Init>
}
 800218a:	bf00      	nop
 800218c:	3738      	adds	r7, #56	@ 0x38
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40012000 	.word	0x40012000
 8002198:	40023800 	.word	0x40023800
 800219c:	40020000 	.word	0x40020000
 80021a0:	40012100 	.word	0x40012100
 80021a4:	40012200 	.word	0x40012200

080021a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	@ 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a19      	ldr	r2, [pc, #100]	@ (800222c <HAL_I2C_MspInit+0x84>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d12b      	bne.n	8002222 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <HAL_I2C_MspInit+0x88>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4a17      	ldr	r2, [pc, #92]	@ (8002230 <HAL_I2C_MspInit+0x88>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <HAL_I2C_MspInit+0x88>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021e6:	23c0      	movs	r3, #192	@ 0xc0
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ea:	2312      	movs	r3, #18
 80021ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021f6:	2304      	movs	r3, #4
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	480c      	ldr	r0, [pc, #48]	@ (8002234 <HAL_I2C_MspInit+0x8c>)
 8002202:	f000 fe03 	bl	8002e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <HAL_I2C_MspInit+0x88>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	4a08      	ldr	r2, [pc, #32]	@ (8002230 <HAL_I2C_MspInit+0x88>)
 8002210:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002214:	6413      	str	r3, [r2, #64]	@ 0x40
 8002216:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <HAL_I2C_MspInit+0x88>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002222:	bf00      	nop
 8002224:	3728      	adds	r7, #40	@ 0x28
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40005400 	.word	0x40005400
 8002230:	40023800 	.word	0x40023800
 8002234:	40020400 	.word	0x40020400

08002238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	@ 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a19      	ldr	r2, [pc, #100]	@ (80022bc <HAL_SPI_MspInit+0x84>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d12b      	bne.n	80022b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b18      	ldr	r3, [pc, #96]	@ (80022c0 <HAL_SPI_MspInit+0x88>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	4a17      	ldr	r2, [pc, #92]	@ (80022c0 <HAL_SPI_MspInit+0x88>)
 8002264:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002268:	6453      	str	r3, [r2, #68]	@ 0x44
 800226a:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <HAL_SPI_MspInit+0x88>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <HAL_SPI_MspInit+0x88>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a10      	ldr	r2, [pc, #64]	@ (80022c0 <HAL_SPI_MspInit+0x88>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <HAL_SPI_MspInit+0x88>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002292:	23e0      	movs	r3, #224	@ 0xe0
 8002294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229e:	2303      	movs	r3, #3
 80022a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a2:	2305      	movs	r3, #5
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	4805      	ldr	r0, [pc, #20]	@ (80022c4 <HAL_SPI_MspInit+0x8c>)
 80022ae:	f000 fdad 	bl	8002e0c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80022b2:	bf00      	nop
 80022b4:	3728      	adds	r7, #40	@ 0x28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40013000 	.word	0x40013000
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020000 	.word	0x40020000

080022c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002354 <HAL_TIM_PWM_MspInit+0x8c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10e      	bne.n	80022f8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	4b1e      	ldr	r3, [pc, #120]	@ (8002358 <HAL_TIM_PWM_MspInit+0x90>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002358 <HAL_TIM_PWM_MspInit+0x90>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002358 <HAL_TIM_PWM_MspInit+0x90>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022f6:	e026      	b.n	8002346 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002300:	d10e      	bne.n	8002320 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <HAL_TIM_PWM_MspInit+0x90>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	4a13      	ldr	r2, [pc, #76]	@ (8002358 <HAL_TIM_PWM_MspInit+0x90>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6413      	str	r3, [r2, #64]	@ 0x40
 8002312:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <HAL_TIM_PWM_MspInit+0x90>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
}
 800231e:	e012      	b.n	8002346 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0d      	ldr	r2, [pc, #52]	@ (800235c <HAL_TIM_PWM_MspInit+0x94>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d10d      	bne.n	8002346 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <HAL_TIM_PWM_MspInit+0x90>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	4a09      	ldr	r2, [pc, #36]	@ (8002358 <HAL_TIM_PWM_MspInit+0x90>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6413      	str	r3, [r2, #64]	@ 0x40
 800233a:	4b07      	ldr	r3, [pc, #28]	@ (8002358 <HAL_TIM_PWM_MspInit+0x90>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
}
 8002346:	bf00      	nop
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40010000 	.word	0x40010000
 8002358:	40023800 	.word	0x40023800
 800235c:	40000400 	.word	0x40000400

08002360 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	@ 0x28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1d      	ldr	r2, [pc, #116]	@ (80023f4 <HAL_TIM_IC_MspInit+0x94>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d134      	bne.n	80023ec <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	4b1c      	ldr	r3, [pc, #112]	@ (80023f8 <HAL_TIM_IC_MspInit+0x98>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	4a1b      	ldr	r2, [pc, #108]	@ (80023f8 <HAL_TIM_IC_MspInit+0x98>)
 800238c:	f043 0304 	orr.w	r3, r3, #4
 8002390:	6413      	str	r3, [r2, #64]	@ 0x40
 8002392:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_TIM_IC_MspInit+0x98>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	4b15      	ldr	r3, [pc, #84]	@ (80023f8 <HAL_TIM_IC_MspInit+0x98>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	4a14      	ldr	r2, [pc, #80]	@ (80023f8 <HAL_TIM_IC_MspInit+0x98>)
 80023a8:	f043 0308 	orr.w	r3, r3, #8
 80023ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ae:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_TIM_IC_MspInit+0x98>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c0:	2302      	movs	r3, #2
 80023c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c8:	2300      	movs	r3, #0
 80023ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023cc:	2302      	movs	r3, #2
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4619      	mov	r1, r3
 80023d6:	4809      	ldr	r0, [pc, #36]	@ (80023fc <HAL_TIM_IC_MspInit+0x9c>)
 80023d8:	f000 fd18 	bl	8002e0c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	201e      	movs	r0, #30
 80023e2:	f000 fcdc 	bl	8002d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023e6:	201e      	movs	r0, #30
 80023e8:	f000 fcf5 	bl	8002dd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80023ec:	bf00      	nop
 80023ee:	3728      	adds	r7, #40	@ 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40000800 	.word	0x40000800
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020c00 	.word	0x40020c00

08002400 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	@ 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a36      	ldr	r2, [pc, #216]	@ (80024f8 <HAL_TIM_MspPostInit+0xf8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d11f      	bne.n	8002462 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b35      	ldr	r3, [pc, #212]	@ (80024fc <HAL_TIM_MspPostInit+0xfc>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	4a34      	ldr	r2, [pc, #208]	@ (80024fc <HAL_TIM_MspPostInit+0xfc>)
 800242c:	f043 0310 	orr.w	r3, r3, #16
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30
 8002432:	4b32      	ldr	r3, [pc, #200]	@ (80024fc <HAL_TIM_MspPostInit+0xfc>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800243e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002450:	2301      	movs	r3, #1
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	4619      	mov	r1, r3
 800245a:	4829      	ldr	r0, [pc, #164]	@ (8002500 <HAL_TIM_MspPostInit+0x100>)
 800245c:	f000 fcd6 	bl	8002e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002460:	e046      	b.n	80024f0 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800246a:	d11e      	bne.n	80024aa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	4b22      	ldr	r3, [pc, #136]	@ (80024fc <HAL_TIM_MspPostInit+0xfc>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	4a21      	ldr	r2, [pc, #132]	@ (80024fc <HAL_TIM_MspPostInit+0xfc>)
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	6313      	str	r3, [r2, #48]	@ 0x30
 800247c:	4b1f      	ldr	r3, [pc, #124]	@ (80024fc <HAL_TIM_MspPostInit+0xfc>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002488:	2308      	movs	r3, #8
 800248a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002498:	2301      	movs	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	4619      	mov	r1, r3
 80024a2:	4818      	ldr	r0, [pc, #96]	@ (8002504 <HAL_TIM_MspPostInit+0x104>)
 80024a4:	f000 fcb2 	bl	8002e0c <HAL_GPIO_Init>
}
 80024a8:	e022      	b.n	80024f0 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM3)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a16      	ldr	r2, [pc, #88]	@ (8002508 <HAL_TIM_MspPostInit+0x108>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d11d      	bne.n	80024f0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <HAL_TIM_MspPostInit+0xfc>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024bc:	4a0f      	ldr	r2, [pc, #60]	@ (80024fc <HAL_TIM_MspPostInit+0xfc>)
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80024c4:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <HAL_TIM_MspPostInit+0xfc>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024d0:	2301      	movs	r3, #1
 80024d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024e0:	2302      	movs	r3, #2
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	4806      	ldr	r0, [pc, #24]	@ (8002504 <HAL_TIM_MspPostInit+0x104>)
 80024ec:	f000 fc8e 	bl	8002e0c <HAL_GPIO_Init>
}
 80024f0:	bf00      	nop
 80024f2:	3728      	adds	r7, #40	@ 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40023800 	.word	0x40023800
 8002500:	40021000 	.word	0x40021000
 8002504:	40020400 	.word	0x40020400
 8002508:	40000400 	.word	0x40000400

0800250c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002510:	bf00      	nop
 8002512:	e7fd      	b.n	8002510 <NMI_Handler+0x4>

08002514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <HardFault_Handler+0x4>

0800251c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <MemManage_Handler+0x4>

08002524 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <BusFault_Handler+0x4>

0800252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <UsageFault_Handler+0x4>

08002534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002562:	f000 f89b 	bl	800269c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002570:	4802      	ldr	r0, [pc, #8]	@ (800257c <TIM4_IRQHandler+0x10>)
 8002572:	f002 ff85 	bl	8005480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200002a0 	.word	0x200002a0

08002580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <SystemInit+0x20>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258a:	4a05      	ldr	r2, [pc, #20]	@ (80025a0 <SystemInit+0x20>)
 800258c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025a8:	f7ff ffea 	bl	8002580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025ac:	480c      	ldr	r0, [pc, #48]	@ (80025e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ae:	490d      	ldr	r1, [pc, #52]	@ (80025e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025b0:	4a0d      	ldr	r2, [pc, #52]	@ (80025e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b4:	e002      	b.n	80025bc <LoopCopyDataInit>

080025b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ba:	3304      	adds	r3, #4

080025bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c0:	d3f9      	bcc.n	80025b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c2:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025c4:	4c0a      	ldr	r4, [pc, #40]	@ (80025f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c8:	e001      	b.n	80025ce <LoopFillZerobss>

080025ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025cc:	3204      	adds	r2, #4

080025ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d0:	d3fb      	bcc.n	80025ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025d2:	f003 fea5 	bl	8006320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d6:	f7ff f8c3 	bl	8001760 <main>
  bx  lr    
 80025da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80025e8:	08007688 	.word	0x08007688
  ldr r2, =_sbss
 80025ec:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80025f0:	2000032c 	.word	0x2000032c

080025f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC_IRQHandler>
	...

080025f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <HAL_Init+0x40>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0d      	ldr	r2, [pc, #52]	@ (8002638 <HAL_Init+0x40>)
 8002602:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_Init+0x40>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0a      	ldr	r2, [pc, #40]	@ (8002638 <HAL_Init+0x40>)
 800260e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002614:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <HAL_Init+0x40>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a07      	ldr	r2, [pc, #28]	@ (8002638 <HAL_Init+0x40>)
 800261a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002620:	2003      	movs	r0, #3
 8002622:	f000 fbb1 	bl	8002d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002626:	2000      	movs	r0, #0
 8002628:	f000 f808 	bl	800263c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800262c:	f7ff fcf0 	bl	8002010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023c00 	.word	0x40023c00

0800263c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_InitTick+0x54>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_InitTick+0x58>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	4619      	mov	r1, r3
 800264e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002652:	fbb3 f3f1 	udiv	r3, r3, r1
 8002656:	fbb2 f3f3 	udiv	r3, r2, r3
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fbc9 	bl	8002df2 <HAL_SYSTICK_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e00e      	b.n	8002688 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b0f      	cmp	r3, #15
 800266e:	d80a      	bhi.n	8002686 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002670:	2200      	movs	r2, #0
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	f000 fb91 	bl	8002d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800267c:	4a06      	ldr	r2, [pc, #24]	@ (8002698 <HAL_InitTick+0x5c>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	e000      	b.n	8002688 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000018 	.word	0x20000018
 8002694:	20000020 	.word	0x20000020
 8002698:	2000001c 	.word	0x2000001c

0800269c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a0:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <HAL_IncTick+0x20>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HAL_IncTick+0x24>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	4a04      	ldr	r2, [pc, #16]	@ (80026c0 <HAL_IncTick+0x24>)
 80026ae:	6013      	str	r3, [r2, #0]
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000020 	.word	0x20000020
 80026c0:	20000328 	.word	0x20000328

080026c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return uwTick;
 80026c8:	4b03      	ldr	r3, [pc, #12]	@ (80026d8 <HAL_GetTick+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000328 	.word	0x20000328

080026dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff ffee 	bl	80026c4 <HAL_GetTick>
 80026e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d005      	beq.n	8002702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_Delay+0x44>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002702:	bf00      	nop
 8002704:	f7ff ffde 	bl	80026c4 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d8f7      	bhi.n	8002704 <HAL_Delay+0x28>
  {
  }
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000020 	.word	0x20000020

08002724 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e033      	b.n	80027a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fc8c 	bl	8002060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800276a:	f023 0302 	bic.w	r3, r3, #2
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f93a 	bl	80029f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	641a      	str	r2, [r3, #64]	@ 0x40
 8002792:	e001      	b.n	8002798 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x1c>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e105      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x228>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b09      	cmp	r3, #9
 80027d6:	d925      	bls.n	8002824 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68d9      	ldr	r1, [r3, #12]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	3b1e      	subs	r3, #30
 80027ee:	2207      	movs	r2, #7
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43da      	mvns	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	400a      	ands	r2, r1
 80027fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68d9      	ldr	r1, [r3, #12]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	4618      	mov	r0, r3
 8002810:	4603      	mov	r3, r0
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4403      	add	r3, r0
 8002816:	3b1e      	subs	r3, #30
 8002818:	409a      	lsls	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	e022      	b.n	800286a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6919      	ldr	r1, [r3, #16]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	2207      	movs	r2, #7
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	400a      	ands	r2, r1
 8002846:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6919      	ldr	r1, [r3, #16]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	b29b      	uxth	r3, r3
 8002858:	4618      	mov	r0, r3
 800285a:	4603      	mov	r3, r0
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4403      	add	r3, r0
 8002860:	409a      	lsls	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b06      	cmp	r3, #6
 8002870:	d824      	bhi.n	80028bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	3b05      	subs	r3, #5
 8002884:	221f      	movs	r2, #31
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	400a      	ands	r2, r1
 8002892:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	4618      	mov	r0, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	3b05      	subs	r3, #5
 80028ae:	fa00 f203 	lsl.w	r2, r0, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80028ba:	e04c      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b0c      	cmp	r3, #12
 80028c2:	d824      	bhi.n	800290e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	3b23      	subs	r3, #35	@ 0x23
 80028d6:	221f      	movs	r2, #31
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43da      	mvns	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	400a      	ands	r2, r1
 80028e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	4618      	mov	r0, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	3b23      	subs	r3, #35	@ 0x23
 8002900:	fa00 f203 	lsl.w	r2, r0, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30
 800290c:	e023      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	3b41      	subs	r3, #65	@ 0x41
 8002920:	221f      	movs	r2, #31
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	400a      	ands	r2, r1
 800292e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	4618      	mov	r0, r3
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	3b41      	subs	r3, #65	@ 0x41
 800294a:	fa00 f203 	lsl.w	r2, r0, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002956:	4b22      	ldr	r3, [pc, #136]	@ (80029e0 <HAL_ADC_ConfigChannel+0x234>)
 8002958:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a21      	ldr	r2, [pc, #132]	@ (80029e4 <HAL_ADC_ConfigChannel+0x238>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d109      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x1cc>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b12      	cmp	r3, #18
 800296a:	d105      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a19      	ldr	r2, [pc, #100]	@ (80029e4 <HAL_ADC_ConfigChannel+0x238>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d123      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x21e>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b10      	cmp	r3, #16
 8002988:	d003      	beq.n	8002992 <HAL_ADC_ConfigChannel+0x1e6>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b11      	cmp	r3, #17
 8002990:	d11b      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b10      	cmp	r3, #16
 80029a4:	d111      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029a6:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <HAL_ADC_ConfigChannel+0x23c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a10      	ldr	r2, [pc, #64]	@ (80029ec <HAL_ADC_ConfigChannel+0x240>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	0c9a      	lsrs	r2, r3, #18
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029bc:	e002      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f9      	bne.n	80029be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	40012300 	.word	0x40012300
 80029e4:	40012000 	.word	0x40012000
 80029e8:	20000018 	.word	0x20000018
 80029ec:	431bde83 	.word	0x431bde83

080029f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029f8:	4b79      	ldr	r3, [pc, #484]	@ (8002be0 <ADC_Init+0x1f0>)
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	021a      	lsls	r2, r3, #8
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6899      	ldr	r1, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a82:	4a58      	ldr	r2, [pc, #352]	@ (8002be4 <ADC_Init+0x1f4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d022      	beq.n	8002ace <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6899      	ldr	r1, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ab8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6899      	ldr	r1, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	e00f      	b.n	8002aee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002aec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0202 	bic.w	r2, r2, #2
 8002afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	7e1b      	ldrb	r3, [r3, #24]
 8002b08:	005a      	lsls	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01b      	beq.n	8002b54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b2a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6859      	ldr	r1, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	3b01      	subs	r3, #1
 8002b48:	035a      	lsls	r2, r3, #13
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	e007      	b.n	8002b64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b62:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	051a      	lsls	r2, r3, #20
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6899      	ldr	r1, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ba6:	025a      	lsls	r2, r3, #9
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6899      	ldr	r1, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	029a      	lsls	r2, r3, #10
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40012300 	.word	0x40012300
 8002be4:	0f000001 	.word	0x0f000001

08002be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c04:	4013      	ands	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1a:	4a04      	ldr	r2, [pc, #16]	@ (8002c2c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	60d3      	str	r3, [r2, #12]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c34:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <__NVIC_GetPriorityGrouping+0x18>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	0a1b      	lsrs	r3, r3, #8
 8002c3a:	f003 0307 	and.w	r3, r3, #7
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	db0b      	blt.n	8002c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4907      	ldr	r1, [pc, #28]	@ (8002c84 <__NVIC_EnableIRQ+0x38>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000e100 	.word	0xe000e100

08002c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db0a      	blt.n	8002cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	490c      	ldr	r1, [pc, #48]	@ (8002cd4 <__NVIC_SetPriority+0x4c>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	0112      	lsls	r2, r2, #4
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	440b      	add	r3, r1
 8002cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb0:	e00a      	b.n	8002cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4908      	ldr	r1, [pc, #32]	@ (8002cd8 <__NVIC_SetPriority+0x50>)
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	3b04      	subs	r3, #4
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	761a      	strb	r2, [r3, #24]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	@ 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f1c3 0307 	rsb	r3, r3, #7
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	bf28      	it	cs
 8002cfa:	2304      	movcs	r3, #4
 8002cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d902      	bls.n	8002d0c <NVIC_EncodePriority+0x30>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3b03      	subs	r3, #3
 8002d0a:	e000      	b.n	8002d0e <NVIC_EncodePriority+0x32>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	401a      	ands	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	43d9      	mvns	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	4313      	orrs	r3, r2
         );
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3724      	adds	r7, #36	@ 0x24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d54:	d301      	bcc.n	8002d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d56:	2301      	movs	r3, #1
 8002d58:	e00f      	b.n	8002d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d84 <SysTick_Config+0x40>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d62:	210f      	movs	r1, #15
 8002d64:	f04f 30ff 	mov.w	r0, #4294967295
 8002d68:	f7ff ff8e 	bl	8002c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d6c:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <SysTick_Config+0x40>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d72:	4b04      	ldr	r3, [pc, #16]	@ (8002d84 <SysTick_Config+0x40>)
 8002d74:	2207      	movs	r2, #7
 8002d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	e000e010 	.word	0xe000e010

08002d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff29 	bl	8002be8 <__NVIC_SetPriorityGrouping>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b086      	sub	sp, #24
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db0:	f7ff ff3e 	bl	8002c30 <__NVIC_GetPriorityGrouping>
 8002db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68b9      	ldr	r1, [r7, #8]
 8002dba:	6978      	ldr	r0, [r7, #20]
 8002dbc:	f7ff ff8e 	bl	8002cdc <NVIC_EncodePriority>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff5d 	bl	8002c88 <__NVIC_SetPriority>
}
 8002dce:	bf00      	nop
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	4603      	mov	r3, r0
 8002dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff31 	bl	8002c4c <__NVIC_EnableIRQ>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ffa2 	bl	8002d44 <SysTick_Config>
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	@ 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	e16b      	b.n	8003100 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	f040 815a 	bne.w	80030fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d005      	beq.n	8002e5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d130      	bne.n	8002ec0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	2203      	movs	r2, #3
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e94:	2201      	movs	r2, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 0201 	and.w	r2, r3, #1
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d017      	beq.n	8002efc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d123      	bne.n	8002f50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	08da      	lsrs	r2, r3, #3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3208      	adds	r2, #8
 8002f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	220f      	movs	r2, #15
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	08da      	lsrs	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3208      	adds	r2, #8
 8002f4a:	69b9      	ldr	r1, [r7, #24]
 8002f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0203 	and.w	r2, r3, #3
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 80b4 	beq.w	80030fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	4b60      	ldr	r3, [pc, #384]	@ (8003118 <HAL_GPIO_Init+0x30c>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9a:	4a5f      	ldr	r2, [pc, #380]	@ (8003118 <HAL_GPIO_Init+0x30c>)
 8002f9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8003118 <HAL_GPIO_Init+0x30c>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fae:	4a5b      	ldr	r2, [pc, #364]	@ (800311c <HAL_GPIO_Init+0x310>)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	089b      	lsrs	r3, r3, #2
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	220f      	movs	r2, #15
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a52      	ldr	r2, [pc, #328]	@ (8003120 <HAL_GPIO_Init+0x314>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d02b      	beq.n	8003032 <HAL_GPIO_Init+0x226>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a51      	ldr	r2, [pc, #324]	@ (8003124 <HAL_GPIO_Init+0x318>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d025      	beq.n	800302e <HAL_GPIO_Init+0x222>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a50      	ldr	r2, [pc, #320]	@ (8003128 <HAL_GPIO_Init+0x31c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d01f      	beq.n	800302a <HAL_GPIO_Init+0x21e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a4f      	ldr	r2, [pc, #316]	@ (800312c <HAL_GPIO_Init+0x320>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d019      	beq.n	8003026 <HAL_GPIO_Init+0x21a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a4e      	ldr	r2, [pc, #312]	@ (8003130 <HAL_GPIO_Init+0x324>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_GPIO_Init+0x216>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a4d      	ldr	r2, [pc, #308]	@ (8003134 <HAL_GPIO_Init+0x328>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00d      	beq.n	800301e <HAL_GPIO_Init+0x212>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4c      	ldr	r2, [pc, #304]	@ (8003138 <HAL_GPIO_Init+0x32c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d007      	beq.n	800301a <HAL_GPIO_Init+0x20e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4b      	ldr	r2, [pc, #300]	@ (800313c <HAL_GPIO_Init+0x330>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d101      	bne.n	8003016 <HAL_GPIO_Init+0x20a>
 8003012:	2307      	movs	r3, #7
 8003014:	e00e      	b.n	8003034 <HAL_GPIO_Init+0x228>
 8003016:	2308      	movs	r3, #8
 8003018:	e00c      	b.n	8003034 <HAL_GPIO_Init+0x228>
 800301a:	2306      	movs	r3, #6
 800301c:	e00a      	b.n	8003034 <HAL_GPIO_Init+0x228>
 800301e:	2305      	movs	r3, #5
 8003020:	e008      	b.n	8003034 <HAL_GPIO_Init+0x228>
 8003022:	2304      	movs	r3, #4
 8003024:	e006      	b.n	8003034 <HAL_GPIO_Init+0x228>
 8003026:	2303      	movs	r3, #3
 8003028:	e004      	b.n	8003034 <HAL_GPIO_Init+0x228>
 800302a:	2302      	movs	r3, #2
 800302c:	e002      	b.n	8003034 <HAL_GPIO_Init+0x228>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <HAL_GPIO_Init+0x228>
 8003032:	2300      	movs	r3, #0
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	f002 0203 	and.w	r2, r2, #3
 800303a:	0092      	lsls	r2, r2, #2
 800303c:	4093      	lsls	r3, r2
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003044:	4935      	ldr	r1, [pc, #212]	@ (800311c <HAL_GPIO_Init+0x310>)
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	3302      	adds	r3, #2
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003052:	4b3b      	ldr	r3, [pc, #236]	@ (8003140 <HAL_GPIO_Init+0x334>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003076:	4a32      	ldr	r2, [pc, #200]	@ (8003140 <HAL_GPIO_Init+0x334>)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800307c:	4b30      	ldr	r3, [pc, #192]	@ (8003140 <HAL_GPIO_Init+0x334>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a0:	4a27      	ldr	r2, [pc, #156]	@ (8003140 <HAL_GPIO_Init+0x334>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030a6:	4b26      	ldr	r3, [pc, #152]	@ (8003140 <HAL_GPIO_Init+0x334>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003140 <HAL_GPIO_Init+0x334>)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <HAL_GPIO_Init+0x334>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f4:	4a12      	ldr	r2, [pc, #72]	@ (8003140 <HAL_GPIO_Init+0x334>)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3301      	adds	r3, #1
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	2b0f      	cmp	r3, #15
 8003104:	f67f ae90 	bls.w	8002e28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3724      	adds	r7, #36	@ 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800
 800311c:	40013800 	.word	0x40013800
 8003120:	40020000 	.word	0x40020000
 8003124:	40020400 	.word	0x40020400
 8003128:	40020800 	.word	0x40020800
 800312c:	40020c00 	.word	0x40020c00
 8003130:	40021000 	.word	0x40021000
 8003134:	40021400 	.word	0x40021400
 8003138:	40021800 	.word	0x40021800
 800313c:	40021c00 	.word	0x40021c00
 8003140:	40013c00 	.word	0x40013c00

08003144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	807b      	strh	r3, [r7, #2]
 8003150:	4613      	mov	r3, r2
 8003152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003154:	787b      	ldrb	r3, [r7, #1]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003160:	e003      	b.n	800316a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003162:	887b      	ldrh	r3, [r7, #2]
 8003164:	041a      	lsls	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	619a      	str	r2, [r3, #24]
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e12b      	b.n	80033e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff f802 	bl	80021a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	@ 0x24
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031dc:	f001 f8da 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 80031e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4a81      	ldr	r2, [pc, #516]	@ (80033ec <HAL_I2C_Init+0x274>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d807      	bhi.n	80031fc <HAL_I2C_Init+0x84>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4a80      	ldr	r2, [pc, #512]	@ (80033f0 <HAL_I2C_Init+0x278>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	bf94      	ite	ls
 80031f4:	2301      	movls	r3, #1
 80031f6:	2300      	movhi	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e006      	b.n	800320a <HAL_I2C_Init+0x92>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4a7d      	ldr	r2, [pc, #500]	@ (80033f4 <HAL_I2C_Init+0x27c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	bf94      	ite	ls
 8003204:	2301      	movls	r3, #1
 8003206:	2300      	movhi	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e0e7      	b.n	80033e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a78      	ldr	r2, [pc, #480]	@ (80033f8 <HAL_I2C_Init+0x280>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	0c9b      	lsrs	r3, r3, #18
 800321c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4a6a      	ldr	r2, [pc, #424]	@ (80033ec <HAL_I2C_Init+0x274>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d802      	bhi.n	800324c <HAL_I2C_Init+0xd4>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	3301      	adds	r3, #1
 800324a:	e009      	b.n	8003260 <HAL_I2C_Init+0xe8>
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	4a69      	ldr	r2, [pc, #420]	@ (80033fc <HAL_I2C_Init+0x284>)
 8003258:	fba2 2303 	umull	r2, r3, r2, r3
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	3301      	adds	r3, #1
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	430b      	orrs	r3, r1
 8003266:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003272:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	495c      	ldr	r1, [pc, #368]	@ (80033ec <HAL_I2C_Init+0x274>)
 800327c:	428b      	cmp	r3, r1
 800327e:	d819      	bhi.n	80032b4 <HAL_I2C_Init+0x13c>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1e59      	subs	r1, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fbb1 f3f3 	udiv	r3, r1, r3
 800328e:	1c59      	adds	r1, r3, #1
 8003290:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003294:	400b      	ands	r3, r1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <HAL_I2C_Init+0x138>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1e59      	subs	r1, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ae:	e051      	b.n	8003354 <HAL_I2C_Init+0x1dc>
 80032b0:	2304      	movs	r3, #4
 80032b2:	e04f      	b.n	8003354 <HAL_I2C_Init+0x1dc>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d111      	bne.n	80032e0 <HAL_I2C_Init+0x168>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1e58      	subs	r0, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	440b      	add	r3, r1
 80032ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ce:	3301      	adds	r3, #1
 80032d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e012      	b.n	8003306 <HAL_I2C_Init+0x18e>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1e58      	subs	r0, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6859      	ldr	r1, [r3, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	0099      	lsls	r1, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f6:	3301      	adds	r3, #1
 80032f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Init+0x196>
 800330a:	2301      	movs	r3, #1
 800330c:	e022      	b.n	8003354 <HAL_I2C_Init+0x1dc>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10e      	bne.n	8003334 <HAL_I2C_Init+0x1bc>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1e58      	subs	r0, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6859      	ldr	r1, [r3, #4]
 800331e:	460b      	mov	r3, r1
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	440b      	add	r3, r1
 8003324:	fbb0 f3f3 	udiv	r3, r0, r3
 8003328:	3301      	adds	r3, #1
 800332a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003332:	e00f      	b.n	8003354 <HAL_I2C_Init+0x1dc>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1e58      	subs	r0, r3, #1
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6859      	ldr	r1, [r3, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	0099      	lsls	r1, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	fbb0 f3f3 	udiv	r3, r0, r3
 800334a:	3301      	adds	r3, #1
 800334c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003350:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	6809      	ldr	r1, [r1, #0]
 8003358:	4313      	orrs	r3, r2
 800335a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69da      	ldr	r2, [r3, #28]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003382:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6911      	ldr	r1, [r2, #16]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68d2      	ldr	r2, [r2, #12]
 800338e:	4311      	orrs	r1, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	430b      	orrs	r3, r1
 8003396:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	000186a0 	.word	0x000186a0
 80033f0:	001e847f 	.word	0x001e847f
 80033f4:	003d08ff 	.word	0x003d08ff
 80033f8:	431bde83 	.word	0x431bde83
 80033fc:	10624dd3 	.word	0x10624dd3

08003400 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af02      	add	r7, sp, #8
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	461a      	mov	r2, r3
 800340c:	460b      	mov	r3, r1
 800340e:	817b      	strh	r3, [r7, #10]
 8003410:	4613      	mov	r3, r2
 8003412:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003414:	f7ff f956 	bl	80026c4 <HAL_GetTick>
 8003418:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b20      	cmp	r3, #32
 8003424:	f040 80e0 	bne.w	80035e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	2319      	movs	r3, #25
 800342e:	2201      	movs	r2, #1
 8003430:	4970      	ldr	r1, [pc, #448]	@ (80035f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f964 	bl	8003700 <I2C_WaitOnFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
 8003440:	e0d3      	b.n	80035ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_I2C_Master_Transmit+0x50>
 800344c:	2302      	movs	r3, #2
 800344e:	e0cc      	b.n	80035ea <HAL_I2C_Master_Transmit+0x1ea>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d007      	beq.n	8003476 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003484:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2221      	movs	r2, #33	@ 0x21
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2210      	movs	r2, #16
 8003492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	893a      	ldrh	r2, [r7, #8]
 80034a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4a50      	ldr	r2, [pc, #320]	@ (80035f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80034b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034b8:	8979      	ldrh	r1, [r7, #10]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	6a3a      	ldr	r2, [r7, #32]
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f89c 	bl	80035fc <I2C_MasterRequestWrite>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e08d      	b.n	80035ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034e4:	e066      	b.n	80035b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	6a39      	ldr	r1, [r7, #32]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fa22 	bl	8003934 <I2C_WaitOnTXEFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d107      	bne.n	800350e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e06b      	b.n	80035ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	781a      	ldrb	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	3b01      	subs	r3, #1
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b04      	cmp	r3, #4
 800354e:	d11b      	bne.n	8003588 <HAL_I2C_Master_Transmit+0x188>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003554:	2b00      	cmp	r3, #0
 8003556:	d017      	beq.n	8003588 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	6a39      	ldr	r1, [r7, #32]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fa19 	bl	80039c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	2b04      	cmp	r3, #4
 800359e:	d107      	bne.n	80035b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e01a      	b.n	80035ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d194      	bne.n	80034e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e000      	b.n	80035ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035e8:	2302      	movs	r3, #2
  }
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	00100002 	.word	0x00100002
 80035f8:	ffff0000 	.word	0xffff0000

080035fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	460b      	mov	r3, r1
 800360a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d006      	beq.n	8003626 <I2C_MasterRequestWrite+0x2a>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d003      	beq.n	8003626 <I2C_MasterRequestWrite+0x2a>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003624:	d108      	bne.n	8003638 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e00b      	b.n	8003650 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363c:	2b12      	cmp	r3, #18
 800363e:	d107      	bne.n	8003650 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800364e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f84f 	bl	8003700 <I2C_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00d      	beq.n	8003684 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003676:	d103      	bne.n	8003680 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800367e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e035      	b.n	80036f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800368c:	d108      	bne.n	80036a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800368e:	897b      	ldrh	r3, [r7, #10]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800369c:	611a      	str	r2, [r3, #16]
 800369e:	e01b      	b.n	80036d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036a0:	897b      	ldrh	r3, [r7, #10]
 80036a2:	11db      	asrs	r3, r3, #7
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	f003 0306 	and.w	r3, r3, #6
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f063 030f 	orn	r3, r3, #15
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	490e      	ldr	r1, [pc, #56]	@ (80036f8 <I2C_MasterRequestWrite+0xfc>)
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 f898 	bl	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e010      	b.n	80036f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036ce:	897b      	ldrh	r3, [r7, #10]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	4907      	ldr	r1, [pc, #28]	@ (80036fc <I2C_MasterRequestWrite+0x100>)
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f888 	bl	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	00010008 	.word	0x00010008
 80036fc:	00010002 	.word	0x00010002

08003700 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003710:	e048      	b.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d044      	beq.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371a:	f7fe ffd3 	bl	80026c4 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d302      	bcc.n	8003730 <I2C_WaitOnFlagUntilTimeout+0x30>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d139      	bne.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	0c1b      	lsrs	r3, r3, #16
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b01      	cmp	r3, #1
 8003738:	d10d      	bne.n	8003756 <I2C_WaitOnFlagUntilTimeout+0x56>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	43da      	mvns	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4013      	ands	r3, r2
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf0c      	ite	eq
 800374c:	2301      	moveq	r3, #1
 800374e:	2300      	movne	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	e00c      	b.n	8003770 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	43da      	mvns	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4013      	ands	r3, r2
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	429a      	cmp	r2, r3
 8003774:	d116      	bne.n	80037a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003790:	f043 0220 	orr.w	r2, r3, #32
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e023      	b.n	80037ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	0c1b      	lsrs	r3, r3, #16
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d10d      	bne.n	80037ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	43da      	mvns	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	4013      	ands	r3, r2
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bf0c      	ite	eq
 80037c0:	2301      	moveq	r3, #1
 80037c2:	2300      	movne	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	461a      	mov	r2, r3
 80037c8:	e00c      	b.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	43da      	mvns	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4013      	ands	r3, r2
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d093      	beq.n	8003712 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003802:	e071      	b.n	80038e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800380e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003812:	d123      	bne.n	800385c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003822:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800382c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	f043 0204 	orr.w	r2, r3, #4
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e067      	b.n	800392c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003862:	d041      	beq.n	80038e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003864:	f7fe ff2e 	bl	80026c4 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	429a      	cmp	r2, r3
 8003872:	d302      	bcc.n	800387a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d136      	bne.n	80038e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	0c1b      	lsrs	r3, r3, #16
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d10c      	bne.n	800389e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	43da      	mvns	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4013      	ands	r3, r2
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	bf14      	ite	ne
 8003896:	2301      	movne	r3, #1
 8003898:	2300      	moveq	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	e00b      	b.n	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	43da      	mvns	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4013      	ands	r3, r2
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d016      	beq.n	80038e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d4:	f043 0220 	orr.w	r2, r3, #32
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e021      	b.n	800392c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	0c1b      	lsrs	r3, r3, #16
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d10c      	bne.n	800390c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	43da      	mvns	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4013      	ands	r3, r2
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e00b      	b.n	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	43da      	mvns	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4013      	ands	r3, r2
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	bf14      	ite	ne
 800391e:	2301      	movne	r3, #1
 8003920:	2300      	moveq	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	f47f af6d 	bne.w	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003940:	e034      	b.n	80039ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f886 	bl	8003a54 <I2C_IsAcknowledgeFailed>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e034      	b.n	80039bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d028      	beq.n	80039ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395a:	f7fe feb3 	bl	80026c4 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	429a      	cmp	r2, r3
 8003968:	d302      	bcc.n	8003970 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d11d      	bne.n	80039ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800397a:	2b80      	cmp	r3, #128	@ 0x80
 800397c:	d016      	beq.n	80039ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003998:	f043 0220 	orr.w	r2, r3, #32
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e007      	b.n	80039bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b6:	2b80      	cmp	r3, #128	@ 0x80
 80039b8:	d1c3      	bne.n	8003942 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039d0:	e034      	b.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f83e 	bl	8003a54 <I2C_IsAcknowledgeFailed>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e034      	b.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d028      	beq.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ea:	f7fe fe6b 	bl	80026c4 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d302      	bcc.n	8003a00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d11d      	bne.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d016      	beq.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e007      	b.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d1c3      	bne.n	80039d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a6a:	d11b      	bne.n	8003aa4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	f043 0204 	orr.w	r2, r3, #4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e267      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d075      	beq.n	8003bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ad2:	4b88      	ldr	r3, [pc, #544]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d00c      	beq.n	8003af8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ade:	4b85      	ldr	r3, [pc, #532]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d112      	bne.n	8003b10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aea:	4b82      	ldr	r3, [pc, #520]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	4b7e      	ldr	r3, [pc, #504]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d05b      	beq.n	8003bbc <HAL_RCC_OscConfig+0x108>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d157      	bne.n	8003bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e242      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b18:	d106      	bne.n	8003b28 <HAL_RCC_OscConfig+0x74>
 8003b1a:	4b76      	ldr	r3, [pc, #472]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a75      	ldr	r2, [pc, #468]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e01d      	b.n	8003b64 <HAL_RCC_OscConfig+0xb0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x98>
 8003b32:	4b70      	ldr	r3, [pc, #448]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6f      	ldr	r2, [pc, #444]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a6c      	ldr	r2, [pc, #432]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0xb0>
 8003b4c:	4b69      	ldr	r3, [pc, #420]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a68      	ldr	r2, [pc, #416]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b66      	ldr	r3, [pc, #408]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a65      	ldr	r2, [pc, #404]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fe fdaa 	bl	80026c4 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fe fda6 	bl	80026c4 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	@ 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e207      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0xc0>
 8003b92:	e014      	b.n	8003bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fe fd96 	bl	80026c4 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fe fd92 	bl	80026c4 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	@ 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e1f3      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bae:	4b51      	ldr	r3, [pc, #324]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0xe8>
 8003bba:	e000      	b.n	8003bbe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d063      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bca:	4b4a      	ldr	r3, [pc, #296]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00b      	beq.n	8003bee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd6:	4b47      	ldr	r3, [pc, #284]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d11c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be2:	4b44      	ldr	r3, [pc, #272]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d116      	bne.n	8003c1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	4b41      	ldr	r3, [pc, #260]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_RCC_OscConfig+0x152>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e1c7      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c06:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4937      	ldr	r1, [pc, #220]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	e03a      	b.n	8003c92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d020      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c24:	4b34      	ldr	r3, [pc, #208]	@ (8003cf8 <HAL_RCC_OscConfig+0x244>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fe fd4b 	bl	80026c4 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fe fd47 	bl	80026c4 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e1a8      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c44:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b28      	ldr	r3, [pc, #160]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4925      	ldr	r1, [pc, #148]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]
 8003c64:	e015      	b.n	8003c92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c66:	4b24      	ldr	r3, [pc, #144]	@ (8003cf8 <HAL_RCC_OscConfig+0x244>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fd2a 	bl	80026c4 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c74:	f7fe fd26 	bl	80026c4 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e187      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c86:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d036      	beq.n	8003d0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca6:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <HAL_RCC_OscConfig+0x248>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fe fd0a 	bl	80026c4 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb4:	f7fe fd06 	bl	80026c4 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e167      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x200>
 8003cd2:	e01b      	b.n	8003d0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd4:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <HAL_RCC_OscConfig+0x248>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cda:	f7fe fcf3 	bl	80026c4 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce0:	e00e      	b.n	8003d00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce2:	f7fe fcef 	bl	80026c4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d907      	bls.n	8003d00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e150      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	42470000 	.word	0x42470000
 8003cfc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d00:	4b88      	ldr	r3, [pc, #544]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ea      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8097 	beq.w	8003e48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d1e:	4b81      	ldr	r3, [pc, #516]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10f      	bne.n	8003d4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	4a7c      	ldr	r2, [pc, #496]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4a:	4b77      	ldr	r3, [pc, #476]	@ (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d118      	bne.n	8003d88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d56:	4b74      	ldr	r3, [pc, #464]	@ (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a73      	ldr	r2, [pc, #460]	@ (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d62:	f7fe fcaf 	bl	80026c4 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fe fcab 	bl	80026c4 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e10c      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCC_OscConfig+0x2ea>
 8003d90:	4b64      	ldr	r3, [pc, #400]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d94:	4a63      	ldr	r2, [pc, #396]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d9c:	e01c      	b.n	8003dd8 <HAL_RCC_OscConfig+0x324>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x30c>
 8003da6:	4b5f      	ldr	r3, [pc, #380]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003daa:	4a5e      	ldr	r2, [pc, #376]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dac:	f043 0304 	orr.w	r3, r3, #4
 8003db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db6:	4a5b      	ldr	r2, [pc, #364]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dbe:	e00b      	b.n	8003dd8 <HAL_RCC_OscConfig+0x324>
 8003dc0:	4b58      	ldr	r3, [pc, #352]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc4:	4a57      	ldr	r2, [pc, #348]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dcc:	4b55      	ldr	r3, [pc, #340]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd0:	4a54      	ldr	r2, [pc, #336]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	f023 0304 	bic.w	r3, r3, #4
 8003dd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fe fc70 	bl	80026c4 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fe fc6c 	bl	80026c4 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e0cb      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfe:	4b49      	ldr	r3, [pc, #292]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ee      	beq.n	8003de8 <HAL_RCC_OscConfig+0x334>
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0c:	f7fe fc5a 	bl	80026c4 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fe fc56 	bl	80026c4 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e0b5      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1ee      	bne.n	8003e14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d105      	bne.n	8003e48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3c:	4b39      	ldr	r3, [pc, #228]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	4a38      	ldr	r2, [pc, #224]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80a1 	beq.w	8003f94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e52:	4b34      	ldr	r3, [pc, #208]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d05c      	beq.n	8003f18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d141      	bne.n	8003eea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e66:	4b31      	ldr	r3, [pc, #196]	@ (8003f2c <HAL_RCC_OscConfig+0x478>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fe fc2a 	bl	80026c4 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fe fc26 	bl	80026c4 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e087      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	4b27      	ldr	r3, [pc, #156]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69da      	ldr	r2, [r3, #28]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	019b      	lsls	r3, r3, #6
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	491b      	ldr	r1, [pc, #108]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f2c <HAL_RCC_OscConfig+0x478>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec2:	f7fe fbff 	bl	80026c4 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eca:	f7fe fbfb 	bl	80026c4 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e05c      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003edc:	4b11      	ldr	r3, [pc, #68]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x416>
 8003ee8:	e054      	b.n	8003f94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eea:	4b10      	ldr	r3, [pc, #64]	@ (8003f2c <HAL_RCC_OscConfig+0x478>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fe fbe8 	bl	80026c4 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fe fbe4 	bl	80026c4 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e045      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x444>
 8003f16:	e03d      	b.n	8003f94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e038      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
 8003f24:	40023800 	.word	0x40023800
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f30:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa0 <HAL_RCC_OscConfig+0x4ec>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d028      	beq.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d121      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d11a      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f60:	4013      	ands	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d111      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d107      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0cc      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b68      	ldr	r3, [pc, #416]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d90c      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b65      	ldr	r3, [pc, #404]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b63      	ldr	r3, [pc, #396]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0b8      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d020      	beq.n	800402e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff8:	4b59      	ldr	r3, [pc, #356]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a58      	ldr	r2, [pc, #352]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004002:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004010:	4b53      	ldr	r3, [pc, #332]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a52      	ldr	r2, [pc, #328]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800401a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401c:	4b50      	ldr	r3, [pc, #320]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	494d      	ldr	r1, [pc, #308]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d044      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	4b47      	ldr	r3, [pc, #284]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d119      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e07f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d003      	beq.n	8004062 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800405e:	2b03      	cmp	r3, #3
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004062:	4b3f      	ldr	r3, [pc, #252]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e06f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004072:	4b3b      	ldr	r3, [pc, #236]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e067      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004082:	4b37      	ldr	r3, [pc, #220]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4934      	ldr	r1, [pc, #208]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004094:	f7fe fb16 	bl	80026c4 <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7fe fb12 	bl	80026c4 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e04f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 020c 	and.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1eb      	bne.n	800409c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c4:	4b25      	ldr	r3, [pc, #148]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d20c      	bcs.n	80040ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b22      	ldr	r3, [pc, #136]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b20      	ldr	r3, [pc, #128]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e032      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f8:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4916      	ldr	r1, [pc, #88]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004116:	4b12      	ldr	r3, [pc, #72]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	490e      	ldr	r1, [pc, #56]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800412a:	f000 f821 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 800412e:	4602      	mov	r2, r0
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	490a      	ldr	r1, [pc, #40]	@ (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 800413c:	5ccb      	ldrb	r3, [r1, r3]
 800413e:	fa22 f303 	lsr.w	r3, r2, r3
 8004142:	4a09      	ldr	r2, [pc, #36]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004146:	4b09      	ldr	r3, [pc, #36]	@ (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe fa76 	bl	800263c <HAL_InitTick>

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023c00 	.word	0x40023c00
 8004160:	40023800 	.word	0x40023800
 8004164:	08007488 	.word	0x08007488
 8004168:	20000018 	.word	0x20000018
 800416c:	2000001c 	.word	0x2000001c

08004170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004174:	b094      	sub	sp, #80	@ 0x50
 8004176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004188:	4b79      	ldr	r3, [pc, #484]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b08      	cmp	r3, #8
 8004192:	d00d      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004194:	2b08      	cmp	r3, #8
 8004196:	f200 80e1 	bhi.w	800435c <HAL_RCC_GetSysClockFreq+0x1ec>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0x34>
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d003      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x3a>
 80041a2:	e0db      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b73      	ldr	r3, [pc, #460]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x204>)
 80041a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041a8:	e0db      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041aa:	4b73      	ldr	r3, [pc, #460]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x208>)
 80041ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041ae:	e0d8      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d063      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	2200      	movs	r2, #0
 80041ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041da:	2300      	movs	r3, #0
 80041dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80041de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041e2:	4622      	mov	r2, r4
 80041e4:	462b      	mov	r3, r5
 80041e6:	f04f 0000 	mov.w	r0, #0
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	0159      	lsls	r1, r3, #5
 80041f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f4:	0150      	lsls	r0, r2, #5
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4621      	mov	r1, r4
 80041fc:	1a51      	subs	r1, r2, r1
 80041fe:	6139      	str	r1, [r7, #16]
 8004200:	4629      	mov	r1, r5
 8004202:	eb63 0301 	sbc.w	r3, r3, r1
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004214:	4659      	mov	r1, fp
 8004216:	018b      	lsls	r3, r1, #6
 8004218:	4651      	mov	r1, sl
 800421a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800421e:	4651      	mov	r1, sl
 8004220:	018a      	lsls	r2, r1, #6
 8004222:	4651      	mov	r1, sl
 8004224:	ebb2 0801 	subs.w	r8, r2, r1
 8004228:	4659      	mov	r1, fp
 800422a:	eb63 0901 	sbc.w	r9, r3, r1
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800423a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800423e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004242:	4690      	mov	r8, r2
 8004244:	4699      	mov	r9, r3
 8004246:	4623      	mov	r3, r4
 8004248:	eb18 0303 	adds.w	r3, r8, r3
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	462b      	mov	r3, r5
 8004250:	eb49 0303 	adc.w	r3, r9, r3
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004262:	4629      	mov	r1, r5
 8004264:	024b      	lsls	r3, r1, #9
 8004266:	4621      	mov	r1, r4
 8004268:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800426c:	4621      	mov	r1, r4
 800426e:	024a      	lsls	r2, r1, #9
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004276:	2200      	movs	r2, #0
 8004278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800427a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800427c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004280:	f7fc fc40 	bl	8000b04 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4613      	mov	r3, r2
 800428a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800428c:	e058      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b38      	ldr	r3, [pc, #224]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	2200      	movs	r2, #0
 8004296:	4618      	mov	r0, r3
 8004298:	4611      	mov	r1, r2
 800429a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800429e:	623b      	str	r3, [r7, #32]
 80042a0:	2300      	movs	r3, #0
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	f04f 0000 	mov.w	r0, #0
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	0159      	lsls	r1, r3, #5
 80042b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ba:	0150      	lsls	r0, r2, #5
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4641      	mov	r1, r8
 80042c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042c6:	4649      	mov	r1, r9
 80042c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042e0:	ebb2 040a 	subs.w	r4, r2, sl
 80042e4:	eb63 050b 	sbc.w	r5, r3, fp
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	00eb      	lsls	r3, r5, #3
 80042f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042f6:	00e2      	lsls	r2, r4, #3
 80042f8:	4614      	mov	r4, r2
 80042fa:	461d      	mov	r5, r3
 80042fc:	4643      	mov	r3, r8
 80042fe:	18e3      	adds	r3, r4, r3
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	464b      	mov	r3, r9
 8004304:	eb45 0303 	adc.w	r3, r5, r3
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004316:	4629      	mov	r1, r5
 8004318:	028b      	lsls	r3, r1, #10
 800431a:	4621      	mov	r1, r4
 800431c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004320:	4621      	mov	r1, r4
 8004322:	028a      	lsls	r2, r1, #10
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800432a:	2200      	movs	r2, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	61fa      	str	r2, [r7, #28]
 8004330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004334:	f7fc fbe6 	bl	8000b04 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4613      	mov	r3, r2
 800433e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004340:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	3301      	adds	r3, #1
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004350:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800435a:	e002      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800435c:	4b05      	ldr	r3, [pc, #20]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x204>)
 800435e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004364:	4618      	mov	r0, r3
 8004366:	3750      	adds	r7, #80	@ 0x50
 8004368:	46bd      	mov	sp, r7
 800436a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
 8004374:	00f42400 	.word	0x00f42400
 8004378:	007a1200 	.word	0x007a1200

0800437c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004380:	4b03      	ldr	r3, [pc, #12]	@ (8004390 <HAL_RCC_GetHCLKFreq+0x14>)
 8004382:	681b      	ldr	r3, [r3, #0]
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000018 	.word	0x20000018

08004394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004398:	f7ff fff0 	bl	800437c <HAL_RCC_GetHCLKFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	0a9b      	lsrs	r3, r3, #10
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	4903      	ldr	r1, [pc, #12]	@ (80043b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08007498 	.word	0x08007498

080043bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e07b      	b.n	80044c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d108      	bne.n	80043e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043de:	d009      	beq.n	80043f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	61da      	str	r2, [r3, #28]
 80043e6:	e005      	b.n	80043f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd ff12 	bl	8002238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800442a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004478:	ea42 0103 	orr.w	r1, r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	f003 0104 	and.w	r1, r3, #4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449a:	f003 0210 	and.w	r2, r3, #16
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b088      	sub	sp, #32
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044de:	f7fe f8f1 	bl	80026c4 <HAL_GetTick>
 80044e2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d001      	beq.n	80044f8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80044f4:	2302      	movs	r3, #2
 80044f6:	e12a      	b.n	800474e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_SPI_Transmit+0x36>
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e122      	b.n	800474e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_SPI_Transmit+0x48>
 8004512:	2302      	movs	r3, #2
 8004514:	e11b      	b.n	800474e <HAL_SPI_Transmit+0x280>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2203      	movs	r2, #3
 8004522:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	88fa      	ldrh	r2, [r7, #6]
 8004536:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004564:	d10f      	bne.n	8004586 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004574:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004584:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004590:	2b40      	cmp	r3, #64	@ 0x40
 8004592:	d007      	beq.n	80045a4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ac:	d152      	bne.n	8004654 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_SPI_Transmit+0xee>
 80045b6:	8b7b      	ldrh	r3, [r7, #26]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d145      	bne.n	8004648 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c0:	881a      	ldrh	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045cc:	1c9a      	adds	r2, r3, #2
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80045e0:	e032      	b.n	8004648 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d112      	bne.n	8004616 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f4:	881a      	ldrh	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004600:	1c9a      	adds	r2, r3, #2
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004614:	e018      	b.n	8004648 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004616:	f7fe f855 	bl	80026c4 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d803      	bhi.n	800462e <HAL_SPI_Transmit+0x160>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d102      	bne.n	8004634 <HAL_SPI_Transmit+0x166>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d109      	bne.n	8004648 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e082      	b.n	800474e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1c7      	bne.n	80045e2 <HAL_SPI_Transmit+0x114>
 8004652:	e053      	b.n	80046fc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_SPI_Transmit+0x194>
 800465c:	8b7b      	ldrh	r3, [r7, #26]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d147      	bne.n	80046f2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004688:	e033      	b.n	80046f2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b02      	cmp	r3, #2
 8004696:	d113      	bne.n	80046c0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	7812      	ldrb	r2, [r2, #0]
 80046a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046be:	e018      	b.n	80046f2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046c0:	f7fe f800 	bl	80026c4 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d803      	bhi.n	80046d8 <HAL_SPI_Transmit+0x20a>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	d102      	bne.n	80046de <HAL_SPI_Transmit+0x210>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e02d      	b.n	800474e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1c6      	bne.n	800468a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	6839      	ldr	r1, [r7, #0]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 fbd9 	bl	8004eb8 <SPI_EndRxTxTransaction>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	617b      	str	r3, [r7, #20]
 800472e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800474c:	2300      	movs	r3, #0
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b088      	sub	sp, #32
 800475a:	af02      	add	r7, sp, #8
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	603b      	str	r3, [r7, #0]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b01      	cmp	r3, #1
 8004770:	d001      	beq.n	8004776 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004772:	2302      	movs	r3, #2
 8004774:	e104      	b.n	8004980 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800477e:	d112      	bne.n	80047a6 <HAL_SPI_Receive+0x50>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10e      	bne.n	80047a6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2204      	movs	r2, #4
 800478c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004790:	88fa      	ldrh	r2, [r7, #6]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	4613      	mov	r3, r2
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f8f3 	bl	8004988 <HAL_SPI_TransmitReceive>
 80047a2:	4603      	mov	r3, r0
 80047a4:	e0ec      	b.n	8004980 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047a6:	f7fd ff8d 	bl	80026c4 <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_SPI_Receive+0x62>
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0e1      	b.n	8004980 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_SPI_Receive+0x74>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0da      	b.n	8004980 <HAL_SPI_Receive+0x22a>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2204      	movs	r2, #4
 80047d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	88fa      	ldrh	r2, [r7, #6]
 80047ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	88fa      	ldrh	r2, [r7, #6]
 80047f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004818:	d10f      	bne.n	800483a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004828:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004838:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004844:	2b40      	cmp	r3, #64	@ 0x40
 8004846:	d007      	beq.n	8004858 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004856:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d170      	bne.n	8004942 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004860:	e035      	b.n	80048ce <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b01      	cmp	r3, #1
 800486e:	d115      	bne.n	800489c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f103 020c 	add.w	r2, r3, #12
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	7812      	ldrb	r2, [r2, #0]
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800489a:	e018      	b.n	80048ce <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800489c:	f7fd ff12 	bl	80026c4 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d803      	bhi.n	80048b4 <HAL_SPI_Receive+0x15e>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d102      	bne.n	80048ba <HAL_SPI_Receive+0x164>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e058      	b.n	8004980 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1c4      	bne.n	8004862 <HAL_SPI_Receive+0x10c>
 80048d8:	e038      	b.n	800494c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d113      	bne.n	8004910 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f2:	b292      	uxth	r2, r2
 80048f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fa:	1c9a      	adds	r2, r3, #2
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800490e:	e018      	b.n	8004942 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004910:	f7fd fed8 	bl	80026c4 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d803      	bhi.n	8004928 <HAL_SPI_Receive+0x1d2>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004926:	d102      	bne.n	800492e <HAL_SPI_Receive+0x1d8>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e01e      	b.n	8004980 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1c6      	bne.n	80048da <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	6839      	ldr	r1, [r7, #0]
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fa4b 	bl	8004dec <SPI_EndRxTransaction>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800497e:	2300      	movs	r3, #0
  }
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	@ 0x28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004996:	2301      	movs	r3, #1
 8004998:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800499a:	f7fd fe93 	bl	80026c4 <HAL_GetTick>
 800499e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049a6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80049ae:	887b      	ldrh	r3, [r7, #2]
 80049b0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049b2:	7ffb      	ldrb	r3, [r7, #31]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d00c      	beq.n	80049d2 <HAL_SPI_TransmitReceive+0x4a>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049be:	d106      	bne.n	80049ce <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <HAL_SPI_TransmitReceive+0x46>
 80049c8:	7ffb      	ldrb	r3, [r7, #31]
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d001      	beq.n	80049d2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80049ce:	2302      	movs	r3, #2
 80049d0:	e17f      	b.n	8004cd2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_SPI_TransmitReceive+0x5c>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_SPI_TransmitReceive+0x5c>
 80049de:	887b      	ldrh	r3, [r7, #2]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e174      	b.n	8004cd2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_SPI_TransmitReceive+0x6e>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e16d      	b.n	8004cd2 <HAL_SPI_TransmitReceive+0x34a>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d003      	beq.n	8004a12 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2205      	movs	r2, #5
 8004a0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	887a      	ldrh	r2, [r7, #2]
 8004a22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	887a      	ldrh	r2, [r7, #2]
 8004a34:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	887a      	ldrh	r2, [r7, #2]
 8004a3a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a52:	2b40      	cmp	r3, #64	@ 0x40
 8004a54:	d007      	beq.n	8004a66 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a6e:	d17e      	bne.n	8004b6e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_SPI_TransmitReceive+0xf6>
 8004a78:	8afb      	ldrh	r3, [r7, #22]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d16c      	bne.n	8004b58 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a82:	881a      	ldrh	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8e:	1c9a      	adds	r2, r3, #2
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa2:	e059      	b.n	8004b58 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d11b      	bne.n	8004aea <HAL_SPI_TransmitReceive+0x162>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d016      	beq.n	8004aea <HAL_SPI_TransmitReceive+0x162>
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d113      	bne.n	8004aea <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	1c9a      	adds	r2, r3, #2
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d119      	bne.n	8004b2c <HAL_SPI_TransmitReceive+0x1a4>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d014      	beq.n	8004b2c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0c:	b292      	uxth	r2, r2
 8004b0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b14:	1c9a      	adds	r2, r3, #2
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b2c:	f7fd fdca 	bl	80026c4 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d80d      	bhi.n	8004b58 <HAL_SPI_TransmitReceive+0x1d0>
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b42:	d009      	beq.n	8004b58 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e0bc      	b.n	8004cd2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1a0      	bne.n	8004aa4 <HAL_SPI_TransmitReceive+0x11c>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d19b      	bne.n	8004aa4 <HAL_SPI_TransmitReceive+0x11c>
 8004b6c:	e082      	b.n	8004c74 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <HAL_SPI_TransmitReceive+0x1f4>
 8004b76:	8afb      	ldrh	r3, [r7, #22]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d171      	bne.n	8004c60 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	330c      	adds	r3, #12
 8004b86:	7812      	ldrb	r2, [r2, #0]
 8004b88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ba2:	e05d      	b.n	8004c60 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d11c      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x264>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d017      	beq.n	8004bec <HAL_SPI_TransmitReceive+0x264>
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d114      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	330c      	adds	r3, #12
 8004bcc:	7812      	ldrb	r2, [r2, #0]
 8004bce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d119      	bne.n	8004c2e <HAL_SPI_TransmitReceive+0x2a6>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d014      	beq.n	8004c2e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c2e:	f7fd fd49 	bl	80026c4 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d803      	bhi.n	8004c46 <HAL_SPI_TransmitReceive+0x2be>
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d102      	bne.n	8004c4c <HAL_SPI_TransmitReceive+0x2c4>
 8004c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d109      	bne.n	8004c60 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e038      	b.n	8004cd2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d19c      	bne.n	8004ba4 <HAL_SPI_TransmitReceive+0x21c>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d197      	bne.n	8004ba4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f91d 	bl	8004eb8 <SPI_EndRxTxTransaction>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2220      	movs	r2, #32
 8004c88:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e01d      	b.n	8004cd2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
  }
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3728      	adds	r7, #40	@ 0x28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cec:	f7fd fcea 	bl	80026c4 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cfc:	f7fd fce2 	bl	80026c4 <HAL_GetTick>
 8004d00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d02:	4b39      	ldr	r3, [pc, #228]	@ (8004de8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	015b      	lsls	r3, r3, #5
 8004d08:	0d1b      	lsrs	r3, r3, #20
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	fb02 f303 	mul.w	r3, r2, r3
 8004d10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d12:	e054      	b.n	8004dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d050      	beq.n	8004dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d1c:	f7fd fcd2 	bl	80026c4 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d902      	bls.n	8004d32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d13d      	bne.n	8004dae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d4a:	d111      	bne.n	8004d70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d54:	d004      	beq.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d5e:	d107      	bne.n	8004d70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d78:	d10f      	bne.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e017      	b.n	8004dde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	bf0c      	ite	eq
 8004dce:	2301      	moveq	r3, #1
 8004dd0:	2300      	movne	r3, #0
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d19b      	bne.n	8004d14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000018 	.word	0x20000018

08004dec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e00:	d111      	bne.n	8004e26 <SPI_EndRxTransaction+0x3a>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e0a:	d004      	beq.n	8004e16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e14:	d107      	bne.n	8004e26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e2e:	d12a      	bne.n	8004e86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e38:	d012      	beq.n	8004e60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2200      	movs	r2, #0
 8004e42:	2180      	movs	r1, #128	@ 0x80
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff ff49 	bl	8004cdc <SPI_WaitFlagStateUntilTimeout>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d02d      	beq.n	8004eac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e54:	f043 0220 	orr.w	r2, r3, #32
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e026      	b.n	8004eae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2200      	movs	r2, #0
 8004e68:	2101      	movs	r1, #1
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f7ff ff36 	bl	8004cdc <SPI_WaitFlagStateUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01a      	beq.n	8004eac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7a:	f043 0220 	orr.w	r2, r3, #32
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e013      	b.n	8004eae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2101      	movs	r1, #1
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f7ff ff23 	bl	8004cdc <SPI_WaitFlagStateUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d007      	beq.n	8004eac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea0:	f043 0220 	orr.w	r2, r3, #32
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e000      	b.n	8004eae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	2102      	movs	r1, #2
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff ff04 	bl	8004cdc <SPI_WaitFlagStateUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ede:	f043 0220 	orr.w	r2, r3, #32
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e032      	b.n	8004f50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004eea:	4b1b      	ldr	r3, [pc, #108]	@ (8004f58 <SPI_EndRxTxTransaction+0xa0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1b      	ldr	r2, [pc, #108]	@ (8004f5c <SPI_EndRxTxTransaction+0xa4>)
 8004ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef4:	0d5b      	lsrs	r3, r3, #21
 8004ef6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f08:	d112      	bne.n	8004f30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2200      	movs	r2, #0
 8004f12:	2180      	movs	r1, #128	@ 0x80
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f7ff fee1 	bl	8004cdc <SPI_WaitFlagStateUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d016      	beq.n	8004f4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f24:	f043 0220 	orr.w	r2, r3, #32
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e00f      	b.n	8004f50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f46:	2b80      	cmp	r3, #128	@ 0x80
 8004f48:	d0f2      	beq.n	8004f30 <SPI_EndRxTxTransaction+0x78>
 8004f4a:	e000      	b.n	8004f4e <SPI_EndRxTxTransaction+0x96>
        break;
 8004f4c:	bf00      	nop
  }

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	20000018 	.word	0x20000018
 8004f5c:	165e9f81 	.word	0x165e9f81

08004f60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e041      	b.n	8004ff6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fd f99e 	bl	80022c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f000 fd28 	bl	80059f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d109      	bne.n	8005024 <HAL_TIM_PWM_Start+0x24>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	bf14      	ite	ne
 800501c:	2301      	movne	r3, #1
 800501e:	2300      	moveq	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	e022      	b.n	800506a <HAL_TIM_PWM_Start+0x6a>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b04      	cmp	r3, #4
 8005028:	d109      	bne.n	800503e <HAL_TIM_PWM_Start+0x3e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b01      	cmp	r3, #1
 8005034:	bf14      	ite	ne
 8005036:	2301      	movne	r3, #1
 8005038:	2300      	moveq	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	e015      	b.n	800506a <HAL_TIM_PWM_Start+0x6a>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b08      	cmp	r3, #8
 8005042:	d109      	bne.n	8005058 <HAL_TIM_PWM_Start+0x58>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e008      	b.n	800506a <HAL_TIM_PWM_Start+0x6a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e07c      	b.n	800516c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Start+0x82>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005080:	e013      	b.n	80050aa <HAL_TIM_PWM_Start+0xaa>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b04      	cmp	r3, #4
 8005086:	d104      	bne.n	8005092 <HAL_TIM_PWM_Start+0x92>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005090:	e00b      	b.n	80050aa <HAL_TIM_PWM_Start+0xaa>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_PWM_Start+0xa2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a0:	e003      	b.n	80050aa <HAL_TIM_PWM_Start+0xaa>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2202      	movs	r2, #2
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2201      	movs	r2, #1
 80050b0:	6839      	ldr	r1, [r7, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 f824 	bl	8006100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a2d      	ldr	r2, [pc, #180]	@ (8005174 <HAL_TIM_PWM_Start+0x174>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <HAL_TIM_PWM_Start+0xcc>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005178 <HAL_TIM_PWM_Start+0x178>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d101      	bne.n	80050d0 <HAL_TIM_PWM_Start+0xd0>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <HAL_TIM_PWM_Start+0xd2>
 80050d0:	2300      	movs	r3, #0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a22      	ldr	r2, [pc, #136]	@ (8005174 <HAL_TIM_PWM_Start+0x174>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d022      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f8:	d01d      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1f      	ldr	r2, [pc, #124]	@ (800517c <HAL_TIM_PWM_Start+0x17c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d018      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1d      	ldr	r2, [pc, #116]	@ (8005180 <HAL_TIM_PWM_Start+0x180>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <HAL_TIM_PWM_Start+0x184>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00e      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a16      	ldr	r2, [pc, #88]	@ (8005178 <HAL_TIM_PWM_Start+0x178>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a18      	ldr	r2, [pc, #96]	@ (8005188 <HAL_TIM_PWM_Start+0x188>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d004      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a16      	ldr	r2, [pc, #88]	@ (800518c <HAL_TIM_PWM_Start+0x18c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d111      	bne.n	800515a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b06      	cmp	r3, #6
 8005146:	d010      	beq.n	800516a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	e007      	b.n	800516a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40010000 	.word	0x40010000
 8005178:	40010400 	.word	0x40010400
 800517c:	40000400 	.word	0x40000400
 8005180:	40000800 	.word	0x40000800
 8005184:	40000c00 	.word	0x40000c00
 8005188:	40014000 	.word	0x40014000
 800518c:	40001800 	.word	0x40001800

08005190 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e041      	b.n	8005226 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fd f8d2 	bl	8002360 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f000 fc10 	bl	80059f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <HAL_TIM_IC_Start_IT+0x1e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800524a:	b2db      	uxtb	r3, r3
 800524c:	e013      	b.n	8005276 <HAL_TIM_IC_Start_IT+0x46>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b04      	cmp	r3, #4
 8005252:	d104      	bne.n	800525e <HAL_TIM_IC_Start_IT+0x2e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800525a:	b2db      	uxtb	r3, r3
 800525c:	e00b      	b.n	8005276 <HAL_TIM_IC_Start_IT+0x46>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b08      	cmp	r3, #8
 8005262:	d104      	bne.n	800526e <HAL_TIM_IC_Start_IT+0x3e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800526a:	b2db      	uxtb	r3, r3
 800526c:	e003      	b.n	8005276 <HAL_TIM_IC_Start_IT+0x46>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005274:	b2db      	uxtb	r3, r3
 8005276:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <HAL_TIM_IC_Start_IT+0x58>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005284:	b2db      	uxtb	r3, r3
 8005286:	e013      	b.n	80052b0 <HAL_TIM_IC_Start_IT+0x80>
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2b04      	cmp	r3, #4
 800528c:	d104      	bne.n	8005298 <HAL_TIM_IC_Start_IT+0x68>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005294:	b2db      	uxtb	r3, r3
 8005296:	e00b      	b.n	80052b0 <HAL_TIM_IC_Start_IT+0x80>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b08      	cmp	r3, #8
 800529c:	d104      	bne.n	80052a8 <HAL_TIM_IC_Start_IT+0x78>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	e003      	b.n	80052b0 <HAL_TIM_IC_Start_IT+0x80>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052b2:	7bbb      	ldrb	r3, [r7, #14]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d102      	bne.n	80052be <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052b8:	7b7b      	ldrb	r3, [r7, #13]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d001      	beq.n	80052c2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e0cc      	b.n	800545c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_IC_Start_IT+0xa2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052d0:	e013      	b.n	80052fa <HAL_TIM_IC_Start_IT+0xca>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_IC_Start_IT+0xb2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052e0:	e00b      	b.n	80052fa <HAL_TIM_IC_Start_IT+0xca>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_IC_Start_IT+0xc2>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052f0:	e003      	b.n	80052fa <HAL_TIM_IC_Start_IT+0xca>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <HAL_TIM_IC_Start_IT+0xda>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005308:	e013      	b.n	8005332 <HAL_TIM_IC_Start_IT+0x102>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b04      	cmp	r3, #4
 800530e:	d104      	bne.n	800531a <HAL_TIM_IC_Start_IT+0xea>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005318:	e00b      	b.n	8005332 <HAL_TIM_IC_Start_IT+0x102>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d104      	bne.n	800532a <HAL_TIM_IC_Start_IT+0xfa>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005328:	e003      	b.n	8005332 <HAL_TIM_IC_Start_IT+0x102>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b0c      	cmp	r3, #12
 8005336:	d841      	bhi.n	80053bc <HAL_TIM_IC_Start_IT+0x18c>
 8005338:	a201      	add	r2, pc, #4	@ (adr r2, 8005340 <HAL_TIM_IC_Start_IT+0x110>)
 800533a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533e:	bf00      	nop
 8005340:	08005375 	.word	0x08005375
 8005344:	080053bd 	.word	0x080053bd
 8005348:	080053bd 	.word	0x080053bd
 800534c:	080053bd 	.word	0x080053bd
 8005350:	08005387 	.word	0x08005387
 8005354:	080053bd 	.word	0x080053bd
 8005358:	080053bd 	.word	0x080053bd
 800535c:	080053bd 	.word	0x080053bd
 8005360:	08005399 	.word	0x08005399
 8005364:	080053bd 	.word	0x080053bd
 8005368:	080053bd 	.word	0x080053bd
 800536c:	080053bd 	.word	0x080053bd
 8005370:	080053ab 	.word	0x080053ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0202 	orr.w	r2, r2, #2
 8005382:	60da      	str	r2, [r3, #12]
      break;
 8005384:	e01d      	b.n	80053c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0204 	orr.w	r2, r2, #4
 8005394:	60da      	str	r2, [r3, #12]
      break;
 8005396:	e014      	b.n	80053c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0208 	orr.w	r2, r2, #8
 80053a6:	60da      	str	r2, [r3, #12]
      break;
 80053a8:	e00b      	b.n	80053c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0210 	orr.w	r2, r2, #16
 80053b8:	60da      	str	r2, [r3, #12]
      break;
 80053ba:	e002      	b.n	80053c2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
      break;
 80053c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d148      	bne.n	800545a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2201      	movs	r2, #1
 80053ce:	6839      	ldr	r1, [r7, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fe95 	bl	8006100 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a22      	ldr	r2, [pc, #136]	@ (8005464 <HAL_TIM_IC_Start_IT+0x234>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d022      	beq.n	8005426 <HAL_TIM_IC_Start_IT+0x1f6>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e8:	d01d      	beq.n	8005426 <HAL_TIM_IC_Start_IT+0x1f6>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005468 <HAL_TIM_IC_Start_IT+0x238>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d018      	beq.n	8005426 <HAL_TIM_IC_Start_IT+0x1f6>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a1c      	ldr	r2, [pc, #112]	@ (800546c <HAL_TIM_IC_Start_IT+0x23c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <HAL_TIM_IC_Start_IT+0x1f6>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1b      	ldr	r2, [pc, #108]	@ (8005470 <HAL_TIM_IC_Start_IT+0x240>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00e      	beq.n	8005426 <HAL_TIM_IC_Start_IT+0x1f6>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a19      	ldr	r2, [pc, #100]	@ (8005474 <HAL_TIM_IC_Start_IT+0x244>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d009      	beq.n	8005426 <HAL_TIM_IC_Start_IT+0x1f6>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a18      	ldr	r2, [pc, #96]	@ (8005478 <HAL_TIM_IC_Start_IT+0x248>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_TIM_IC_Start_IT+0x1f6>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a16      	ldr	r2, [pc, #88]	@ (800547c <HAL_TIM_IC_Start_IT+0x24c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d111      	bne.n	800544a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b06      	cmp	r3, #6
 8005436:	d010      	beq.n	800545a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005448:	e007      	b.n	800545a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800545a:	7bfb      	ldrb	r3, [r7, #15]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40010000 	.word	0x40010000
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40000c00 	.word	0x40000c00
 8005474:	40010400 	.word	0x40010400
 8005478:	40014000 	.word	0x40014000
 800547c:	40001800 	.word	0x40001800

08005480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d020      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01b      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0202 	mvn.w	r2, #2
 80054b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fb fdd0 	bl	8001070 <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fa70 	bl	80059b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fa77 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d020      	beq.n	8005530 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01b      	beq.n	8005530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0204 	mvn.w	r2, #4
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fb fdaa 	bl	8001070 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fa4a 	bl	80059b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fa51 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d020      	beq.n	800557c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01b      	beq.n	800557c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0208 	mvn.w	r2, #8
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2204      	movs	r2, #4
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fb fd84 	bl	8001070 <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fa24 	bl	80059b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fa2b 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b00      	cmp	r3, #0
 8005584:	d020      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01b      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0210 	mvn.w	r2, #16
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2208      	movs	r2, #8
 800559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fb fd5e 	bl	8001070 <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f9fe 	bl	80059b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fa05 	bl	80059cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0201 	mvn.w	r2, #1
 80055e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f9dc 	bl	80059a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fe76 	bl	80062fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f9d6 	bl	80059e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0220 	mvn.w	r2, #32
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fe48 	bl	80062e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_TIM_IC_ConfigChannel+0x1e>
 800567a:	2302      	movs	r3, #2
 800567c:	e088      	b.n	8005790 <HAL_TIM_IC_ConfigChannel+0x130>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d11b      	bne.n	80056c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800569c:	f000 fc06 	bl	8005eac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 020c 	bic.w	r2, r2, #12
 80056ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6999      	ldr	r1, [r3, #24]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	619a      	str	r2, [r3, #24]
 80056c2:	e060      	b.n	8005786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d11c      	bne.n	8005704 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80056da:	f000 fc5b 	bl	8005f94 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80056ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6999      	ldr	r1, [r3, #24]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	021a      	lsls	r2, r3, #8
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	619a      	str	r2, [r3, #24]
 8005702:	e040      	b.n	8005786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b08      	cmp	r3, #8
 8005708:	d11b      	bne.n	8005742 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800571a:	f000 fc78 	bl	800600e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 020c 	bic.w	r2, r2, #12
 800572c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69d9      	ldr	r1, [r3, #28]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	61da      	str	r2, [r3, #28]
 8005740:	e021      	b.n	8005786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b0c      	cmp	r3, #12
 8005746:	d11c      	bne.n	8005782 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005758:	f000 fc95 	bl	8006086 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800576a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69d9      	ldr	r1, [r3, #28]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	021a      	lsls	r2, r3, #8
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	61da      	str	r2, [r3, #28]
 8005780:	e001      	b.n	8005786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800578e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e0ae      	b.n	8005914 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b0c      	cmp	r3, #12
 80057c2:	f200 809f 	bhi.w	8005904 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057c6:	a201      	add	r2, pc, #4	@ (adr r2, 80057cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	08005801 	.word	0x08005801
 80057d0:	08005905 	.word	0x08005905
 80057d4:	08005905 	.word	0x08005905
 80057d8:	08005905 	.word	0x08005905
 80057dc:	08005841 	.word	0x08005841
 80057e0:	08005905 	.word	0x08005905
 80057e4:	08005905 	.word	0x08005905
 80057e8:	08005905 	.word	0x08005905
 80057ec:	08005883 	.word	0x08005883
 80057f0:	08005905 	.word	0x08005905
 80057f4:	08005905 	.word	0x08005905
 80057f8:	08005905 	.word	0x08005905
 80057fc:	080058c3 	.word	0x080058c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f9a0 	bl	8005b4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0208 	orr.w	r2, r2, #8
 800581a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0204 	bic.w	r2, r2, #4
 800582a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	619a      	str	r2, [r3, #24]
      break;
 800583e:	e064      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f9f0 	bl	8005c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800585a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800586a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6999      	ldr	r1, [r3, #24]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	021a      	lsls	r2, r3, #8
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	619a      	str	r2, [r3, #24]
      break;
 8005880:	e043      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fa45 	bl	8005d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0208 	orr.w	r2, r2, #8
 800589c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0204 	bic.w	r2, r2, #4
 80058ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69d9      	ldr	r1, [r3, #28]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	61da      	str	r2, [r3, #28]
      break;
 80058c0:	e023      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fa99 	bl	8005e00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69d9      	ldr	r1, [r3, #28]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	021a      	lsls	r2, r3, #8
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	61da      	str	r2, [r3, #28]
      break;
 8005902:	e002      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	75fb      	strb	r3, [r7, #23]
      break;
 8005908:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005912:	7dfb      	ldrb	r3, [r7, #23]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b0c      	cmp	r3, #12
 800592e:	d831      	bhi.n	8005994 <HAL_TIM_ReadCapturedValue+0x78>
 8005930:	a201      	add	r2, pc, #4	@ (adr r2, 8005938 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005936:	bf00      	nop
 8005938:	0800596d 	.word	0x0800596d
 800593c:	08005995 	.word	0x08005995
 8005940:	08005995 	.word	0x08005995
 8005944:	08005995 	.word	0x08005995
 8005948:	08005977 	.word	0x08005977
 800594c:	08005995 	.word	0x08005995
 8005950:	08005995 	.word	0x08005995
 8005954:	08005995 	.word	0x08005995
 8005958:	08005981 	.word	0x08005981
 800595c:	08005995 	.word	0x08005995
 8005960:	08005995 	.word	0x08005995
 8005964:	08005995 	.word	0x08005995
 8005968:	0800598b 	.word	0x0800598b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005972:	60fb      	str	r3, [r7, #12]

      break;
 8005974:	e00f      	b.n	8005996 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597c:	60fb      	str	r3, [r7, #12]

      break;
 800597e:	e00a      	b.n	8005996 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005986:	60fb      	str	r3, [r7, #12]

      break;
 8005988:	e005      	b.n	8005996 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005990:	60fb      	str	r3, [r7, #12]

      break;
 8005992:	e000      	b.n	8005996 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005994:	bf00      	nop
  }

  return tmpreg;
 8005996:	68fb      	ldr	r3, [r7, #12]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a46      	ldr	r2, [pc, #280]	@ (8005b20 <TIM_Base_SetConfig+0x12c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d013      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a12:	d00f      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a43      	ldr	r2, [pc, #268]	@ (8005b24 <TIM_Base_SetConfig+0x130>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00b      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a42      	ldr	r2, [pc, #264]	@ (8005b28 <TIM_Base_SetConfig+0x134>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d007      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a41      	ldr	r2, [pc, #260]	@ (8005b2c <TIM_Base_SetConfig+0x138>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_Base_SetConfig+0x40>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a40      	ldr	r2, [pc, #256]	@ (8005b30 <TIM_Base_SetConfig+0x13c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d108      	bne.n	8005a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a35      	ldr	r2, [pc, #212]	@ (8005b20 <TIM_Base_SetConfig+0x12c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d02b      	beq.n	8005aa6 <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a54:	d027      	beq.n	8005aa6 <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a32      	ldr	r2, [pc, #200]	@ (8005b24 <TIM_Base_SetConfig+0x130>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d023      	beq.n	8005aa6 <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a31      	ldr	r2, [pc, #196]	@ (8005b28 <TIM_Base_SetConfig+0x134>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01f      	beq.n	8005aa6 <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a30      	ldr	r2, [pc, #192]	@ (8005b2c <TIM_Base_SetConfig+0x138>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01b      	beq.n	8005aa6 <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a2f      	ldr	r2, [pc, #188]	@ (8005b30 <TIM_Base_SetConfig+0x13c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d017      	beq.n	8005aa6 <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2e      	ldr	r2, [pc, #184]	@ (8005b34 <TIM_Base_SetConfig+0x140>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a2d      	ldr	r2, [pc, #180]	@ (8005b38 <TIM_Base_SetConfig+0x144>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00f      	beq.n	8005aa6 <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2c      	ldr	r2, [pc, #176]	@ (8005b3c <TIM_Base_SetConfig+0x148>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00b      	beq.n	8005aa6 <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2b      	ldr	r2, [pc, #172]	@ (8005b40 <TIM_Base_SetConfig+0x14c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d007      	beq.n	8005aa6 <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2a      	ldr	r2, [pc, #168]	@ (8005b44 <TIM_Base_SetConfig+0x150>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a29      	ldr	r2, [pc, #164]	@ (8005b48 <TIM_Base_SetConfig+0x154>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d108      	bne.n	8005ab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a10      	ldr	r2, [pc, #64]	@ (8005b20 <TIM_Base_SetConfig+0x12c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d003      	beq.n	8005aec <TIM_Base_SetConfig+0xf8>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a12      	ldr	r2, [pc, #72]	@ (8005b30 <TIM_Base_SetConfig+0x13c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d103      	bne.n	8005af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	691a      	ldr	r2, [r3, #16]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d105      	bne.n	8005b12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f023 0201 	bic.w	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	611a      	str	r2, [r3, #16]
  }
}
 8005b12:	bf00      	nop
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40000400 	.word	0x40000400
 8005b28:	40000800 	.word	0x40000800
 8005b2c:	40000c00 	.word	0x40000c00
 8005b30:	40010400 	.word	0x40010400
 8005b34:	40014000 	.word	0x40014000
 8005b38:	40014400 	.word	0x40014400
 8005b3c:	40014800 	.word	0x40014800
 8005b40:	40001800 	.word	0x40001800
 8005b44:	40001c00 	.word	0x40001c00
 8005b48:	40002000 	.word	0x40002000

08005b4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f023 0201 	bic.w	r2, r3, #1
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f023 0302 	bic.w	r3, r3, #2
 8005b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a20      	ldr	r2, [pc, #128]	@ (8005c24 <TIM_OC1_SetConfig+0xd8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_OC1_SetConfig+0x64>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a1f      	ldr	r2, [pc, #124]	@ (8005c28 <TIM_OC1_SetConfig+0xdc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d10c      	bne.n	8005bca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f023 0308 	bic.w	r3, r3, #8
 8005bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f023 0304 	bic.w	r3, r3, #4
 8005bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a15      	ldr	r2, [pc, #84]	@ (8005c24 <TIM_OC1_SetConfig+0xd8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_OC1_SetConfig+0x8e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a14      	ldr	r2, [pc, #80]	@ (8005c28 <TIM_OC1_SetConfig+0xdc>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d111      	bne.n	8005bfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	621a      	str	r2, [r3, #32]
}
 8005c18:	bf00      	nop
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	40010000 	.word	0x40010000
 8005c28:	40010400 	.word	0x40010400

08005c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	f023 0210 	bic.w	r2, r3, #16
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f023 0320 	bic.w	r3, r3, #32
 8005c76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a22      	ldr	r2, [pc, #136]	@ (8005d10 <TIM_OC2_SetConfig+0xe4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d003      	beq.n	8005c94 <TIM_OC2_SetConfig+0x68>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a21      	ldr	r2, [pc, #132]	@ (8005d14 <TIM_OC2_SetConfig+0xe8>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d10d      	bne.n	8005cb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a17      	ldr	r2, [pc, #92]	@ (8005d10 <TIM_OC2_SetConfig+0xe4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <TIM_OC2_SetConfig+0x94>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a16      	ldr	r2, [pc, #88]	@ (8005d14 <TIM_OC2_SetConfig+0xe8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d113      	bne.n	8005ce8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40010000 	.word	0x40010000
 8005d14:	40010400 	.word	0x40010400

08005d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a21      	ldr	r2, [pc, #132]	@ (8005df8 <TIM_OC3_SetConfig+0xe0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d003      	beq.n	8005d7e <TIM_OC3_SetConfig+0x66>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a20      	ldr	r2, [pc, #128]	@ (8005dfc <TIM_OC3_SetConfig+0xe4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d10d      	bne.n	8005d9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a16      	ldr	r2, [pc, #88]	@ (8005df8 <TIM_OC3_SetConfig+0xe0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_OC3_SetConfig+0x92>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a15      	ldr	r2, [pc, #84]	@ (8005dfc <TIM_OC3_SetConfig+0xe4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d113      	bne.n	8005dd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	621a      	str	r2, [r3, #32]
}
 8005dec:	bf00      	nop
 8005dee:	371c      	adds	r7, #28
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	40010000 	.word	0x40010000
 8005dfc:	40010400 	.word	0x40010400

08005e00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	031b      	lsls	r3, r3, #12
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a12      	ldr	r2, [pc, #72]	@ (8005ea4 <TIM_OC4_SetConfig+0xa4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <TIM_OC4_SetConfig+0x68>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a11      	ldr	r2, [pc, #68]	@ (8005ea8 <TIM_OC4_SetConfig+0xa8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d109      	bne.n	8005e7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	019b      	lsls	r3, r3, #6
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	40010000 	.word	0x40010000
 8005ea8:	40010400 	.word	0x40010400

08005eac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	f023 0201 	bic.w	r2, r3, #1
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4a28      	ldr	r2, [pc, #160]	@ (8005f78 <TIM_TI1_SetConfig+0xcc>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01b      	beq.n	8005f12 <TIM_TI1_SetConfig+0x66>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee0:	d017      	beq.n	8005f12 <TIM_TI1_SetConfig+0x66>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4a25      	ldr	r2, [pc, #148]	@ (8005f7c <TIM_TI1_SetConfig+0xd0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <TIM_TI1_SetConfig+0x66>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4a24      	ldr	r2, [pc, #144]	@ (8005f80 <TIM_TI1_SetConfig+0xd4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00f      	beq.n	8005f12 <TIM_TI1_SetConfig+0x66>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4a23      	ldr	r2, [pc, #140]	@ (8005f84 <TIM_TI1_SetConfig+0xd8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00b      	beq.n	8005f12 <TIM_TI1_SetConfig+0x66>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	4a22      	ldr	r2, [pc, #136]	@ (8005f88 <TIM_TI1_SetConfig+0xdc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d007      	beq.n	8005f12 <TIM_TI1_SetConfig+0x66>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4a21      	ldr	r2, [pc, #132]	@ (8005f8c <TIM_TI1_SetConfig+0xe0>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d003      	beq.n	8005f12 <TIM_TI1_SetConfig+0x66>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4a20      	ldr	r2, [pc, #128]	@ (8005f90 <TIM_TI1_SetConfig+0xe4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d101      	bne.n	8005f16 <TIM_TI1_SetConfig+0x6a>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <TIM_TI1_SetConfig+0x6c>
 8005f16:	2300      	movs	r3, #0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d008      	beq.n	8005f2e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f023 0303 	bic.w	r3, r3, #3
 8005f22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	e003      	b.n	8005f36 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f023 030a 	bic.w	r3, r3, #10
 8005f50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f003 030a 	and.w	r3, r3, #10
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	621a      	str	r2, [r3, #32]
}
 8005f6a:	bf00      	nop
 8005f6c:	371c      	adds	r7, #28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40000800 	.word	0x40000800
 8005f84:	40000c00 	.word	0x40000c00
 8005f88:	40010400 	.word	0x40010400
 8005f8c:	40014000 	.word	0x40014000
 8005f90:	40001800 	.word	0x40001800

08005f94 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f023 0210 	bic.w	r2, r3, #16
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	031b      	lsls	r3, r3, #12
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fe6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800600e:	b480      	push	{r7}
 8006010:	b087      	sub	sp, #28
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
 800601a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f023 0303 	bic.w	r3, r3, #3
 800603a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800604a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	b2db      	uxtb	r3, r3
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800605e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	621a      	str	r2, [r3, #32]
}
 800607a:	bf00      	nop
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006086:	b480      	push	{r7}
 8006088:	b087      	sub	sp, #28
 800608a:	af00      	add	r7, sp, #0
 800608c:	60f8      	str	r0, [r7, #12]
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	607a      	str	r2, [r7, #4]
 8006092:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	031b      	lsls	r3, r3, #12
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80060d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	031b      	lsls	r3, r3, #12
 80060de:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	621a      	str	r2, [r3, #32]
}
 80060f4:	bf00      	nop
 80060f6:	371c      	adds	r7, #28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	2201      	movs	r2, #1
 8006114:	fa02 f303 	lsl.w	r3, r2, r3
 8006118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a1a      	ldr	r2, [r3, #32]
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	43db      	mvns	r3, r3
 8006122:	401a      	ands	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a1a      	ldr	r2, [r3, #32]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f003 031f 	and.w	r3, r3, #31
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	fa01 f303 	lsl.w	r3, r1, r3
 8006138:	431a      	orrs	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800615c:	2b01      	cmp	r3, #1
 800615e:	d101      	bne.n	8006164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006160:	2302      	movs	r3, #2
 8006162:	e05a      	b.n	800621a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a21      	ldr	r2, [pc, #132]	@ (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d022      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b0:	d01d      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1d      	ldr	r2, [pc, #116]	@ (800622c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d018      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d013      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d00e      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a18      	ldr	r2, [pc, #96]	@ (8006238 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d009      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a17      	ldr	r2, [pc, #92]	@ (800623c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d004      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a15      	ldr	r2, [pc, #84]	@ (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d10c      	bne.n	8006208 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40010000 	.word	0x40010000
 800622c:	40000400 	.word	0x40000400
 8006230:	40000800 	.word	0x40000800
 8006234:	40000c00 	.word	0x40000c00
 8006238:	40010400 	.word	0x40010400
 800623c:	40014000 	.word	0x40014000
 8006240:	40001800 	.word	0x40001800

08006244 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800625c:	2302      	movs	r3, #2
 800625e:	e03d      	b.n	80062dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <memset>:
 8006310:	4402      	add	r2, r0
 8006312:	4603      	mov	r3, r0
 8006314:	4293      	cmp	r3, r2
 8006316:	d100      	bne.n	800631a <memset+0xa>
 8006318:	4770      	bx	lr
 800631a:	f803 1b01 	strb.w	r1, [r3], #1
 800631e:	e7f9      	b.n	8006314 <memset+0x4>

08006320 <__libc_init_array>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	4d0d      	ldr	r5, [pc, #52]	@ (8006358 <__libc_init_array+0x38>)
 8006324:	4c0d      	ldr	r4, [pc, #52]	@ (800635c <__libc_init_array+0x3c>)
 8006326:	1b64      	subs	r4, r4, r5
 8006328:	10a4      	asrs	r4, r4, #2
 800632a:	2600      	movs	r6, #0
 800632c:	42a6      	cmp	r6, r4
 800632e:	d109      	bne.n	8006344 <__libc_init_array+0x24>
 8006330:	4d0b      	ldr	r5, [pc, #44]	@ (8006360 <__libc_init_array+0x40>)
 8006332:	4c0c      	ldr	r4, [pc, #48]	@ (8006364 <__libc_init_array+0x44>)
 8006334:	f001 f89c 	bl	8007470 <_init>
 8006338:	1b64      	subs	r4, r4, r5
 800633a:	10a4      	asrs	r4, r4, #2
 800633c:	2600      	movs	r6, #0
 800633e:	42a6      	cmp	r6, r4
 8006340:	d105      	bne.n	800634e <__libc_init_array+0x2e>
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	f855 3b04 	ldr.w	r3, [r5], #4
 8006348:	4798      	blx	r3
 800634a:	3601      	adds	r6, #1
 800634c:	e7ee      	b.n	800632c <__libc_init_array+0xc>
 800634e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006352:	4798      	blx	r3
 8006354:	3601      	adds	r6, #1
 8006356:	e7f2      	b.n	800633e <__libc_init_array+0x1e>
 8006358:	08007680 	.word	0x08007680
 800635c:	08007680 	.word	0x08007680
 8006360:	08007680 	.word	0x08007680
 8006364:	08007684 	.word	0x08007684

08006368 <cos>:
 8006368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800636a:	ec53 2b10 	vmov	r2, r3, d0
 800636e:	4826      	ldr	r0, [pc, #152]	@ (8006408 <cos+0xa0>)
 8006370:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006374:	4281      	cmp	r1, r0
 8006376:	d806      	bhi.n	8006386 <cos+0x1e>
 8006378:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006400 <cos+0x98>
 800637c:	b005      	add	sp, #20
 800637e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006382:	f000 b899 	b.w	80064b8 <__kernel_cos>
 8006386:	4821      	ldr	r0, [pc, #132]	@ (800640c <cos+0xa4>)
 8006388:	4281      	cmp	r1, r0
 800638a:	d908      	bls.n	800639e <cos+0x36>
 800638c:	4610      	mov	r0, r2
 800638e:	4619      	mov	r1, r3
 8006390:	f7f9 ff1e 	bl	80001d0 <__aeabi_dsub>
 8006394:	ec41 0b10 	vmov	d0, r0, r1
 8006398:	b005      	add	sp, #20
 800639a:	f85d fb04 	ldr.w	pc, [sp], #4
 800639e:	4668      	mov	r0, sp
 80063a0:	f000 fa0e 	bl	80067c0 <__ieee754_rem_pio2>
 80063a4:	f000 0003 	and.w	r0, r0, #3
 80063a8:	2801      	cmp	r0, #1
 80063aa:	d00b      	beq.n	80063c4 <cos+0x5c>
 80063ac:	2802      	cmp	r0, #2
 80063ae:	d015      	beq.n	80063dc <cos+0x74>
 80063b0:	b9d8      	cbnz	r0, 80063ea <cos+0x82>
 80063b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80063b6:	ed9d 0b00 	vldr	d0, [sp]
 80063ba:	f000 f87d 	bl	80064b8 <__kernel_cos>
 80063be:	ec51 0b10 	vmov	r0, r1, d0
 80063c2:	e7e7      	b.n	8006394 <cos+0x2c>
 80063c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80063c8:	ed9d 0b00 	vldr	d0, [sp]
 80063cc:	f000 f93c 	bl	8006648 <__kernel_sin>
 80063d0:	ec53 2b10 	vmov	r2, r3, d0
 80063d4:	4610      	mov	r0, r2
 80063d6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80063da:	e7db      	b.n	8006394 <cos+0x2c>
 80063dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80063e0:	ed9d 0b00 	vldr	d0, [sp]
 80063e4:	f000 f868 	bl	80064b8 <__kernel_cos>
 80063e8:	e7f2      	b.n	80063d0 <cos+0x68>
 80063ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80063ee:	ed9d 0b00 	vldr	d0, [sp]
 80063f2:	2001      	movs	r0, #1
 80063f4:	f000 f928 	bl	8006648 <__kernel_sin>
 80063f8:	e7e1      	b.n	80063be <cos+0x56>
 80063fa:	bf00      	nop
 80063fc:	f3af 8000 	nop.w
	...
 8006408:	3fe921fb 	.word	0x3fe921fb
 800640c:	7fefffff 	.word	0x7fefffff

08006410 <sin>:
 8006410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006412:	ec53 2b10 	vmov	r2, r3, d0
 8006416:	4826      	ldr	r0, [pc, #152]	@ (80064b0 <sin+0xa0>)
 8006418:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800641c:	4281      	cmp	r1, r0
 800641e:	d807      	bhi.n	8006430 <sin+0x20>
 8006420:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80064a8 <sin+0x98>
 8006424:	2000      	movs	r0, #0
 8006426:	b005      	add	sp, #20
 8006428:	f85d eb04 	ldr.w	lr, [sp], #4
 800642c:	f000 b90c 	b.w	8006648 <__kernel_sin>
 8006430:	4820      	ldr	r0, [pc, #128]	@ (80064b4 <sin+0xa4>)
 8006432:	4281      	cmp	r1, r0
 8006434:	d908      	bls.n	8006448 <sin+0x38>
 8006436:	4610      	mov	r0, r2
 8006438:	4619      	mov	r1, r3
 800643a:	f7f9 fec9 	bl	80001d0 <__aeabi_dsub>
 800643e:	ec41 0b10 	vmov	d0, r0, r1
 8006442:	b005      	add	sp, #20
 8006444:	f85d fb04 	ldr.w	pc, [sp], #4
 8006448:	4668      	mov	r0, sp
 800644a:	f000 f9b9 	bl	80067c0 <__ieee754_rem_pio2>
 800644e:	f000 0003 	and.w	r0, r0, #3
 8006452:	2801      	cmp	r0, #1
 8006454:	d00c      	beq.n	8006470 <sin+0x60>
 8006456:	2802      	cmp	r0, #2
 8006458:	d011      	beq.n	800647e <sin+0x6e>
 800645a:	b9e8      	cbnz	r0, 8006498 <sin+0x88>
 800645c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006460:	ed9d 0b00 	vldr	d0, [sp]
 8006464:	2001      	movs	r0, #1
 8006466:	f000 f8ef 	bl	8006648 <__kernel_sin>
 800646a:	ec51 0b10 	vmov	r0, r1, d0
 800646e:	e7e6      	b.n	800643e <sin+0x2e>
 8006470:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006474:	ed9d 0b00 	vldr	d0, [sp]
 8006478:	f000 f81e 	bl	80064b8 <__kernel_cos>
 800647c:	e7f5      	b.n	800646a <sin+0x5a>
 800647e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006482:	ed9d 0b00 	vldr	d0, [sp]
 8006486:	2001      	movs	r0, #1
 8006488:	f000 f8de 	bl	8006648 <__kernel_sin>
 800648c:	ec53 2b10 	vmov	r2, r3, d0
 8006490:	4610      	mov	r0, r2
 8006492:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006496:	e7d2      	b.n	800643e <sin+0x2e>
 8006498:	ed9d 1b02 	vldr	d1, [sp, #8]
 800649c:	ed9d 0b00 	vldr	d0, [sp]
 80064a0:	f000 f80a 	bl	80064b8 <__kernel_cos>
 80064a4:	e7f2      	b.n	800648c <sin+0x7c>
 80064a6:	bf00      	nop
	...
 80064b0:	3fe921fb 	.word	0x3fe921fb
 80064b4:	7fefffff 	.word	0x7fefffff

080064b8 <__kernel_cos>:
 80064b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	ec57 6b10 	vmov	r6, r7, d0
 80064c0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80064c4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80064c8:	ed8d 1b00 	vstr	d1, [sp]
 80064cc:	d206      	bcs.n	80064dc <__kernel_cos+0x24>
 80064ce:	4630      	mov	r0, r6
 80064d0:	4639      	mov	r1, r7
 80064d2:	f7fa facf 	bl	8000a74 <__aeabi_d2iz>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	f000 8088 	beq.w	80065ec <__kernel_cos+0x134>
 80064dc:	4632      	mov	r2, r6
 80064de:	463b      	mov	r3, r7
 80064e0:	4630      	mov	r0, r6
 80064e2:	4639      	mov	r1, r7
 80064e4:	f7fa f82c 	bl	8000540 <__aeabi_dmul>
 80064e8:	4b51      	ldr	r3, [pc, #324]	@ (8006630 <__kernel_cos+0x178>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	4604      	mov	r4, r0
 80064ee:	460d      	mov	r5, r1
 80064f0:	f7fa f826 	bl	8000540 <__aeabi_dmul>
 80064f4:	a340      	add	r3, pc, #256	@ (adr r3, 80065f8 <__kernel_cos+0x140>)
 80064f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fa:	4682      	mov	sl, r0
 80064fc:	468b      	mov	fp, r1
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f7fa f81d 	bl	8000540 <__aeabi_dmul>
 8006506:	a33e      	add	r3, pc, #248	@ (adr r3, 8006600 <__kernel_cos+0x148>)
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	f7f9 fe62 	bl	80001d4 <__adddf3>
 8006510:	4622      	mov	r2, r4
 8006512:	462b      	mov	r3, r5
 8006514:	f7fa f814 	bl	8000540 <__aeabi_dmul>
 8006518:	a33b      	add	r3, pc, #236	@ (adr r3, 8006608 <__kernel_cos+0x150>)
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f7f9 fe57 	bl	80001d0 <__aeabi_dsub>
 8006522:	4622      	mov	r2, r4
 8006524:	462b      	mov	r3, r5
 8006526:	f7fa f80b 	bl	8000540 <__aeabi_dmul>
 800652a:	a339      	add	r3, pc, #228	@ (adr r3, 8006610 <__kernel_cos+0x158>)
 800652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006530:	f7f9 fe50 	bl	80001d4 <__adddf3>
 8006534:	4622      	mov	r2, r4
 8006536:	462b      	mov	r3, r5
 8006538:	f7fa f802 	bl	8000540 <__aeabi_dmul>
 800653c:	a336      	add	r3, pc, #216	@ (adr r3, 8006618 <__kernel_cos+0x160>)
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	f7f9 fe45 	bl	80001d0 <__aeabi_dsub>
 8006546:	4622      	mov	r2, r4
 8006548:	462b      	mov	r3, r5
 800654a:	f7f9 fff9 	bl	8000540 <__aeabi_dmul>
 800654e:	a334      	add	r3, pc, #208	@ (adr r3, 8006620 <__kernel_cos+0x168>)
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7f9 fe3e 	bl	80001d4 <__adddf3>
 8006558:	4622      	mov	r2, r4
 800655a:	462b      	mov	r3, r5
 800655c:	f7f9 fff0 	bl	8000540 <__aeabi_dmul>
 8006560:	4622      	mov	r2, r4
 8006562:	462b      	mov	r3, r5
 8006564:	f7f9 ffec 	bl	8000540 <__aeabi_dmul>
 8006568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800656c:	4604      	mov	r4, r0
 800656e:	460d      	mov	r5, r1
 8006570:	4630      	mov	r0, r6
 8006572:	4639      	mov	r1, r7
 8006574:	f7f9 ffe4 	bl	8000540 <__aeabi_dmul>
 8006578:	460b      	mov	r3, r1
 800657a:	4602      	mov	r2, r0
 800657c:	4629      	mov	r1, r5
 800657e:	4620      	mov	r0, r4
 8006580:	f7f9 fe26 	bl	80001d0 <__aeabi_dsub>
 8006584:	4b2b      	ldr	r3, [pc, #172]	@ (8006634 <__kernel_cos+0x17c>)
 8006586:	4598      	cmp	r8, r3
 8006588:	4606      	mov	r6, r0
 800658a:	460f      	mov	r7, r1
 800658c:	d810      	bhi.n	80065b0 <__kernel_cos+0xf8>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	4650      	mov	r0, sl
 8006594:	4659      	mov	r1, fp
 8006596:	f7f9 fe1b 	bl	80001d0 <__aeabi_dsub>
 800659a:	460b      	mov	r3, r1
 800659c:	4926      	ldr	r1, [pc, #152]	@ (8006638 <__kernel_cos+0x180>)
 800659e:	4602      	mov	r2, r0
 80065a0:	2000      	movs	r0, #0
 80065a2:	f7f9 fe15 	bl	80001d0 <__aeabi_dsub>
 80065a6:	ec41 0b10 	vmov	d0, r0, r1
 80065aa:	b003      	add	sp, #12
 80065ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b0:	4b22      	ldr	r3, [pc, #136]	@ (800663c <__kernel_cos+0x184>)
 80065b2:	4921      	ldr	r1, [pc, #132]	@ (8006638 <__kernel_cos+0x180>)
 80065b4:	4598      	cmp	r8, r3
 80065b6:	bf8c      	ite	hi
 80065b8:	4d21      	ldrhi	r5, [pc, #132]	@ (8006640 <__kernel_cos+0x188>)
 80065ba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80065be:	2400      	movs	r4, #0
 80065c0:	4622      	mov	r2, r4
 80065c2:	462b      	mov	r3, r5
 80065c4:	2000      	movs	r0, #0
 80065c6:	f7f9 fe03 	bl	80001d0 <__aeabi_dsub>
 80065ca:	4622      	mov	r2, r4
 80065cc:	4680      	mov	r8, r0
 80065ce:	4689      	mov	r9, r1
 80065d0:	462b      	mov	r3, r5
 80065d2:	4650      	mov	r0, sl
 80065d4:	4659      	mov	r1, fp
 80065d6:	f7f9 fdfb 	bl	80001d0 <__aeabi_dsub>
 80065da:	4632      	mov	r2, r6
 80065dc:	463b      	mov	r3, r7
 80065de:	f7f9 fdf7 	bl	80001d0 <__aeabi_dsub>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4640      	mov	r0, r8
 80065e8:	4649      	mov	r1, r9
 80065ea:	e7da      	b.n	80065a2 <__kernel_cos+0xea>
 80065ec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006628 <__kernel_cos+0x170>
 80065f0:	e7db      	b.n	80065aa <__kernel_cos+0xf2>
 80065f2:	bf00      	nop
 80065f4:	f3af 8000 	nop.w
 80065f8:	be8838d4 	.word	0xbe8838d4
 80065fc:	bda8fae9 	.word	0xbda8fae9
 8006600:	bdb4b1c4 	.word	0xbdb4b1c4
 8006604:	3e21ee9e 	.word	0x3e21ee9e
 8006608:	809c52ad 	.word	0x809c52ad
 800660c:	3e927e4f 	.word	0x3e927e4f
 8006610:	19cb1590 	.word	0x19cb1590
 8006614:	3efa01a0 	.word	0x3efa01a0
 8006618:	16c15177 	.word	0x16c15177
 800661c:	3f56c16c 	.word	0x3f56c16c
 8006620:	5555554c 	.word	0x5555554c
 8006624:	3fa55555 	.word	0x3fa55555
 8006628:	00000000 	.word	0x00000000
 800662c:	3ff00000 	.word	0x3ff00000
 8006630:	3fe00000 	.word	0x3fe00000
 8006634:	3fd33332 	.word	0x3fd33332
 8006638:	3ff00000 	.word	0x3ff00000
 800663c:	3fe90000 	.word	0x3fe90000
 8006640:	3fd20000 	.word	0x3fd20000
 8006644:	00000000 	.word	0x00000000

08006648 <__kernel_sin>:
 8006648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	ec55 4b10 	vmov	r4, r5, d0
 8006650:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006654:	b085      	sub	sp, #20
 8006656:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800665a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800665e:	4680      	mov	r8, r0
 8006660:	d205      	bcs.n	800666e <__kernel_sin+0x26>
 8006662:	4620      	mov	r0, r4
 8006664:	4629      	mov	r1, r5
 8006666:	f7fa fa05 	bl	8000a74 <__aeabi_d2iz>
 800666a:	2800      	cmp	r0, #0
 800666c:	d052      	beq.n	8006714 <__kernel_sin+0xcc>
 800666e:	4622      	mov	r2, r4
 8006670:	462b      	mov	r3, r5
 8006672:	4620      	mov	r0, r4
 8006674:	4629      	mov	r1, r5
 8006676:	f7f9 ff63 	bl	8000540 <__aeabi_dmul>
 800667a:	4682      	mov	sl, r0
 800667c:	468b      	mov	fp, r1
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4620      	mov	r0, r4
 8006684:	4629      	mov	r1, r5
 8006686:	f7f9 ff5b 	bl	8000540 <__aeabi_dmul>
 800668a:	a342      	add	r3, pc, #264	@ (adr r3, 8006794 <__kernel_sin+0x14c>)
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	e9cd 0100 	strd	r0, r1, [sp]
 8006694:	4650      	mov	r0, sl
 8006696:	4659      	mov	r1, fp
 8006698:	f7f9 ff52 	bl	8000540 <__aeabi_dmul>
 800669c:	a33f      	add	r3, pc, #252	@ (adr r3, 800679c <__kernel_sin+0x154>)
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	f7f9 fd95 	bl	80001d0 <__aeabi_dsub>
 80066a6:	4652      	mov	r2, sl
 80066a8:	465b      	mov	r3, fp
 80066aa:	f7f9 ff49 	bl	8000540 <__aeabi_dmul>
 80066ae:	a33d      	add	r3, pc, #244	@ (adr r3, 80067a4 <__kernel_sin+0x15c>)
 80066b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b4:	f7f9 fd8e 	bl	80001d4 <__adddf3>
 80066b8:	4652      	mov	r2, sl
 80066ba:	465b      	mov	r3, fp
 80066bc:	f7f9 ff40 	bl	8000540 <__aeabi_dmul>
 80066c0:	a33a      	add	r3, pc, #232	@ (adr r3, 80067ac <__kernel_sin+0x164>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7f9 fd83 	bl	80001d0 <__aeabi_dsub>
 80066ca:	4652      	mov	r2, sl
 80066cc:	465b      	mov	r3, fp
 80066ce:	f7f9 ff37 	bl	8000540 <__aeabi_dmul>
 80066d2:	a338      	add	r3, pc, #224	@ (adr r3, 80067b4 <__kernel_sin+0x16c>)
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f7f9 fd7c 	bl	80001d4 <__adddf3>
 80066dc:	4606      	mov	r6, r0
 80066de:	460f      	mov	r7, r1
 80066e0:	f1b8 0f00 	cmp.w	r8, #0
 80066e4:	d11b      	bne.n	800671e <__kernel_sin+0xd6>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4650      	mov	r0, sl
 80066ec:	4659      	mov	r1, fp
 80066ee:	f7f9 ff27 	bl	8000540 <__aeabi_dmul>
 80066f2:	a325      	add	r3, pc, #148	@ (adr r3, 8006788 <__kernel_sin+0x140>)
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f7f9 fd6a 	bl	80001d0 <__aeabi_dsub>
 80066fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006700:	f7f9 ff1e 	bl	8000540 <__aeabi_dmul>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	4620      	mov	r0, r4
 800670a:	4629      	mov	r1, r5
 800670c:	f7f9 fd62 	bl	80001d4 <__adddf3>
 8006710:	4604      	mov	r4, r0
 8006712:	460d      	mov	r5, r1
 8006714:	ec45 4b10 	vmov	d0, r4, r5
 8006718:	b005      	add	sp, #20
 800671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006722:	4b1b      	ldr	r3, [pc, #108]	@ (8006790 <__kernel_sin+0x148>)
 8006724:	2200      	movs	r2, #0
 8006726:	f7f9 ff0b 	bl	8000540 <__aeabi_dmul>
 800672a:	4632      	mov	r2, r6
 800672c:	4680      	mov	r8, r0
 800672e:	4689      	mov	r9, r1
 8006730:	463b      	mov	r3, r7
 8006732:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006736:	f7f9 ff03 	bl	8000540 <__aeabi_dmul>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4640      	mov	r0, r8
 8006740:	4649      	mov	r1, r9
 8006742:	f7f9 fd45 	bl	80001d0 <__aeabi_dsub>
 8006746:	4652      	mov	r2, sl
 8006748:	465b      	mov	r3, fp
 800674a:	f7f9 fef9 	bl	8000540 <__aeabi_dmul>
 800674e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006752:	f7f9 fd3d 	bl	80001d0 <__aeabi_dsub>
 8006756:	a30c      	add	r3, pc, #48	@ (adr r3, 8006788 <__kernel_sin+0x140>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	4606      	mov	r6, r0
 800675e:	460f      	mov	r7, r1
 8006760:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006764:	f7f9 feec 	bl	8000540 <__aeabi_dmul>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4630      	mov	r0, r6
 800676e:	4639      	mov	r1, r7
 8006770:	f7f9 fd30 	bl	80001d4 <__adddf3>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4620      	mov	r0, r4
 800677a:	4629      	mov	r1, r5
 800677c:	f7f9 fd28 	bl	80001d0 <__aeabi_dsub>
 8006780:	e7c6      	b.n	8006710 <__kernel_sin+0xc8>
 8006782:	bf00      	nop
 8006784:	f3af 8000 	nop.w
 8006788:	55555549 	.word	0x55555549
 800678c:	3fc55555 	.word	0x3fc55555
 8006790:	3fe00000 	.word	0x3fe00000
 8006794:	5acfd57c 	.word	0x5acfd57c
 8006798:	3de5d93a 	.word	0x3de5d93a
 800679c:	8a2b9ceb 	.word	0x8a2b9ceb
 80067a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80067a4:	57b1fe7d 	.word	0x57b1fe7d
 80067a8:	3ec71de3 	.word	0x3ec71de3
 80067ac:	19c161d5 	.word	0x19c161d5
 80067b0:	3f2a01a0 	.word	0x3f2a01a0
 80067b4:	1110f8a6 	.word	0x1110f8a6
 80067b8:	3f811111 	.word	0x3f811111
 80067bc:	00000000 	.word	0x00000000

080067c0 <__ieee754_rem_pio2>:
 80067c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c4:	ec57 6b10 	vmov	r6, r7, d0
 80067c8:	4bc5      	ldr	r3, [pc, #788]	@ (8006ae0 <__ieee754_rem_pio2+0x320>)
 80067ca:	b08d      	sub	sp, #52	@ 0x34
 80067cc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80067d0:	4598      	cmp	r8, r3
 80067d2:	4604      	mov	r4, r0
 80067d4:	9704      	str	r7, [sp, #16]
 80067d6:	d807      	bhi.n	80067e8 <__ieee754_rem_pio2+0x28>
 80067d8:	2200      	movs	r2, #0
 80067da:	2300      	movs	r3, #0
 80067dc:	ed80 0b00 	vstr	d0, [r0]
 80067e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80067e4:	2500      	movs	r5, #0
 80067e6:	e028      	b.n	800683a <__ieee754_rem_pio2+0x7a>
 80067e8:	4bbe      	ldr	r3, [pc, #760]	@ (8006ae4 <__ieee754_rem_pio2+0x324>)
 80067ea:	4598      	cmp	r8, r3
 80067ec:	d878      	bhi.n	80068e0 <__ieee754_rem_pio2+0x120>
 80067ee:	9b04      	ldr	r3, [sp, #16]
 80067f0:	4dbd      	ldr	r5, [pc, #756]	@ (8006ae8 <__ieee754_rem_pio2+0x328>)
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	4630      	mov	r0, r6
 80067f6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006aa8 <__ieee754_rem_pio2+0x2e8>)
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	4639      	mov	r1, r7
 80067fe:	dd38      	ble.n	8006872 <__ieee754_rem_pio2+0xb2>
 8006800:	f7f9 fce6 	bl	80001d0 <__aeabi_dsub>
 8006804:	45a8      	cmp	r8, r5
 8006806:	4606      	mov	r6, r0
 8006808:	460f      	mov	r7, r1
 800680a:	d01a      	beq.n	8006842 <__ieee754_rem_pio2+0x82>
 800680c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006ab0 <__ieee754_rem_pio2+0x2f0>)
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	f7f9 fcdd 	bl	80001d0 <__aeabi_dsub>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	4680      	mov	r8, r0
 800681c:	4689      	mov	r9, r1
 800681e:	4630      	mov	r0, r6
 8006820:	4639      	mov	r1, r7
 8006822:	f7f9 fcd5 	bl	80001d0 <__aeabi_dsub>
 8006826:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006ab0 <__ieee754_rem_pio2+0x2f0>)
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f7f9 fcd0 	bl	80001d0 <__aeabi_dsub>
 8006830:	e9c4 8900 	strd	r8, r9, [r4]
 8006834:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006838:	2501      	movs	r5, #1
 800683a:	4628      	mov	r0, r5
 800683c:	b00d      	add	sp, #52	@ 0x34
 800683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006842:	a39d      	add	r3, pc, #628	@ (adr r3, 8006ab8 <__ieee754_rem_pio2+0x2f8>)
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	f7f9 fcc2 	bl	80001d0 <__aeabi_dsub>
 800684c:	a39c      	add	r3, pc, #624	@ (adr r3, 8006ac0 <__ieee754_rem_pio2+0x300>)
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	4606      	mov	r6, r0
 8006854:	460f      	mov	r7, r1
 8006856:	f7f9 fcbb 	bl	80001d0 <__aeabi_dsub>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	4680      	mov	r8, r0
 8006860:	4689      	mov	r9, r1
 8006862:	4630      	mov	r0, r6
 8006864:	4639      	mov	r1, r7
 8006866:	f7f9 fcb3 	bl	80001d0 <__aeabi_dsub>
 800686a:	a395      	add	r3, pc, #596	@ (adr r3, 8006ac0 <__ieee754_rem_pio2+0x300>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	e7dc      	b.n	800682c <__ieee754_rem_pio2+0x6c>
 8006872:	f7f9 fcaf 	bl	80001d4 <__adddf3>
 8006876:	45a8      	cmp	r8, r5
 8006878:	4606      	mov	r6, r0
 800687a:	460f      	mov	r7, r1
 800687c:	d018      	beq.n	80068b0 <__ieee754_rem_pio2+0xf0>
 800687e:	a38c      	add	r3, pc, #560	@ (adr r3, 8006ab0 <__ieee754_rem_pio2+0x2f0>)
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f7f9 fca6 	bl	80001d4 <__adddf3>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	4680      	mov	r8, r0
 800688e:	4689      	mov	r9, r1
 8006890:	4630      	mov	r0, r6
 8006892:	4639      	mov	r1, r7
 8006894:	f7f9 fc9c 	bl	80001d0 <__aeabi_dsub>
 8006898:	a385      	add	r3, pc, #532	@ (adr r3, 8006ab0 <__ieee754_rem_pio2+0x2f0>)
 800689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689e:	f7f9 fc99 	bl	80001d4 <__adddf3>
 80068a2:	f04f 35ff 	mov.w	r5, #4294967295
 80068a6:	e9c4 8900 	strd	r8, r9, [r4]
 80068aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80068ae:	e7c4      	b.n	800683a <__ieee754_rem_pio2+0x7a>
 80068b0:	a381      	add	r3, pc, #516	@ (adr r3, 8006ab8 <__ieee754_rem_pio2+0x2f8>)
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f7f9 fc8d 	bl	80001d4 <__adddf3>
 80068ba:	a381      	add	r3, pc, #516	@ (adr r3, 8006ac0 <__ieee754_rem_pio2+0x300>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	4606      	mov	r6, r0
 80068c2:	460f      	mov	r7, r1
 80068c4:	f7f9 fc86 	bl	80001d4 <__adddf3>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4680      	mov	r8, r0
 80068ce:	4689      	mov	r9, r1
 80068d0:	4630      	mov	r0, r6
 80068d2:	4639      	mov	r1, r7
 80068d4:	f7f9 fc7c 	bl	80001d0 <__aeabi_dsub>
 80068d8:	a379      	add	r3, pc, #484	@ (adr r3, 8006ac0 <__ieee754_rem_pio2+0x300>)
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	e7de      	b.n	800689e <__ieee754_rem_pio2+0xde>
 80068e0:	4b82      	ldr	r3, [pc, #520]	@ (8006aec <__ieee754_rem_pio2+0x32c>)
 80068e2:	4598      	cmp	r8, r3
 80068e4:	f200 80d1 	bhi.w	8006a8a <__ieee754_rem_pio2+0x2ca>
 80068e8:	f000 f966 	bl	8006bb8 <fabs>
 80068ec:	ec57 6b10 	vmov	r6, r7, d0
 80068f0:	a375      	add	r3, pc, #468	@ (adr r3, 8006ac8 <__ieee754_rem_pio2+0x308>)
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	4630      	mov	r0, r6
 80068f8:	4639      	mov	r1, r7
 80068fa:	f7f9 fe21 	bl	8000540 <__aeabi_dmul>
 80068fe:	4b7c      	ldr	r3, [pc, #496]	@ (8006af0 <__ieee754_rem_pio2+0x330>)
 8006900:	2200      	movs	r2, #0
 8006902:	f7f9 fc67 	bl	80001d4 <__adddf3>
 8006906:	f7fa f8b5 	bl	8000a74 <__aeabi_d2iz>
 800690a:	4605      	mov	r5, r0
 800690c:	f7f9 fdae 	bl	800046c <__aeabi_i2d>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006918:	a363      	add	r3, pc, #396	@ (adr r3, 8006aa8 <__ieee754_rem_pio2+0x2e8>)
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	f7f9 fe0f 	bl	8000540 <__aeabi_dmul>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4630      	mov	r0, r6
 8006928:	4639      	mov	r1, r7
 800692a:	f7f9 fc51 	bl	80001d0 <__aeabi_dsub>
 800692e:	a360      	add	r3, pc, #384	@ (adr r3, 8006ab0 <__ieee754_rem_pio2+0x2f0>)
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	4682      	mov	sl, r0
 8006936:	468b      	mov	fp, r1
 8006938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800693c:	f7f9 fe00 	bl	8000540 <__aeabi_dmul>
 8006940:	2d1f      	cmp	r5, #31
 8006942:	4606      	mov	r6, r0
 8006944:	460f      	mov	r7, r1
 8006946:	dc0c      	bgt.n	8006962 <__ieee754_rem_pio2+0x1a2>
 8006948:	4b6a      	ldr	r3, [pc, #424]	@ (8006af4 <__ieee754_rem_pio2+0x334>)
 800694a:	1e6a      	subs	r2, r5, #1
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	4543      	cmp	r3, r8
 8006952:	d006      	beq.n	8006962 <__ieee754_rem_pio2+0x1a2>
 8006954:	4632      	mov	r2, r6
 8006956:	463b      	mov	r3, r7
 8006958:	4650      	mov	r0, sl
 800695a:	4659      	mov	r1, fp
 800695c:	f7f9 fc38 	bl	80001d0 <__aeabi_dsub>
 8006960:	e00e      	b.n	8006980 <__ieee754_rem_pio2+0x1c0>
 8006962:	463b      	mov	r3, r7
 8006964:	4632      	mov	r2, r6
 8006966:	4650      	mov	r0, sl
 8006968:	4659      	mov	r1, fp
 800696a:	f7f9 fc31 	bl	80001d0 <__aeabi_dsub>
 800696e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006972:	9305      	str	r3, [sp, #20]
 8006974:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006978:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800697c:	2b10      	cmp	r3, #16
 800697e:	dc02      	bgt.n	8006986 <__ieee754_rem_pio2+0x1c6>
 8006980:	e9c4 0100 	strd	r0, r1, [r4]
 8006984:	e039      	b.n	80069fa <__ieee754_rem_pio2+0x23a>
 8006986:	a34c      	add	r3, pc, #304	@ (adr r3, 8006ab8 <__ieee754_rem_pio2+0x2f8>)
 8006988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006990:	f7f9 fdd6 	bl	8000540 <__aeabi_dmul>
 8006994:	4606      	mov	r6, r0
 8006996:	460f      	mov	r7, r1
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4650      	mov	r0, sl
 800699e:	4659      	mov	r1, fp
 80069a0:	f7f9 fc16 	bl	80001d0 <__aeabi_dsub>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4680      	mov	r8, r0
 80069aa:	4689      	mov	r9, r1
 80069ac:	4650      	mov	r0, sl
 80069ae:	4659      	mov	r1, fp
 80069b0:	f7f9 fc0e 	bl	80001d0 <__aeabi_dsub>
 80069b4:	4632      	mov	r2, r6
 80069b6:	463b      	mov	r3, r7
 80069b8:	f7f9 fc0a 	bl	80001d0 <__aeabi_dsub>
 80069bc:	a340      	add	r3, pc, #256	@ (adr r3, 8006ac0 <__ieee754_rem_pio2+0x300>)
 80069be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c2:	4606      	mov	r6, r0
 80069c4:	460f      	mov	r7, r1
 80069c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ca:	f7f9 fdb9 	bl	8000540 <__aeabi_dmul>
 80069ce:	4632      	mov	r2, r6
 80069d0:	463b      	mov	r3, r7
 80069d2:	f7f9 fbfd 	bl	80001d0 <__aeabi_dsub>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4606      	mov	r6, r0
 80069dc:	460f      	mov	r7, r1
 80069de:	4640      	mov	r0, r8
 80069e0:	4649      	mov	r1, r9
 80069e2:	f7f9 fbf5 	bl	80001d0 <__aeabi_dsub>
 80069e6:	9a05      	ldr	r2, [sp, #20]
 80069e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b31      	cmp	r3, #49	@ 0x31
 80069f0:	dc20      	bgt.n	8006a34 <__ieee754_rem_pio2+0x274>
 80069f2:	e9c4 0100 	strd	r0, r1, [r4]
 80069f6:	46c2      	mov	sl, r8
 80069f8:	46cb      	mov	fp, r9
 80069fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80069fe:	4650      	mov	r0, sl
 8006a00:	4642      	mov	r2, r8
 8006a02:	464b      	mov	r3, r9
 8006a04:	4659      	mov	r1, fp
 8006a06:	f7f9 fbe3 	bl	80001d0 <__aeabi_dsub>
 8006a0a:	463b      	mov	r3, r7
 8006a0c:	4632      	mov	r2, r6
 8006a0e:	f7f9 fbdf 	bl	80001d0 <__aeabi_dsub>
 8006a12:	9b04      	ldr	r3, [sp, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a1a:	f6bf af0e 	bge.w	800683a <__ieee754_rem_pio2+0x7a>
 8006a1e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006a22:	6063      	str	r3, [r4, #4]
 8006a24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a28:	f8c4 8000 	str.w	r8, [r4]
 8006a2c:	60a0      	str	r0, [r4, #8]
 8006a2e:	60e3      	str	r3, [r4, #12]
 8006a30:	426d      	negs	r5, r5
 8006a32:	e702      	b.n	800683a <__ieee754_rem_pio2+0x7a>
 8006a34:	a326      	add	r3, pc, #152	@ (adr r3, 8006ad0 <__ieee754_rem_pio2+0x310>)
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a3e:	f7f9 fd7f 	bl	8000540 <__aeabi_dmul>
 8006a42:	4606      	mov	r6, r0
 8006a44:	460f      	mov	r7, r1
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	f7f9 fbbf 	bl	80001d0 <__aeabi_dsub>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4682      	mov	sl, r0
 8006a58:	468b      	mov	fp, r1
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	f7f9 fbb7 	bl	80001d0 <__aeabi_dsub>
 8006a62:	4632      	mov	r2, r6
 8006a64:	463b      	mov	r3, r7
 8006a66:	f7f9 fbb3 	bl	80001d0 <__aeabi_dsub>
 8006a6a:	a31b      	add	r3, pc, #108	@ (adr r3, 8006ad8 <__ieee754_rem_pio2+0x318>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	4606      	mov	r6, r0
 8006a72:	460f      	mov	r7, r1
 8006a74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a78:	f7f9 fd62 	bl	8000540 <__aeabi_dmul>
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	463b      	mov	r3, r7
 8006a80:	f7f9 fba6 	bl	80001d0 <__aeabi_dsub>
 8006a84:	4606      	mov	r6, r0
 8006a86:	460f      	mov	r7, r1
 8006a88:	e764      	b.n	8006954 <__ieee754_rem_pio2+0x194>
 8006a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006af8 <__ieee754_rem_pio2+0x338>)
 8006a8c:	4598      	cmp	r8, r3
 8006a8e:	d935      	bls.n	8006afc <__ieee754_rem_pio2+0x33c>
 8006a90:	4632      	mov	r2, r6
 8006a92:	463b      	mov	r3, r7
 8006a94:	4630      	mov	r0, r6
 8006a96:	4639      	mov	r1, r7
 8006a98:	f7f9 fb9a 	bl	80001d0 <__aeabi_dsub>
 8006a9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006aa0:	e9c4 0100 	strd	r0, r1, [r4]
 8006aa4:	e69e      	b.n	80067e4 <__ieee754_rem_pio2+0x24>
 8006aa6:	bf00      	nop
 8006aa8:	54400000 	.word	0x54400000
 8006aac:	3ff921fb 	.word	0x3ff921fb
 8006ab0:	1a626331 	.word	0x1a626331
 8006ab4:	3dd0b461 	.word	0x3dd0b461
 8006ab8:	1a600000 	.word	0x1a600000
 8006abc:	3dd0b461 	.word	0x3dd0b461
 8006ac0:	2e037073 	.word	0x2e037073
 8006ac4:	3ba3198a 	.word	0x3ba3198a
 8006ac8:	6dc9c883 	.word	0x6dc9c883
 8006acc:	3fe45f30 	.word	0x3fe45f30
 8006ad0:	2e000000 	.word	0x2e000000
 8006ad4:	3ba3198a 	.word	0x3ba3198a
 8006ad8:	252049c1 	.word	0x252049c1
 8006adc:	397b839a 	.word	0x397b839a
 8006ae0:	3fe921fb 	.word	0x3fe921fb
 8006ae4:	4002d97b 	.word	0x4002d97b
 8006ae8:	3ff921fb 	.word	0x3ff921fb
 8006aec:	413921fb 	.word	0x413921fb
 8006af0:	3fe00000 	.word	0x3fe00000
 8006af4:	080074a0 	.word	0x080074a0
 8006af8:	7fefffff 	.word	0x7fefffff
 8006afc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006b00:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8006b04:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006b08:	4630      	mov	r0, r6
 8006b0a:	460f      	mov	r7, r1
 8006b0c:	f7f9 ffb2 	bl	8000a74 <__aeabi_d2iz>
 8006b10:	f7f9 fcac 	bl	800046c <__aeabi_i2d>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4630      	mov	r0, r6
 8006b1a:	4639      	mov	r1, r7
 8006b1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b20:	f7f9 fb56 	bl	80001d0 <__aeabi_dsub>
 8006b24:	4b22      	ldr	r3, [pc, #136]	@ (8006bb0 <__ieee754_rem_pio2+0x3f0>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	f7f9 fd0a 	bl	8000540 <__aeabi_dmul>
 8006b2c:	460f      	mov	r7, r1
 8006b2e:	4606      	mov	r6, r0
 8006b30:	f7f9 ffa0 	bl	8000a74 <__aeabi_d2iz>
 8006b34:	f7f9 fc9a 	bl	800046c <__aeabi_i2d>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	4639      	mov	r1, r7
 8006b40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006b44:	f7f9 fb44 	bl	80001d0 <__aeabi_dsub>
 8006b48:	4b19      	ldr	r3, [pc, #100]	@ (8006bb0 <__ieee754_rem_pio2+0x3f0>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f7f9 fcf8 	bl	8000540 <__aeabi_dmul>
 8006b50:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006b54:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006b58:	f04f 0803 	mov.w	r8, #3
 8006b5c:	2600      	movs	r6, #0
 8006b5e:	2700      	movs	r7, #0
 8006b60:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006b64:	4632      	mov	r2, r6
 8006b66:	463b      	mov	r3, r7
 8006b68:	46c2      	mov	sl, r8
 8006b6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b6e:	f7f9 ff4f 	bl	8000a10 <__aeabi_dcmpeq>
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d1f4      	bne.n	8006b60 <__ieee754_rem_pio2+0x3a0>
 8006b76:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb4 <__ieee754_rem_pio2+0x3f4>)
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	462a      	mov	r2, r5
 8006b80:	4653      	mov	r3, sl
 8006b82:	4621      	mov	r1, r4
 8006b84:	a806      	add	r0, sp, #24
 8006b86:	f000 f81f 	bl	8006bc8 <__kernel_rem_pio2>
 8006b8a:	9b04      	ldr	r3, [sp, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	4605      	mov	r5, r0
 8006b90:	f6bf ae53 	bge.w	800683a <__ieee754_rem_pio2+0x7a>
 8006b94:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006b98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006b9c:	e9c4 2300 	strd	r2, r3, [r4]
 8006ba0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006ba4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006ba8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006bac:	e740      	b.n	8006a30 <__ieee754_rem_pio2+0x270>
 8006bae:	bf00      	nop
 8006bb0:	41700000 	.word	0x41700000
 8006bb4:	08007520 	.word	0x08007520

08006bb8 <fabs>:
 8006bb8:	ec51 0b10 	vmov	r0, r1, d0
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006bc2:	ec43 2b10 	vmov	d0, r2, r3
 8006bc6:	4770      	bx	lr

08006bc8 <__kernel_rem_pio2>:
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	ed2d 8b02 	vpush	{d8}
 8006bd0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006bd4:	f112 0f14 	cmn.w	r2, #20
 8006bd8:	9306      	str	r3, [sp, #24]
 8006bda:	9104      	str	r1, [sp, #16]
 8006bdc:	4bbe      	ldr	r3, [pc, #760]	@ (8006ed8 <__kernel_rem_pio2+0x310>)
 8006bde:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006be0:	9008      	str	r0, [sp, #32]
 8006be2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	9b06      	ldr	r3, [sp, #24]
 8006bea:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bee:	bfa8      	it	ge
 8006bf0:	1ed4      	subge	r4, r2, #3
 8006bf2:	9305      	str	r3, [sp, #20]
 8006bf4:	bfb2      	itee	lt
 8006bf6:	2400      	movlt	r4, #0
 8006bf8:	2318      	movge	r3, #24
 8006bfa:	fb94 f4f3 	sdivge	r4, r4, r3
 8006bfe:	f06f 0317 	mvn.w	r3, #23
 8006c02:	fb04 3303 	mla	r3, r4, r3, r3
 8006c06:	eb03 0b02 	add.w	fp, r3, r2
 8006c0a:	9b00      	ldr	r3, [sp, #0]
 8006c0c:	9a05      	ldr	r2, [sp, #20]
 8006c0e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006ec8 <__kernel_rem_pio2+0x300>
 8006c12:	eb03 0802 	add.w	r8, r3, r2
 8006c16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006c18:	1aa7      	subs	r7, r4, r2
 8006c1a:	ae20      	add	r6, sp, #128	@ 0x80
 8006c1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006c20:	2500      	movs	r5, #0
 8006c22:	4545      	cmp	r5, r8
 8006c24:	dd13      	ble.n	8006c4e <__kernel_rem_pio2+0x86>
 8006c26:	9b06      	ldr	r3, [sp, #24]
 8006c28:	aa20      	add	r2, sp, #128	@ 0x80
 8006c2a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006c2e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006c32:	f04f 0800 	mov.w	r8, #0
 8006c36:	9b00      	ldr	r3, [sp, #0]
 8006c38:	4598      	cmp	r8, r3
 8006c3a:	dc31      	bgt.n	8006ca0 <__kernel_rem_pio2+0xd8>
 8006c3c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006ec8 <__kernel_rem_pio2+0x300>
 8006c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c48:	462f      	mov	r7, r5
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	e01b      	b.n	8006c86 <__kernel_rem_pio2+0xbe>
 8006c4e:	42ef      	cmn	r7, r5
 8006c50:	d407      	bmi.n	8006c62 <__kernel_rem_pio2+0x9a>
 8006c52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006c56:	f7f9 fc09 	bl	800046c <__aeabi_i2d>
 8006c5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c5e:	3501      	adds	r5, #1
 8006c60:	e7df      	b.n	8006c22 <__kernel_rem_pio2+0x5a>
 8006c62:	ec51 0b18 	vmov	r0, r1, d8
 8006c66:	e7f8      	b.n	8006c5a <__kernel_rem_pio2+0x92>
 8006c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006c70:	f7f9 fc66 	bl	8000540 <__aeabi_dmul>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c7c:	f7f9 faaa 	bl	80001d4 <__adddf3>
 8006c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c84:	3601      	adds	r6, #1
 8006c86:	9b05      	ldr	r3, [sp, #20]
 8006c88:	429e      	cmp	r6, r3
 8006c8a:	f1a7 0708 	sub.w	r7, r7, #8
 8006c8e:	ddeb      	ble.n	8006c68 <__kernel_rem_pio2+0xa0>
 8006c90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c94:	f108 0801 	add.w	r8, r8, #1
 8006c98:	ecaa 7b02 	vstmia	sl!, {d7}
 8006c9c:	3508      	adds	r5, #8
 8006c9e:	e7ca      	b.n	8006c36 <__kernel_rem_pio2+0x6e>
 8006ca0:	9b00      	ldr	r3, [sp, #0]
 8006ca2:	f8dd 8000 	ldr.w	r8, [sp]
 8006ca6:	aa0c      	add	r2, sp, #48	@ 0x30
 8006ca8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006cac:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006cb0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cb6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006cba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cbc:	ab98      	add	r3, sp, #608	@ 0x260
 8006cbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006cc2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006cc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006cca:	ac0c      	add	r4, sp, #48	@ 0x30
 8006ccc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006cce:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006cd2:	46a1      	mov	r9, r4
 8006cd4:	46c2      	mov	sl, r8
 8006cd6:	f1ba 0f00 	cmp.w	sl, #0
 8006cda:	f1a5 0508 	sub.w	r5, r5, #8
 8006cde:	dc77      	bgt.n	8006dd0 <__kernel_rem_pio2+0x208>
 8006ce0:	4658      	mov	r0, fp
 8006ce2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006ce6:	f000 fac7 	bl	8007278 <scalbn>
 8006cea:	ec57 6b10 	vmov	r6, r7, d0
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	4639      	mov	r1, r7
 8006cf8:	f7f9 fc22 	bl	8000540 <__aeabi_dmul>
 8006cfc:	ec41 0b10 	vmov	d0, r0, r1
 8006d00:	f000 fb3a 	bl	8007378 <floor>
 8006d04:	4b75      	ldr	r3, [pc, #468]	@ (8006edc <__kernel_rem_pio2+0x314>)
 8006d06:	ec51 0b10 	vmov	r0, r1, d0
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f7f9 fc18 	bl	8000540 <__aeabi_dmul>
 8006d10:	4602      	mov	r2, r0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4630      	mov	r0, r6
 8006d16:	4639      	mov	r1, r7
 8006d18:	f7f9 fa5a 	bl	80001d0 <__aeabi_dsub>
 8006d1c:	460f      	mov	r7, r1
 8006d1e:	4606      	mov	r6, r0
 8006d20:	f7f9 fea8 	bl	8000a74 <__aeabi_d2iz>
 8006d24:	9002      	str	r0, [sp, #8]
 8006d26:	f7f9 fba1 	bl	800046c <__aeabi_i2d>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4630      	mov	r0, r6
 8006d30:	4639      	mov	r1, r7
 8006d32:	f7f9 fa4d 	bl	80001d0 <__aeabi_dsub>
 8006d36:	f1bb 0f00 	cmp.w	fp, #0
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	460f      	mov	r7, r1
 8006d3e:	dd6c      	ble.n	8006e1a <__kernel_rem_pio2+0x252>
 8006d40:	f108 31ff 	add.w	r1, r8, #4294967295
 8006d44:	ab0c      	add	r3, sp, #48	@ 0x30
 8006d46:	9d02      	ldr	r5, [sp, #8]
 8006d48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d4c:	f1cb 0018 	rsb	r0, fp, #24
 8006d50:	fa43 f200 	asr.w	r2, r3, r0
 8006d54:	4415      	add	r5, r2
 8006d56:	4082      	lsls	r2, r0
 8006d58:	1a9b      	subs	r3, r3, r2
 8006d5a:	aa0c      	add	r2, sp, #48	@ 0x30
 8006d5c:	9502      	str	r5, [sp, #8]
 8006d5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006d62:	f1cb 0217 	rsb	r2, fp, #23
 8006d66:	fa43 f902 	asr.w	r9, r3, r2
 8006d6a:	f1b9 0f00 	cmp.w	r9, #0
 8006d6e:	dd64      	ble.n	8006e3a <__kernel_rem_pio2+0x272>
 8006d70:	9b02      	ldr	r3, [sp, #8]
 8006d72:	2200      	movs	r2, #0
 8006d74:	3301      	adds	r3, #1
 8006d76:	9302      	str	r3, [sp, #8]
 8006d78:	4615      	mov	r5, r2
 8006d7a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006d7e:	4590      	cmp	r8, r2
 8006d80:	f300 80b8 	bgt.w	8006ef4 <__kernel_rem_pio2+0x32c>
 8006d84:	f1bb 0f00 	cmp.w	fp, #0
 8006d88:	dd07      	ble.n	8006d9a <__kernel_rem_pio2+0x1d2>
 8006d8a:	f1bb 0f01 	cmp.w	fp, #1
 8006d8e:	f000 80bf 	beq.w	8006f10 <__kernel_rem_pio2+0x348>
 8006d92:	f1bb 0f02 	cmp.w	fp, #2
 8006d96:	f000 80c6 	beq.w	8006f26 <__kernel_rem_pio2+0x35e>
 8006d9a:	f1b9 0f02 	cmp.w	r9, #2
 8006d9e:	d14c      	bne.n	8006e3a <__kernel_rem_pio2+0x272>
 8006da0:	4632      	mov	r2, r6
 8006da2:	463b      	mov	r3, r7
 8006da4:	494e      	ldr	r1, [pc, #312]	@ (8006ee0 <__kernel_rem_pio2+0x318>)
 8006da6:	2000      	movs	r0, #0
 8006da8:	f7f9 fa12 	bl	80001d0 <__aeabi_dsub>
 8006dac:	4606      	mov	r6, r0
 8006dae:	460f      	mov	r7, r1
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	d042      	beq.n	8006e3a <__kernel_rem_pio2+0x272>
 8006db4:	4658      	mov	r0, fp
 8006db6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006ed0 <__kernel_rem_pio2+0x308>
 8006dba:	f000 fa5d 	bl	8007278 <scalbn>
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	ec53 2b10 	vmov	r2, r3, d0
 8006dc6:	f7f9 fa03 	bl	80001d0 <__aeabi_dsub>
 8006dca:	4606      	mov	r6, r0
 8006dcc:	460f      	mov	r7, r1
 8006dce:	e034      	b.n	8006e3a <__kernel_rem_pio2+0x272>
 8006dd0:	4b44      	ldr	r3, [pc, #272]	@ (8006ee4 <__kernel_rem_pio2+0x31c>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dd8:	f7f9 fbb2 	bl	8000540 <__aeabi_dmul>
 8006ddc:	f7f9 fe4a 	bl	8000a74 <__aeabi_d2iz>
 8006de0:	f7f9 fb44 	bl	800046c <__aeabi_i2d>
 8006de4:	4b40      	ldr	r3, [pc, #256]	@ (8006ee8 <__kernel_rem_pio2+0x320>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	4606      	mov	r6, r0
 8006dea:	460f      	mov	r7, r1
 8006dec:	f7f9 fba8 	bl	8000540 <__aeabi_dmul>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006df8:	f7f9 f9ea 	bl	80001d0 <__aeabi_dsub>
 8006dfc:	f7f9 fe3a 	bl	8000a74 <__aeabi_d2iz>
 8006e00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e04:	f849 0b04 	str.w	r0, [r9], #4
 8006e08:	4639      	mov	r1, r7
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f7f9 f9e2 	bl	80001d4 <__adddf3>
 8006e10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e18:	e75d      	b.n	8006cd6 <__kernel_rem_pio2+0x10e>
 8006e1a:	d107      	bne.n	8006e2c <__kernel_rem_pio2+0x264>
 8006e1c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006e20:	aa0c      	add	r2, sp, #48	@ 0x30
 8006e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e26:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006e2a:	e79e      	b.n	8006d6a <__kernel_rem_pio2+0x1a2>
 8006e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8006eec <__kernel_rem_pio2+0x324>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f7f9 fe0c 	bl	8000a4c <__aeabi_dcmpge>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d143      	bne.n	8006ec0 <__kernel_rem_pio2+0x2f8>
 8006e38:	4681      	mov	r9, r0
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	4630      	mov	r0, r6
 8006e40:	4639      	mov	r1, r7
 8006e42:	f7f9 fde5 	bl	8000a10 <__aeabi_dcmpeq>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	f000 80bf 	beq.w	8006fca <__kernel_rem_pio2+0x402>
 8006e4c:	f108 33ff 	add.w	r3, r8, #4294967295
 8006e50:	2200      	movs	r2, #0
 8006e52:	9900      	ldr	r1, [sp, #0]
 8006e54:	428b      	cmp	r3, r1
 8006e56:	da6e      	bge.n	8006f36 <__kernel_rem_pio2+0x36e>
 8006e58:	2a00      	cmp	r2, #0
 8006e5a:	f000 8089 	beq.w	8006f70 <__kernel_rem_pio2+0x3a8>
 8006e5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e62:	ab0c      	add	r3, sp, #48	@ 0x30
 8006e64:	f1ab 0b18 	sub.w	fp, fp, #24
 8006e68:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0f6      	beq.n	8006e5e <__kernel_rem_pio2+0x296>
 8006e70:	4658      	mov	r0, fp
 8006e72:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006ed0 <__kernel_rem_pio2+0x308>
 8006e76:	f000 f9ff 	bl	8007278 <scalbn>
 8006e7a:	f108 0301 	add.w	r3, r8, #1
 8006e7e:	00da      	lsls	r2, r3, #3
 8006e80:	9205      	str	r2, [sp, #20]
 8006e82:	ec55 4b10 	vmov	r4, r5, d0
 8006e86:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006e88:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006ee4 <__kernel_rem_pio2+0x31c>
 8006e8c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006e90:	4646      	mov	r6, r8
 8006e92:	f04f 0a00 	mov.w	sl, #0
 8006e96:	2e00      	cmp	r6, #0
 8006e98:	f280 80cf 	bge.w	800703a <__kernel_rem_pio2+0x472>
 8006e9c:	4644      	mov	r4, r8
 8006e9e:	2c00      	cmp	r4, #0
 8006ea0:	f2c0 80fd 	blt.w	800709e <__kernel_rem_pio2+0x4d6>
 8006ea4:	4b12      	ldr	r3, [pc, #72]	@ (8006ef0 <__kernel_rem_pio2+0x328>)
 8006ea6:	461f      	mov	r7, r3
 8006ea8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006eaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006eae:	9306      	str	r3, [sp, #24]
 8006eb0:	f04f 0a00 	mov.w	sl, #0
 8006eb4:	f04f 0b00 	mov.w	fp, #0
 8006eb8:	2600      	movs	r6, #0
 8006eba:	eba8 0504 	sub.w	r5, r8, r4
 8006ebe:	e0e2      	b.n	8007086 <__kernel_rem_pio2+0x4be>
 8006ec0:	f04f 0902 	mov.w	r9, #2
 8006ec4:	e754      	b.n	8006d70 <__kernel_rem_pio2+0x1a8>
 8006ec6:	bf00      	nop
	...
 8006ed4:	3ff00000 	.word	0x3ff00000
 8006ed8:	08007668 	.word	0x08007668
 8006edc:	40200000 	.word	0x40200000
 8006ee0:	3ff00000 	.word	0x3ff00000
 8006ee4:	3e700000 	.word	0x3e700000
 8006ee8:	41700000 	.word	0x41700000
 8006eec:	3fe00000 	.word	0x3fe00000
 8006ef0:	08007628 	.word	0x08007628
 8006ef4:	f854 3b04 	ldr.w	r3, [r4], #4
 8006ef8:	b945      	cbnz	r5, 8006f0c <__kernel_rem_pio2+0x344>
 8006efa:	b123      	cbz	r3, 8006f06 <__kernel_rem_pio2+0x33e>
 8006efc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006f00:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f04:	2301      	movs	r3, #1
 8006f06:	3201      	adds	r2, #1
 8006f08:	461d      	mov	r5, r3
 8006f0a:	e738      	b.n	8006d7e <__kernel_rem_pio2+0x1b6>
 8006f0c:	1acb      	subs	r3, r1, r3
 8006f0e:	e7f7      	b.n	8006f00 <__kernel_rem_pio2+0x338>
 8006f10:	f108 32ff 	add.w	r2, r8, #4294967295
 8006f14:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006f1e:	a90c      	add	r1, sp, #48	@ 0x30
 8006f20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006f24:	e739      	b.n	8006d9a <__kernel_rem_pio2+0x1d2>
 8006f26:	f108 32ff 	add.w	r2, r8, #4294967295
 8006f2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006f34:	e7f3      	b.n	8006f1e <__kernel_rem_pio2+0x356>
 8006f36:	a90c      	add	r1, sp, #48	@ 0x30
 8006f38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	e787      	b.n	8006e52 <__kernel_rem_pio2+0x28a>
 8006f42:	3401      	adds	r4, #1
 8006f44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f48:	2a00      	cmp	r2, #0
 8006f4a:	d0fa      	beq.n	8006f42 <__kernel_rem_pio2+0x37a>
 8006f4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f4e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006f52:	eb0d 0503 	add.w	r5, sp, r3
 8006f56:	9b06      	ldr	r3, [sp, #24]
 8006f58:	aa20      	add	r2, sp, #128	@ 0x80
 8006f5a:	4443      	add	r3, r8
 8006f5c:	f108 0701 	add.w	r7, r8, #1
 8006f60:	3d98      	subs	r5, #152	@ 0x98
 8006f62:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006f66:	4444      	add	r4, r8
 8006f68:	42bc      	cmp	r4, r7
 8006f6a:	da04      	bge.n	8006f76 <__kernel_rem_pio2+0x3ae>
 8006f6c:	46a0      	mov	r8, r4
 8006f6e:	e6a2      	b.n	8006cb6 <__kernel_rem_pio2+0xee>
 8006f70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f72:	2401      	movs	r4, #1
 8006f74:	e7e6      	b.n	8006f44 <__kernel_rem_pio2+0x37c>
 8006f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f78:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006f7c:	f7f9 fa76 	bl	800046c <__aeabi_i2d>
 8006f80:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8007248 <__kernel_rem_pio2+0x680>
 8006f84:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006f88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006f8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f90:	46b2      	mov	sl, r6
 8006f92:	f04f 0800 	mov.w	r8, #0
 8006f96:	9b05      	ldr	r3, [sp, #20]
 8006f98:	4598      	cmp	r8, r3
 8006f9a:	dd05      	ble.n	8006fa8 <__kernel_rem_pio2+0x3e0>
 8006f9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006fa0:	3701      	adds	r7, #1
 8006fa2:	eca5 7b02 	vstmia	r5!, {d7}
 8006fa6:	e7df      	b.n	8006f68 <__kernel_rem_pio2+0x3a0>
 8006fa8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006fac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006fb0:	f7f9 fac6 	bl	8000540 <__aeabi_dmul>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fbc:	f7f9 f90a 	bl	80001d4 <__adddf3>
 8006fc0:	f108 0801 	add.w	r8, r8, #1
 8006fc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc8:	e7e5      	b.n	8006f96 <__kernel_rem_pio2+0x3ce>
 8006fca:	f1cb 0000 	rsb	r0, fp, #0
 8006fce:	ec47 6b10 	vmov	d0, r6, r7
 8006fd2:	f000 f951 	bl	8007278 <scalbn>
 8006fd6:	ec55 4b10 	vmov	r4, r5, d0
 8006fda:	4b9d      	ldr	r3, [pc, #628]	@ (8007250 <__kernel_rem_pio2+0x688>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	4620      	mov	r0, r4
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	f7f9 fd33 	bl	8000a4c <__aeabi_dcmpge>
 8006fe6:	b300      	cbz	r0, 800702a <__kernel_rem_pio2+0x462>
 8006fe8:	4b9a      	ldr	r3, [pc, #616]	@ (8007254 <__kernel_rem_pio2+0x68c>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	4620      	mov	r0, r4
 8006fee:	4629      	mov	r1, r5
 8006ff0:	f7f9 faa6 	bl	8000540 <__aeabi_dmul>
 8006ff4:	f7f9 fd3e 	bl	8000a74 <__aeabi_d2iz>
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	f7f9 fa37 	bl	800046c <__aeabi_i2d>
 8006ffe:	4b94      	ldr	r3, [pc, #592]	@ (8007250 <__kernel_rem_pio2+0x688>)
 8007000:	2200      	movs	r2, #0
 8007002:	f7f9 fa9d 	bl	8000540 <__aeabi_dmul>
 8007006:	460b      	mov	r3, r1
 8007008:	4602      	mov	r2, r0
 800700a:	4629      	mov	r1, r5
 800700c:	4620      	mov	r0, r4
 800700e:	f7f9 f8df 	bl	80001d0 <__aeabi_dsub>
 8007012:	f7f9 fd2f 	bl	8000a74 <__aeabi_d2iz>
 8007016:	ab0c      	add	r3, sp, #48	@ 0x30
 8007018:	f10b 0b18 	add.w	fp, fp, #24
 800701c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007020:	f108 0801 	add.w	r8, r8, #1
 8007024:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007028:	e722      	b.n	8006e70 <__kernel_rem_pio2+0x2a8>
 800702a:	4620      	mov	r0, r4
 800702c:	4629      	mov	r1, r5
 800702e:	f7f9 fd21 	bl	8000a74 <__aeabi_d2iz>
 8007032:	ab0c      	add	r3, sp, #48	@ 0x30
 8007034:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007038:	e71a      	b.n	8006e70 <__kernel_rem_pio2+0x2a8>
 800703a:	ab0c      	add	r3, sp, #48	@ 0x30
 800703c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007040:	f7f9 fa14 	bl	800046c <__aeabi_i2d>
 8007044:	4622      	mov	r2, r4
 8007046:	462b      	mov	r3, r5
 8007048:	f7f9 fa7a 	bl	8000540 <__aeabi_dmul>
 800704c:	4652      	mov	r2, sl
 800704e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007052:	465b      	mov	r3, fp
 8007054:	4620      	mov	r0, r4
 8007056:	4629      	mov	r1, r5
 8007058:	f7f9 fa72 	bl	8000540 <__aeabi_dmul>
 800705c:	3e01      	subs	r6, #1
 800705e:	4604      	mov	r4, r0
 8007060:	460d      	mov	r5, r1
 8007062:	e718      	b.n	8006e96 <__kernel_rem_pio2+0x2ce>
 8007064:	9906      	ldr	r1, [sp, #24]
 8007066:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800706a:	9106      	str	r1, [sp, #24]
 800706c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007070:	f7f9 fa66 	bl	8000540 <__aeabi_dmul>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4650      	mov	r0, sl
 800707a:	4659      	mov	r1, fp
 800707c:	f7f9 f8aa 	bl	80001d4 <__adddf3>
 8007080:	3601      	adds	r6, #1
 8007082:	4682      	mov	sl, r0
 8007084:	468b      	mov	fp, r1
 8007086:	9b00      	ldr	r3, [sp, #0]
 8007088:	429e      	cmp	r6, r3
 800708a:	dc01      	bgt.n	8007090 <__kernel_rem_pio2+0x4c8>
 800708c:	42b5      	cmp	r5, r6
 800708e:	dae9      	bge.n	8007064 <__kernel_rem_pio2+0x49c>
 8007090:	ab48      	add	r3, sp, #288	@ 0x120
 8007092:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007096:	e9c5 ab00 	strd	sl, fp, [r5]
 800709a:	3c01      	subs	r4, #1
 800709c:	e6ff      	b.n	8006e9e <__kernel_rem_pio2+0x2d6>
 800709e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	dc0b      	bgt.n	80070bc <__kernel_rem_pio2+0x4f4>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	dc39      	bgt.n	800711c <__kernel_rem_pio2+0x554>
 80070a8:	d05d      	beq.n	8007166 <__kernel_rem_pio2+0x59e>
 80070aa:	9b02      	ldr	r3, [sp, #8]
 80070ac:	f003 0007 	and.w	r0, r3, #7
 80070b0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80070b4:	ecbd 8b02 	vpop	{d8}
 80070b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070bc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d1f3      	bne.n	80070aa <__kernel_rem_pio2+0x4e2>
 80070c2:	9b05      	ldr	r3, [sp, #20]
 80070c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80070c8:	eb0d 0403 	add.w	r4, sp, r3
 80070cc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80070d0:	4625      	mov	r5, r4
 80070d2:	46c2      	mov	sl, r8
 80070d4:	f1ba 0f00 	cmp.w	sl, #0
 80070d8:	f1a5 0508 	sub.w	r5, r5, #8
 80070dc:	dc6b      	bgt.n	80071b6 <__kernel_rem_pio2+0x5ee>
 80070de:	4645      	mov	r5, r8
 80070e0:	2d01      	cmp	r5, #1
 80070e2:	f1a4 0408 	sub.w	r4, r4, #8
 80070e6:	f300 8087 	bgt.w	80071f8 <__kernel_rem_pio2+0x630>
 80070ea:	9c05      	ldr	r4, [sp, #20]
 80070ec:	ab48      	add	r3, sp, #288	@ 0x120
 80070ee:	441c      	add	r4, r3
 80070f0:	2000      	movs	r0, #0
 80070f2:	2100      	movs	r1, #0
 80070f4:	f1b8 0f01 	cmp.w	r8, #1
 80070f8:	f300 809c 	bgt.w	8007234 <__kernel_rem_pio2+0x66c>
 80070fc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8007100:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8007104:	f1b9 0f00 	cmp.w	r9, #0
 8007108:	f040 80a6 	bne.w	8007258 <__kernel_rem_pio2+0x690>
 800710c:	9b04      	ldr	r3, [sp, #16]
 800710e:	e9c3 7800 	strd	r7, r8, [r3]
 8007112:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007116:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800711a:	e7c6      	b.n	80070aa <__kernel_rem_pio2+0x4e2>
 800711c:	9d05      	ldr	r5, [sp, #20]
 800711e:	ab48      	add	r3, sp, #288	@ 0x120
 8007120:	441d      	add	r5, r3
 8007122:	4644      	mov	r4, r8
 8007124:	2000      	movs	r0, #0
 8007126:	2100      	movs	r1, #0
 8007128:	2c00      	cmp	r4, #0
 800712a:	da35      	bge.n	8007198 <__kernel_rem_pio2+0x5d0>
 800712c:	f1b9 0f00 	cmp.w	r9, #0
 8007130:	d038      	beq.n	80071a4 <__kernel_rem_pio2+0x5dc>
 8007132:	4602      	mov	r2, r0
 8007134:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007138:	9c04      	ldr	r4, [sp, #16]
 800713a:	e9c4 2300 	strd	r2, r3, [r4]
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8007146:	f7f9 f843 	bl	80001d0 <__aeabi_dsub>
 800714a:	ad4a      	add	r5, sp, #296	@ 0x128
 800714c:	2401      	movs	r4, #1
 800714e:	45a0      	cmp	r8, r4
 8007150:	da2b      	bge.n	80071aa <__kernel_rem_pio2+0x5e2>
 8007152:	f1b9 0f00 	cmp.w	r9, #0
 8007156:	d002      	beq.n	800715e <__kernel_rem_pio2+0x596>
 8007158:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800715c:	4619      	mov	r1, r3
 800715e:	9b04      	ldr	r3, [sp, #16]
 8007160:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007164:	e7a1      	b.n	80070aa <__kernel_rem_pio2+0x4e2>
 8007166:	9c05      	ldr	r4, [sp, #20]
 8007168:	ab48      	add	r3, sp, #288	@ 0x120
 800716a:	441c      	add	r4, r3
 800716c:	2000      	movs	r0, #0
 800716e:	2100      	movs	r1, #0
 8007170:	f1b8 0f00 	cmp.w	r8, #0
 8007174:	da09      	bge.n	800718a <__kernel_rem_pio2+0x5c2>
 8007176:	f1b9 0f00 	cmp.w	r9, #0
 800717a:	d002      	beq.n	8007182 <__kernel_rem_pio2+0x5ba>
 800717c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007180:	4619      	mov	r1, r3
 8007182:	9b04      	ldr	r3, [sp, #16]
 8007184:	e9c3 0100 	strd	r0, r1, [r3]
 8007188:	e78f      	b.n	80070aa <__kernel_rem_pio2+0x4e2>
 800718a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800718e:	f7f9 f821 	bl	80001d4 <__adddf3>
 8007192:	f108 38ff 	add.w	r8, r8, #4294967295
 8007196:	e7eb      	b.n	8007170 <__kernel_rem_pio2+0x5a8>
 8007198:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800719c:	f7f9 f81a 	bl	80001d4 <__adddf3>
 80071a0:	3c01      	subs	r4, #1
 80071a2:	e7c1      	b.n	8007128 <__kernel_rem_pio2+0x560>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	e7c6      	b.n	8007138 <__kernel_rem_pio2+0x570>
 80071aa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80071ae:	f7f9 f811 	bl	80001d4 <__adddf3>
 80071b2:	3401      	adds	r4, #1
 80071b4:	e7cb      	b.n	800714e <__kernel_rem_pio2+0x586>
 80071b6:	ed95 7b00 	vldr	d7, [r5]
 80071ba:	ed8d 7b00 	vstr	d7, [sp]
 80071be:	ed95 7b02 	vldr	d7, [r5, #8]
 80071c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071c6:	ec53 2b17 	vmov	r2, r3, d7
 80071ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071ce:	f7f9 f801 	bl	80001d4 <__adddf3>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4606      	mov	r6, r0
 80071d8:	460f      	mov	r7, r1
 80071da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071de:	f7f8 fff7 	bl	80001d0 <__aeabi_dsub>
 80071e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071e6:	f7f8 fff5 	bl	80001d4 <__adddf3>
 80071ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071ee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80071f2:	e9c5 6700 	strd	r6, r7, [r5]
 80071f6:	e76d      	b.n	80070d4 <__kernel_rem_pio2+0x50c>
 80071f8:	ed94 7b00 	vldr	d7, [r4]
 80071fc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8007200:	ec51 0b17 	vmov	r0, r1, d7
 8007204:	4652      	mov	r2, sl
 8007206:	465b      	mov	r3, fp
 8007208:	ed8d 7b00 	vstr	d7, [sp]
 800720c:	f7f8 ffe2 	bl	80001d4 <__adddf3>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	4606      	mov	r6, r0
 8007216:	460f      	mov	r7, r1
 8007218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800721c:	f7f8 ffd8 	bl	80001d0 <__aeabi_dsub>
 8007220:	4652      	mov	r2, sl
 8007222:	465b      	mov	r3, fp
 8007224:	f7f8 ffd6 	bl	80001d4 <__adddf3>
 8007228:	3d01      	subs	r5, #1
 800722a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800722e:	e9c4 6700 	strd	r6, r7, [r4]
 8007232:	e755      	b.n	80070e0 <__kernel_rem_pio2+0x518>
 8007234:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007238:	f7f8 ffcc 	bl	80001d4 <__adddf3>
 800723c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007240:	e758      	b.n	80070f4 <__kernel_rem_pio2+0x52c>
 8007242:	bf00      	nop
 8007244:	f3af 8000 	nop.w
	...
 8007250:	41700000 	.word	0x41700000
 8007254:	3e700000 	.word	0x3e700000
 8007258:	9b04      	ldr	r3, [sp, #16]
 800725a:	9a04      	ldr	r2, [sp, #16]
 800725c:	601f      	str	r7, [r3, #0]
 800725e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8007262:	605c      	str	r4, [r3, #4]
 8007264:	609d      	str	r5, [r3, #8]
 8007266:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800726a:	60d3      	str	r3, [r2, #12]
 800726c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007270:	6110      	str	r0, [r2, #16]
 8007272:	6153      	str	r3, [r2, #20]
 8007274:	e719      	b.n	80070aa <__kernel_rem_pio2+0x4e2>
 8007276:	bf00      	nop

08007278 <scalbn>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	ec55 4b10 	vmov	r4, r5, d0
 800727e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007282:	4606      	mov	r6, r0
 8007284:	462b      	mov	r3, r5
 8007286:	b991      	cbnz	r1, 80072ae <scalbn+0x36>
 8007288:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800728c:	4323      	orrs	r3, r4
 800728e:	d03d      	beq.n	800730c <scalbn+0x94>
 8007290:	4b35      	ldr	r3, [pc, #212]	@ (8007368 <scalbn+0xf0>)
 8007292:	4620      	mov	r0, r4
 8007294:	4629      	mov	r1, r5
 8007296:	2200      	movs	r2, #0
 8007298:	f7f9 f952 	bl	8000540 <__aeabi_dmul>
 800729c:	4b33      	ldr	r3, [pc, #204]	@ (800736c <scalbn+0xf4>)
 800729e:	429e      	cmp	r6, r3
 80072a0:	4604      	mov	r4, r0
 80072a2:	460d      	mov	r5, r1
 80072a4:	da0f      	bge.n	80072c6 <scalbn+0x4e>
 80072a6:	a328      	add	r3, pc, #160	@ (adr r3, 8007348 <scalbn+0xd0>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	e01e      	b.n	80072ec <scalbn+0x74>
 80072ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80072b2:	4291      	cmp	r1, r2
 80072b4:	d10b      	bne.n	80072ce <scalbn+0x56>
 80072b6:	4622      	mov	r2, r4
 80072b8:	4620      	mov	r0, r4
 80072ba:	4629      	mov	r1, r5
 80072bc:	f7f8 ff8a 	bl	80001d4 <__adddf3>
 80072c0:	4604      	mov	r4, r0
 80072c2:	460d      	mov	r5, r1
 80072c4:	e022      	b.n	800730c <scalbn+0x94>
 80072c6:	460b      	mov	r3, r1
 80072c8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80072cc:	3936      	subs	r1, #54	@ 0x36
 80072ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80072d2:	4296      	cmp	r6, r2
 80072d4:	dd0d      	ble.n	80072f2 <scalbn+0x7a>
 80072d6:	2d00      	cmp	r5, #0
 80072d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8007350 <scalbn+0xd8>)
 80072da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072de:	da02      	bge.n	80072e6 <scalbn+0x6e>
 80072e0:	a11d      	add	r1, pc, #116	@ (adr r1, 8007358 <scalbn+0xe0>)
 80072e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072e6:	a31a      	add	r3, pc, #104	@ (adr r3, 8007350 <scalbn+0xd8>)
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f7f9 f928 	bl	8000540 <__aeabi_dmul>
 80072f0:	e7e6      	b.n	80072c0 <scalbn+0x48>
 80072f2:	1872      	adds	r2, r6, r1
 80072f4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80072f8:	428a      	cmp	r2, r1
 80072fa:	dcec      	bgt.n	80072d6 <scalbn+0x5e>
 80072fc:	2a00      	cmp	r2, #0
 80072fe:	dd08      	ble.n	8007312 <scalbn+0x9a>
 8007300:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007304:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007308:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800730c:	ec45 4b10 	vmov	d0, r4, r5
 8007310:	bd70      	pop	{r4, r5, r6, pc}
 8007312:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007316:	da08      	bge.n	800732a <scalbn+0xb2>
 8007318:	2d00      	cmp	r5, #0
 800731a:	a10b      	add	r1, pc, #44	@ (adr r1, 8007348 <scalbn+0xd0>)
 800731c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007320:	dac1      	bge.n	80072a6 <scalbn+0x2e>
 8007322:	a10f      	add	r1, pc, #60	@ (adr r1, 8007360 <scalbn+0xe8>)
 8007324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007328:	e7bd      	b.n	80072a6 <scalbn+0x2e>
 800732a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800732e:	3236      	adds	r2, #54	@ 0x36
 8007330:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007334:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007338:	4620      	mov	r0, r4
 800733a:	4b0d      	ldr	r3, [pc, #52]	@ (8007370 <scalbn+0xf8>)
 800733c:	4629      	mov	r1, r5
 800733e:	2200      	movs	r2, #0
 8007340:	e7d4      	b.n	80072ec <scalbn+0x74>
 8007342:	bf00      	nop
 8007344:	f3af 8000 	nop.w
 8007348:	c2f8f359 	.word	0xc2f8f359
 800734c:	01a56e1f 	.word	0x01a56e1f
 8007350:	8800759c 	.word	0x8800759c
 8007354:	7e37e43c 	.word	0x7e37e43c
 8007358:	8800759c 	.word	0x8800759c
 800735c:	fe37e43c 	.word	0xfe37e43c
 8007360:	c2f8f359 	.word	0xc2f8f359
 8007364:	81a56e1f 	.word	0x81a56e1f
 8007368:	43500000 	.word	0x43500000
 800736c:	ffff3cb0 	.word	0xffff3cb0
 8007370:	3c900000 	.word	0x3c900000
 8007374:	00000000 	.word	0x00000000

08007378 <floor>:
 8007378:	ec51 0b10 	vmov	r0, r1, d0
 800737c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007384:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007388:	2e13      	cmp	r6, #19
 800738a:	460c      	mov	r4, r1
 800738c:	4605      	mov	r5, r0
 800738e:	4680      	mov	r8, r0
 8007390:	dc34      	bgt.n	80073fc <floor+0x84>
 8007392:	2e00      	cmp	r6, #0
 8007394:	da17      	bge.n	80073c6 <floor+0x4e>
 8007396:	a332      	add	r3, pc, #200	@ (adr r3, 8007460 <floor+0xe8>)
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f7f8 ff1a 	bl	80001d4 <__adddf3>
 80073a0:	2200      	movs	r2, #0
 80073a2:	2300      	movs	r3, #0
 80073a4:	f7f9 fb5c 	bl	8000a60 <__aeabi_dcmpgt>
 80073a8:	b150      	cbz	r0, 80073c0 <floor+0x48>
 80073aa:	2c00      	cmp	r4, #0
 80073ac:	da55      	bge.n	800745a <floor+0xe2>
 80073ae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80073b2:	432c      	orrs	r4, r5
 80073b4:	2500      	movs	r5, #0
 80073b6:	42ac      	cmp	r4, r5
 80073b8:	4c2b      	ldr	r4, [pc, #172]	@ (8007468 <floor+0xf0>)
 80073ba:	bf08      	it	eq
 80073bc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80073c0:	4621      	mov	r1, r4
 80073c2:	4628      	mov	r0, r5
 80073c4:	e023      	b.n	800740e <floor+0x96>
 80073c6:	4f29      	ldr	r7, [pc, #164]	@ (800746c <floor+0xf4>)
 80073c8:	4137      	asrs	r7, r6
 80073ca:	ea01 0307 	and.w	r3, r1, r7
 80073ce:	4303      	orrs	r3, r0
 80073d0:	d01d      	beq.n	800740e <floor+0x96>
 80073d2:	a323      	add	r3, pc, #140	@ (adr r3, 8007460 <floor+0xe8>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f7f8 fefc 	bl	80001d4 <__adddf3>
 80073dc:	2200      	movs	r2, #0
 80073de:	2300      	movs	r3, #0
 80073e0:	f7f9 fb3e 	bl	8000a60 <__aeabi_dcmpgt>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	d0eb      	beq.n	80073c0 <floor+0x48>
 80073e8:	2c00      	cmp	r4, #0
 80073ea:	bfbe      	ittt	lt
 80073ec:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80073f0:	4133      	asrlt	r3, r6
 80073f2:	18e4      	addlt	r4, r4, r3
 80073f4:	ea24 0407 	bic.w	r4, r4, r7
 80073f8:	2500      	movs	r5, #0
 80073fa:	e7e1      	b.n	80073c0 <floor+0x48>
 80073fc:	2e33      	cmp	r6, #51	@ 0x33
 80073fe:	dd0a      	ble.n	8007416 <floor+0x9e>
 8007400:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007404:	d103      	bne.n	800740e <floor+0x96>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	f7f8 fee3 	bl	80001d4 <__adddf3>
 800740e:	ec41 0b10 	vmov	d0, r0, r1
 8007412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007416:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800741a:	f04f 37ff 	mov.w	r7, #4294967295
 800741e:	40df      	lsrs	r7, r3
 8007420:	4207      	tst	r7, r0
 8007422:	d0f4      	beq.n	800740e <floor+0x96>
 8007424:	a30e      	add	r3, pc, #56	@ (adr r3, 8007460 <floor+0xe8>)
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	f7f8 fed3 	bl	80001d4 <__adddf3>
 800742e:	2200      	movs	r2, #0
 8007430:	2300      	movs	r3, #0
 8007432:	f7f9 fb15 	bl	8000a60 <__aeabi_dcmpgt>
 8007436:	2800      	cmp	r0, #0
 8007438:	d0c2      	beq.n	80073c0 <floor+0x48>
 800743a:	2c00      	cmp	r4, #0
 800743c:	da0a      	bge.n	8007454 <floor+0xdc>
 800743e:	2e14      	cmp	r6, #20
 8007440:	d101      	bne.n	8007446 <floor+0xce>
 8007442:	3401      	adds	r4, #1
 8007444:	e006      	b.n	8007454 <floor+0xdc>
 8007446:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800744a:	2301      	movs	r3, #1
 800744c:	40b3      	lsls	r3, r6
 800744e:	441d      	add	r5, r3
 8007450:	4545      	cmp	r5, r8
 8007452:	d3f6      	bcc.n	8007442 <floor+0xca>
 8007454:	ea25 0507 	bic.w	r5, r5, r7
 8007458:	e7b2      	b.n	80073c0 <floor+0x48>
 800745a:	2500      	movs	r5, #0
 800745c:	462c      	mov	r4, r5
 800745e:	e7af      	b.n	80073c0 <floor+0x48>
 8007460:	8800759c 	.word	0x8800759c
 8007464:	7e37e43c 	.word	0x7e37e43c
 8007468:	bff00000 	.word	0xbff00000
 800746c:	000fffff 	.word	0x000fffff

08007470 <_init>:
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	bf00      	nop
 8007474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007476:	bc08      	pop	{r3}
 8007478:	469e      	mov	lr, r3
 800747a:	4770      	bx	lr

0800747c <_fini>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	bf00      	nop
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr
