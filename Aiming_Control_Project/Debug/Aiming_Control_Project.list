
Aiming_Control_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800a470  0800a470  0000b470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8d0  0800a8d0  0000c080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8d0  0800a8d0  0000b8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8d8  0800a8d8  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8d8  0800a8d8  0000b8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a8dc  0800a8dc  0000b8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800a8e0  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c080  2**0
                  CONTENTS
 10 .bss          00000574  20000080  20000080  0000c080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200005f4  200005f4  0000c080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd20  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002370  00000000  00000000  0001bdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  0001e140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1b  00000000  00000000  0001f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002392a  00000000  00000000  0001ff13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000137ec  00000000  00000000  0004383d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbd07  00000000  00000000  00057029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132d30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059dc  00000000  00000000  00132d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  00138750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a458 	.word	0x0800a458

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800a458 	.word	0x0800a458

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96a 	b.w	8000ea8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14e      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	458c      	cmp	ip, r1
 8000bfc:	4686      	mov	lr, r0
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	d962      	bls.n	8000cca <__udivmoddi4+0xde>
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	4091      	lsls	r1, r2
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	4319      	orrs	r1, r3
 8000c16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f f68c 	uxth.w	r6, ip
 8000c22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb04 f106 	mul.w	r1, r4, r6
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c42:	f080 8112 	bcs.w	8000e6a <__udivmoddi4+0x27e>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 810f 	bls.w	8000e6a <__udivmoddi4+0x27e>
 8000c4c:	3c02      	subs	r4, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f606 	mul.w	r6, r0, r6
 8000c66:	429e      	cmp	r6, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x94>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c72:	f080 80fc 	bcs.w	8000e6e <__udivmoddi4+0x282>
 8000c76:	429e      	cmp	r6, r3
 8000c78:	f240 80f9 	bls.w	8000e6e <__udivmoddi4+0x282>
 8000c7c:	4463      	add	r3, ip
 8000c7e:	3802      	subs	r0, #2
 8000c80:	1b9b      	subs	r3, r3, r6
 8000c82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c86:	2100      	movs	r1, #0
 8000c88:	b11d      	cbz	r5, 8000c92 <__udivmoddi4+0xa6>
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d905      	bls.n	8000ca6 <__udivmoddi4+0xba>
 8000c9a:	b10d      	cbz	r5, 8000ca0 <__udivmoddi4+0xb4>
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e7f5      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000ca6:	fab3 f183 	clz	r1, r3
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d146      	bne.n	8000d3c <__udivmoddi4+0x150>
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xcc>
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	f0c0 80f0 	bcc.w	8000e98 <__udivmoddi4+0x2ac>
 8000cb8:	1a86      	subs	r6, r0, r2
 8000cba:	eb64 0303 	sbc.w	r3, r4, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d0e6      	beq.n	8000c92 <__udivmoddi4+0xa6>
 8000cc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc8:	e7e3      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	f040 8090 	bne.w	8000df0 <__udivmoddi4+0x204>
 8000cd0:	eba1 040c 	sub.w	r4, r1, ip
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa1f f78c 	uxth.w	r7, ip
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb07 f006 	mul.w	r0, r7, r6
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x11c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x11a>
 8000d00:	4298      	cmp	r0, r3
 8000d02:	f200 80cd 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d06:	4626      	mov	r6, r4
 8000d08:	1a1c      	subs	r4, r3, r0
 8000d0a:	fa1f f38e 	uxth.w	r3, lr
 8000d0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d12:	fb08 4410 	mls	r4, r8, r0, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb00 f707 	mul.w	r7, r0, r7
 8000d1e:	429f      	cmp	r7, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x148>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x146>
 8000d2c:	429f      	cmp	r7, r3
 8000d2e:	f200 80b0 	bhi.w	8000e92 <__udivmoddi4+0x2a6>
 8000d32:	4620      	mov	r0, r4
 8000d34:	1bdb      	subs	r3, r3, r7
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0x9c>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 f706 	lsr.w	r7, r2, r6
 8000d46:	431f      	orrs	r7, r3
 8000d48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d50:	ea43 030c 	orr.w	r3, r3, ip
 8000d54:	40f4      	lsrs	r4, r6
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d60:	fbb4 fef0 	udiv	lr, r4, r0
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fb00 441e 	mls	r4, r0, lr, r4
 8000d6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d70:	fb0e f90c 	mul.w	r9, lr, ip
 8000d74:	45a1      	cmp	r9, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	d90a      	bls.n	8000d92 <__udivmoddi4+0x1a6>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d82:	f080 8084 	bcs.w	8000e8e <__udivmoddi4+0x2a2>
 8000d86:	45a1      	cmp	r9, r4
 8000d88:	f240 8081 	bls.w	8000e8e <__udivmoddi4+0x2a2>
 8000d8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000da2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1d2>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db4:	d267      	bcs.n	8000e86 <__udivmoddi4+0x29a>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d965      	bls.n	8000e86 <__udivmoddi4+0x29a>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc6:	eba4 040c 	sub.w	r4, r4, ip
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	46ce      	mov	lr, r9
 8000dce:	469c      	mov	ip, r3
 8000dd0:	d351      	bcc.n	8000e76 <__udivmoddi4+0x28a>
 8000dd2:	d04e      	beq.n	8000e72 <__udivmoddi4+0x286>
 8000dd4:	b155      	cbz	r5, 8000dec <__udivmoddi4+0x200>
 8000dd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dda:	eb64 040c 	sbc.w	r4, r4, ip
 8000dde:	fa04 f606 	lsl.w	r6, r4, r6
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431e      	orrs	r6, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e750      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000e00:	4094      	lsls	r4, r2
 8000e02:	430c      	orrs	r4, r1
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0c:	fa1f f78c 	uxth.w	r7, ip
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3110 	mls	r1, r8, r0, r3
 8000e18:	0c23      	lsrs	r3, r4, #16
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	fb00 f107 	mul.w	r1, r0, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x24c>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2e:	d22c      	bcs.n	8000e8a <__udivmoddi4+0x29e>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	d92a      	bls.n	8000e8a <__udivmoddi4+0x29e>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e40:	fb08 3311 	mls	r3, r8, r1, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb01 f307 	mul.w	r3, r1, r7
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x276>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e58:	d213      	bcs.n	8000e82 <__udivmoddi4+0x296>
 8000e5a:	42a3      	cmp	r3, r4
 8000e5c:	d911      	bls.n	8000e82 <__udivmoddi4+0x296>
 8000e5e:	3902      	subs	r1, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	1ae4      	subs	r4, r4, r3
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e739      	b.n	8000cde <__udivmoddi4+0xf2>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	e6f0      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e706      	b.n	8000c80 <__udivmoddi4+0x94>
 8000e72:	45c8      	cmp	r8, r9
 8000e74:	d2ae      	bcs.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7e:	3801      	subs	r0, #1
 8000e80:	e7a8      	b.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e82:	4631      	mov	r1, r6
 8000e84:	e7ed      	b.n	8000e62 <__udivmoddi4+0x276>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e799      	b.n	8000dbe <__udivmoddi4+0x1d2>
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	e7d4      	b.n	8000e38 <__udivmoddi4+0x24c>
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	e77f      	b.n	8000d92 <__udivmoddi4+0x1a6>
 8000e92:	4463      	add	r3, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e74d      	b.n	8000d34 <__udivmoddi4+0x148>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e70f      	b.n	8000cc0 <__udivmoddi4+0xd4>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	e730      	b.n	8000d08 <__udivmoddi4+0x11c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f023 030f 	bic.w	r3, r3, #15
 8000ebc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	f043 030c 	orr.w	r3, r3, #12
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	f043 030c 	orr.w	r3, r3, #12
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ee2:	7bbb      	ldrb	r3, [r7, #14]
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000eec:	f107 0208 	add.w	r2, r7, #8
 8000ef0:	2364      	movs	r3, #100	@ 0x64
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	214e      	movs	r1, #78	@ 0x4e
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <lcd_send_cmd+0x5c>)
 8000efa:	f002 ff79 	bl	8003df0 <HAL_I2C_Master_Transmit>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000174 	.word	0x20000174

08000f0c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f023 030f 	bic.w	r3, r3, #15
 8000f1c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f043 030d 	orr.w	r3, r3, #13
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	f043 0309 	orr.w	r3, r3, #9
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	f043 030d 	orr.w	r3, r3, #13
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f42:	7bbb      	ldrb	r3, [r7, #14]
 8000f44:	f043 0309 	orr.w	r3, r3, #9
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f4c:	f107 0208 	add.w	r2, r7, #8
 8000f50:	2364      	movs	r3, #100	@ 0x64
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2304      	movs	r3, #4
 8000f56:	214e      	movs	r1, #78	@ 0x4e
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <lcd_send_data+0x5c>)
 8000f5a:	f002 ff49 	bl	8003df0 <HAL_I2C_Master_Transmit>
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000174 	.word	0x20000174

08000f6c <lcd_enviar>:

void lcd_enviar(char *string,int row,int col)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
	lcd_put_cur(row,col);
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	68b8      	ldr	r0, [r7, #8]
 8000f7c:	f000 f81e 	bl	8000fbc <lcd_put_cur>
	lcd_send_string(string);
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f877 	bl	8001074 <lcd_send_string>
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <lcd_clear>:

void lcd_clear (void)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000f94:	2080      	movs	r0, #128	@ 0x80
 8000f96:	f7ff ff89 	bl	8000eac <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	e005      	b.n	8000fac <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000fa0:	2020      	movs	r0, #32
 8000fa2:	f7ff ffb3 	bl	8000f0c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b45      	cmp	r3, #69	@ 0x45
 8000fb0:	ddf6      	ble.n	8000fa0 <lcd_clear+0x12>
	}
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
    switch (row)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <lcd_put_cur+0x18>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d005      	beq.n	8000fde <lcd_put_cur+0x22>
 8000fd2:	e009      	b.n	8000fe8 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fda:	603b      	str	r3, [r7, #0]
            break;
 8000fdc:	e004      	b.n	8000fe8 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000fe4:	603b      	str	r3, [r7, #0]
            break;
 8000fe6:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <lcd_send_cmd>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <lcd_init>:


void lcd_init (void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000ffe:	2032      	movs	r0, #50	@ 0x32
 8001000:	f001 fec6 	bl	8002d90 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001004:	2030      	movs	r0, #48	@ 0x30
 8001006:	f7ff ff51 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800100a:	2005      	movs	r0, #5
 800100c:	f001 fec0 	bl	8002d90 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001010:	2030      	movs	r0, #48	@ 0x30
 8001012:	f7ff ff4b 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001016:	2001      	movs	r0, #1
 8001018:	f001 feba 	bl	8002d90 <HAL_Delay>
	lcd_send_cmd (0x30);
 800101c:	2030      	movs	r0, #48	@ 0x30
 800101e:	f7ff ff45 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(10);
 8001022:	200a      	movs	r0, #10
 8001024:	f001 feb4 	bl	8002d90 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001028:	2020      	movs	r0, #32
 800102a:	f7ff ff3f 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f001 feae 	bl	8002d90 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001034:	2028      	movs	r0, #40	@ 0x28
 8001036:	f7ff ff39 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f001 fea8 	bl	8002d90 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001040:	2008      	movs	r0, #8
 8001042:	f7ff ff33 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f001 fea2 	bl	8002d90 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800104c:	2001      	movs	r0, #1
 800104e:	f7ff ff2d 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f001 fe9c 	bl	8002d90 <HAL_Delay>
	HAL_Delay(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f001 fe99 	bl	8002d90 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800105e:	2006      	movs	r0, #6
 8001060:	f7ff ff24 	bl	8000eac <lcd_send_cmd>
	HAL_Delay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f001 fe93 	bl	8002d90 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800106a:	200c      	movs	r0, #12
 800106c:	f7ff ff1e 	bl	8000eac <lcd_send_cmd>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800107c:	e006      	b.n	800108c <lcd_send_string+0x18>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff40 	bl	8000f0c <lcd_send_data>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f4      	bne.n	800107e <lcd_send_string+0xa>
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <ShootPWMInit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------Shoot init-------------------------------------------------*/
	void ShootPWMInit(uint16_t s){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,s);
 80010aa:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <ShootPWMInit+0x20>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	88fa      	ldrh	r2, [r7, #6]
 80010b0:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000340 	.word	0x20000340

080010c4 <GetPosition>:
/*---------------------------End Shoot init-------------------------------------------------*/

/*-------------------------------------ServoADC Code--------------------------------------*/
	float GetPosition(uint32_t val){
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
		return ((float)val/ADCResolution)*ServoRange;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010d6:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80010f4 <GetPosition+0x30>
 80010da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010de:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80010f8 <GetPosition+0x34>
 80010e2:	ee67 7a87 	vmul.f32	s15, s15, s14
	}
 80010e6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	45800000 	.word	0x45800000
 80010f8:	42f00000 	.word	0x42f00000

080010fc <ReadServo>:

	uint32_t ReadServo(ADC_HandleTypeDef* hadc){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
		uint32_t value;

		HAL_ADC_Start(hadc);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f001 feab 	bl	8002e60 <HAL_ADC_Start>
			  if (HAL_ADC_PollForConversion(hadc,HAL_MAX_DELAY)==HAL_OK) {
 800110a:	f04f 31ff 	mov.w	r1, #4294967295
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f001 ffab 	bl	800306a <HAL_ADC_PollForConversion>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <ReadServo+0x26>
			   value = HAL_ADC_GetValue(hadc);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f002 f830 	bl	8003180 <HAL_ADC_GetValue>
 8001120:	60f8      	str	r0, [r7, #12]
			  }
		HAL_ADC_Stop(hadc);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f001 ff6e 	bl	8003004 <HAL_ADC_Stop>

		return value;
 8001128:	68fb      	ldr	r3, [r7, #12]
	}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <DrawDisplay>:

/*----------------------------------ServoADC Code End--------------------------------------*/
/*----------------------------------Display Code-------------------------------------------*/
	void DrawDisplay(){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
		memset(Buff,0,sizeof(Buff));
 8001138:	2264      	movs	r2, #100	@ 0x64
 800113a:	2100      	movs	r1, #0
 800113c:	4823      	ldr	r0, [pc, #140]	@ (80011cc <DrawDisplay+0x98>)
 800113e:	f005 ff10 	bl	8006f62 <memset>
		gcvt(Pos_S2, 4, BufX);
 8001142:	4b23      	ldr	r3, [pc, #140]	@ (80011d0 <DrawDisplay+0x9c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9fe 	bl	8000548 <__aeabi_f2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4920      	ldr	r1, [pc, #128]	@ (80011d4 <DrawDisplay+0xa0>)
 8001152:	2004      	movs	r0, #4
 8001154:	ec43 2b10 	vmov	d0, r2, r3
 8001158:	f005 fdd2 	bl	8006d00 <gcvt>
		gcvt(Pos_S3, 4, BufY);
 800115c:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <DrawDisplay+0xa4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff f9f1 	bl	8000548 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	491c      	ldr	r1, [pc, #112]	@ (80011dc <DrawDisplay+0xa8>)
 800116c:	2004      	movs	r0, #4
 800116e:	ec43 2b10 	vmov	d0, r2, r3
 8001172:	f005 fdc5 	bl	8006d00 <gcvt>
		strcat(Buff,"X:");
 8001176:	4815      	ldr	r0, [pc, #84]	@ (80011cc <DrawDisplay+0x98>)
 8001178:	f7ff f82a 	bl	80001d0 <strlen>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <DrawDisplay+0x98>)
 8001182:	4413      	add	r3, r2
 8001184:	4a16      	ldr	r2, [pc, #88]	@ (80011e0 <DrawDisplay+0xac>)
 8001186:	8811      	ldrh	r1, [r2, #0]
 8001188:	7892      	ldrb	r2, [r2, #2]
 800118a:	8019      	strh	r1, [r3, #0]
 800118c:	709a      	strb	r2, [r3, #2]
		strcat(Buff,BufX);
 800118e:	4911      	ldr	r1, [pc, #68]	@ (80011d4 <DrawDisplay+0xa0>)
 8001190:	480e      	ldr	r0, [pc, #56]	@ (80011cc <DrawDisplay+0x98>)
 8001192:	f005 feee 	bl	8006f72 <strcat>
		strcat(Buff," Y:");
 8001196:	480d      	ldr	r0, [pc, #52]	@ (80011cc <DrawDisplay+0x98>)
 8001198:	f7ff f81a 	bl	80001d0 <strlen>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <DrawDisplay+0x98>)
 80011a2:	4413      	add	r3, r2
 80011a4:	4a0f      	ldr	r2, [pc, #60]	@ (80011e4 <DrawDisplay+0xb0>)
 80011a6:	6810      	ldr	r0, [r2, #0]
 80011a8:	6018      	str	r0, [r3, #0]
		strcat(Buff,BufY);
 80011aa:	490c      	ldr	r1, [pc, #48]	@ (80011dc <DrawDisplay+0xa8>)
 80011ac:	4807      	ldr	r0, [pc, #28]	@ (80011cc <DrawDisplay+0x98>)
 80011ae:	f005 fee0 	bl	8006f72 <strcat>
		lcd_enviar( "TARGET DETECTED", 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <DrawDisplay+0xb4>)
 80011b8:	f7ff fed8 	bl	8000f6c <lcd_enviar>
		lcd_enviar(Buff , 1, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2101      	movs	r1, #1
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <DrawDisplay+0x98>)
 80011c2:	f7ff fed3 	bl	8000f6c <lcd_enviar>
	}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000043c 	.word	0x2000043c
 80011d0:	20000388 	.word	0x20000388
 80011d4:	200003d4 	.word	0x200003d4
 80011d8:	2000038c 	.word	0x2000038c
 80011dc:	20000408 	.word	0x20000408
 80011e0:	0800a470 	.word	0x0800a470
 80011e4:	0800a474 	.word	0x0800a474
 80011e8:	0800a478 	.word	0x0800a478

080011ec <SetPosition>:
/*----------------------------------Display Code End---------------------------------------*/
/*---------------------------------Servo Position Code--------------------------------------*/
	void SetPosition(TIM_HandleTypeDef *htim,uint16_t PulseWidth){
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
		if(htim->Instance == TIM1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a10      	ldr	r2, [pc, #64]	@ (8001240 <SetPosition+0x54>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d104      	bne.n	800120c <SetPosition+0x20>
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, PulseWidth);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	635a      	str	r2, [r3, #52]	@ 0x34
		else if(htim->Instance == TIM2)
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, PulseWidth);
		else if(htim->Instance == TIM3)
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, PulseWidth);
	}
 800120a:	e012      	b.n	8001232 <SetPosition+0x46>
		else if(htim->Instance == TIM2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001214:	d104      	bne.n	8001220 <SetPosition+0x34>
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, PulseWidth);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	639a      	str	r2, [r3, #56]	@ 0x38
	}
 800121e:	e008      	b.n	8001232 <SetPosition+0x46>
		else if(htim->Instance == TIM3)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	@ (8001244 <SetPosition+0x58>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d103      	bne.n	8001232 <SetPosition+0x46>
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, PulseWidth);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40010000 	.word	0x40010000
 8001244:	40000400 	.word	0x40000400

08001248 <Rotate>:

	void Rotate(){
 8001248:	b598      	push	{r3, r4, r7, lr}
 800124a:	af00      	add	r7, sp, #0
		HAL_Delay(10);
 800124c:	200a      	movs	r0, #10
 800124e:	f001 fd9f 	bl	8002d90 <HAL_Delay>
		if(dir == 0 && mov_servo1 <= 210) {
 8001252:	4b37      	ldr	r3, [pc, #220]	@ (8001330 <Rotate+0xe8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d130      	bne.n	80012bc <Rotate+0x74>
 800125a:	4b36      	ldr	r3, [pc, #216]	@ (8001334 <Rotate+0xec>)
 800125c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <Rotate+0xf0>)
 8001266:	f7ff fc43 	bl	8000af0 <__aeabi_dcmple>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d025      	beq.n	80012bc <Rotate+0x74>
			mov_servo1=mov_servo1+3;
 8001270:	4b30      	ldr	r3, [pc, #192]	@ (8001334 <Rotate+0xec>)
 8001272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b30      	ldr	r3, [pc, #192]	@ (800133c <Rotate+0xf4>)
 800127c:	f7ff f806 	bl	800028c <__adddf3>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	492b      	ldr	r1, [pc, #172]	@ (8001334 <Rotate+0xec>)
 8001286:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, mov_servo1);//2,1ms represents 180º
 800128a:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <Rotate+0xec>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	492b      	ldr	r1, [pc, #172]	@ (8001340 <Rotate+0xf8>)
 8001292:	680c      	ldr	r4, [r1, #0]
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fc70 	bl	8000b7c <__aeabi_d2uiz>
 800129c:	4603      	mov	r3, r0
 800129e:	6363      	str	r3, [r4, #52]	@ 0x34
			if (mov_servo1==210)
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <Rotate+0xec>)
 80012a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <Rotate+0xf0>)
 80012ac:	f7ff fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <Rotate+0x74>
				dir = 1;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <Rotate+0xe8>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
		}

		if(dir == 1 && mov_servo1 >= 90) {
 80012bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <Rotate+0xe8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d132      	bne.n	800132a <Rotate+0xe2>
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <Rotate+0xec>)
 80012c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <Rotate+0xfc>)
 80012d0:	f7ff fc18 	bl	8000b04 <__aeabi_dcmpge>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d100      	bne.n	80012dc <Rotate+0x94>
			mov_servo1-=3;
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, mov_servo1);//2,1ms represents 180º
			if (mov_servo1<=90)
				dir = 0;
		}
	}
 80012da:	e026      	b.n	800132a <Rotate+0xe2>
			mov_servo1-=3;
 80012dc:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <Rotate+0xec>)
 80012de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <Rotate+0xf4>)
 80012e8:	f7fe ffce 	bl	8000288 <__aeabi_dsub>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4910      	ldr	r1, [pc, #64]	@ (8001334 <Rotate+0xec>)
 80012f2:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, mov_servo1);//2,1ms represents 180º
 80012f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <Rotate+0xec>)
 80012f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fc:	4910      	ldr	r1, [pc, #64]	@ (8001340 <Rotate+0xf8>)
 80012fe:	680c      	ldr	r4, [r1, #0]
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff fc3a 	bl	8000b7c <__aeabi_d2uiz>
 8001308:	4603      	mov	r3, r0
 800130a:	6363      	str	r3, [r4, #52]	@ 0x34
			if (mov_servo1<=90)
 800130c:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <Rotate+0xec>)
 800130e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <Rotate+0xfc>)
 8001318:	f7ff fbea 	bl	8000af0 <__aeabi_dcmple>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d100      	bne.n	8001324 <Rotate+0xdc>
	}
 8001322:	e002      	b.n	800132a <Rotate+0xe2>
				dir = 0;
 8001324:	4b02      	ldr	r3, [pc, #8]	@ (8001330 <Rotate+0xe8>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
	}
 800132a:	bf00      	nop
 800132c:	bd98      	pop	{r3, r4, r7, pc}
 800132e:	bf00      	nop
 8001330:	20000390 	.word	0x20000390
 8001334:	20000000 	.word	0x20000000
 8001338:	406a4000 	.word	0x406a4000
 800133c:	40080000 	.word	0x40080000
 8001340:	20000220 	.word	0x20000220
 8001344:	40568000 	.word	0x40568000

08001348 <delay>:
/*-------------------------------Servo Position Code End--------------------------------------*/

/*-------------------------------------HCSR-04 Code--------------------------------------*/
	void delay (uint16_t time)
	{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <delay+0x30>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24
		while (__HAL_TIM_GET_COUNTER (&htim4) < time);
 800135a:	bf00      	nop
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <delay+0x30>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	429a      	cmp	r2, r3
 8001366:	d3f9      	bcc.n	800135c <delay+0x14>
	}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200002f8 	.word	0x200002f8
 800137c:	00000000 	.word	0x00000000

08001380 <HAL_TIM_IC_CaptureCallback>:


	void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
	{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  //El canal 4 se utiliza exclusivamente para la gestión del HCSR-04.
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7f1b      	ldrb	r3, [r3, #28]
 800138c:	2b08      	cmp	r3, #8
 800138e:	d178      	bne.n	8001482 <HAL_TIM_IC_CaptureCallback+0x102>
		{
			if (Is_First_Captured==0) //Si el primer valor no es capturado
 8001390:	4b41      	ldr	r3, [pc, #260]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d11a      	bne.n	80013ce <HAL_TIM_IC_CaptureCallback+0x4e>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // Lee el primer valor
 8001398:	210c      	movs	r1, #12
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f004 ffb6 	bl	800630c <HAL_TIM_ReadCapturedValue>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4a3e      	ldr	r2, [pc, #248]	@ (800149c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80013a4:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // Establece el primero capturado como verdadero
 80013a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x118>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
				//Ahora cambia la polaridad al flanco descendente.
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6a1a      	ldr	r2, [r3, #32]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80013ba:	621a      	str	r2, [r3, #32]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6a1a      	ldr	r2, [r3, #32]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80013ca:	621a      	str	r2, [r3, #32]
				// Establece la polaridad en el flanco ascendente
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
			}
		}
	}
 80013cc:	e059      	b.n	8001482 <HAL_TIM_IC_CaptureCallback+0x102>
			else if (Is_First_Captured==1)   //Si el primero ya esta capturado
 80013ce:	4b32      	ldr	r3, [pc, #200]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x118>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d155      	bne.n	8001482 <HAL_TIM_IC_CaptureCallback+0x102>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  //Lee el segundo valor
 80013d6:	210c      	movs	r1, #12
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f004 ff97 	bl	800630c <HAL_TIM_ReadCapturedValue>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a2f      	ldr	r2, [pc, #188]	@ (80014a0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80013e2:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);  //Resetea el contador
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2200      	movs	r2, #0
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24
				if (IC_Val2 > IC_Val1)
 80013ec:	4b2c      	ldr	r3, [pc, #176]	@ (80014a0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d907      	bls.n	8001408 <HAL_TIM_IC_CaptureCallback+0x88>
					Difference = IC_Val2-IC_Val1;
 80013f8:	4b29      	ldr	r3, [pc, #164]	@ (80014a0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b27      	ldr	r3, [pc, #156]	@ (800149c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	4a28      	ldr	r2, [pc, #160]	@ (80014a4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e00f      	b.n	8001428 <HAL_TIM_IC_CaptureCallback+0xa8>
				else if (IC_Val1 > IC_Val2)
 8001408:	4b24      	ldr	r3, [pc, #144]	@ (800149c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <HAL_TIM_IC_CaptureCallback+0x120>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d909      	bls.n	8001428 <HAL_TIM_IC_CaptureCallback+0xa8>
					Difference = (0xffff - IC_Val1) + IC_Val2;
 8001414:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001422:	33ff      	adds	r3, #255	@ 0xff
 8001424:	4a1f      	ldr	r2, [pc, #124]	@ (80014a4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001426:	6013      	str	r3, [r2, #0]
				Distance = Difference * (0.34/2);
 8001428:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <HAL_TIM_IC_CaptureCallback+0x124>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f869 	bl	8000504 <__aeabi_ui2d>
 8001432:	a317      	add	r3, pc, #92	@ (adr r3, 8001490 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7ff f8de 	bl	80005f8 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fb9a 	bl	8000b7c <__aeabi_d2uiz>
 8001448:	4603      	mov	r3, r0
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800144e:	701a      	strb	r2, [r3, #0]
				Is_First_Captured = 0; //Vuelve a ponerlo en falso
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6a1a      	ldr	r2, [r3, #32]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8001464:	621a      	str	r2, [r3, #32]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6a12      	ldr	r2, [r2, #32]
 8001470:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <HAL_TIM_IC_CaptureCallback+0x12c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0202 	bic.w	r2, r2, #2
 8001480:	60da      	str	r2, [r3, #12]
	}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	f3af 8000 	nop.w
 8001490:	5c28f5c3 	.word	0x5c28f5c3
 8001494:	3fc5c28f 	.word	0x3fc5c28f
 8001498:	200003a0 	.word	0x200003a0
 800149c:	20000394 	.word	0x20000394
 80014a0:	20000398 	.word	0x20000398
 80014a4:	2000039c 	.word	0x2000039c
 80014a8:	200003a1 	.word	0x200003a1
 80014ac:	200002f8 	.word	0x200002f8

080014b0 <HCSR04_Read>:

	void HCSR04_Read (void)
	{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // pull the TRIG pin HIGH
 80014b4:	2201      	movs	r2, #1
 80014b6:	2110      	movs	r1, #16
 80014b8:	480a      	ldr	r0, [pc, #40]	@ (80014e4 <HCSR04_Read+0x34>)
 80014ba:	f002 fb3b 	bl	8003b34 <HAL_GPIO_WritePin>
		delay(10);  // wait for 10 us
 80014be:	200a      	movs	r0, #10
 80014c0:	f7ff ff42 	bl	8001348 <delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);// pull the TRIG pin low
 80014c4:	2200      	movs	r2, #0
 80014c6:	2110      	movs	r1, #16
 80014c8:	4806      	ldr	r0, [pc, #24]	@ (80014e4 <HCSR04_Read+0x34>)
 80014ca:	f002 fb33 	bl	8003b34 <HAL_GPIO_WritePin>

		__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HCSR04_Read+0x38>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <HCSR04_Read+0x38>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f042 0202 	orr.w	r2, r2, #2
 80014dc:	60da      	str	r2, [r3, #12]
	}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40020000 	.word	0x40020000
 80014e8:	200002f8 	.word	0x200002f8
 80014ec:	00000000 	.word	0x00000000

080014f0 <read_joystick_position>:

	/*---------------------------------HCSR-04 Code End--------------------------------------*/


	//Lectura y tratamiento de coordenadas
	void read_joystick_position(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
	    uint8_t command = 0x00;  // Comando para leer datos del joystick (según el manual)
 80014f6:	2300      	movs	r3, #0
 80014f8:	71fb      	strb	r3, [r7, #7]

	    // Activamos el CS
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001500:	48a7      	ldr	r0, [pc, #668]	@ (80017a0 <read_joystick_position+0x2b0>)
 8001502:	f002 fb17 	bl	8003b34 <HAL_GPIO_WritePin>

	    //Transmitimos para leer
	    HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY);
 8001506:	1df9      	adds	r1, r7, #7
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	2201      	movs	r2, #1
 800150e:	48a5      	ldr	r0, [pc, #660]	@ (80017a4 <read_joystick_position+0x2b4>)
 8001510:	f003 fcd5 	bl	8004ebe <HAL_SPI_Transmit>

	    // Recibimos el buffer de datos del joystick
	    HAL_SPI_Receive(&hspi1, joystick_data, 5, HAL_MAX_DELAY);
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	2205      	movs	r2, #5
 800151a:	49a3      	ldr	r1, [pc, #652]	@ (80017a8 <read_joystick_position+0x2b8>)
 800151c:	48a1      	ldr	r0, [pc, #644]	@ (80017a4 <read_joystick_position+0x2b4>)
 800151e:	f003 fe12 	bl	8005146 <HAL_SPI_Receive>

	    // Cerramos el CS
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001528:	489d      	ldr	r0, [pc, #628]	@ (80017a0 <read_joystick_position+0x2b0>)
 800152a:	f002 fb03 	bl	8003b34 <HAL_GPIO_WritePin>

	    // Procesar los datos: joystick_data[1] y joystick_data[2] son las posiciones X e Y
	    v_directorx = joystick_data[0];
 800152e:	4b9e      	ldr	r3, [pc, #632]	@ (80017a8 <read_joystick_position+0x2b8>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	4b9d      	ldr	r3, [pc, #628]	@ (80017ac <read_joystick_position+0x2bc>)
 8001536:	801a      	strh	r2, [r3, #0]
	    angulo = joystick_data[1];  //Valores de angulo
 8001538:	4b9b      	ldr	r3, [pc, #620]	@ (80017a8 <read_joystick_position+0x2b8>)
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	461a      	mov	r2, r3
 800153e:	4b9c      	ldr	r3, [pc, #624]	@ (80017b0 <read_joystick_position+0x2c0>)
 8001540:	801a      	strh	r2, [r3, #0]
	    v_directory = joystick_data[2];  //Sectores de angulo
 8001542:	4b99      	ldr	r3, [pc, #612]	@ (80017a8 <read_joystick_position+0x2b8>)
 8001544:	789b      	ldrb	r3, [r3, #2]
 8001546:	461a      	mov	r2, r3
 8001548:	4b9a      	ldr	r3, [pc, #616]	@ (80017b4 <read_joystick_position+0x2c4>)
 800154a:	801a      	strh	r2, [r3, #0]
	    boton1 = joystick_data[3]; //Boton central y lateral
 800154c:	4b96      	ldr	r3, [pc, #600]	@ (80017a8 <read_joystick_position+0x2b8>)
 800154e:	78db      	ldrb	r3, [r3, #3]
 8001550:	461a      	mov	r2, r3
 8001552:	4b99      	ldr	r3, [pc, #612]	@ (80017b8 <read_joystick_position+0x2c8>)
 8001554:	801a      	strh	r2, [r3, #0]
	    boton2 = joystick_data[4]; //Confirmación de boton central y lateral
 8001556:	4b94      	ldr	r3, [pc, #592]	@ (80017a8 <read_joystick_position+0x2b8>)
 8001558:	791b      	ldrb	r3, [r3, #4]
 800155a:	461a      	mov	r2, r3
 800155c:	4b97      	ldr	r3, [pc, #604]	@ (80017bc <read_joystick_position+0x2cc>)
 800155e:	801a      	strh	r2, [r3, #0]


	    //Boton lateral o central como seguro
	    if(boton2)
 8001560:	4b96      	ldr	r3, [pc, #600]	@ (80017bc <read_joystick_position+0x2cc>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 825c 	beq.w	8001a22 <read_joystick_position+0x532>
		  {
	    	  //Valores de coordenadas en x e y para azimut y giro
			  x_value= 100-100*cos((M_PI*angulo_grados)/180);
 800156a:	4b95      	ldr	r3, [pc, #596]	@ (80017c0 <read_joystick_position+0x2d0>)
 800156c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001570:	a385      	add	r3, pc, #532	@ (adr r3, 8001788 <read_joystick_position+0x298>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	f7ff f83f 	bl	80005f8 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	4b8f      	ldr	r3, [pc, #572]	@ (80017c4 <read_joystick_position+0x2d4>)
 8001588:	f7ff f960 	bl	800084c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	ec43 2b17 	vmov	d7, r2, r3
 8001594:	eeb0 0a47 	vmov.f32	s0, s14
 8001598:	eef0 0a67 	vmov.f32	s1, s15
 800159c:	f007 fed8 	bl	8009350 <cos>
 80015a0:	ec51 0b10 	vmov	r0, r1, d0
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b87      	ldr	r3, [pc, #540]	@ (80017c8 <read_joystick_position+0x2d8>)
 80015aa:	f7ff f825 	bl	80005f8 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	f04f 0000 	mov.w	r0, #0
 80015b6:	4984      	ldr	r1, [pc, #528]	@ (80017c8 <read_joystick_position+0x2d8>)
 80015b8:	f7fe fe66 	bl	8000288 <__aeabi_dsub>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4982      	ldr	r1, [pc, #520]	@ (80017cc <read_joystick_position+0x2dc>)
 80015c2:	e9c1 2300 	strd	r2, r3, [r1]
			  y_value= 100+100*sin((M_PI*angulo_grados)/180);
 80015c6:	4b7e      	ldr	r3, [pc, #504]	@ (80017c0 <read_joystick_position+0x2d0>)
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	a36e      	add	r3, pc, #440	@ (adr r3, 8001788 <read_joystick_position+0x298>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7ff f811 	bl	80005f8 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	4b78      	ldr	r3, [pc, #480]	@ (80017c4 <read_joystick_position+0x2d4>)
 80015e4:	f7ff f932 	bl	800084c <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	ec43 2b17 	vmov	d7, r2, r3
 80015f0:	eeb0 0a47 	vmov.f32	s0, s14
 80015f4:	eef0 0a67 	vmov.f32	s1, s15
 80015f8:	f007 fefe 	bl	80093f8 <sin>
 80015fc:	ec51 0b10 	vmov	r0, r1, d0
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b70      	ldr	r3, [pc, #448]	@ (80017c8 <read_joystick_position+0x2d8>)
 8001606:	f7fe fff7 	bl	80005f8 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	4b6c      	ldr	r3, [pc, #432]	@ (80017c8 <read_joystick_position+0x2d8>)
 8001618:	f7fe fe38 	bl	800028c <__adddf3>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	496b      	ldr	r1, [pc, #428]	@ (80017d0 <read_joystick_position+0x2e0>)
 8001622:	e9c1 2300 	strd	r2, r3, [r1]

			  //Movimiento de los servomotores con margen de limitación para evitar errores de medida
			  if(x_value>50.0 && mov_servo2<210)mov_servo2+=1;
 8001626:	4b69      	ldr	r3, [pc, #420]	@ (80017cc <read_joystick_position+0x2dc>)
 8001628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	4b68      	ldr	r3, [pc, #416]	@ (80017d4 <read_joystick_position+0x2e4>)
 8001632:	f7ff fa71 	bl	8000b18 <__aeabi_dcmpgt>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d017      	beq.n	800166c <read_joystick_position+0x17c>
 800163c:	4b66      	ldr	r3, [pc, #408]	@ (80017d8 <read_joystick_position+0x2e8>)
 800163e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b65      	ldr	r3, [pc, #404]	@ (80017dc <read_joystick_position+0x2ec>)
 8001648:	f7ff fa48 	bl	8000adc <__aeabi_dcmplt>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00c      	beq.n	800166c <read_joystick_position+0x17c>
 8001652:	4b61      	ldr	r3, [pc, #388]	@ (80017d8 <read_joystick_position+0x2e8>)
 8001654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b60      	ldr	r3, [pc, #384]	@ (80017e0 <read_joystick_position+0x2f0>)
 800165e:	f7fe fe15 	bl	800028c <__adddf3>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	495c      	ldr	r1, [pc, #368]	@ (80017d8 <read_joystick_position+0x2e8>)
 8001668:	e9c1 2300 	strd	r2, r3, [r1]
			  if(x_value<150.0 && mov_servo2>90)mov_servo2-=1;
 800166c:	4b57      	ldr	r3, [pc, #348]	@ (80017cc <read_joystick_position+0x2dc>)
 800166e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001672:	a347      	add	r3, pc, #284	@ (adr r3, 8001790 <read_joystick_position+0x2a0>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7ff fa30 	bl	8000adc <__aeabi_dcmplt>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d017      	beq.n	80016b2 <read_joystick_position+0x1c2>
 8001682:	4b55      	ldr	r3, [pc, #340]	@ (80017d8 <read_joystick_position+0x2e8>)
 8001684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b55      	ldr	r3, [pc, #340]	@ (80017e4 <read_joystick_position+0x2f4>)
 800168e:	f7ff fa43 	bl	8000b18 <__aeabi_dcmpgt>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00c      	beq.n	80016b2 <read_joystick_position+0x1c2>
 8001698:	4b4f      	ldr	r3, [pc, #316]	@ (80017d8 <read_joystick_position+0x2e8>)
 800169a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b4f      	ldr	r3, [pc, #316]	@ (80017e0 <read_joystick_position+0x2f0>)
 80016a4:	f7fe fdf0 	bl	8000288 <__aeabi_dsub>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	494a      	ldr	r1, [pc, #296]	@ (80017d8 <read_joystick_position+0x2e8>)
 80016ae:	e9c1 2300 	strd	r2, r3, [r1]
			  if(y_value<50.0 && mov_servo3<210)mov_servo3+=1;
 80016b2:	4b47      	ldr	r3, [pc, #284]	@ (80017d0 <read_joystick_position+0x2e0>)
 80016b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b45      	ldr	r3, [pc, #276]	@ (80017d4 <read_joystick_position+0x2e4>)
 80016be:	f7ff fa0d 	bl	8000adc <__aeabi_dcmplt>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d017      	beq.n	80016f8 <read_joystick_position+0x208>
 80016c8:	4b47      	ldr	r3, [pc, #284]	@ (80017e8 <read_joystick_position+0x2f8>)
 80016ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4b42      	ldr	r3, [pc, #264]	@ (80017dc <read_joystick_position+0x2ec>)
 80016d4:	f7ff fa02 	bl	8000adc <__aeabi_dcmplt>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00c      	beq.n	80016f8 <read_joystick_position+0x208>
 80016de:	4b42      	ldr	r3, [pc, #264]	@ (80017e8 <read_joystick_position+0x2f8>)
 80016e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	4b3d      	ldr	r3, [pc, #244]	@ (80017e0 <read_joystick_position+0x2f0>)
 80016ea:	f7fe fdcf 	bl	800028c <__adddf3>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	493d      	ldr	r1, [pc, #244]	@ (80017e8 <read_joystick_position+0x2f8>)
 80016f4:	e9c1 2300 	strd	r2, r3, [r1]
			  if(y_value>150.0 && mov_servo3>90)mov_servo3-=1;
 80016f8:	4b35      	ldr	r3, [pc, #212]	@ (80017d0 <read_joystick_position+0x2e0>)
 80016fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016fe:	a324      	add	r3, pc, #144	@ (adr r3, 8001790 <read_joystick_position+0x2a0>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7ff fa08 	bl	8000b18 <__aeabi_dcmpgt>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d017      	beq.n	800173e <read_joystick_position+0x24e>
 800170e:	4b36      	ldr	r3, [pc, #216]	@ (80017e8 <read_joystick_position+0x2f8>)
 8001710:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b32      	ldr	r3, [pc, #200]	@ (80017e4 <read_joystick_position+0x2f4>)
 800171a:	f7ff f9fd 	bl	8000b18 <__aeabi_dcmpgt>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00c      	beq.n	800173e <read_joystick_position+0x24e>
 8001724:	4b30      	ldr	r3, [pc, #192]	@ (80017e8 <read_joystick_position+0x2f8>)
 8001726:	e9d3 0100 	ldrd	r0, r1, [r3]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <read_joystick_position+0x2f0>)
 8001730:	f7fe fdaa 	bl	8000288 <__aeabi_dsub>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	492b      	ldr	r1, [pc, #172]	@ (80017e8 <read_joystick_position+0x2f8>)
 800173a:	e9c1 2300 	strd	r2, r3, [r1]

			  //Sector 0-60
			  if(v_directorx>1 && v_directory> 1 && v_directory< 3){
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <read_joystick_position+0x2bc>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d954      	bls.n	80017f0 <read_joystick_position+0x300>
 8001746:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <read_joystick_position+0x2c4>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d950      	bls.n	80017f0 <read_joystick_position+0x300>
 800174e:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <read_joystick_position+0x2c4>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d84c      	bhi.n	80017f0 <read_joystick_position+0x300>
				  angulo_grados=60*1.0*angulo/255;
 8001756:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <read_joystick_position+0x2c0>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fee2 	bl	8000524 <__aeabi_i2d>
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <read_joystick_position+0x2fc>)
 8001766:	f7fe ff47 	bl	80005f8 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	a309      	add	r3, pc, #36	@ (adr r3, 8001798 <read_joystick_position+0x2a8>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7ff f868 	bl	800084c <__aeabi_ddiv>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	490f      	ldr	r1, [pc, #60]	@ (80017c0 <read_joystick_position+0x2d0>)
 8001782:	e9c1 2300 	strd	r2, r3, [r1]
 8001786:	e14c      	b.n	8001a22 <read_joystick_position+0x532>
 8001788:	54442d18 	.word	0x54442d18
 800178c:	400921fb 	.word	0x400921fb
 8001790:	00000000 	.word	0x00000000
 8001794:	4062c000 	.word	0x4062c000
 8001798:	00000000 	.word	0x00000000
 800179c:	406fe000 	.word	0x406fe000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	200001c8 	.word	0x200001c8
 80017a8:	200003a4 	.word	0x200003a4
 80017ac:	200003b0 	.word	0x200003b0
 80017b0:	200003ae 	.word	0x200003ae
 80017b4:	200003b2 	.word	0x200003b2
 80017b8:	200003aa 	.word	0x200003aa
 80017bc:	200003ac 	.word	0x200003ac
 80017c0:	200003b8 	.word	0x200003b8
 80017c4:	40668000 	.word	0x40668000
 80017c8:	40590000 	.word	0x40590000
 80017cc:	200003c0 	.word	0x200003c0
 80017d0:	200003c8 	.word	0x200003c8
 80017d4:	40490000 	.word	0x40490000
 80017d8:	20000008 	.word	0x20000008
 80017dc:	406a4000 	.word	0x406a4000
 80017e0:	3ff00000 	.word	0x3ff00000
 80017e4:	40568000 	.word	0x40568000
 80017e8:	20000010 	.word	0x20000010
 80017ec:	404e0000 	.word	0x404e0000
			  }
			  //Sector 60-90
			  else if(v_directory== 3 && v_directorx>1){
 80017f0:	4b95      	ldr	r3, [pc, #596]	@ (8001a48 <read_joystick_position+0x558>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d121      	bne.n	800183c <read_joystick_position+0x34c>
 80017f8:	4b94      	ldr	r3, [pc, #592]	@ (8001a4c <read_joystick_position+0x55c>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d91d      	bls.n	800183c <read_joystick_position+0x34c>
				  angulo_grados= 60+30*angulo*1.0/68;
 8001800:	4b93      	ldr	r3, [pc, #588]	@ (8001a50 <read_joystick_position+0x560>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4613      	mov	r3, r2
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe88 	bl	8000524 <__aeabi_i2d>
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b8e      	ldr	r3, [pc, #568]	@ (8001a54 <read_joystick_position+0x564>)
 800181a:	f7ff f817 	bl	800084c <__aeabi_ddiv>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a58 <read_joystick_position+0x568>)
 800182c:	f7fe fd2e 	bl	800028c <__adddf3>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4989      	ldr	r1, [pc, #548]	@ (8001a5c <read_joystick_position+0x56c>)
 8001836:	e9c1 2300 	strd	r2, r3, [r1]
 800183a:	e0f2      	b.n	8001a22 <read_joystick_position+0x532>
		      }
			  //Sector 90-120
			  else if(v_directory== 3 && v_directorx<2){
 800183c:	4b82      	ldr	r3, [pc, #520]	@ (8001a48 <read_joystick_position+0x558>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d122      	bne.n	800188a <read_joystick_position+0x39a>
 8001844:	4b81      	ldr	r3, [pc, #516]	@ (8001a4c <read_joystick_position+0x55c>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d81e      	bhi.n	800188a <read_joystick_position+0x39a>
				  angulo_grados= 90+30*(68-angulo)*1.0/68;
 800184c:	4b80      	ldr	r3, [pc, #512]	@ (8001a50 <read_joystick_position+0x560>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	f1c3 0244 	rsb	r2, r3, #68	@ 0x44
 8001854:	4613      	mov	r3, r2
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	1a9b      	subs	r3, r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe61 	bl	8000524 <__aeabi_i2d>
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	4b7b      	ldr	r3, [pc, #492]	@ (8001a54 <read_joystick_position+0x564>)
 8001868:	f7fe fff0 	bl	800084c <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b79      	ldr	r3, [pc, #484]	@ (8001a60 <read_joystick_position+0x570>)
 800187a:	f7fe fd07 	bl	800028c <__adddf3>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4976      	ldr	r1, [pc, #472]	@ (8001a5c <read_joystick_position+0x56c>)
 8001884:	e9c1 2300 	strd	r2, r3, [r1]
 8001888:	e0cb      	b.n	8001a22 <read_joystick_position+0x532>
			  }
			  //Sector 120-180
		      else if(v_directorx<2 && v_directory> 1 && v_directory< 3){
 800188a:	4b70      	ldr	r3, [pc, #448]	@ (8001a4c <read_joystick_position+0x55c>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d826      	bhi.n	80018e0 <read_joystick_position+0x3f0>
 8001892:	4b6d      	ldr	r3, [pc, #436]	@ (8001a48 <read_joystick_position+0x558>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d922      	bls.n	80018e0 <read_joystick_position+0x3f0>
 800189a:	4b6b      	ldr	r3, [pc, #428]	@ (8001a48 <read_joystick_position+0x558>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d81e      	bhi.n	80018e0 <read_joystick_position+0x3f0>
				  angulo_grados= 120+60*(255-angulo)*1.0/255;
 80018a2:	4b6b      	ldr	r3, [pc, #428]	@ (8001a50 <read_joystick_position+0x560>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 80018aa:	4613      	mov	r3, r2
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe fe36 	bl	8000524 <__aeabi_i2d>
 80018b8:	a35d      	add	r3, pc, #372	@ (adr r3, 8001a30 <read_joystick_position+0x540>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe ffc5 	bl	800084c <__aeabi_ddiv>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b65      	ldr	r3, [pc, #404]	@ (8001a64 <read_joystick_position+0x574>)
 80018d0:	f7fe fcdc 	bl	800028c <__adddf3>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4960      	ldr	r1, [pc, #384]	@ (8001a5c <read_joystick_position+0x56c>)
 80018da:	e9c1 2300 	strd	r2, r3, [r1]
 80018de:	e0a0      	b.n	8001a22 <read_joystick_position+0x532>
			  }
			  //Sector 180-240
			  else if(v_directorx<2 && v_directory< 2 && v_directory> 0){
 80018e0:	4b5a      	ldr	r3, [pc, #360]	@ (8001a4c <read_joystick_position+0x55c>)
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d826      	bhi.n	8001936 <read_joystick_position+0x446>
 80018e8:	4b57      	ldr	r3, [pc, #348]	@ (8001a48 <read_joystick_position+0x558>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d822      	bhi.n	8001936 <read_joystick_position+0x446>
 80018f0:	4b55      	ldr	r3, [pc, #340]	@ (8001a48 <read_joystick_position+0x558>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01e      	beq.n	8001936 <read_joystick_position+0x446>
				  angulo_grados= 180+60*(255-angulo)*1.0/255;
 80018f8:	4b55      	ldr	r3, [pc, #340]	@ (8001a50 <read_joystick_position+0x560>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8001900:	4613      	mov	r3, r2
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe0b 	bl	8000524 <__aeabi_i2d>
 800190e:	a348      	add	r3, pc, #288	@ (adr r3, 8001a30 <read_joystick_position+0x540>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe ff9a 	bl	800084c <__aeabi_ddiv>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	4b50      	ldr	r3, [pc, #320]	@ (8001a68 <read_joystick_position+0x578>)
 8001926:	f7fe fcb1 	bl	800028c <__adddf3>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	494b      	ldr	r1, [pc, #300]	@ (8001a5c <read_joystick_position+0x56c>)
 8001930:	e9c1 2300 	strd	r2, r3, [r1]
 8001934:	e075      	b.n	8001a22 <read_joystick_position+0x532>
		      }
			  //Sector 240-270
			  else if(v_directory== 0 && v_directorx<2){
 8001936:	4b44      	ldr	r3, [pc, #272]	@ (8001a48 <read_joystick_position+0x558>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d120      	bne.n	8001980 <read_joystick_position+0x490>
 800193e:	4b43      	ldr	r3, [pc, #268]	@ (8001a4c <read_joystick_position+0x55c>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d81c      	bhi.n	8001980 <read_joystick_position+0x490>
				 angulo_grados= 240-30*(angulo-255)*1.0/68;
 8001946:	4b42      	ldr	r3, [pc, #264]	@ (8001a50 <read_joystick_position+0x560>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	f1a3 02ff 	sub.w	r2, r3, #255	@ 0xff
 800194e:	4613      	mov	r3, r2
 8001950:	011b      	lsls	r3, r3, #4
 8001952:	1a9b      	subs	r3, r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fde4 	bl	8000524 <__aeabi_i2d>
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	4b3c      	ldr	r3, [pc, #240]	@ (8001a54 <read_joystick_position+0x564>)
 8001962:	f7fe ff73 	bl	800084c <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	f04f 0000 	mov.w	r0, #0
 800196e:	493f      	ldr	r1, [pc, #252]	@ (8001a6c <read_joystick_position+0x57c>)
 8001970:	f7fe fc8a 	bl	8000288 <__aeabi_dsub>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4938      	ldr	r1, [pc, #224]	@ (8001a5c <read_joystick_position+0x56c>)
 800197a:	e9c1 2300 	strd	r2, r3, [r1]
 800197e:	e050      	b.n	8001a22 <read_joystick_position+0x532>
		      }
			  //Sector 270-300
				else if(v_directory== 0 && v_directorx>1){
 8001980:	4b31      	ldr	r3, [pc, #196]	@ (8001a48 <read_joystick_position+0x558>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d122      	bne.n	80019ce <read_joystick_position+0x4de>
 8001988:	4b30      	ldr	r3, [pc, #192]	@ (8001a4c <read_joystick_position+0x55c>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d91e      	bls.n	80019ce <read_joystick_position+0x4de>
			     angulo_grados= 270+30*(angulo-255+68)*1.0/68;
 8001990:	4b2f      	ldr	r3, [pc, #188]	@ (8001a50 <read_joystick_position+0x560>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	f1a3 02bb 	sub.w	r2, r3, #187	@ 0xbb
 8001998:	4613      	mov	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fdbf 	bl	8000524 <__aeabi_i2d>
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001a54 <read_joystick_position+0x564>)
 80019ac:	f7fe ff4e 	bl	800084c <__aeabi_ddiv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	a31f      	add	r3, pc, #124	@ (adr r3, 8001a38 <read_joystick_position+0x548>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fc65 	bl	800028c <__adddf3>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4925      	ldr	r1, [pc, #148]	@ (8001a5c <read_joystick_position+0x56c>)
 80019c8:	e9c1 2300 	strd	r2, r3, [r1]
 80019cc:	e029      	b.n	8001a22 <read_joystick_position+0x532>
			  }
			  //Sector 300-330
			  else if(v_directorx>1 && v_directory< 2 && v_directory> 0){
 80019ce:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <read_joystick_position+0x55c>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d925      	bls.n	8001a22 <read_joystick_position+0x532>
 80019d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <read_joystick_position+0x558>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d821      	bhi.n	8001a22 <read_joystick_position+0x532>
 80019de:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <read_joystick_position+0x558>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d01d      	beq.n	8001a22 <read_joystick_position+0x532>
				 angulo_grados= 300+60*(angulo)*1.0/255;
 80019e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <read_joystick_position+0x560>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	4613      	mov	r3, r2
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fd95 	bl	8000524 <__aeabi_i2d>
 80019fa:	a30d      	add	r3, pc, #52	@ (adr r3, 8001a30 <read_joystick_position+0x540>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe ff24 	bl	800084c <__aeabi_ddiv>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	a30c      	add	r3, pc, #48	@ (adr r3, 8001a40 <read_joystick_position+0x550>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe fc3b 	bl	800028c <__adddf3>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4910      	ldr	r1, [pc, #64]	@ (8001a5c <read_joystick_position+0x56c>)
 8001a1c:	e9c1 2300 	strd	r2, r3, [r1]

			  }
		  }
	}
 8001a20:	e7ff      	b.n	8001a22 <read_joystick_position+0x532>
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	f3af 8000 	nop.w
 8001a30:	00000000 	.word	0x00000000
 8001a34:	406fe000 	.word	0x406fe000
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	4070e000 	.word	0x4070e000
 8001a40:	00000000 	.word	0x00000000
 8001a44:	4072c000 	.word	0x4072c000
 8001a48:	200003b2 	.word	0x200003b2
 8001a4c:	200003b0 	.word	0x200003b0
 8001a50:	200003ae 	.word	0x200003ae
 8001a54:	40510000 	.word	0x40510000
 8001a58:	404e0000 	.word	0x404e0000
 8001a5c:	200003b8 	.word	0x200003b8
 8001a60:	40568000 	.word	0x40568000
 8001a64:	405e0000 	.word	0x405e0000
 8001a68:	40668000 	.word	0x40668000
 8001a6c:	406e0000 	.word	0x406e0000

08001a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8001a74:	f001 f91a 	bl	8002cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
	  SystemClock_Config();
 8001a78:	f000 f8ae 	bl	8001bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 8001a7c:	f000 fc7e 	bl	800237c <MX_GPIO_Init>
	  MX_ADC1_Init();
 8001a80:	f000 f914 	bl	8001cac <MX_ADC1_Init>
	  MX_ADC2_Init();
 8001a84:	f000 f964 	bl	8001d50 <MX_ADC2_Init>
	  MX_ADC3_Init();
 8001a88:	f000 f9b4 	bl	8001df4 <MX_ADC3_Init>
	  MX_TIM1_Init();
 8001a8c:	f000 fa68 	bl	8001f60 <MX_TIM1_Init>
	  MX_TIM2_Init();
 8001a90:	f000 faea 	bl	8002068 <MX_TIM2_Init>
	  MX_TIM3_Init();
 8001a94:	f000 fb40 	bl	8002118 <MX_TIM3_Init>
	  MX_TIM4_Init();
 8001a98:	f000 fb98 	bl	80021cc <MX_TIM4_Init>
	  MX_I2C1_Init();
 8001a9c:	f000 f9fc 	bl	8001e98 <MX_I2C1_Init>
	  MX_SPI1_Init();
 8001aa0:	f000 fa28 	bl	8001ef4 <MX_SPI1_Init>
	  MX_TIM8_Init();
 8001aa4:	f000 fbe6 	bl	8002274 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	483d      	ldr	r0, [pc, #244]	@ (8001ba0 <main+0x130>)
 8001aac:	f003 ffa0 	bl	80059f0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	483c      	ldr	r0, [pc, #240]	@ (8001ba4 <main+0x134>)
 8001ab4:	f003 ff9c 	bl	80059f0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001ab8:	2108      	movs	r1, #8
 8001aba:	483b      	ldr	r0, [pc, #236]	@ (8001ba8 <main+0x138>)
 8001abc:	f003 ff98 	bl	80059f0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	483a      	ldr	r0, [pc, #232]	@ (8001bac <main+0x13c>)
 8001ac4:	f003 ff94 	bl	80059f0 <HAL_TIM_PWM_Start>
	  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8001ac8:	210c      	movs	r1, #12
 8001aca:	4839      	ldr	r0, [pc, #228]	@ (8001bb0 <main+0x140>)
 8001acc:	f004 f8a8 	bl	8005c20 <HAL_TIM_IC_Start_IT>
	  lcd_init();
 8001ad0:	f7ff fa93 	bl	8000ffa <lcd_init>
	  ShootPWMInit(3125);
 8001ad4:	f640 4035 	movw	r0, #3125	@ 0xc35
 8001ad8:	f7ff fae2 	bl	80010a0 <ShootPWMInit>
	  lcd_clear();
 8001adc:	f7ff fa57 	bl	8000f8e <lcd_clear>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  	//Lectura del sensor de ultrasonidos
		HCSR04_Read();
 8001ae0:	f7ff fce6 	bl	80014b0 <HCSR04_Read>
		//Obtención de la posicion de los servos
		Pos_S2 = GetPosition(ReadServo(&hadc2));
 8001ae4:	4833      	ldr	r0, [pc, #204]	@ (8001bb4 <main+0x144>)
 8001ae6:	f7ff fb09 	bl	80010fc <ReadServo>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fae9 	bl	80010c4 <GetPosition>
 8001af2:	eef0 7a40 	vmov.f32	s15, s0
 8001af6:	4b30      	ldr	r3, [pc, #192]	@ (8001bb8 <main+0x148>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
		Pos_S3 = GetPosition(ReadServo(&hadc3));
 8001afc:	482f      	ldr	r0, [pc, #188]	@ (8001bbc <main+0x14c>)
 8001afe:	f7ff fafd 	bl	80010fc <ReadServo>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fadd 	bl	80010c4 <GetPosition>
 8001b0a:	eef0 7a40 	vmov.f32	s15, s0
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc0 <main+0x150>)
 8001b10:	edc3 7a00 	vstr	s15, [r3]
		//Lectura de la posición del Joystick
	    read_joystick_position();
 8001b14:	f7ff fcec 	bl	80014f0 <read_joystick_position>
		//Constante movimiento del servo responsable del sensor
		Rotate();
 8001b18:	f7ff fb96 	bl	8001248 <Rotate>
		//Movimiento de los servomotores
		SetPosition(&htim2, mov_servo2);
 8001b1c:	4b29      	ldr	r3, [pc, #164]	@ (8001bc4 <main+0x154>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	4610      	mov	r0, r2
 8001b24:	4619      	mov	r1, r3
 8001b26:	f7ff f829 	bl	8000b7c <__aeabi_d2uiz>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	4619      	mov	r1, r3
 8001b30:	481c      	ldr	r0, [pc, #112]	@ (8001ba4 <main+0x134>)
 8001b32:	f7ff fb5b 	bl	80011ec <SetPosition>
		SetPosition(&htim3, mov_servo3);
 8001b36:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <main+0x158>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7ff f81c 	bl	8000b7c <__aeabi_d2uiz>
 8001b44:	4603      	mov	r3, r0
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4817      	ldr	r0, [pc, #92]	@ (8001ba8 <main+0x138>)
 8001b4c:	f7ff fb4e 	bl	80011ec <SetPosition>
		//Escritura por pantalla dependiente de la distancia detectada por el servomotor
		if(Distance < 10){
 8001b50:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <main+0x15c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	d80f      	bhi.n	8001b78 <main+0x108>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,1);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b5e:	481c      	ldr	r0, [pc, #112]	@ (8001bd0 <main+0x160>)
 8001b60:	f001 ffe8 	bl	8003b34 <HAL_GPIO_WritePin>
			if (pantalla==0){
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <main+0x164>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d114      	bne.n	8001b96 <main+0x126>
				//Salida por pantalla
				DrawDisplay();
 8001b6c:	f7ff fae2 	bl	8001134 <DrawDisplay>
				pantalla=1;
 8001b70:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <main+0x164>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	e00e      	b.n	8001b96 <main+0x126>
			}
		}
		else{
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b7e:	4814      	ldr	r0, [pc, #80]	@ (8001bd0 <main+0x160>)
 8001b80:	f001 ffd8 	bl	8003b34 <HAL_GPIO_WritePin>
			if (pantalla==1){
 8001b84:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <main+0x164>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d104      	bne.n	8001b96 <main+0x126>
				//Salida por pantalla
				lcd_clear();
 8001b8c:	f7ff f9ff 	bl	8000f8e <lcd_clear>
				pantalla=0;
 8001b90:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <main+0x164>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
			}
		}
	   // Retardo recomendado en la DATASHEET
	   HAL_Delay(10);
 8001b96:	200a      	movs	r0, #10
 8001b98:	f001 f8fa 	bl	8002d90 <HAL_Delay>
		HCSR04_Read();
 8001b9c:	e7a0      	b.n	8001ae0 <main+0x70>
 8001b9e:	bf00      	nop
 8001ba0:	20000220 	.word	0x20000220
 8001ba4:	20000268 	.word	0x20000268
 8001ba8:	200002b0 	.word	0x200002b0
 8001bac:	20000340 	.word	0x20000340
 8001bb0:	200002f8 	.word	0x200002f8
 8001bb4:	200000e4 	.word	0x200000e4
 8001bb8:	20000388 	.word	0x20000388
 8001bbc:	2000012c 	.word	0x2000012c
 8001bc0:	2000038c 	.word	0x2000038c
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	20000010 	.word	0x20000010
 8001bcc:	200003a1 	.word	0x200003a1
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	200003d0 	.word	0x200003d0

08001bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b094      	sub	sp, #80	@ 0x50
 8001bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bde:	f107 0320 	add.w	r3, r7, #32
 8001be2:	2230      	movs	r2, #48	@ 0x30
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f005 f9bb 	bl	8006f62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <SystemClock_Config+0xcc>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	4a27      	ldr	r2, [pc, #156]	@ (8001ca4 <SystemClock_Config+0xcc>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <SystemClock_Config+0xcc>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <SystemClock_Config+0xd0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a21      	ldr	r2, [pc, #132]	@ (8001ca8 <SystemClock_Config+0xd0>)
 8001c22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca8 <SystemClock_Config+0xd0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c34:	2302      	movs	r3, #2
 8001c36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c3c:	2310      	movs	r3, #16
 8001c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c40:	2302      	movs	r3, #2
 8001c42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c44:	2300      	movs	r3, #0
 8001c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c48:	2308      	movs	r3, #8
 8001c4a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001c4c:	2332      	movs	r3, #50	@ 0x32
 8001c4e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c50:	2304      	movs	r3, #4
 8001c52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c54:	2307      	movs	r3, #7
 8001c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c58:	f107 0320 	add.w	r3, r7, #32
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 fc21 	bl	80044a4 <HAL_RCC_OscConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c68:	f000 fc22 	bl	80024b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c6c:	230f      	movs	r3, #15
 8001c6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c70:	2302      	movs	r3, #2
 8001c72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c78:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 fe82 	bl	8004994 <HAL_RCC_ClockConfig>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c96:	f000 fc0b 	bl	80024b0 <Error_Handler>
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3750      	adds	r7, #80	@ 0x50
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40007000 	.word	0x40007000

08001cac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cbe:	4b21      	ldr	r3, [pc, #132]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001cc0:	4a21      	ldr	r2, [pc, #132]	@ (8001d48 <MX_ADC1_Init+0x9c>)
 8001cc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cca:	4b1e      	ldr	r3, [pc, #120]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cdc:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ce4:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cea:	4b16      	ldr	r3, [pc, #88]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001cec:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <MX_ADC1_Init+0xa0>)
 8001cee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d0a:	480e      	ldr	r0, [pc, #56]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001d0c:	f001 f864 	bl	8002dd8 <HAL_ADC_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d16:	f000 fbcb 	bl	80024b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d26:	463b      	mov	r3, r7
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4806      	ldr	r0, [pc, #24]	@ (8001d44 <MX_ADC1_Init+0x98>)
 8001d2c:	f001 fa36 	bl	800319c <HAL_ADC_ConfigChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001d36:	f000 fbbb 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000009c 	.word	0x2000009c
 8001d48:	40012000 	.word	0x40012000
 8001d4c:	0f000001 	.word	0x0f000001

08001d50 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d56:	463b      	mov	r3, r7
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001d62:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001d64:	4a21      	ldr	r2, [pc, #132]	@ (8001dec <MX_ADC2_Init+0x9c>)
 8001d66:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d88:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d8e:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001d90:	4a17      	ldr	r2, [pc, #92]	@ (8001df0 <MX_ADC2_Init+0xa0>)
 8001d92:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001dae:	480e      	ldr	r0, [pc, #56]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001db0:	f001 f812 	bl	8002dd8 <HAL_ADC_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001dba:	f000 fb79 	bl	80024b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001dca:	463b      	mov	r3, r7
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4806      	ldr	r0, [pc, #24]	@ (8001de8 <MX_ADC2_Init+0x98>)
 8001dd0:	f001 f9e4 	bl	800319c <HAL_ADC_ConfigChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001dda:	f000 fb69 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200000e4 	.word	0x200000e4
 8001dec:	40012100 	.word	0x40012100
 8001df0:	0f000001 	.word	0x0f000001

08001df4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001e06:	4b21      	ldr	r3, [pc, #132]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e08:	4a21      	ldr	r2, [pc, #132]	@ (8001e90 <MX_ADC3_Init+0x9c>)
 8001e0a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001e18:	4b1c      	ldr	r3, [pc, #112]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e24:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e32:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e34:	4a17      	ldr	r2, [pc, #92]	@ (8001e94 <MX_ADC3_Init+0xa0>)
 8001e36:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e38:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001e52:	480e      	ldr	r0, [pc, #56]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e54:	f000 ffc0 	bl	8002dd8 <HAL_ADC_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001e5e:	f000 fb27 	bl	80024b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001e62:	2303      	movs	r3, #3
 8001e64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001e6e:	463b      	mov	r3, r7
 8001e70:	4619      	mov	r1, r3
 8001e72:	4806      	ldr	r0, [pc, #24]	@ (8001e8c <MX_ADC3_Init+0x98>)
 8001e74:	f001 f992 	bl	800319c <HAL_ADC_ConfigChannel>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001e7e:	f000 fb17 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000012c 	.word	0x2000012c
 8001e90:	40012200 	.word	0x40012200
 8001e94:	0f000001 	.word	0x0f000001

08001e98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001e9e:	4a13      	ldr	r2, [pc, #76]	@ (8001eec <MX_I2C1_Init+0x54>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ea4:	4a12      	ldr	r2, [pc, #72]	@ (8001ef0 <MX_I2C1_Init+0x58>)
 8001ea6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001eb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ece:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	@ (8001ee8 <MX_I2C1_Init+0x50>)
 8001ed6:	f001 fe47 	bl	8003b68 <HAL_I2C_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ee0:	f000 fae6 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000174 	.word	0x20000174
 8001eec:	40005400 	.word	0x40005400
 8001ef0:	000186a0 	.word	0x000186a0

08001ef4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001efa:	4a18      	ldr	r2, [pc, #96]	@ (8001f5c <MX_SPI1_Init+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001efe:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f06:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f12:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f28:	2218      	movs	r2, #24
 8001f2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f38:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f40:	220a      	movs	r2, #10
 8001f42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <MX_SPI1_Init+0x64>)
 8001f46:	f002 ff31 	bl	8004dac <HAL_SPI_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f50:	f000 faae 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200001c8 	.word	0x200001c8
 8001f5c:	40013000 	.word	0x40013000

08001f60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b092      	sub	sp, #72	@ 0x48
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
 8001f80:	615a      	str	r2, [r3, #20]
 8001f82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2220      	movs	r2, #32
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 ffe9 	bl	8006f62 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f90:	4b33      	ldr	r3, [pc, #204]	@ (8002060 <MX_TIM1_Init+0x100>)
 8001f92:	4a34      	ldr	r2, [pc, #208]	@ (8002064 <MX_TIM1_Init+0x104>)
 8001f94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 8001f96:	4b32      	ldr	r3, [pc, #200]	@ (8002060 <MX_TIM1_Init+0x100>)
 8001f98:	229f      	movs	r2, #159	@ 0x9f
 8001f9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9c:	4b30      	ldr	r3, [pc, #192]	@ (8002060 <MX_TIM1_Init+0x100>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001fa2:	4b2f      	ldr	r3, [pc, #188]	@ (8002060 <MX_TIM1_Init+0x100>)
 8001fa4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001fa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001faa:	4b2d      	ldr	r3, [pc, #180]	@ (8002060 <MX_TIM1_Init+0x100>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002060 <MX_TIM1_Init+0x100>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002060 <MX_TIM1_Init+0x100>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fbc:	4828      	ldr	r0, [pc, #160]	@ (8002060 <MX_TIM1_Init+0x100>)
 8001fbe:	f003 fcc7 	bl	8005950 <HAL_TIM_PWM_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001fc8:	f000 fa72 	bl	80024b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4821      	ldr	r0, [pc, #132]	@ (8002060 <MX_TIM1_Init+0x100>)
 8001fdc:	f004 fdae 	bl	8006b3c <HAL_TIMEx_MasterConfigSynchronization>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001fe6:	f000 fa63 	bl	80024b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fea:	2360      	movs	r3, #96	@ 0x60
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002006:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800200a:	2200      	movs	r2, #0
 800200c:	4619      	mov	r1, r3
 800200e:	4814      	ldr	r0, [pc, #80]	@ (8002060 <MX_TIM1_Init+0x100>)
 8002010:	f004 f8ba 	bl	8006188 <HAL_TIM_PWM_ConfigChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800201a:	f000 fa49 	bl	80024b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002032:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002036:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	4619      	mov	r1, r3
 8002040:	4807      	ldr	r0, [pc, #28]	@ (8002060 <MX_TIM1_Init+0x100>)
 8002042:	f004 fdf7 	bl	8006c34 <HAL_TIMEx_ConfigBreakDeadTime>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800204c:	f000 fa30 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002050:	4803      	ldr	r0, [pc, #12]	@ (8002060 <MX_TIM1_Init+0x100>)
 8002052:	f000 fc41 	bl	80028d8 <HAL_TIM_MspPostInit>

}
 8002056:	bf00      	nop
 8002058:	3748      	adds	r7, #72	@ 0x48
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000220 	.word	0x20000220
 8002064:	40010000 	.word	0x40010000

08002068 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08a      	sub	sp, #40	@ 0x28
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206e:	f107 0320 	add.w	r3, r7, #32
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
 8002084:	611a      	str	r2, [r3, #16]
 8002086:	615a      	str	r2, [r3, #20]
 8002088:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800208a:	4b22      	ldr	r3, [pc, #136]	@ (8002114 <MX_TIM2_Init+0xac>)
 800208c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002090:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8002092:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <MX_TIM2_Init+0xac>)
 8002094:	229f      	movs	r2, #159	@ 0x9f
 8002096:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002098:	4b1e      	ldr	r3, [pc, #120]	@ (8002114 <MX_TIM2_Init+0xac>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800209e:	4b1d      	ldr	r3, [pc, #116]	@ (8002114 <MX_TIM2_Init+0xac>)
 80020a0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80020a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <MX_TIM2_Init+0xac>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ac:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <MX_TIM2_Init+0xac>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020b2:	4818      	ldr	r0, [pc, #96]	@ (8002114 <MX_TIM2_Init+0xac>)
 80020b4:	f003 fc4c 	bl	8005950 <HAL_TIM_PWM_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80020be:	f000 f9f7 	bl	80024b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020ca:	f107 0320 	add.w	r3, r7, #32
 80020ce:	4619      	mov	r1, r3
 80020d0:	4810      	ldr	r0, [pc, #64]	@ (8002114 <MX_TIM2_Init+0xac>)
 80020d2:	f004 fd33 	bl	8006b3c <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80020dc:	f000 f9e8 	bl	80024b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020e0:	2360      	movs	r3, #96	@ 0x60
 80020e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020f0:	1d3b      	adds	r3, r7, #4
 80020f2:	2204      	movs	r2, #4
 80020f4:	4619      	mov	r1, r3
 80020f6:	4807      	ldr	r0, [pc, #28]	@ (8002114 <MX_TIM2_Init+0xac>)
 80020f8:	f004 f846 	bl	8006188 <HAL_TIM_PWM_ConfigChannel>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002102:	f000 f9d5 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002106:	4803      	ldr	r0, [pc, #12]	@ (8002114 <MX_TIM2_Init+0xac>)
 8002108:	f000 fbe6 	bl	80028d8 <HAL_TIM_MspPostInit>

}
 800210c:	bf00      	nop
 800210e:	3728      	adds	r7, #40	@ 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000268 	.word	0x20000268

08002118 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	@ 0x28
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211e:	f107 0320 	add.w	r3, r7, #32
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]
 8002136:	615a      	str	r2, [r3, #20]
 8002138:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800213a:	4b22      	ldr	r3, [pc, #136]	@ (80021c4 <MX_TIM3_Init+0xac>)
 800213c:	4a22      	ldr	r2, [pc, #136]	@ (80021c8 <MX_TIM3_Init+0xb0>)
 800213e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8002140:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <MX_TIM3_Init+0xac>)
 8002142:	229f      	movs	r2, #159	@ 0x9f
 8002144:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002146:	4b1f      	ldr	r3, [pc, #124]	@ (80021c4 <MX_TIM3_Init+0xac>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 800214c:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <MX_TIM3_Init+0xac>)
 800214e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002152:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002154:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <MX_TIM3_Init+0xac>)
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215a:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <MX_TIM3_Init+0xac>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002160:	4818      	ldr	r0, [pc, #96]	@ (80021c4 <MX_TIM3_Init+0xac>)
 8002162:	f003 fbf5 	bl	8005950 <HAL_TIM_PWM_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800216c:	f000 f9a0 	bl	80024b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002178:	f107 0320 	add.w	r3, r7, #32
 800217c:	4619      	mov	r1, r3
 800217e:	4811      	ldr	r0, [pc, #68]	@ (80021c4 <MX_TIM3_Init+0xac>)
 8002180:	f004 fcdc 	bl	8006b3c <HAL_TIMEx_MasterConfigSynchronization>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800218a:	f000 f991 	bl	80024b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800218e:	2360      	movs	r3, #96	@ 0x60
 8002190:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2208      	movs	r2, #8
 80021a2:	4619      	mov	r1, r3
 80021a4:	4807      	ldr	r0, [pc, #28]	@ (80021c4 <MX_TIM3_Init+0xac>)
 80021a6:	f003 ffef 	bl	8006188 <HAL_TIM_PWM_ConfigChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80021b0:	f000 f97e 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021b4:	4803      	ldr	r0, [pc, #12]	@ (80021c4 <MX_TIM3_Init+0xac>)
 80021b6:	f000 fb8f 	bl	80028d8 <HAL_TIM_MspPostInit>

}
 80021ba:	bf00      	nop
 80021bc:	3728      	adds	r7, #40	@ 0x28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200002b0 	.word	0x200002b0
 80021c8:	40000400 	.word	0x40000400

080021cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d2:	f107 0310 	add.w	r3, r7, #16
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021dc:	463b      	mov	r3, r7
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021e8:	4b20      	ldr	r3, [pc, #128]	@ (800226c <MX_TIM4_Init+0xa0>)
 80021ea:	4a21      	ldr	r2, [pc, #132]	@ (8002270 <MX_TIM4_Init+0xa4>)
 80021ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 80021ee:	4b1f      	ldr	r3, [pc, #124]	@ (800226c <MX_TIM4_Init+0xa0>)
 80021f0:	2263      	movs	r2, #99	@ 0x63
 80021f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f4:	4b1d      	ldr	r3, [pc, #116]	@ (800226c <MX_TIM4_Init+0xa0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80021fa:	4b1c      	ldr	r3, [pc, #112]	@ (800226c <MX_TIM4_Init+0xa0>)
 80021fc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002200:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002202:	4b1a      	ldr	r3, [pc, #104]	@ (800226c <MX_TIM4_Init+0xa0>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	4b18      	ldr	r3, [pc, #96]	@ (800226c <MX_TIM4_Init+0xa0>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800220e:	4817      	ldr	r0, [pc, #92]	@ (800226c <MX_TIM4_Init+0xa0>)
 8002210:	f003 fcb6 	bl	8005b80 <HAL_TIM_IC_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800221a:	f000 f949 	bl	80024b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	4619      	mov	r1, r3
 800222c:	480f      	ldr	r0, [pc, #60]	@ (800226c <MX_TIM4_Init+0xa0>)
 800222e:	f004 fc85 	bl	8006b3c <HAL_TIMEx_MasterConfigSynchronization>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002238:	f000 f93a 	bl	80024b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800223c:	2300      	movs	r3, #0
 800223e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002240:	2301      	movs	r3, #1
 8002242:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800224c:	463b      	mov	r3, r7
 800224e:	220c      	movs	r2, #12
 8002250:	4619      	mov	r1, r3
 8002252:	4806      	ldr	r0, [pc, #24]	@ (800226c <MX_TIM4_Init+0xa0>)
 8002254:	f003 fefc 	bl	8006050 <HAL_TIM_IC_ConfigChannel>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800225e:	f000 f927 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200002f8 	.word	0x200002f8
 8002270:	40000800 	.word	0x40000800

08002274 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b092      	sub	sp, #72	@ 0x48
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002284:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
 8002294:	615a      	str	r2, [r3, #20]
 8002296:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	2220      	movs	r2, #32
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 fe5f 	bl	8006f62 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80022a4:	4b33      	ldr	r3, [pc, #204]	@ (8002374 <MX_TIM8_Init+0x100>)
 80022a6:	4a34      	ldr	r2, [pc, #208]	@ (8002378 <MX_TIM8_Init+0x104>)
 80022a8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 255-1;
 80022aa:	4b32      	ldr	r3, [pc, #200]	@ (8002374 <MX_TIM8_Init+0x100>)
 80022ac:	22fe      	movs	r2, #254	@ 0xfe
 80022ae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b0:	4b30      	ldr	r3, [pc, #192]	@ (8002374 <MX_TIM8_Init+0x100>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 6250-1;
 80022b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002374 <MX_TIM8_Init+0x100>)
 80022b8:	f641 0269 	movw	r2, #6249	@ 0x1869
 80022bc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022be:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <MX_TIM8_Init+0x100>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002374 <MX_TIM8_Init+0x100>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002374 <MX_TIM8_Init+0x100>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80022d0:	4828      	ldr	r0, [pc, #160]	@ (8002374 <MX_TIM8_Init+0x100>)
 80022d2:	f003 fb3d 	bl	8005950 <HAL_TIM_PWM_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80022dc:	f000 f8e8 	bl	80024b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e0:	2300      	movs	r3, #0
 80022e2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022ec:	4619      	mov	r1, r3
 80022ee:	4821      	ldr	r0, [pc, #132]	@ (8002374 <MX_TIM8_Init+0x100>)
 80022f0:	f004 fc24 	bl	8006b3c <HAL_TIMEx_MasterConfigSynchronization>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80022fa:	f000 f8d9 	bl	80024b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fe:	2360      	movs	r3, #96	@ 0x60
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800230a:	2300      	movs	r3, #0
 800230c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002312:	2300      	movs	r3, #0
 8002314:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800231a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800231e:	2200      	movs	r2, #0
 8002320:	4619      	mov	r1, r3
 8002322:	4814      	ldr	r0, [pc, #80]	@ (8002374 <MX_TIM8_Init+0x100>)
 8002324:	f003 ff30 	bl	8006188 <HAL_TIM_PWM_ConfigChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800232e:	f000 f8bf 	bl	80024b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002346:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800234a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	@ (8002374 <MX_TIM8_Init+0x100>)
 8002356:	f004 fc6d 	bl	8006c34 <HAL_TIMEx_ConfigBreakDeadTime>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8002360:	f000 f8a6 	bl	80024b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002364:	4803      	ldr	r0, [pc, #12]	@ (8002374 <MX_TIM8_Init+0x100>)
 8002366:	f000 fab7 	bl	80028d8 <HAL_TIM_MspPostInit>

}
 800236a:	bf00      	nop
 800236c:	3748      	adds	r7, #72	@ 0x48
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000340 	.word	0x20000340
 8002378:	40010400 	.word	0x40010400

0800237c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	@ 0x28
 8002380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	4b42      	ldr	r3, [pc, #264]	@ (80024a0 <MX_GPIO_Init+0x124>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	4a41      	ldr	r2, [pc, #260]	@ (80024a0 <MX_GPIO_Init+0x124>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a2:	4b3f      	ldr	r3, [pc, #252]	@ (80024a0 <MX_GPIO_Init+0x124>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b3b      	ldr	r3, [pc, #236]	@ (80024a0 <MX_GPIO_Init+0x124>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	4a3a      	ldr	r2, [pc, #232]	@ (80024a0 <MX_GPIO_Init+0x124>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023be:	4b38      	ldr	r3, [pc, #224]	@ (80024a0 <MX_GPIO_Init+0x124>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b34      	ldr	r3, [pc, #208]	@ (80024a0 <MX_GPIO_Init+0x124>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	4a33      	ldr	r2, [pc, #204]	@ (80024a0 <MX_GPIO_Init+0x124>)
 80023d4:	f043 0310 	orr.w	r3, r3, #16
 80023d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023da:	4b31      	ldr	r3, [pc, #196]	@ (80024a0 <MX_GPIO_Init+0x124>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	4b2d      	ldr	r3, [pc, #180]	@ (80024a0 <MX_GPIO_Init+0x124>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	4a2c      	ldr	r2, [pc, #176]	@ (80024a0 <MX_GPIO_Init+0x124>)
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f6:	4b2a      	ldr	r3, [pc, #168]	@ (80024a0 <MX_GPIO_Init+0x124>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	4b26      	ldr	r3, [pc, #152]	@ (80024a0 <MX_GPIO_Init+0x124>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	4a25      	ldr	r2, [pc, #148]	@ (80024a0 <MX_GPIO_Init+0x124>)
 800240c:	f043 0304 	orr.w	r3, r3, #4
 8002410:	6313      	str	r3, [r2, #48]	@ 0x30
 8002412:	4b23      	ldr	r3, [pc, #140]	@ (80024a0 <MX_GPIO_Init+0x124>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	2110      	movs	r1, #16
 8002422:	4820      	ldr	r0, [pc, #128]	@ (80024a4 <MX_GPIO_Init+0x128>)
 8002424:	f001 fb86 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8002428:	2200      	movs	r2, #0
 800242a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800242e:	481e      	ldr	r0, [pc, #120]	@ (80024a8 <MX_GPIO_Init+0x12c>)
 8002430:	f001 fb80 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002434:	2200      	movs	r2, #0
 8002436:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800243a:	481c      	ldr	r0, [pc, #112]	@ (80024ac <MX_GPIO_Init+0x130>)
 800243c:	f001 fb7a 	bl	8003b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002440:	2310      	movs	r3, #16
 8002442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002444:	2301      	movs	r3, #1
 8002446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4619      	mov	r1, r3
 8002456:	4813      	ldr	r0, [pc, #76]	@ (80024a4 <MX_GPIO_Init+0x128>)
 8002458:	f001 f9d0 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800245c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002462:	2301      	movs	r3, #1
 8002464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	480c      	ldr	r0, [pc, #48]	@ (80024a8 <MX_GPIO_Init+0x12c>)
 8002476:	f001 f9c1 	bl	80037fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800247a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800247e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002480:	2301      	movs	r3, #1
 8002482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4619      	mov	r1, r3
 8002492:	4806      	ldr	r0, [pc, #24]	@ (80024ac <MX_GPIO_Init+0x130>)
 8002494:	f001 f9b2 	bl	80037fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002498:	bf00      	nop
 800249a:	3728      	adds	r7, #40	@ 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020c00 	.word	0x40020c00

080024b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b4:	b672      	cpsid	i
}
 80024b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <Error_Handler+0x8>

080024bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <HAL_MspInit+0x4c>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002508 <HAL_MspInit+0x4c>)
 80024cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002508 <HAL_MspInit+0x4c>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <HAL_MspInit+0x4c>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	4a08      	ldr	r2, [pc, #32]	@ (8002508 <HAL_MspInit+0x4c>)
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_MspInit+0x4c>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024fa:	2007      	movs	r0, #7
 80024fc:	f001 f93c 	bl	8003778 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800

0800250c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08e      	sub	sp, #56	@ 0x38
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a45      	ldr	r2, [pc, #276]	@ (8002640 <HAL_ADC_MspInit+0x134>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d128      	bne.n	8002580 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
 8002532:	4b44      	ldr	r3, [pc, #272]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	4a43      	ldr	r2, [pc, #268]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253c:	6453      	str	r3, [r2, #68]	@ 0x44
 800253e:	4b41      	ldr	r3, [pc, #260]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002546:	623b      	str	r3, [r7, #32]
 8002548:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	4b3d      	ldr	r3, [pc, #244]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	4a3c      	ldr	r2, [pc, #240]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6313      	str	r3, [r2, #48]	@ 0x30
 800255a:	4b3a      	ldr	r3, [pc, #232]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002566:	2302      	movs	r3, #2
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800256a:	2303      	movs	r3, #3
 800256c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002576:	4619      	mov	r1, r3
 8002578:	4833      	ldr	r0, [pc, #204]	@ (8002648 <HAL_ADC_MspInit+0x13c>)
 800257a:	f001 f93f 	bl	80037fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800257e:	e05a      	b.n	8002636 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a31      	ldr	r2, [pc, #196]	@ (800264c <HAL_ADC_MspInit+0x140>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d128      	bne.n	80025dc <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	4b2d      	ldr	r3, [pc, #180]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	4a2c      	ldr	r2, [pc, #176]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 8002594:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002598:	6453      	str	r3, [r2, #68]	@ 0x44
 800259a:	4b2a      	ldr	r3, [pc, #168]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	4b26      	ldr	r3, [pc, #152]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a25      	ldr	r2, [pc, #148]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b23      	ldr	r3, [pc, #140]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025c2:	2304      	movs	r3, #4
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025c6:	2303      	movs	r3, #3
 80025c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d2:	4619      	mov	r1, r3
 80025d4:	481c      	ldr	r0, [pc, #112]	@ (8002648 <HAL_ADC_MspInit+0x13c>)
 80025d6:	f001 f911 	bl	80037fc <HAL_GPIO_Init>
}
 80025da:	e02c      	b.n	8002636 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002650 <HAL_ADC_MspInit+0x144>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d127      	bne.n	8002636 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	4a15      	ldr	r2, [pc, #84]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 80025f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025f6:	4b13      	ldr	r3, [pc, #76]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b0f      	ldr	r3, [pc, #60]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	4a0e      	ldr	r2, [pc, #56]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	@ 0x30
 8002612:	4b0c      	ldr	r3, [pc, #48]	@ (8002644 <HAL_ADC_MspInit+0x138>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800261e:	2308      	movs	r3, #8
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002622:	2303      	movs	r3, #3
 8002624:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800262e:	4619      	mov	r1, r3
 8002630:	4805      	ldr	r0, [pc, #20]	@ (8002648 <HAL_ADC_MspInit+0x13c>)
 8002632:	f001 f8e3 	bl	80037fc <HAL_GPIO_Init>
}
 8002636:	bf00      	nop
 8002638:	3738      	adds	r7, #56	@ 0x38
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40012000 	.word	0x40012000
 8002644:	40023800 	.word	0x40023800
 8002648:	40020000 	.word	0x40020000
 800264c:	40012100 	.word	0x40012100
 8002650:	40012200 	.word	0x40012200

08002654 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	@ 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a19      	ldr	r2, [pc, #100]	@ (80026d8 <HAL_I2C_MspInit+0x84>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d12b      	bne.n	80026ce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	4b18      	ldr	r3, [pc, #96]	@ (80026dc <HAL_I2C_MspInit+0x88>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	4a17      	ldr	r2, [pc, #92]	@ (80026dc <HAL_I2C_MspInit+0x88>)
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	6313      	str	r3, [r2, #48]	@ 0x30
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <HAL_I2C_MspInit+0x88>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002692:	23c0      	movs	r3, #192	@ 0xc0
 8002694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002696:	2312      	movs	r3, #18
 8002698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269e:	2303      	movs	r3, #3
 80026a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026a2:	2304      	movs	r3, #4
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4619      	mov	r1, r3
 80026ac:	480c      	ldr	r0, [pc, #48]	@ (80026e0 <HAL_I2C_MspInit+0x8c>)
 80026ae:	f001 f8a5 	bl	80037fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <HAL_I2C_MspInit+0x88>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	4a08      	ldr	r2, [pc, #32]	@ (80026dc <HAL_I2C_MspInit+0x88>)
 80026bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026c2:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <HAL_I2C_MspInit+0x88>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80026ce:	bf00      	nop
 80026d0:	3728      	adds	r7, #40	@ 0x28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40005400 	.word	0x40005400
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40020400 	.word	0x40020400

080026e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	@ 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a19      	ldr	r2, [pc, #100]	@ (8002768 <HAL_SPI_MspInit+0x84>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d12b      	bne.n	800275e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	4b18      	ldr	r3, [pc, #96]	@ (800276c <HAL_SPI_MspInit+0x88>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	4a17      	ldr	r2, [pc, #92]	@ (800276c <HAL_SPI_MspInit+0x88>)
 8002710:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002714:	6453      	str	r3, [r2, #68]	@ 0x44
 8002716:	4b15      	ldr	r3, [pc, #84]	@ (800276c <HAL_SPI_MspInit+0x88>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b11      	ldr	r3, [pc, #68]	@ (800276c <HAL_SPI_MspInit+0x88>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	4a10      	ldr	r2, [pc, #64]	@ (800276c <HAL_SPI_MspInit+0x88>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	@ 0x30
 8002732:	4b0e      	ldr	r3, [pc, #56]	@ (800276c <HAL_SPI_MspInit+0x88>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800273e:	23e0      	movs	r3, #224	@ 0xe0
 8002740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800274e:	2305      	movs	r3, #5
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4619      	mov	r1, r3
 8002758:	4805      	ldr	r0, [pc, #20]	@ (8002770 <HAL_SPI_MspInit+0x8c>)
 800275a:	f001 f84f 	bl	80037fc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800275e:	bf00      	nop
 8002760:	3728      	adds	r7, #40	@ 0x28
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40013000 	.word	0x40013000
 800276c:	40023800 	.word	0x40023800
 8002770:	40020000 	.word	0x40020000

08002774 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a29      	ldr	r2, [pc, #164]	@ (8002828 <HAL_TIM_PWM_MspInit+0xb4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	4b28      	ldr	r3, [pc, #160]	@ (800282c <HAL_TIM_PWM_MspInit+0xb8>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	4a27      	ldr	r2, [pc, #156]	@ (800282c <HAL_TIM_PWM_MspInit+0xb8>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6453      	str	r3, [r2, #68]	@ 0x44
 8002796:	4b25      	ldr	r3, [pc, #148]	@ (800282c <HAL_TIM_PWM_MspInit+0xb8>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80027a2:	e03a      	b.n	800281a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	4b1e      	ldr	r3, [pc, #120]	@ (800282c <HAL_TIM_PWM_MspInit+0xb8>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	4a1d      	ldr	r2, [pc, #116]	@ (800282c <HAL_TIM_PWM_MspInit+0xb8>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027be:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <HAL_TIM_PWM_MspInit+0xb8>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
}
 80027ca:	e026      	b.n	800281a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a17      	ldr	r2, [pc, #92]	@ (8002830 <HAL_TIM_PWM_MspInit+0xbc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10e      	bne.n	80027f4 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b14      	ldr	r3, [pc, #80]	@ (800282c <HAL_TIM_PWM_MspInit+0xb8>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	4a13      	ldr	r2, [pc, #76]	@ (800282c <HAL_TIM_PWM_MspInit+0xb8>)
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e6:	4b11      	ldr	r3, [pc, #68]	@ (800282c <HAL_TIM_PWM_MspInit+0xb8>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
}
 80027f2:	e012      	b.n	800281a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002834 <HAL_TIM_PWM_MspInit+0xc0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10d      	bne.n	800281a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <HAL_TIM_PWM_MspInit+0xb8>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	4a09      	ldr	r2, [pc, #36]	@ (800282c <HAL_TIM_PWM_MspInit+0xb8>)
 8002808:	f043 0302 	orr.w	r3, r3, #2
 800280c:	6453      	str	r3, [r2, #68]	@ 0x44
 800280e:	4b07      	ldr	r3, [pc, #28]	@ (800282c <HAL_TIM_PWM_MspInit+0xb8>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
}
 800281a:	bf00      	nop
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40010000 	.word	0x40010000
 800282c:	40023800 	.word	0x40023800
 8002830:	40000400 	.word	0x40000400
 8002834:	40010400 	.word	0x40010400

08002838 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	@ 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1d      	ldr	r2, [pc, #116]	@ (80028cc <HAL_TIM_IC_MspInit+0x94>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d134      	bne.n	80028c4 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	4b1c      	ldr	r3, [pc, #112]	@ (80028d0 <HAL_TIM_IC_MspInit+0x98>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	4a1b      	ldr	r2, [pc, #108]	@ (80028d0 <HAL_TIM_IC_MspInit+0x98>)
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	6413      	str	r3, [r2, #64]	@ 0x40
 800286a:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_TIM_IC_MspInit+0x98>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <HAL_TIM_IC_MspInit+0x98>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	4a14      	ldr	r2, [pc, #80]	@ (80028d0 <HAL_TIM_IC_MspInit+0x98>)
 8002880:	f043 0308 	orr.w	r3, r3, #8
 8002884:	6313      	str	r3, [r2, #48]	@ 0x30
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <HAL_TIM_IC_MspInit+0x98>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028a4:	2302      	movs	r3, #2
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	4619      	mov	r1, r3
 80028ae:	4809      	ldr	r0, [pc, #36]	@ (80028d4 <HAL_TIM_IC_MspInit+0x9c>)
 80028b0:	f000 ffa4 	bl	80037fc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028b4:	2200      	movs	r2, #0
 80028b6:	2100      	movs	r1, #0
 80028b8:	201e      	movs	r0, #30
 80028ba:	f000 ff68 	bl	800378e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028be:	201e      	movs	r0, #30
 80028c0:	f000 ff81 	bl	80037c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80028c4:	bf00      	nop
 80028c6:	3728      	adds	r7, #40	@ 0x28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40000800 	.word	0x40000800
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020c00 	.word	0x40020c00

080028d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	@ 0x30
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a48      	ldr	r2, [pc, #288]	@ (8002a18 <HAL_TIM_MspPostInit+0x140>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d11f      	bne.n	800293a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	4b47      	ldr	r3, [pc, #284]	@ (8002a1c <HAL_TIM_MspPostInit+0x144>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	4a46      	ldr	r2, [pc, #280]	@ (8002a1c <HAL_TIM_MspPostInit+0x144>)
 8002904:	f043 0310 	orr.w	r3, r3, #16
 8002908:	6313      	str	r3, [r2, #48]	@ 0x30
 800290a:	4b44      	ldr	r3, [pc, #272]	@ (8002a1c <HAL_TIM_MspPostInit+0x144>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002916:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002928:	2301      	movs	r3, #1
 800292a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	4619      	mov	r1, r3
 8002932:	483b      	ldr	r0, [pc, #236]	@ (8002a20 <HAL_TIM_MspPostInit+0x148>)
 8002934:	f000 ff62 	bl	80037fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002938:	e06a      	b.n	8002a10 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002942:	d11e      	bne.n	8002982 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	4b34      	ldr	r3, [pc, #208]	@ (8002a1c <HAL_TIM_MspPostInit+0x144>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	4a33      	ldr	r2, [pc, #204]	@ (8002a1c <HAL_TIM_MspPostInit+0x144>)
 800294e:	f043 0302 	orr.w	r3, r3, #2
 8002952:	6313      	str	r3, [r2, #48]	@ 0x30
 8002954:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_TIM_MspPostInit+0x144>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002960:	2308      	movs	r3, #8
 8002962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002970:	2301      	movs	r3, #1
 8002972:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	4619      	mov	r1, r3
 800297a:	482a      	ldr	r0, [pc, #168]	@ (8002a24 <HAL_TIM_MspPostInit+0x14c>)
 800297c:	f000 ff3e 	bl	80037fc <HAL_GPIO_Init>
}
 8002980:	e046      	b.n	8002a10 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a28      	ldr	r2, [pc, #160]	@ (8002a28 <HAL_TIM_MspPostInit+0x150>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d11e      	bne.n	80029ca <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800298c:	2300      	movs	r3, #0
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	4b22      	ldr	r3, [pc, #136]	@ (8002a1c <HAL_TIM_MspPostInit+0x144>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002994:	4a21      	ldr	r2, [pc, #132]	@ (8002a1c <HAL_TIM_MspPostInit+0x144>)
 8002996:	f043 0302 	orr.w	r3, r3, #2
 800299a:	6313      	str	r3, [r2, #48]	@ 0x30
 800299c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a1c <HAL_TIM_MspPostInit+0x144>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029a8:	2301      	movs	r3, #1
 80029aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029b8:	2302      	movs	r3, #2
 80029ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029bc:	f107 031c 	add.w	r3, r7, #28
 80029c0:	4619      	mov	r1, r3
 80029c2:	4818      	ldr	r0, [pc, #96]	@ (8002a24 <HAL_TIM_MspPostInit+0x14c>)
 80029c4:	f000 ff1a 	bl	80037fc <HAL_GPIO_Init>
}
 80029c8:	e022      	b.n	8002a10 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM8)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a17      	ldr	r2, [pc, #92]	@ (8002a2c <HAL_TIM_MspPostInit+0x154>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d11d      	bne.n	8002a10 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <HAL_TIM_MspPostInit+0x144>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029dc:	4a0f      	ldr	r2, [pc, #60]	@ (8002a1c <HAL_TIM_MspPostInit+0x144>)
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e4:	4b0d      	ldr	r3, [pc, #52]	@ (8002a1c <HAL_TIM_MspPostInit+0x144>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029f0:	2340      	movs	r3, #64	@ 0x40
 80029f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a00:	2303      	movs	r3, #3
 8002a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4809      	ldr	r0, [pc, #36]	@ (8002a30 <HAL_TIM_MspPostInit+0x158>)
 8002a0c:	f000 fef6 	bl	80037fc <HAL_GPIO_Init>
}
 8002a10:	bf00      	nop
 8002a12:	3730      	adds	r7, #48	@ 0x30
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40020400 	.word	0x40020400
 8002a28:	40000400 	.word	0x40000400
 8002a2c:	40010400 	.word	0x40010400
 8002a30:	40020800 	.word	0x40020800

08002a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <NMI_Handler+0x4>

08002a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <HardFault_Handler+0x4>

08002a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <MemManage_Handler+0x4>

08002a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <BusFault_Handler+0x4>

08002a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <UsageFault_Handler+0x4>

08002a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a8a:	f000 f961 	bl	8002d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a98:	4802      	ldr	r0, [pc, #8]	@ (8002aa4 <TIM4_IRQHandler+0x10>)
 8002a9a:	f003 f9e9 	bl	8005e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200002f8 	.word	0x200002f8

08002aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return 1;
 8002aac:	2301      	movs	r3, #1
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <_kill>:

int _kill(int pid, int sig)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ac2:	f004 faab 	bl	800701c <__errno>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2216      	movs	r2, #22
 8002aca:	601a      	str	r2, [r3, #0]
  return -1;
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_exit>:

void _exit (int status)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ffe7 	bl	8002ab8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002aea:	bf00      	nop
 8002aec:	e7fd      	b.n	8002aea <_exit+0x12>

08002aee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e00a      	b.n	8002b16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b00:	f3af 8000 	nop.w
 8002b04:	4601      	mov	r1, r0
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	60ba      	str	r2, [r7, #8]
 8002b0c:	b2ca      	uxtb	r2, r1
 8002b0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3301      	adds	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	dbf0      	blt.n	8002b00 <_read+0x12>
  }

  return len;
 8002b1e:	687b      	ldr	r3, [r7, #4]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	e009      	b.n	8002b4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	60ba      	str	r2, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	dbf1      	blt.n	8002b3a <_write+0x12>
  }
  return len;
 8002b56:	687b      	ldr	r3, [r7, #4]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_close>:

int _close(int file)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b88:	605a      	str	r2, [r3, #4]
  return 0;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <_isatty>:

int _isatty(int file)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ba0:	2301      	movs	r3, #1
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd0:	4a14      	ldr	r2, [pc, #80]	@ (8002c24 <_sbrk+0x5c>)
 8002bd2:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <_sbrk+0x60>)
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bdc:	4b13      	ldr	r3, [pc, #76]	@ (8002c2c <_sbrk+0x64>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <_sbrk+0x64>)
 8002be6:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <_sbrk+0x68>)
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bea:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <_sbrk+0x64>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d207      	bcs.n	8002c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bf8:	f004 fa10 	bl	800701c <__errno>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	220c      	movs	r2, #12
 8002c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	e009      	b.n	8002c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c08:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c0e:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	4a05      	ldr	r2, [pc, #20]	@ (8002c2c <_sbrk+0x64>)
 8002c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20020000 	.word	0x20020000
 8002c28:	00000400 	.word	0x00000400
 8002c2c:	200004a0 	.word	0x200004a0
 8002c30:	200005f8 	.word	0x200005f8

08002c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c38:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <SystemInit+0x20>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	4a05      	ldr	r2, [pc, #20]	@ (8002c54 <SystemInit+0x20>)
 8002c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c5c:	f7ff ffea 	bl	8002c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c60:	480c      	ldr	r0, [pc, #48]	@ (8002c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c62:	490d      	ldr	r1, [pc, #52]	@ (8002c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c64:	4a0d      	ldr	r2, [pc, #52]	@ (8002c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c68:	e002      	b.n	8002c70 <LoopCopyDataInit>

08002c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c6e:	3304      	adds	r3, #4

08002c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c74:	d3f9      	bcc.n	8002c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c78:	4c0a      	ldr	r4, [pc, #40]	@ (8002ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c7c:	e001      	b.n	8002c82 <LoopFillZerobss>

08002c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c80:	3204      	adds	r2, #4

08002c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c84:	d3fb      	bcc.n	8002c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c86:	f004 f9cf 	bl	8007028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c8a:	f7fe fef1 	bl	8001a70 <main>
  bx  lr    
 8002c8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c98:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002c9c:	0800a8e0 	.word	0x0800a8e0
  ldr r2, =_sbss
 8002ca0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002ca4:	200005f4 	.word	0x200005f4

08002ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ca8:	e7fe      	b.n	8002ca8 <ADC_IRQHandler>
	...

08002cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cec <HAL_Init+0x40>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cec <HAL_Init+0x40>)
 8002cb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <HAL_Init+0x40>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cec <HAL_Init+0x40>)
 8002cc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc8:	4b08      	ldr	r3, [pc, #32]	@ (8002cec <HAL_Init+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a07      	ldr	r2, [pc, #28]	@ (8002cec <HAL_Init+0x40>)
 8002cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd4:	2003      	movs	r0, #3
 8002cd6:	f000 fd4f 	bl	8003778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f000 f808 	bl	8002cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce0:	f7ff fbec 	bl	80024bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023c00 	.word	0x40023c00

08002cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf8:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <HAL_InitTick+0x54>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b12      	ldr	r3, [pc, #72]	@ (8002d48 <HAL_InitTick+0x58>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	4619      	mov	r1, r3
 8002d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fd67 	bl	80037e2 <HAL_SYSTICK_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00e      	b.n	8002d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b0f      	cmp	r3, #15
 8002d22:	d80a      	bhi.n	8002d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d24:	2200      	movs	r2, #0
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	f000 fd2f 	bl	800378e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d30:	4a06      	ldr	r2, [pc, #24]	@ (8002d4c <HAL_InitTick+0x5c>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e000      	b.n	8002d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000018 	.word	0x20000018
 8002d48:	20000020 	.word	0x20000020
 8002d4c:	2000001c 	.word	0x2000001c

08002d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d54:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <HAL_IncTick+0x20>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b06      	ldr	r3, [pc, #24]	@ (8002d74 <HAL_IncTick+0x24>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	4a04      	ldr	r2, [pc, #16]	@ (8002d74 <HAL_IncTick+0x24>)
 8002d62:	6013      	str	r3, [r2, #0]
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000020 	.word	0x20000020
 8002d74:	200004a4 	.word	0x200004a4

08002d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	@ (8002d8c <HAL_GetTick+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	200004a4 	.word	0x200004a4

08002d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d98:	f7ff ffee 	bl	8002d78 <HAL_GetTick>
 8002d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d005      	beq.n	8002db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002daa:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd4 <HAL_Delay+0x44>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002db6:	bf00      	nop
 8002db8:	f7ff ffde 	bl	8002d78 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d8f7      	bhi.n	8002db8 <HAL_Delay+0x28>
  {
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000020 	.word	0x20000020

08002dd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e033      	b.n	8002e56 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fb88 	bl	800250c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	f003 0310 	and.w	r3, r3, #16
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d118      	bne.n	8002e48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e1e:	f023 0302 	bic.w	r3, r3, #2
 8002e22:	f043 0202 	orr.w	r2, r3, #2
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fad8 	bl	80033e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e46:	e001      	b.n	8002e4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_ADC_Start+0x1a>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e0b2      	b.n	8002fe0 <HAL_ADC_Start+0x180>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d018      	beq.n	8002ec2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ea0:	4b52      	ldr	r3, [pc, #328]	@ (8002fec <HAL_ADC_Start+0x18c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	@ (8002ff0 <HAL_ADC_Start+0x190>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	0c9a      	lsrs	r2, r3, #18
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002eb4:	e002      	b.n	8002ebc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f9      	bne.n	8002eb6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d17a      	bne.n	8002fc6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d007      	beq.n	8002f02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002efa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f0e:	d106      	bne.n	8002f1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f14:	f023 0206 	bic.w	r2, r3, #6
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f1c:	e002      	b.n	8002f24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f2c:	4b31      	ldr	r3, [pc, #196]	@ (8002ff4 <HAL_ADC_Start+0x194>)
 8002f2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002f38:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d12a      	bne.n	8002f9c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ff8 <HAL_ADC_Start+0x198>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d015      	beq.n	8002f7c <HAL_ADC_Start+0x11c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a29      	ldr	r2, [pc, #164]	@ (8002ffc <HAL_ADC_Start+0x19c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d105      	bne.n	8002f66 <HAL_ADC_Start+0x106>
 8002f5a:	4b26      	ldr	r3, [pc, #152]	@ (8002ff4 <HAL_ADC_Start+0x194>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a25      	ldr	r2, [pc, #148]	@ (8003000 <HAL_ADC_Start+0x1a0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d136      	bne.n	8002fde <HAL_ADC_Start+0x17e>
 8002f70:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <HAL_ADC_Start+0x194>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d130      	bne.n	8002fde <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d129      	bne.n	8002fde <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	e020      	b.n	8002fde <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a15      	ldr	r2, [pc, #84]	@ (8002ff8 <HAL_ADC_Start+0x198>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d11b      	bne.n	8002fde <HAL_ADC_Start+0x17e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d114      	bne.n	8002fde <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	e00b      	b.n	8002fde <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	f043 0210 	orr.w	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	20000018 	.word	0x20000018
 8002ff0:	431bde83 	.word	0x431bde83
 8002ff4:	40012300 	.word	0x40012300
 8002ff8:	40012000 	.word	0x40012000
 8002ffc:	40012100 	.word	0x40012100
 8003000:	40012200 	.word	0x40012200

08003004 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_ADC_Stop+0x16>
 8003016:	2302      	movs	r3, #2
 8003018:	e021      	b.n	800305e <HAL_ADC_Stop+0x5a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0201 	bic.w	r2, r2, #1
 8003030:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003086:	d113      	bne.n	80030b0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003096:	d10b      	bne.n	80030b0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e063      	b.n	8003178 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80030b0:	f7ff fe62 	bl	8002d78 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030b6:	e021      	b.n	80030fc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030be:	d01d      	beq.n	80030fc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <HAL_ADC_PollForConversion+0x6c>
 80030c6:	f7ff fe57 	bl	8002d78 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d212      	bcs.n	80030fc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d00b      	beq.n	80030fc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	f043 0204 	orr.w	r2, r3, #4
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e03d      	b.n	8003178 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b02      	cmp	r3, #2
 8003108:	d1d6      	bne.n	80030b8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f06f 0212 	mvn.w	r2, #18
 8003112:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d123      	bne.n	8003176 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003132:	2b00      	cmp	r3, #0
 8003134:	d11f      	bne.n	8003176 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003140:	2b00      	cmp	r3, #0
 8003142:	d006      	beq.n	8003152 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800314e:	2b00      	cmp	r3, #0
 8003150:	d111      	bne.n	8003176 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d105      	bne.n	8003176 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x1c>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e105      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x228>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b09      	cmp	r3, #9
 80031c6:	d925      	bls.n	8003214 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68d9      	ldr	r1, [r3, #12]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	3b1e      	subs	r3, #30
 80031de:	2207      	movs	r2, #7
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43da      	mvns	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	400a      	ands	r2, r1
 80031ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68d9      	ldr	r1, [r3, #12]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	4618      	mov	r0, r3
 8003200:	4603      	mov	r3, r0
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4403      	add	r3, r0
 8003206:	3b1e      	subs	r3, #30
 8003208:	409a      	lsls	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	e022      	b.n	800325a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6919      	ldr	r1, [r3, #16]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	2207      	movs	r2, #7
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	400a      	ands	r2, r1
 8003236:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6919      	ldr	r1, [r3, #16]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	4618      	mov	r0, r3
 800324a:	4603      	mov	r3, r0
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4403      	add	r3, r0
 8003250:	409a      	lsls	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b06      	cmp	r3, #6
 8003260:	d824      	bhi.n	80032ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	3b05      	subs	r3, #5
 8003274:	221f      	movs	r2, #31
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43da      	mvns	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	400a      	ands	r2, r1
 8003282:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	4618      	mov	r0, r3
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	3b05      	subs	r3, #5
 800329e:	fa00 f203 	lsl.w	r2, r0, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80032aa:	e04c      	b.n	8003346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	d824      	bhi.n	80032fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	3b23      	subs	r3, #35	@ 0x23
 80032c6:	221f      	movs	r2, #31
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43da      	mvns	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	400a      	ands	r2, r1
 80032d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	4618      	mov	r0, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	3b23      	subs	r3, #35	@ 0x23
 80032f0:	fa00 f203 	lsl.w	r2, r0, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80032fc:	e023      	b.n	8003346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	3b41      	subs	r3, #65	@ 0x41
 8003310:	221f      	movs	r2, #31
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43da      	mvns	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	400a      	ands	r2, r1
 800331e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	4618      	mov	r0, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	3b41      	subs	r3, #65	@ 0x41
 800333a:	fa00 f203 	lsl.w	r2, r0, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003346:	4b22      	ldr	r3, [pc, #136]	@ (80033d0 <HAL_ADC_ConfigChannel+0x234>)
 8003348:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a21      	ldr	r2, [pc, #132]	@ (80033d4 <HAL_ADC_ConfigChannel+0x238>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d109      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1cc>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b12      	cmp	r3, #18
 800335a:	d105      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a19      	ldr	r2, [pc, #100]	@ (80033d4 <HAL_ADC_ConfigChannel+0x238>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d123      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x21e>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b10      	cmp	r3, #16
 8003378:	d003      	beq.n	8003382 <HAL_ADC_ConfigChannel+0x1e6>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b11      	cmp	r3, #17
 8003380:	d11b      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2b10      	cmp	r3, #16
 8003394:	d111      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003396:	4b10      	ldr	r3, [pc, #64]	@ (80033d8 <HAL_ADC_ConfigChannel+0x23c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a10      	ldr	r2, [pc, #64]	@ (80033dc <HAL_ADC_ConfigChannel+0x240>)
 800339c:	fba2 2303 	umull	r2, r3, r2, r3
 80033a0:	0c9a      	lsrs	r2, r3, #18
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033ac:	e002      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f9      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40012300 	.word	0x40012300
 80033d4:	40012000 	.word	0x40012000
 80033d8:	20000018 	.word	0x20000018
 80033dc:	431bde83 	.word	0x431bde83

080033e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033e8:	4b79      	ldr	r3, [pc, #484]	@ (80035d0 <ADC_Init+0x1f0>)
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	431a      	orrs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003414:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	021a      	lsls	r2, r3, #8
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003438:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6859      	ldr	r1, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800345a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6899      	ldr	r1, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003472:	4a58      	ldr	r2, [pc, #352]	@ (80035d4 <ADC_Init+0x1f4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d022      	beq.n	80034be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003486:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6899      	ldr	r1, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6899      	ldr	r1, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	e00f      	b.n	80034de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0202 	bic.w	r2, r2, #2
 80034ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6899      	ldr	r1, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	7e1b      	ldrb	r3, [r3, #24]
 80034f8:	005a      	lsls	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01b      	beq.n	8003544 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800351a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800352a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	3b01      	subs	r3, #1
 8003538:	035a      	lsls	r2, r3, #13
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	e007      	b.n	8003554 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003552:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003562:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	3b01      	subs	r3, #1
 8003570:	051a      	lsls	r2, r3, #20
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003588:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6899      	ldr	r1, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003596:	025a      	lsls	r2, r3, #9
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6899      	ldr	r1, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	029a      	lsls	r2, r3, #10
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	40012300 	.word	0x40012300
 80035d4:	0f000001 	.word	0x0f000001

080035d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e8:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <__NVIC_SetPriorityGrouping+0x44>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035f4:	4013      	ands	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003600:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360a:	4a04      	ldr	r2, [pc, #16]	@ (800361c <__NVIC_SetPriorityGrouping+0x44>)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	60d3      	str	r3, [r2, #12]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003624:	4b04      	ldr	r3, [pc, #16]	@ (8003638 <__NVIC_GetPriorityGrouping+0x18>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	f003 0307 	and.w	r3, r3, #7
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	2b00      	cmp	r3, #0
 800364c:	db0b      	blt.n	8003666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	f003 021f 	and.w	r2, r3, #31
 8003654:	4907      	ldr	r1, [pc, #28]	@ (8003674 <__NVIC_EnableIRQ+0x38>)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	2001      	movs	r0, #1
 800365e:	fa00 f202 	lsl.w	r2, r0, r2
 8003662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000e100 	.word	0xe000e100

08003678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	6039      	str	r1, [r7, #0]
 8003682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003688:	2b00      	cmp	r3, #0
 800368a:	db0a      	blt.n	80036a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	490c      	ldr	r1, [pc, #48]	@ (80036c4 <__NVIC_SetPriority+0x4c>)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	440b      	add	r3, r1
 800369c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a0:	e00a      	b.n	80036b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	4908      	ldr	r1, [pc, #32]	@ (80036c8 <__NVIC_SetPriority+0x50>)
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	3b04      	subs	r3, #4
 80036b0:	0112      	lsls	r2, r2, #4
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	440b      	add	r3, r1
 80036b6:	761a      	strb	r2, [r3, #24]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000e100 	.word	0xe000e100
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	@ 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f1c3 0307 	rsb	r3, r3, #7
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	bf28      	it	cs
 80036ea:	2304      	movcs	r3, #4
 80036ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d902      	bls.n	80036fc <NVIC_EncodePriority+0x30>
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3b03      	subs	r3, #3
 80036fa:	e000      	b.n	80036fe <NVIC_EncodePriority+0x32>
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	401a      	ands	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003714:	f04f 31ff 	mov.w	r1, #4294967295
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	43d9      	mvns	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	4313      	orrs	r3, r2
         );
}
 8003726:	4618      	mov	r0, r3
 8003728:	3724      	adds	r7, #36	@ 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3b01      	subs	r3, #1
 8003740:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003744:	d301      	bcc.n	800374a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003746:	2301      	movs	r3, #1
 8003748:	e00f      	b.n	800376a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800374a:	4a0a      	ldr	r2, [pc, #40]	@ (8003774 <SysTick_Config+0x40>)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3b01      	subs	r3, #1
 8003750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003752:	210f      	movs	r1, #15
 8003754:	f04f 30ff 	mov.w	r0, #4294967295
 8003758:	f7ff ff8e 	bl	8003678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800375c:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <SysTick_Config+0x40>)
 800375e:	2200      	movs	r2, #0
 8003760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003762:	4b04      	ldr	r3, [pc, #16]	@ (8003774 <SysTick_Config+0x40>)
 8003764:	2207      	movs	r2, #7
 8003766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	e000e010 	.word	0xe000e010

08003778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff ff29 	bl	80035d8 <__NVIC_SetPriorityGrouping>
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af00      	add	r7, sp, #0
 8003794:	4603      	mov	r3, r0
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037a0:	f7ff ff3e 	bl	8003620 <__NVIC_GetPriorityGrouping>
 80037a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	6978      	ldr	r0, [r7, #20]
 80037ac:	f7ff ff8e 	bl	80036cc <NVIC_EncodePriority>
 80037b0:	4602      	mov	r2, r0
 80037b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff5d 	bl	8003678 <__NVIC_SetPriority>
}
 80037be:	bf00      	nop
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	4603      	mov	r3, r0
 80037ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ff31 	bl	800363c <__NVIC_EnableIRQ>
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ffa2 	bl	8003734 <SysTick_Config>
 80037f0:	4603      	mov	r3, r0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	@ 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	e16b      	b.n	8003af0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003818:	2201      	movs	r2, #1
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	429a      	cmp	r2, r3
 8003832:	f040 815a 	bne.w	8003aea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b01      	cmp	r3, #1
 8003840:	d005      	beq.n	800384e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800384a:	2b02      	cmp	r3, #2
 800384c:	d130      	bne.n	80038b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2203      	movs	r2, #3
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003884:	2201      	movs	r2, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 0201 	and.w	r2, r3, #1
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d017      	beq.n	80038ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	2203      	movs	r2, #3
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0303 	and.w	r3, r3, #3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d123      	bne.n	8003940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	08da      	lsrs	r2, r3, #3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3208      	adds	r2, #8
 8003900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	220f      	movs	r2, #15
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	08da      	lsrs	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3208      	adds	r2, #8
 800393a:	69b9      	ldr	r1, [r7, #24]
 800393c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	2203      	movs	r2, #3
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0203 	and.w	r2, r3, #3
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80b4 	beq.w	8003aea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	4b60      	ldr	r3, [pc, #384]	@ (8003b08 <HAL_GPIO_Init+0x30c>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398a:	4a5f      	ldr	r2, [pc, #380]	@ (8003b08 <HAL_GPIO_Init+0x30c>)
 800398c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003990:	6453      	str	r3, [r2, #68]	@ 0x44
 8003992:	4b5d      	ldr	r3, [pc, #372]	@ (8003b08 <HAL_GPIO_Init+0x30c>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800399e:	4a5b      	ldr	r2, [pc, #364]	@ (8003b0c <HAL_GPIO_Init+0x310>)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	3302      	adds	r3, #2
 80039a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	220f      	movs	r2, #15
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a52      	ldr	r2, [pc, #328]	@ (8003b10 <HAL_GPIO_Init+0x314>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d02b      	beq.n	8003a22 <HAL_GPIO_Init+0x226>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a51      	ldr	r2, [pc, #324]	@ (8003b14 <HAL_GPIO_Init+0x318>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d025      	beq.n	8003a1e <HAL_GPIO_Init+0x222>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a50      	ldr	r2, [pc, #320]	@ (8003b18 <HAL_GPIO_Init+0x31c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01f      	beq.n	8003a1a <HAL_GPIO_Init+0x21e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a4f      	ldr	r2, [pc, #316]	@ (8003b1c <HAL_GPIO_Init+0x320>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d019      	beq.n	8003a16 <HAL_GPIO_Init+0x21a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003b20 <HAL_GPIO_Init+0x324>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <HAL_GPIO_Init+0x216>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003b24 <HAL_GPIO_Init+0x328>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00d      	beq.n	8003a0e <HAL_GPIO_Init+0x212>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003b28 <HAL_GPIO_Init+0x32c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <HAL_GPIO_Init+0x20e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a4b      	ldr	r2, [pc, #300]	@ (8003b2c <HAL_GPIO_Init+0x330>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <HAL_GPIO_Init+0x20a>
 8003a02:	2307      	movs	r3, #7
 8003a04:	e00e      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a06:	2308      	movs	r3, #8
 8003a08:	e00c      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a0a:	2306      	movs	r3, #6
 8003a0c:	e00a      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a0e:	2305      	movs	r3, #5
 8003a10:	e008      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a12:	2304      	movs	r3, #4
 8003a14:	e006      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a16:	2303      	movs	r3, #3
 8003a18:	e004      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e002      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_GPIO_Init+0x228>
 8003a22:	2300      	movs	r3, #0
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	f002 0203 	and.w	r2, r2, #3
 8003a2a:	0092      	lsls	r2, r2, #2
 8003a2c:	4093      	lsls	r3, r2
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a34:	4935      	ldr	r1, [pc, #212]	@ (8003b0c <HAL_GPIO_Init+0x310>)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a42:	4b3b      	ldr	r3, [pc, #236]	@ (8003b30 <HAL_GPIO_Init+0x334>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a66:	4a32      	ldr	r2, [pc, #200]	@ (8003b30 <HAL_GPIO_Init+0x334>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a6c:	4b30      	ldr	r3, [pc, #192]	@ (8003b30 <HAL_GPIO_Init+0x334>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a90:	4a27      	ldr	r2, [pc, #156]	@ (8003b30 <HAL_GPIO_Init+0x334>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a96:	4b26      	ldr	r3, [pc, #152]	@ (8003b30 <HAL_GPIO_Init+0x334>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aba:	4a1d      	ldr	r2, [pc, #116]	@ (8003b30 <HAL_GPIO_Init+0x334>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b30 <HAL_GPIO_Init+0x334>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ae4:	4a12      	ldr	r2, [pc, #72]	@ (8003b30 <HAL_GPIO_Init+0x334>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3301      	adds	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b0f      	cmp	r3, #15
 8003af4:	f67f ae90 	bls.w	8003818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	3724      	adds	r7, #36	@ 0x24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40013800 	.word	0x40013800
 8003b10:	40020000 	.word	0x40020000
 8003b14:	40020400 	.word	0x40020400
 8003b18:	40020800 	.word	0x40020800
 8003b1c:	40020c00 	.word	0x40020c00
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40021400 	.word	0x40021400
 8003b28:	40021800 	.word	0x40021800
 8003b2c:	40021c00 	.word	0x40021c00
 8003b30:	40013c00 	.word	0x40013c00

08003b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]
 8003b40:	4613      	mov	r3, r2
 8003b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b44:	787b      	ldrb	r3, [r7, #1]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b4a:	887a      	ldrh	r2, [r7, #2]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b50:	e003      	b.n	8003b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b52:	887b      	ldrh	r3, [r7, #2]
 8003b54:	041a      	lsls	r2, r3, #16
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	619a      	str	r2, [r3, #24]
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
	...

08003b68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e12b      	b.n	8003dd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fe fd60 	bl	8002654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2224      	movs	r2, #36	@ 0x24
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bcc:	f001 f8da 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 8003bd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4a81      	ldr	r2, [pc, #516]	@ (8003ddc <HAL_I2C_Init+0x274>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d807      	bhi.n	8003bec <HAL_I2C_Init+0x84>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a80      	ldr	r2, [pc, #512]	@ (8003de0 <HAL_I2C_Init+0x278>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	bf94      	ite	ls
 8003be4:	2301      	movls	r3, #1
 8003be6:	2300      	movhi	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e006      	b.n	8003bfa <HAL_I2C_Init+0x92>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a7d      	ldr	r2, [pc, #500]	@ (8003de4 <HAL_I2C_Init+0x27c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	bf94      	ite	ls
 8003bf4:	2301      	movls	r3, #1
 8003bf6:	2300      	movhi	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0e7      	b.n	8003dd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a78      	ldr	r2, [pc, #480]	@ (8003de8 <HAL_I2C_Init+0x280>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	0c9b      	lsrs	r3, r3, #18
 8003c0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a6a      	ldr	r2, [pc, #424]	@ (8003ddc <HAL_I2C_Init+0x274>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d802      	bhi.n	8003c3c <HAL_I2C_Init+0xd4>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	e009      	b.n	8003c50 <HAL_I2C_Init+0xe8>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	4a69      	ldr	r2, [pc, #420]	@ (8003dec <HAL_I2C_Init+0x284>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	099b      	lsrs	r3, r3, #6
 8003c4e:	3301      	adds	r3, #1
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	495c      	ldr	r1, [pc, #368]	@ (8003ddc <HAL_I2C_Init+0x274>)
 8003c6c:	428b      	cmp	r3, r1
 8003c6e:	d819      	bhi.n	8003ca4 <HAL_I2C_Init+0x13c>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1e59      	subs	r1, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c7e:	1c59      	adds	r1, r3, #1
 8003c80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c84:	400b      	ands	r3, r1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_I2C_Init+0x138>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1e59      	subs	r1, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9e:	e051      	b.n	8003d44 <HAL_I2C_Init+0x1dc>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	e04f      	b.n	8003d44 <HAL_I2C_Init+0x1dc>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d111      	bne.n	8003cd0 <HAL_I2C_Init+0x168>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	1e58      	subs	r0, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	440b      	add	r3, r1
 8003cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	e012      	b.n	8003cf6 <HAL_I2C_Init+0x18e>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1e58      	subs	r0, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6859      	ldr	r1, [r3, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	0099      	lsls	r1, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_I2C_Init+0x196>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e022      	b.n	8003d44 <HAL_I2C_Init+0x1dc>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10e      	bne.n	8003d24 <HAL_I2C_Init+0x1bc>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1e58      	subs	r0, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	440b      	add	r3, r1
 8003d14:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d22:	e00f      	b.n	8003d44 <HAL_I2C_Init+0x1dc>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1e58      	subs	r0, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	0099      	lsls	r1, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	6809      	ldr	r1, [r1, #0]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6911      	ldr	r1, [r2, #16]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68d2      	ldr	r2, [r2, #12]
 8003d7e:	4311      	orrs	r1, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	430b      	orrs	r3, r1
 8003d86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	000186a0 	.word	0x000186a0
 8003de0:	001e847f 	.word	0x001e847f
 8003de4:	003d08ff 	.word	0x003d08ff
 8003de8:	431bde83 	.word	0x431bde83
 8003dec:	10624dd3 	.word	0x10624dd3

08003df0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	817b      	strh	r3, [r7, #10]
 8003e00:	4613      	mov	r3, r2
 8003e02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e04:	f7fe ffb8 	bl	8002d78 <HAL_GetTick>
 8003e08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b20      	cmp	r3, #32
 8003e14:	f040 80e0 	bne.w	8003fd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	2319      	movs	r3, #25
 8003e1e:	2201      	movs	r2, #1
 8003e20:	4970      	ldr	r1, [pc, #448]	@ (8003fe4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f964 	bl	80040f0 <I2C_WaitOnFlagUntilTimeout>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e0d3      	b.n	8003fda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_I2C_Master_Transmit+0x50>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e0cc      	b.n	8003fda <HAL_I2C_Master_Transmit+0x1ea>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d007      	beq.n	8003e66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f042 0201 	orr.w	r2, r2, #1
 8003e64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2221      	movs	r2, #33	@ 0x21
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2210      	movs	r2, #16
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	893a      	ldrh	r2, [r7, #8]
 8003e96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a50      	ldr	r2, [pc, #320]	@ (8003fe8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ea8:	8979      	ldrh	r1, [r7, #10]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	6a3a      	ldr	r2, [r7, #32]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f89c 	bl	8003fec <I2C_MasterRequestWrite>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e08d      	b.n	8003fda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ed4:	e066      	b.n	8003fa4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	6a39      	ldr	r1, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 fa22 	bl	8004324 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d107      	bne.n	8003efe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003efc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e06b      	b.n	8003fda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	781a      	ldrb	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d11b      	bne.n	8003f78 <HAL_I2C_Master_Transmit+0x188>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d017      	beq.n	8003f78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	6a39      	ldr	r1, [r7, #32]
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fa19 	bl	80043b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00d      	beq.n	8003fa4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d107      	bne.n	8003fa0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e01a      	b.n	8003fda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d194      	bne.n	8003ed6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e000      	b.n	8003fda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
  }
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	00100002 	.word	0x00100002
 8003fe8:	ffff0000 	.word	0xffff0000

08003fec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d006      	beq.n	8004016 <I2C_MasterRequestWrite+0x2a>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d003      	beq.n	8004016 <I2C_MasterRequestWrite+0x2a>
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004014:	d108      	bne.n	8004028 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e00b      	b.n	8004040 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	2b12      	cmp	r3, #18
 800402e:	d107      	bne.n	8004040 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800403e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f84f 	bl	80040f0 <I2C_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00d      	beq.n	8004074 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004066:	d103      	bne.n	8004070 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e035      	b.n	80040e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800407c:	d108      	bne.n	8004090 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800407e:	897b      	ldrh	r3, [r7, #10]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800408c:	611a      	str	r2, [r3, #16]
 800408e:	e01b      	b.n	80040c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004090:	897b      	ldrh	r3, [r7, #10]
 8004092:	11db      	asrs	r3, r3, #7
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f003 0306 	and.w	r3, r3, #6
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f063 030f 	orn	r3, r3, #15
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	490e      	ldr	r1, [pc, #56]	@ (80040e8 <I2C_MasterRequestWrite+0xfc>)
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f898 	bl	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e010      	b.n	80040e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040be:	897b      	ldrh	r3, [r7, #10]
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4907      	ldr	r1, [pc, #28]	@ (80040ec <I2C_MasterRequestWrite+0x100>)
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 f888 	bl	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	00010008 	.word	0x00010008
 80040ec:	00010002 	.word	0x00010002

080040f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004100:	e048      	b.n	8004194 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d044      	beq.n	8004194 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410a:	f7fe fe35 	bl	8002d78 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d302      	bcc.n	8004120 <I2C_WaitOnFlagUntilTimeout+0x30>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d139      	bne.n	8004194 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	0c1b      	lsrs	r3, r3, #16
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b01      	cmp	r3, #1
 8004128:	d10d      	bne.n	8004146 <I2C_WaitOnFlagUntilTimeout+0x56>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	43da      	mvns	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4013      	ands	r3, r2
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	e00c      	b.n	8004160 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	43da      	mvns	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4013      	ands	r3, r2
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	429a      	cmp	r2, r3
 8004164:	d116      	bne.n	8004194 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	f043 0220 	orr.w	r2, r3, #32
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e023      	b.n	80041dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	0c1b      	lsrs	r3, r3, #16
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10d      	bne.n	80041ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	43da      	mvns	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4013      	ands	r3, r2
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bf0c      	ite	eq
 80041b0:	2301      	moveq	r3, #1
 80041b2:	2300      	movne	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	e00c      	b.n	80041d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	43da      	mvns	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d093      	beq.n	8004102 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041f2:	e071      	b.n	80042d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004202:	d123      	bne.n	800424c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004212:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800421c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	f043 0204 	orr.w	r2, r3, #4
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e067      	b.n	800431c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d041      	beq.n	80042d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004254:	f7fe fd90 	bl	8002d78 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d136      	bne.n	80042d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d10c      	bne.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	43da      	mvns	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	bf14      	ite	ne
 8004286:	2301      	movne	r3, #1
 8004288:	2300      	moveq	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	e00b      	b.n	80042a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	43da      	mvns	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4013      	ands	r3, r2
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d016      	beq.n	80042d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	f043 0220 	orr.w	r2, r3, #32
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e021      	b.n	800431c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d10c      	bne.n	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	43da      	mvns	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4013      	ands	r3, r2
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf14      	ite	ne
 80042f4:	2301      	movne	r3, #1
 80042f6:	2300      	moveq	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e00b      	b.n	8004314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	43da      	mvns	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	f47f af6d 	bne.w	80041f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004330:	e034      	b.n	800439c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f886 	bl	8004444 <I2C_IsAcknowledgeFailed>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e034      	b.n	80043ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004348:	d028      	beq.n	800439c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434a:	f7fe fd15 	bl	8002d78 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	429a      	cmp	r2, r3
 8004358:	d302      	bcc.n	8004360 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d11d      	bne.n	800439c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436a:	2b80      	cmp	r3, #128	@ 0x80
 800436c:	d016      	beq.n	800439c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004388:	f043 0220 	orr.w	r2, r3, #32
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e007      	b.n	80043ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a6:	2b80      	cmp	r3, #128	@ 0x80
 80043a8:	d1c3      	bne.n	8004332 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043c0:	e034      	b.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f83e 	bl	8004444 <I2C_IsAcknowledgeFailed>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e034      	b.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d028      	beq.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043da:	f7fe fccd 	bl	8002d78 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d302      	bcc.n	80043f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d11d      	bne.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d016      	beq.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e007      	b.n	800443c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b04      	cmp	r3, #4
 8004438:	d1c3      	bne.n	80043c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800445a:	d11b      	bne.n	8004494 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004464:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004480:	f043 0204 	orr.w	r2, r3, #4
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e267      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d075      	beq.n	80045ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044c2:	4b88      	ldr	r3, [pc, #544]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d00c      	beq.n	80044e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ce:	4b85      	ldr	r3, [pc, #532]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d112      	bne.n	8004500 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044da:	4b82      	ldr	r3, [pc, #520]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044e6:	d10b      	bne.n	8004500 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	4b7e      	ldr	r3, [pc, #504]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d05b      	beq.n	80045ac <HAL_RCC_OscConfig+0x108>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d157      	bne.n	80045ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e242      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004508:	d106      	bne.n	8004518 <HAL_RCC_OscConfig+0x74>
 800450a:	4b76      	ldr	r3, [pc, #472]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a75      	ldr	r2, [pc, #468]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e01d      	b.n	8004554 <HAL_RCC_OscConfig+0xb0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004520:	d10c      	bne.n	800453c <HAL_RCC_OscConfig+0x98>
 8004522:	4b70      	ldr	r3, [pc, #448]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a6f      	ldr	r2, [pc, #444]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004528:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4b6d      	ldr	r3, [pc, #436]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a6c      	ldr	r2, [pc, #432]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e00b      	b.n	8004554 <HAL_RCC_OscConfig+0xb0>
 800453c:	4b69      	ldr	r3, [pc, #420]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a68      	ldr	r2, [pc, #416]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004546:	6013      	str	r3, [r2, #0]
 8004548:	4b66      	ldr	r3, [pc, #408]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a65      	ldr	r2, [pc, #404]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 800454e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d013      	beq.n	8004584 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fe fc0c 	bl	8002d78 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004564:	f7fe fc08 	bl	8002d78 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b64      	cmp	r3, #100	@ 0x64
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e207      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004576:	4b5b      	ldr	r3, [pc, #364]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0xc0>
 8004582:	e014      	b.n	80045ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fe fbf8 	bl	8002d78 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800458c:	f7fe fbf4 	bl	8002d78 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	@ 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e1f3      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459e:	4b51      	ldr	r3, [pc, #324]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0xe8>
 80045aa:	e000      	b.n	80045ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d063      	beq.n	8004682 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ba:	4b4a      	ldr	r3, [pc, #296]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00b      	beq.n	80045de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c6:	4b47      	ldr	r3, [pc, #284]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d11c      	bne.n	800460c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d2:	4b44      	ldr	r3, [pc, #272]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d116      	bne.n	800460c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045de:	4b41      	ldr	r3, [pc, #260]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <HAL_RCC_OscConfig+0x152>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d001      	beq.n	80045f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e1c7      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f6:	4b3b      	ldr	r3, [pc, #236]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	4937      	ldr	r1, [pc, #220]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004606:	4313      	orrs	r3, r2
 8004608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460a:	e03a      	b.n	8004682 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d020      	beq.n	8004656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004614:	4b34      	ldr	r3, [pc, #208]	@ (80046e8 <HAL_RCC_OscConfig+0x244>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461a:	f7fe fbad 	bl	8002d78 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004622:	f7fe fba9 	bl	8002d78 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e1a8      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004634:	4b2b      	ldr	r3, [pc, #172]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004640:	4b28      	ldr	r3, [pc, #160]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4925      	ldr	r1, [pc, #148]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]
 8004654:	e015      	b.n	8004682 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004656:	4b24      	ldr	r3, [pc, #144]	@ (80046e8 <HAL_RCC_OscConfig+0x244>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fe fb8c 	bl	8002d78 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004664:	f7fe fb88 	bl	8002d78 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e187      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004676:	4b1b      	ldr	r3, [pc, #108]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d036      	beq.n	80046fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d016      	beq.n	80046c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004696:	4b15      	ldr	r3, [pc, #84]	@ (80046ec <HAL_RCC_OscConfig+0x248>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7fe fb6c 	bl	8002d78 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a4:	f7fe fb68 	bl	8002d78 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e167      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b6:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <HAL_RCC_OscConfig+0x240>)
 80046b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x200>
 80046c2:	e01b      	b.n	80046fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c4:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <HAL_RCC_OscConfig+0x248>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ca:	f7fe fb55 	bl	8002d78 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d0:	e00e      	b.n	80046f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d2:	f7fe fb51 	bl	8002d78 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d907      	bls.n	80046f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e150      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
 80046e4:	40023800 	.word	0x40023800
 80046e8:	42470000 	.word	0x42470000
 80046ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f0:	4b88      	ldr	r3, [pc, #544]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 80046f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1ea      	bne.n	80046d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 8097 	beq.w	8004838 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470a:	2300      	movs	r3, #0
 800470c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470e:	4b81      	ldr	r3, [pc, #516]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10f      	bne.n	800473a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	4b7d      	ldr	r3, [pc, #500]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	4a7c      	ldr	r2, [pc, #496]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004728:	6413      	str	r3, [r2, #64]	@ 0x40
 800472a:	4b7a      	ldr	r3, [pc, #488]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004736:	2301      	movs	r3, #1
 8004738:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473a:	4b77      	ldr	r3, [pc, #476]	@ (8004918 <HAL_RCC_OscConfig+0x474>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004742:	2b00      	cmp	r3, #0
 8004744:	d118      	bne.n	8004778 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004746:	4b74      	ldr	r3, [pc, #464]	@ (8004918 <HAL_RCC_OscConfig+0x474>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a73      	ldr	r2, [pc, #460]	@ (8004918 <HAL_RCC_OscConfig+0x474>)
 800474c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004752:	f7fe fb11 	bl	8002d78 <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475a:	f7fe fb0d 	bl	8002d78 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e10c      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476c:	4b6a      	ldr	r3, [pc, #424]	@ (8004918 <HAL_RCC_OscConfig+0x474>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0f0      	beq.n	800475a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d106      	bne.n	800478e <HAL_RCC_OscConfig+0x2ea>
 8004780:	4b64      	ldr	r3, [pc, #400]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004784:	4a63      	ldr	r2, [pc, #396]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6713      	str	r3, [r2, #112]	@ 0x70
 800478c:	e01c      	b.n	80047c8 <HAL_RCC_OscConfig+0x324>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b05      	cmp	r3, #5
 8004794:	d10c      	bne.n	80047b0 <HAL_RCC_OscConfig+0x30c>
 8004796:	4b5f      	ldr	r3, [pc, #380]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479a:	4a5e      	ldr	r2, [pc, #376]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 800479c:	f043 0304 	orr.w	r3, r3, #4
 80047a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ae:	e00b      	b.n	80047c8 <HAL_RCC_OscConfig+0x324>
 80047b0:	4b58      	ldr	r3, [pc, #352]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b4:	4a57      	ldr	r2, [pc, #348]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80047bc:	4b55      	ldr	r3, [pc, #340]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c0:	4a54      	ldr	r2, [pc, #336]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 80047c2:	f023 0304 	bic.w	r3, r3, #4
 80047c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d015      	beq.n	80047fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d0:	f7fe fad2 	bl	8002d78 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d6:	e00a      	b.n	80047ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d8:	f7fe face 	bl	8002d78 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e0cb      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ee:	4b49      	ldr	r3, [pc, #292]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0ee      	beq.n	80047d8 <HAL_RCC_OscConfig+0x334>
 80047fa:	e014      	b.n	8004826 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fc:	f7fe fabc 	bl	8002d78 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004802:	e00a      	b.n	800481a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004804:	f7fe fab8 	bl	8002d78 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004812:	4293      	cmp	r3, r2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e0b5      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481a:	4b3e      	ldr	r3, [pc, #248]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1ee      	bne.n	8004804 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004826:	7dfb      	ldrb	r3, [r7, #23]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d105      	bne.n	8004838 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482c:	4b39      	ldr	r3, [pc, #228]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 800482e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004830:	4a38      	ldr	r2, [pc, #224]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 8004832:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004836:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80a1 	beq.w	8004984 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004842:	4b34      	ldr	r3, [pc, #208]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b08      	cmp	r3, #8
 800484c:	d05c      	beq.n	8004908 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d141      	bne.n	80048da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004856:	4b31      	ldr	r3, [pc, #196]	@ (800491c <HAL_RCC_OscConfig+0x478>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fe fa8c 	bl	8002d78 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004864:	f7fe fa88 	bl	8002d78 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e087      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	4b27      	ldr	r3, [pc, #156]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69da      	ldr	r2, [r3, #28]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	019b      	lsls	r3, r3, #6
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004898:	085b      	lsrs	r3, r3, #1
 800489a:	3b01      	subs	r3, #1
 800489c:	041b      	lsls	r3, r3, #16
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a4:	061b      	lsls	r3, r3, #24
 80048a6:	491b      	ldr	r1, [pc, #108]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ac:	4b1b      	ldr	r3, [pc, #108]	@ (800491c <HAL_RCC_OscConfig+0x478>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b2:	f7fe fa61 	bl	8002d78 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ba:	f7fe fa5d 	bl	8002d78 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e05c      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048cc:	4b11      	ldr	r3, [pc, #68]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x416>
 80048d8:	e054      	b.n	8004984 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048da:	4b10      	ldr	r3, [pc, #64]	@ (800491c <HAL_RCC_OscConfig+0x478>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fe fa4a 	bl	8002d78 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fe fa46 	bl	8002d78 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e045      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fa:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <HAL_RCC_OscConfig+0x470>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x444>
 8004906:	e03d      	b.n	8004984 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d107      	bne.n	8004920 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e038      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
 8004914:	40023800 	.word	0x40023800
 8004918:	40007000 	.word	0x40007000
 800491c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004920:	4b1b      	ldr	r3, [pc, #108]	@ (8004990 <HAL_RCC_OscConfig+0x4ec>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d028      	beq.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004938:	429a      	cmp	r2, r3
 800493a:	d121      	bne.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	429a      	cmp	r2, r3
 8004948:	d11a      	bne.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004950:	4013      	ands	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004956:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004958:	4293      	cmp	r3, r2
 800495a:	d111      	bne.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	3b01      	subs	r3, #1
 800496a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d107      	bne.n	8004980 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800497c:	429a      	cmp	r2, r3
 800497e:	d001      	beq.n	8004984 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800

08004994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e0cc      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a8:	4b68      	ldr	r3, [pc, #416]	@ (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d90c      	bls.n	80049d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b6:	4b65      	ldr	r3, [pc, #404]	@ (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b63      	ldr	r3, [pc, #396]	@ (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e0b8      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d020      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e8:	4b59      	ldr	r3, [pc, #356]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4a58      	ldr	r2, [pc, #352]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a00:	4b53      	ldr	r3, [pc, #332]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4a52      	ldr	r2, [pc, #328]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a0c:	4b50      	ldr	r3, [pc, #320]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	494d      	ldr	r1, [pc, #308]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d044      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a32:	4b47      	ldr	r3, [pc, #284]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d119      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e07f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d003      	beq.n	8004a52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d107      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a52:	4b3f      	ldr	r3, [pc, #252]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e06f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a62:	4b3b      	ldr	r3, [pc, #236]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e067      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a72:	4b37      	ldr	r3, [pc, #220]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f023 0203 	bic.w	r2, r3, #3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	4934      	ldr	r1, [pc, #208]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a84:	f7fe f978 	bl	8002d78 <HAL_GetTick>
 8004a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a8c:	f7fe f974 	bl	8002d78 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e04f      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 020c 	and.w	r2, r3, #12
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d1eb      	bne.n	8004a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b25      	ldr	r3, [pc, #148]	@ (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d20c      	bcs.n	8004adc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b22      	ldr	r3, [pc, #136]	@ (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aca:	4b20      	ldr	r3, [pc, #128]	@ (8004b4c <HAL_RCC_ClockConfig+0x1b8>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e032      	b.n	8004b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae8:	4b19      	ldr	r3, [pc, #100]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	4916      	ldr	r1, [pc, #88]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b06:	4b12      	ldr	r3, [pc, #72]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	490e      	ldr	r1, [pc, #56]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b1a:	f000 f821 	bl	8004b60 <HAL_RCC_GetSysClockFreq>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	4b0b      	ldr	r3, [pc, #44]	@ (8004b50 <HAL_RCC_ClockConfig+0x1bc>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	490a      	ldr	r1, [pc, #40]	@ (8004b54 <HAL_RCC_ClockConfig+0x1c0>)
 8004b2c:	5ccb      	ldrb	r3, [r1, r3]
 8004b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b32:	4a09      	ldr	r2, [pc, #36]	@ (8004b58 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b36:	4b09      	ldr	r3, [pc, #36]	@ (8004b5c <HAL_RCC_ClockConfig+0x1c8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe f8d8 	bl	8002cf0 <HAL_InitTick>

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023c00 	.word	0x40023c00
 8004b50:	40023800 	.word	0x40023800
 8004b54:	0800a488 	.word	0x0800a488
 8004b58:	20000018 	.word	0x20000018
 8004b5c:	2000001c 	.word	0x2000001c

08004b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b64:	b094      	sub	sp, #80	@ 0x50
 8004b66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b78:	4b79      	ldr	r3, [pc, #484]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 030c 	and.w	r3, r3, #12
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d00d      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	f200 80e1 	bhi.w	8004d4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0x34>
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d003      	beq.n	8004b9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b92:	e0db      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b94:	4b73      	ldr	r3, [pc, #460]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b98:	e0db      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b9a:	4b73      	ldr	r3, [pc, #460]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b9e:	e0d8      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ba8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004baa:	4b6d      	ldr	r3, [pc, #436]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d063      	beq.n	8004c7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	099b      	lsrs	r3, r3, #6
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bca:	2300      	movs	r3, #0
 8004bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bd2:	4622      	mov	r2, r4
 8004bd4:	462b      	mov	r3, r5
 8004bd6:	f04f 0000 	mov.w	r0, #0
 8004bda:	f04f 0100 	mov.w	r1, #0
 8004bde:	0159      	lsls	r1, r3, #5
 8004be0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be4:	0150      	lsls	r0, r2, #5
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4621      	mov	r1, r4
 8004bec:	1a51      	subs	r1, r2, r1
 8004bee:	6139      	str	r1, [r7, #16]
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c04:	4659      	mov	r1, fp
 8004c06:	018b      	lsls	r3, r1, #6
 8004c08:	4651      	mov	r1, sl
 8004c0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c0e:	4651      	mov	r1, sl
 8004c10:	018a      	lsls	r2, r1, #6
 8004c12:	4651      	mov	r1, sl
 8004c14:	ebb2 0801 	subs.w	r8, r2, r1
 8004c18:	4659      	mov	r1, fp
 8004c1a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c32:	4690      	mov	r8, r2
 8004c34:	4699      	mov	r9, r3
 8004c36:	4623      	mov	r3, r4
 8004c38:	eb18 0303 	adds.w	r3, r8, r3
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	462b      	mov	r3, r5
 8004c40:	eb49 0303 	adc.w	r3, r9, r3
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c52:	4629      	mov	r1, r5
 8004c54:	024b      	lsls	r3, r1, #9
 8004c56:	4621      	mov	r1, r4
 8004c58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	024a      	lsls	r2, r1, #9
 8004c60:	4610      	mov	r0, r2
 8004c62:	4619      	mov	r1, r3
 8004c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c66:	2200      	movs	r2, #0
 8004c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c70:	f7fb ffa4 	bl	8000bbc <__aeabi_uldivmod>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4613      	mov	r3, r2
 8004c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c7c:	e058      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c7e:	4b38      	ldr	r3, [pc, #224]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	099b      	lsrs	r3, r3, #6
 8004c84:	2200      	movs	r2, #0
 8004c86:	4618      	mov	r0, r3
 8004c88:	4611      	mov	r1, r2
 8004c8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c8e:	623b      	str	r3, [r7, #32]
 8004c90:	2300      	movs	r3, #0
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c98:	4642      	mov	r2, r8
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	f04f 0000 	mov.w	r0, #0
 8004ca0:	f04f 0100 	mov.w	r1, #0
 8004ca4:	0159      	lsls	r1, r3, #5
 8004ca6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004caa:	0150      	lsls	r0, r2, #5
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4641      	mov	r1, r8
 8004cb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ccc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cd0:	ebb2 040a 	subs.w	r4, r2, sl
 8004cd4:	eb63 050b 	sbc.w	r5, r3, fp
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	00eb      	lsls	r3, r5, #3
 8004ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ce6:	00e2      	lsls	r2, r4, #3
 8004ce8:	4614      	mov	r4, r2
 8004cea:	461d      	mov	r5, r3
 8004cec:	4643      	mov	r3, r8
 8004cee:	18e3      	adds	r3, r4, r3
 8004cf0:	603b      	str	r3, [r7, #0]
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	eb45 0303 	adc.w	r3, r5, r3
 8004cf8:	607b      	str	r3, [r7, #4]
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d06:	4629      	mov	r1, r5
 8004d08:	028b      	lsls	r3, r1, #10
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d10:	4621      	mov	r1, r4
 8004d12:	028a      	lsls	r2, r1, #10
 8004d14:	4610      	mov	r0, r2
 8004d16:	4619      	mov	r1, r3
 8004d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	61fa      	str	r2, [r7, #28]
 8004d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d24:	f7fb ff4a 	bl	8000bbc <__aeabi_uldivmod>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d30:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	0c1b      	lsrs	r3, r3, #16
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d4a:	e002      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d4c:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3750      	adds	r7, #80	@ 0x50
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5e:	bf00      	nop
 8004d60:	40023800 	.word	0x40023800
 8004d64:	00f42400 	.word	0x00f42400
 8004d68:	007a1200 	.word	0x007a1200

08004d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d70:	4b03      	ldr	r3, [pc, #12]	@ (8004d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d72:	681b      	ldr	r3, [r3, #0]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000018 	.word	0x20000018

08004d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d88:	f7ff fff0 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	0a9b      	lsrs	r3, r3, #10
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	4903      	ldr	r1, [pc, #12]	@ (8004da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d9a:	5ccb      	ldrb	r3, [r1, r3]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40023800 	.word	0x40023800
 8004da8:	0800a498 	.word	0x0800a498

08004dac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e07b      	b.n	8004eb6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d108      	bne.n	8004dd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dce:	d009      	beq.n	8004de4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	61da      	str	r2, [r3, #28]
 8004dd6:	e005      	b.n	8004de4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fd fc70 	bl	80026e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e68:	ea42 0103 	orr.w	r1, r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e70:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	0c1b      	lsrs	r3, r3, #16
 8004e82:	f003 0104 	and.w	r1, r3, #4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	f003 0210 	and.w	r2, r3, #16
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ea4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b088      	sub	sp, #32
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	603b      	str	r3, [r7, #0]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ece:	f7fd ff53 	bl	8002d78 <HAL_GetTick>
 8004ed2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004ed4:	88fb      	ldrh	r3, [r7, #6]
 8004ed6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d001      	beq.n	8004ee8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e12a      	b.n	800513e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_SPI_Transmit+0x36>
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e122      	b.n	800513e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_SPI_Transmit+0x48>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e11b      	b.n	800513e <HAL_SPI_Transmit+0x280>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2203      	movs	r2, #3
 8004f12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	88fa      	ldrh	r2, [r7, #6]
 8004f26:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	88fa      	ldrh	r2, [r7, #6]
 8004f2c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f54:	d10f      	bne.n	8004f76 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f80:	2b40      	cmp	r3, #64	@ 0x40
 8004f82:	d007      	beq.n	8004f94 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f9c:	d152      	bne.n	8005044 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_SPI_Transmit+0xee>
 8004fa6:	8b7b      	ldrh	r3, [r7, #26]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d145      	bne.n	8005038 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb0:	881a      	ldrh	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbc:	1c9a      	adds	r2, r3, #2
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004fd0:	e032      	b.n	8005038 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d112      	bne.n	8005006 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe4:	881a      	ldrh	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff0:	1c9a      	adds	r2, r3, #2
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005004:	e018      	b.n	8005038 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005006:	f7fd feb7 	bl	8002d78 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d803      	bhi.n	800501e <HAL_SPI_Transmit+0x160>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d102      	bne.n	8005024 <HAL_SPI_Transmit+0x166>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d109      	bne.n	8005038 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e082      	b.n	800513e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1c7      	bne.n	8004fd2 <HAL_SPI_Transmit+0x114>
 8005042:	e053      	b.n	80050ec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_SPI_Transmit+0x194>
 800504c:	8b7b      	ldrh	r3, [r7, #26]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d147      	bne.n	80050e2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	330c      	adds	r3, #12
 800505c:	7812      	ldrb	r2, [r2, #0]
 800505e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005078:	e033      	b.n	80050e2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b02      	cmp	r3, #2
 8005086:	d113      	bne.n	80050b0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	330c      	adds	r3, #12
 8005092:	7812      	ldrb	r2, [r2, #0]
 8005094:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050ae:	e018      	b.n	80050e2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050b0:	f7fd fe62 	bl	8002d78 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d803      	bhi.n	80050c8 <HAL_SPI_Transmit+0x20a>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c6:	d102      	bne.n	80050ce <HAL_SPI_Transmit+0x210>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d109      	bne.n	80050e2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e02d      	b.n	800513e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1c6      	bne.n	800507a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	6839      	ldr	r1, [r7, #0]
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 fbd9 	bl	80058a8 <SPI_EndRxTxTransaction>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10a      	bne.n	8005120 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800513c:	2300      	movs	r3, #0
  }
}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b088      	sub	sp, #32
 800514a:	af02      	add	r7, sp, #8
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	603b      	str	r3, [r7, #0]
 8005152:	4613      	mov	r3, r2
 8005154:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	d001      	beq.n	8005166 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
 8005164:	e104      	b.n	8005370 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800516e:	d112      	bne.n	8005196 <HAL_SPI_Receive+0x50>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10e      	bne.n	8005196 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2204      	movs	r2, #4
 800517c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005180:	88fa      	ldrh	r2, [r7, #6]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	4613      	mov	r3, r2
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f8f3 	bl	8005378 <HAL_SPI_TransmitReceive>
 8005192:	4603      	mov	r3, r0
 8005194:	e0ec      	b.n	8005370 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005196:	f7fd fdef 	bl	8002d78 <HAL_GetTick>
 800519a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_SPI_Receive+0x62>
 80051a2:	88fb      	ldrh	r3, [r7, #6]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0e1      	b.n	8005370 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d101      	bne.n	80051ba <HAL_SPI_Receive+0x74>
 80051b6:	2302      	movs	r3, #2
 80051b8:	e0da      	b.n	8005370 <HAL_SPI_Receive+0x22a>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2204      	movs	r2, #4
 80051c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	88fa      	ldrh	r2, [r7, #6]
 80051da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	88fa      	ldrh	r2, [r7, #6]
 80051e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005208:	d10f      	bne.n	800522a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005218:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005228:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005234:	2b40      	cmp	r3, #64	@ 0x40
 8005236:	d007      	beq.n	8005248 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005246:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d170      	bne.n	8005332 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005250:	e035      	b.n	80052be <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b01      	cmp	r3, #1
 800525e:	d115      	bne.n	800528c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f103 020c 	add.w	r2, r3, #12
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526c:	7812      	ldrb	r2, [r2, #0]
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800528a:	e018      	b.n	80052be <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800528c:	f7fd fd74 	bl	8002d78 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d803      	bhi.n	80052a4 <HAL_SPI_Receive+0x15e>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a2:	d102      	bne.n	80052aa <HAL_SPI_Receive+0x164>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e058      	b.n	8005370 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1c4      	bne.n	8005252 <HAL_SPI_Receive+0x10c>
 80052c8:	e038      	b.n	800533c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d113      	bne.n	8005300 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e2:	b292      	uxth	r2, r2
 80052e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ea:	1c9a      	adds	r2, r3, #2
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80052fe:	e018      	b.n	8005332 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005300:	f7fd fd3a 	bl	8002d78 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d803      	bhi.n	8005318 <HAL_SPI_Receive+0x1d2>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005316:	d102      	bne.n	800531e <HAL_SPI_Receive+0x1d8>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e01e      	b.n	8005370 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1c6      	bne.n	80052ca <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 fa4b 	bl	80057dc <SPI_EndRxTransaction>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800536e:	2300      	movs	r3, #0
  }
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	@ 0x28
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005386:	2301      	movs	r3, #1
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800538a:	f7fd fcf5 	bl	8002d78 <HAL_GetTick>
 800538e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005396:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800539e:	887b      	ldrh	r3, [r7, #2]
 80053a0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053a2:	7ffb      	ldrb	r3, [r7, #31]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d00c      	beq.n	80053c2 <HAL_SPI_TransmitReceive+0x4a>
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053ae:	d106      	bne.n	80053be <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <HAL_SPI_TransmitReceive+0x46>
 80053b8:	7ffb      	ldrb	r3, [r7, #31]
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d001      	beq.n	80053c2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80053be:	2302      	movs	r3, #2
 80053c0:	e17f      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_SPI_TransmitReceive+0x5c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_SPI_TransmitReceive+0x5c>
 80053ce:	887b      	ldrh	r3, [r7, #2]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e174      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_SPI_TransmitReceive+0x6e>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e16d      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x34a>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d003      	beq.n	8005402 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2205      	movs	r2, #5
 80053fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	887a      	ldrh	r2, [r7, #2]
 8005412:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	887a      	ldrh	r2, [r7, #2]
 8005418:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	887a      	ldrh	r2, [r7, #2]
 8005424:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	887a      	ldrh	r2, [r7, #2]
 800542a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005442:	2b40      	cmp	r3, #64	@ 0x40
 8005444:	d007      	beq.n	8005456 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005454:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800545e:	d17e      	bne.n	800555e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <HAL_SPI_TransmitReceive+0xf6>
 8005468:	8afb      	ldrh	r3, [r7, #22]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d16c      	bne.n	8005548 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	881a      	ldrh	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547e:	1c9a      	adds	r2, r3, #2
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005492:	e059      	b.n	8005548 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d11b      	bne.n	80054da <HAL_SPI_TransmitReceive+0x162>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d016      	beq.n	80054da <HAL_SPI_TransmitReceive+0x162>
 80054ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d113      	bne.n	80054da <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b6:	881a      	ldrh	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c2:	1c9a      	adds	r2, r3, #2
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d119      	bne.n	800551c <HAL_SPI_TransmitReceive+0x1a4>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d014      	beq.n	800551c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fc:	b292      	uxth	r2, r2
 80054fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005504:	1c9a      	adds	r2, r3, #2
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005518:	2301      	movs	r3, #1
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800551c:	f7fd fc2c 	bl	8002d78 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005528:	429a      	cmp	r2, r3
 800552a:	d80d      	bhi.n	8005548 <HAL_SPI_TransmitReceive+0x1d0>
 800552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d009      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e0bc      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1a0      	bne.n	8005494 <HAL_SPI_TransmitReceive+0x11c>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005556:	b29b      	uxth	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d19b      	bne.n	8005494 <HAL_SPI_TransmitReceive+0x11c>
 800555c:	e082      	b.n	8005664 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_SPI_TransmitReceive+0x1f4>
 8005566:	8afb      	ldrh	r3, [r7, #22]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d171      	bne.n	8005650 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	330c      	adds	r3, #12
 8005576:	7812      	ldrb	r2, [r2, #0]
 8005578:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005592:	e05d      	b.n	8005650 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d11c      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x264>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d017      	beq.n	80055dc <HAL_SPI_TransmitReceive+0x264>
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d114      	bne.n	80055dc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	330c      	adds	r3, #12
 80055bc:	7812      	ldrb	r2, [r2, #0]
 80055be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d119      	bne.n	800561e <HAL_SPI_TransmitReceive+0x2a6>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d014      	beq.n	800561e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005610:	b29b      	uxth	r3, r3
 8005612:	3b01      	subs	r3, #1
 8005614:	b29a      	uxth	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800561a:	2301      	movs	r3, #1
 800561c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800561e:	f7fd fbab 	bl	8002d78 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800562a:	429a      	cmp	r2, r3
 800562c:	d803      	bhi.n	8005636 <HAL_SPI_TransmitReceive+0x2be>
 800562e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005634:	d102      	bne.n	800563c <HAL_SPI_TransmitReceive+0x2c4>
 8005636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005638:	2b00      	cmp	r3, #0
 800563a:	d109      	bne.n	8005650 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e038      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d19c      	bne.n	8005594 <HAL_SPI_TransmitReceive+0x21c>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d197      	bne.n	8005594 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005664:	6a3a      	ldr	r2, [r7, #32]
 8005666:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f91d 	bl	80058a8 <SPI_EndRxTxTransaction>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e01d      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10a      	bne.n	80056a4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800568e:	2300      	movs	r3, #0
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80056c0:	2300      	movs	r3, #0
  }
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3728      	adds	r7, #40	@ 0x28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056dc:	f7fd fb4c 	bl	8002d78 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	4413      	add	r3, r2
 80056ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056ec:	f7fd fb44 	bl	8002d78 <HAL_GetTick>
 80056f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056f2:	4b39      	ldr	r3, [pc, #228]	@ (80057d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	015b      	lsls	r3, r3, #5
 80056f8:	0d1b      	lsrs	r3, r3, #20
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	fb02 f303 	mul.w	r3, r2, r3
 8005700:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005702:	e054      	b.n	80057ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570a:	d050      	beq.n	80057ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800570c:	f7fd fb34 	bl	8002d78 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	429a      	cmp	r2, r3
 800571a:	d902      	bls.n	8005722 <SPI_WaitFlagStateUntilTimeout+0x56>
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d13d      	bne.n	800579e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005730:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800573a:	d111      	bne.n	8005760 <SPI_WaitFlagStateUntilTimeout+0x94>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005744:	d004      	beq.n	8005750 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800574e:	d107      	bne.n	8005760 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800575e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005768:	d10f      	bne.n	800578a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005788:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e017      	b.n	80057ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4013      	ands	r3, r2
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	bf0c      	ite	eq
 80057be:	2301      	moveq	r3, #1
 80057c0:	2300      	movne	r3, #0
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d19b      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3720      	adds	r7, #32
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000018 	.word	0x20000018

080057dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057f0:	d111      	bne.n	8005816 <SPI_EndRxTransaction+0x3a>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057fa:	d004      	beq.n	8005806 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005804:	d107      	bne.n	8005816 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005814:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800581e:	d12a      	bne.n	8005876 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005828:	d012      	beq.n	8005850 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2200      	movs	r2, #0
 8005832:	2180      	movs	r1, #128	@ 0x80
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f7ff ff49 	bl	80056cc <SPI_WaitFlagStateUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02d      	beq.n	800589c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005844:	f043 0220 	orr.w	r2, r3, #32
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e026      	b.n	800589e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2200      	movs	r2, #0
 8005858:	2101      	movs	r1, #1
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f7ff ff36 	bl	80056cc <SPI_WaitFlagStateUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01a      	beq.n	800589c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586a:	f043 0220 	orr.w	r2, r3, #32
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e013      	b.n	800589e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	2101      	movs	r1, #1
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f7ff ff23 	bl	80056cc <SPI_WaitFlagStateUntilTimeout>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d007      	beq.n	800589c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005890:	f043 0220 	orr.w	r2, r3, #32
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e000      	b.n	800589e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2201      	movs	r2, #1
 80058bc:	2102      	movs	r1, #2
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f7ff ff04 	bl	80056cc <SPI_WaitFlagStateUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ce:	f043 0220 	orr.w	r2, r3, #32
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e032      	b.n	8005940 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058da:	4b1b      	ldr	r3, [pc, #108]	@ (8005948 <SPI_EndRxTxTransaction+0xa0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a1b      	ldr	r2, [pc, #108]	@ (800594c <SPI_EndRxTxTransaction+0xa4>)
 80058e0:	fba2 2303 	umull	r2, r3, r2, r3
 80058e4:	0d5b      	lsrs	r3, r3, #21
 80058e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80058ea:	fb02 f303 	mul.w	r3, r2, r3
 80058ee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058f8:	d112      	bne.n	8005920 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2200      	movs	r2, #0
 8005902:	2180      	movs	r1, #128	@ 0x80
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff fee1 	bl	80056cc <SPI_WaitFlagStateUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d016      	beq.n	800593e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005914:	f043 0220 	orr.w	r2, r3, #32
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e00f      	b.n	8005940 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	3b01      	subs	r3, #1
 800592a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005936:	2b80      	cmp	r3, #128	@ 0x80
 8005938:	d0f2      	beq.n	8005920 <SPI_EndRxTxTransaction+0x78>
 800593a:	e000      	b.n	800593e <SPI_EndRxTxTransaction+0x96>
        break;
 800593c:	bf00      	nop
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000018 	.word	0x20000018
 800594c:	165e9f81 	.word	0x165e9f81

08005950 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e041      	b.n	80059e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fc fefc 	bl	8002774 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f000 fd28 	bl	80063e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <HAL_TIM_PWM_Start+0x24>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	bf14      	ite	ne
 8005a0c:	2301      	movne	r3, #1
 8005a0e:	2300      	moveq	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	e022      	b.n	8005a5a <HAL_TIM_PWM_Start+0x6a>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d109      	bne.n	8005a2e <HAL_TIM_PWM_Start+0x3e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	bf14      	ite	ne
 8005a26:	2301      	movne	r3, #1
 8005a28:	2300      	moveq	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	e015      	b.n	8005a5a <HAL_TIM_PWM_Start+0x6a>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d109      	bne.n	8005a48 <HAL_TIM_PWM_Start+0x58>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	bf14      	ite	ne
 8005a40:	2301      	movne	r3, #1
 8005a42:	2300      	moveq	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	e008      	b.n	8005a5a <HAL_TIM_PWM_Start+0x6a>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	bf14      	ite	ne
 8005a54:	2301      	movne	r3, #1
 8005a56:	2300      	moveq	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e07c      	b.n	8005b5c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <HAL_TIM_PWM_Start+0x82>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a70:	e013      	b.n	8005a9a <HAL_TIM_PWM_Start+0xaa>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d104      	bne.n	8005a82 <HAL_TIM_PWM_Start+0x92>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a80:	e00b      	b.n	8005a9a <HAL_TIM_PWM_Start+0xaa>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d104      	bne.n	8005a92 <HAL_TIM_PWM_Start+0xa2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a90:	e003      	b.n	8005a9a <HAL_TIM_PWM_Start+0xaa>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2202      	movs	r2, #2
 8005a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 f824 	bl	8006af0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a2d      	ldr	r2, [pc, #180]	@ (8005b64 <HAL_TIM_PWM_Start+0x174>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d004      	beq.n	8005abc <HAL_TIM_PWM_Start+0xcc>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8005b68 <HAL_TIM_PWM_Start+0x178>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIM_PWM_Start+0xd0>
 8005abc:	2301      	movs	r3, #1
 8005abe:	e000      	b.n	8005ac2 <HAL_TIM_PWM_Start+0xd2>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d007      	beq.n	8005ad6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ad4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a22      	ldr	r2, [pc, #136]	@ (8005b64 <HAL_TIM_PWM_Start+0x174>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d022      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x136>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae8:	d01d      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x136>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a1f      	ldr	r2, [pc, #124]	@ (8005b6c <HAL_TIM_PWM_Start+0x17c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d018      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x136>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b70 <HAL_TIM_PWM_Start+0x180>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d013      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x136>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a1c      	ldr	r2, [pc, #112]	@ (8005b74 <HAL_TIM_PWM_Start+0x184>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00e      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x136>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a16      	ldr	r2, [pc, #88]	@ (8005b68 <HAL_TIM_PWM_Start+0x178>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d009      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x136>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a18      	ldr	r2, [pc, #96]	@ (8005b78 <HAL_TIM_PWM_Start+0x188>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d004      	beq.n	8005b26 <HAL_TIM_PWM_Start+0x136>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a16      	ldr	r2, [pc, #88]	@ (8005b7c <HAL_TIM_PWM_Start+0x18c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d111      	bne.n	8005b4a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2b06      	cmp	r3, #6
 8005b36:	d010      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b48:	e007      	b.n	8005b5a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40010400 	.word	0x40010400
 8005b6c:	40000400 	.word	0x40000400
 8005b70:	40000800 	.word	0x40000800
 8005b74:	40000c00 	.word	0x40000c00
 8005b78:	40014000 	.word	0x40014000
 8005b7c:	40001800 	.word	0x40001800

08005b80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e041      	b.n	8005c16 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fc fe46 	bl	8002838 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	f000 fc10 	bl	80063e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d104      	bne.n	8005c3e <HAL_TIM_IC_Start_IT+0x1e>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	e013      	b.n	8005c66 <HAL_TIM_IC_Start_IT+0x46>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d104      	bne.n	8005c4e <HAL_TIM_IC_Start_IT+0x2e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	e00b      	b.n	8005c66 <HAL_TIM_IC_Start_IT+0x46>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d104      	bne.n	8005c5e <HAL_TIM_IC_Start_IT+0x3e>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	e003      	b.n	8005c66 <HAL_TIM_IC_Start_IT+0x46>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <HAL_TIM_IC_Start_IT+0x58>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	e013      	b.n	8005ca0 <HAL_TIM_IC_Start_IT+0x80>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d104      	bne.n	8005c88 <HAL_TIM_IC_Start_IT+0x68>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	e00b      	b.n	8005ca0 <HAL_TIM_IC_Start_IT+0x80>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d104      	bne.n	8005c98 <HAL_TIM_IC_Start_IT+0x78>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	e003      	b.n	8005ca0 <HAL_TIM_IC_Start_IT+0x80>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca2:	7bbb      	ldrb	r3, [r7, #14]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d102      	bne.n	8005cae <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ca8:	7b7b      	ldrb	r3, [r7, #13]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d001      	beq.n	8005cb2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e0cc      	b.n	8005e4c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d104      	bne.n	8005cc2 <HAL_TIM_IC_Start_IT+0xa2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cc0:	e013      	b.n	8005cea <HAL_TIM_IC_Start_IT+0xca>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b04      	cmp	r3, #4
 8005cc6:	d104      	bne.n	8005cd2 <HAL_TIM_IC_Start_IT+0xb2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cd0:	e00b      	b.n	8005cea <HAL_TIM_IC_Start_IT+0xca>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d104      	bne.n	8005ce2 <HAL_TIM_IC_Start_IT+0xc2>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ce0:	e003      	b.n	8005cea <HAL_TIM_IC_Start_IT+0xca>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d104      	bne.n	8005cfa <HAL_TIM_IC_Start_IT+0xda>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cf8:	e013      	b.n	8005d22 <HAL_TIM_IC_Start_IT+0x102>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d104      	bne.n	8005d0a <HAL_TIM_IC_Start_IT+0xea>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d08:	e00b      	b.n	8005d22 <HAL_TIM_IC_Start_IT+0x102>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d104      	bne.n	8005d1a <HAL_TIM_IC_Start_IT+0xfa>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d18:	e003      	b.n	8005d22 <HAL_TIM_IC_Start_IT+0x102>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b0c      	cmp	r3, #12
 8005d26:	d841      	bhi.n	8005dac <HAL_TIM_IC_Start_IT+0x18c>
 8005d28:	a201      	add	r2, pc, #4	@ (adr r2, 8005d30 <HAL_TIM_IC_Start_IT+0x110>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d65 	.word	0x08005d65
 8005d34:	08005dad 	.word	0x08005dad
 8005d38:	08005dad 	.word	0x08005dad
 8005d3c:	08005dad 	.word	0x08005dad
 8005d40:	08005d77 	.word	0x08005d77
 8005d44:	08005dad 	.word	0x08005dad
 8005d48:	08005dad 	.word	0x08005dad
 8005d4c:	08005dad 	.word	0x08005dad
 8005d50:	08005d89 	.word	0x08005d89
 8005d54:	08005dad 	.word	0x08005dad
 8005d58:	08005dad 	.word	0x08005dad
 8005d5c:	08005dad 	.word	0x08005dad
 8005d60:	08005d9b 	.word	0x08005d9b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0202 	orr.w	r2, r2, #2
 8005d72:	60da      	str	r2, [r3, #12]
      break;
 8005d74:	e01d      	b.n	8005db2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0204 	orr.w	r2, r2, #4
 8005d84:	60da      	str	r2, [r3, #12]
      break;
 8005d86:	e014      	b.n	8005db2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0208 	orr.w	r2, r2, #8
 8005d96:	60da      	str	r2, [r3, #12]
      break;
 8005d98:	e00b      	b.n	8005db2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0210 	orr.w	r2, r2, #16
 8005da8:	60da      	str	r2, [r3, #12]
      break;
 8005daa:	e002      	b.n	8005db2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
      break;
 8005db0:	bf00      	nop
  }

  if (status == HAL_OK)
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d148      	bne.n	8005e4a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	6839      	ldr	r1, [r7, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fe95 	bl	8006af0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a22      	ldr	r2, [pc, #136]	@ (8005e54 <HAL_TIM_IC_Start_IT+0x234>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d022      	beq.n	8005e16 <HAL_TIM_IC_Start_IT+0x1f6>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dd8:	d01d      	beq.n	8005e16 <HAL_TIM_IC_Start_IT+0x1f6>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1e      	ldr	r2, [pc, #120]	@ (8005e58 <HAL_TIM_IC_Start_IT+0x238>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d018      	beq.n	8005e16 <HAL_TIM_IC_Start_IT+0x1f6>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1c      	ldr	r2, [pc, #112]	@ (8005e5c <HAL_TIM_IC_Start_IT+0x23c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <HAL_TIM_IC_Start_IT+0x1f6>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e60 <HAL_TIM_IC_Start_IT+0x240>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00e      	beq.n	8005e16 <HAL_TIM_IC_Start_IT+0x1f6>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a19      	ldr	r2, [pc, #100]	@ (8005e64 <HAL_TIM_IC_Start_IT+0x244>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d009      	beq.n	8005e16 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a18      	ldr	r2, [pc, #96]	@ (8005e68 <HAL_TIM_IC_Start_IT+0x248>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d004      	beq.n	8005e16 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a16      	ldr	r2, [pc, #88]	@ (8005e6c <HAL_TIM_IC_Start_IT+0x24c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d111      	bne.n	8005e3a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b06      	cmp	r3, #6
 8005e26:	d010      	beq.n	8005e4a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e38:	e007      	b.n	8005e4a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0201 	orr.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	40010000 	.word	0x40010000
 8005e58:	40000400 	.word	0x40000400
 8005e5c:	40000800 	.word	0x40000800
 8005e60:	40000c00 	.word	0x40000c00
 8005e64:	40010400 	.word	0x40010400
 8005e68:	40014000 	.word	0x40014000
 8005e6c:	40001800 	.word	0x40001800

08005e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d020      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01b      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0202 	mvn.w	r2, #2
 8005ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fb fa60 	bl	8001380 <HAL_TIM_IC_CaptureCallback>
 8005ec0:	e005      	b.n	8005ece <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa70 	bl	80063a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fa77 	bl	80063bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d020      	beq.n	8005f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01b      	beq.n	8005f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0204 	mvn.w	r2, #4
 8005ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fb fa3a 	bl	8001380 <HAL_TIM_IC_CaptureCallback>
 8005f0c:	e005      	b.n	8005f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fa4a 	bl	80063a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fa51 	bl	80063bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f003 0308 	and.w	r3, r3, #8
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d020      	beq.n	8005f6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01b      	beq.n	8005f6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0208 	mvn.w	r2, #8
 8005f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2204      	movs	r2, #4
 8005f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fb fa14 	bl	8001380 <HAL_TIM_IC_CaptureCallback>
 8005f58:	e005      	b.n	8005f66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa24 	bl	80063a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fa2b 	bl	80063bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d020      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01b      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0210 	mvn.w	r2, #16
 8005f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fb f9ee 	bl	8001380 <HAL_TIM_IC_CaptureCallback>
 8005fa4:	e005      	b.n	8005fb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f9fe 	bl	80063a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fa05 	bl	80063bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00c      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d007      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0201 	mvn.w	r2, #1
 8005fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9dc 	bl	8006394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00c      	beq.n	8006000 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fe76 	bl	8006cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00c      	beq.n	8006024 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f9d6 	bl	80063d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00c      	beq.n	8006048 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0220 	mvn.w	r2, #32
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fe48 	bl	8006cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_TIM_IC_ConfigChannel+0x1e>
 800606a:	2302      	movs	r3, #2
 800606c:	e088      	b.n	8006180 <HAL_TIM_IC_ConfigChannel+0x130>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d11b      	bne.n	80060b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800608c:	f000 fc06 	bl	800689c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 020c 	bic.w	r2, r2, #12
 800609e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6999      	ldr	r1, [r3, #24]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	619a      	str	r2, [r3, #24]
 80060b2:	e060      	b.n	8006176 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d11c      	bne.n	80060f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80060ca:	f000 fc5b 	bl	8006984 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	699a      	ldr	r2, [r3, #24]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80060dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6999      	ldr	r1, [r3, #24]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	021a      	lsls	r2, r3, #8
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	619a      	str	r2, [r3, #24]
 80060f2:	e040      	b.n	8006176 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	d11b      	bne.n	8006132 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800610a:	f000 fc78 	bl	80069fe <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 020c 	bic.w	r2, r2, #12
 800611c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69d9      	ldr	r1, [r3, #28]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	430a      	orrs	r2, r1
 800612e:	61da      	str	r2, [r3, #28]
 8006130:	e021      	b.n	8006176 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b0c      	cmp	r3, #12
 8006136:	d11c      	bne.n	8006172 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006148:	f000 fc95 	bl	8006a76 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	69da      	ldr	r2, [r3, #28]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800615a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69d9      	ldr	r1, [r3, #28]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	021a      	lsls	r2, r3, #8
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	61da      	str	r2, [r3, #28]
 8006170:	e001      	b.n	8006176 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800617e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e0ae      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b0c      	cmp	r3, #12
 80061b2:	f200 809f 	bhi.w	80062f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061b6:	a201      	add	r2, pc, #4	@ (adr r2, 80061bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061f1 	.word	0x080061f1
 80061c0:	080062f5 	.word	0x080062f5
 80061c4:	080062f5 	.word	0x080062f5
 80061c8:	080062f5 	.word	0x080062f5
 80061cc:	08006231 	.word	0x08006231
 80061d0:	080062f5 	.word	0x080062f5
 80061d4:	080062f5 	.word	0x080062f5
 80061d8:	080062f5 	.word	0x080062f5
 80061dc:	08006273 	.word	0x08006273
 80061e0:	080062f5 	.word	0x080062f5
 80061e4:	080062f5 	.word	0x080062f5
 80061e8:	080062f5 	.word	0x080062f5
 80061ec:	080062b3 	.word	0x080062b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 f9a0 	bl	800653c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699a      	ldr	r2, [r3, #24]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0208 	orr.w	r2, r2, #8
 800620a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0204 	bic.w	r2, r2, #4
 800621a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6999      	ldr	r1, [r3, #24]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	619a      	str	r2, [r3, #24]
      break;
 800622e:	e064      	b.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f9f0 	bl	800661c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800624a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800625a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6999      	ldr	r1, [r3, #24]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	021a      	lsls	r2, r3, #8
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	619a      	str	r2, [r3, #24]
      break;
 8006270:	e043      	b.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68b9      	ldr	r1, [r7, #8]
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fa45 	bl	8006708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0208 	orr.w	r2, r2, #8
 800628c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69da      	ldr	r2, [r3, #28]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0204 	bic.w	r2, r2, #4
 800629c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69d9      	ldr	r1, [r3, #28]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	61da      	str	r2, [r3, #28]
      break;
 80062b0:	e023      	b.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 fa99 	bl	80067f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69d9      	ldr	r1, [r3, #28]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	021a      	lsls	r2, r3, #8
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	61da      	str	r2, [r3, #28]
      break;
 80062f2:	e002      	b.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	75fb      	strb	r3, [r7, #23]
      break;
 80062f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006302:	7dfb      	ldrb	r3, [r7, #23]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b0c      	cmp	r3, #12
 800631e:	d831      	bhi.n	8006384 <HAL_TIM_ReadCapturedValue+0x78>
 8006320:	a201      	add	r2, pc, #4	@ (adr r2, 8006328 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	0800635d 	.word	0x0800635d
 800632c:	08006385 	.word	0x08006385
 8006330:	08006385 	.word	0x08006385
 8006334:	08006385 	.word	0x08006385
 8006338:	08006367 	.word	0x08006367
 800633c:	08006385 	.word	0x08006385
 8006340:	08006385 	.word	0x08006385
 8006344:	08006385 	.word	0x08006385
 8006348:	08006371 	.word	0x08006371
 800634c:	08006385 	.word	0x08006385
 8006350:	08006385 	.word	0x08006385
 8006354:	08006385 	.word	0x08006385
 8006358:	0800637b 	.word	0x0800637b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006362:	60fb      	str	r3, [r7, #12]

      break;
 8006364:	e00f      	b.n	8006386 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636c:	60fb      	str	r3, [r7, #12]

      break;
 800636e:	e00a      	b.n	8006386 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006376:	60fb      	str	r3, [r7, #12]

      break;
 8006378:	e005      	b.n	8006386 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006380:	60fb      	str	r3, [r7, #12]

      break;
 8006382:	e000      	b.n	8006386 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006384:	bf00      	nop
  }

  return tmpreg;
 8006386:	68fb      	ldr	r3, [r7, #12]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a46      	ldr	r2, [pc, #280]	@ (8006510 <TIM_Base_SetConfig+0x12c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d013      	beq.n	8006424 <TIM_Base_SetConfig+0x40>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006402:	d00f      	beq.n	8006424 <TIM_Base_SetConfig+0x40>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a43      	ldr	r2, [pc, #268]	@ (8006514 <TIM_Base_SetConfig+0x130>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00b      	beq.n	8006424 <TIM_Base_SetConfig+0x40>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a42      	ldr	r2, [pc, #264]	@ (8006518 <TIM_Base_SetConfig+0x134>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d007      	beq.n	8006424 <TIM_Base_SetConfig+0x40>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a41      	ldr	r2, [pc, #260]	@ (800651c <TIM_Base_SetConfig+0x138>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d003      	beq.n	8006424 <TIM_Base_SetConfig+0x40>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a40      	ldr	r2, [pc, #256]	@ (8006520 <TIM_Base_SetConfig+0x13c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d108      	bne.n	8006436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800642a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a35      	ldr	r2, [pc, #212]	@ (8006510 <TIM_Base_SetConfig+0x12c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d02b      	beq.n	8006496 <TIM_Base_SetConfig+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006444:	d027      	beq.n	8006496 <TIM_Base_SetConfig+0xb2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a32      	ldr	r2, [pc, #200]	@ (8006514 <TIM_Base_SetConfig+0x130>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d023      	beq.n	8006496 <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a31      	ldr	r2, [pc, #196]	@ (8006518 <TIM_Base_SetConfig+0x134>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d01f      	beq.n	8006496 <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a30      	ldr	r2, [pc, #192]	@ (800651c <TIM_Base_SetConfig+0x138>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01b      	beq.n	8006496 <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a2f      	ldr	r2, [pc, #188]	@ (8006520 <TIM_Base_SetConfig+0x13c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d017      	beq.n	8006496 <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a2e      	ldr	r2, [pc, #184]	@ (8006524 <TIM_Base_SetConfig+0x140>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a2d      	ldr	r2, [pc, #180]	@ (8006528 <TIM_Base_SetConfig+0x144>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00f      	beq.n	8006496 <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a2c      	ldr	r2, [pc, #176]	@ (800652c <TIM_Base_SetConfig+0x148>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d00b      	beq.n	8006496 <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2b      	ldr	r2, [pc, #172]	@ (8006530 <TIM_Base_SetConfig+0x14c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d007      	beq.n	8006496 <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2a      	ldr	r2, [pc, #168]	@ (8006534 <TIM_Base_SetConfig+0x150>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d003      	beq.n	8006496 <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a29      	ldr	r2, [pc, #164]	@ (8006538 <TIM_Base_SetConfig+0x154>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d108      	bne.n	80064a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800649c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a10      	ldr	r2, [pc, #64]	@ (8006510 <TIM_Base_SetConfig+0x12c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d003      	beq.n	80064dc <TIM_Base_SetConfig+0xf8>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a12      	ldr	r2, [pc, #72]	@ (8006520 <TIM_Base_SetConfig+0x13c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d103      	bne.n	80064e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d105      	bne.n	8006502 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f023 0201 	bic.w	r2, r3, #1
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	611a      	str	r2, [r3, #16]
  }
}
 8006502:	bf00      	nop
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40010000 	.word	0x40010000
 8006514:	40000400 	.word	0x40000400
 8006518:	40000800 	.word	0x40000800
 800651c:	40000c00 	.word	0x40000c00
 8006520:	40010400 	.word	0x40010400
 8006524:	40014000 	.word	0x40014000
 8006528:	40014400 	.word	0x40014400
 800652c:	40014800 	.word	0x40014800
 8006530:	40001800 	.word	0x40001800
 8006534:	40001c00 	.word	0x40001c00
 8006538:	40002000 	.word	0x40002000

0800653c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	f023 0201 	bic.w	r2, r3, #1
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f023 0302 	bic.w	r3, r3, #2
 8006584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a20      	ldr	r2, [pc, #128]	@ (8006614 <TIM_OC1_SetConfig+0xd8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC1_SetConfig+0x64>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a1f      	ldr	r2, [pc, #124]	@ (8006618 <TIM_OC1_SetConfig+0xdc>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10c      	bne.n	80065ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f023 0308 	bic.w	r3, r3, #8
 80065a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f023 0304 	bic.w	r3, r3, #4
 80065b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a15      	ldr	r2, [pc, #84]	@ (8006614 <TIM_OC1_SetConfig+0xd8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d003      	beq.n	80065ca <TIM_OC1_SetConfig+0x8e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a14      	ldr	r2, [pc, #80]	@ (8006618 <TIM_OC1_SetConfig+0xdc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d111      	bne.n	80065ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	621a      	str	r2, [r3, #32]
}
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	40010000 	.word	0x40010000
 8006618:	40010400 	.word	0x40010400

0800661c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	f023 0210 	bic.w	r2, r3, #16
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800664a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0320 	bic.w	r3, r3, #32
 8006666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a22      	ldr	r2, [pc, #136]	@ (8006700 <TIM_OC2_SetConfig+0xe4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_OC2_SetConfig+0x68>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a21      	ldr	r2, [pc, #132]	@ (8006704 <TIM_OC2_SetConfig+0xe8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d10d      	bne.n	80066a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800668a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800669e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a17      	ldr	r2, [pc, #92]	@ (8006700 <TIM_OC2_SetConfig+0xe4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <TIM_OC2_SetConfig+0x94>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a16      	ldr	r2, [pc, #88]	@ (8006704 <TIM_OC2_SetConfig+0xe8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d113      	bne.n	80066d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40010000 	.word	0x40010000
 8006704:	40010400 	.word	0x40010400

08006708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a21      	ldr	r2, [pc, #132]	@ (80067e8 <TIM_OC3_SetConfig+0xe0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <TIM_OC3_SetConfig+0x66>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a20      	ldr	r2, [pc, #128]	@ (80067ec <TIM_OC3_SetConfig+0xe4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d10d      	bne.n	800678a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a16      	ldr	r2, [pc, #88]	@ (80067e8 <TIM_OC3_SetConfig+0xe0>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_OC3_SetConfig+0x92>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a15      	ldr	r2, [pc, #84]	@ (80067ec <TIM_OC3_SetConfig+0xe4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d113      	bne.n	80067c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	621a      	str	r2, [r3, #32]
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40010400 	.word	0x40010400

080067f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800681e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4313      	orrs	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800683a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	031b      	lsls	r3, r3, #12
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4313      	orrs	r3, r2
 8006846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a12      	ldr	r2, [pc, #72]	@ (8006894 <TIM_OC4_SetConfig+0xa4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_OC4_SetConfig+0x68>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a11      	ldr	r2, [pc, #68]	@ (8006898 <TIM_OC4_SetConfig+0xa8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d109      	bne.n	800686c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800685e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	019b      	lsls	r3, r3, #6
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	621a      	str	r2, [r3, #32]
}
 8006886:	bf00      	nop
 8006888:	371c      	adds	r7, #28
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40010000 	.word	0x40010000
 8006898:	40010400 	.word	0x40010400

0800689c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	f023 0201 	bic.w	r2, r3, #1
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4a28      	ldr	r2, [pc, #160]	@ (8006968 <TIM_TI1_SetConfig+0xcc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d01b      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d0:	d017      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4a25      	ldr	r2, [pc, #148]	@ (800696c <TIM_TI1_SetConfig+0xd0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4a24      	ldr	r2, [pc, #144]	@ (8006970 <TIM_TI1_SetConfig+0xd4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00f      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4a23      	ldr	r2, [pc, #140]	@ (8006974 <TIM_TI1_SetConfig+0xd8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00b      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4a22      	ldr	r2, [pc, #136]	@ (8006978 <TIM_TI1_SetConfig+0xdc>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d007      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4a21      	ldr	r2, [pc, #132]	@ (800697c <TIM_TI1_SetConfig+0xe0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <TIM_TI1_SetConfig+0x66>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4a20      	ldr	r2, [pc, #128]	@ (8006980 <TIM_TI1_SetConfig+0xe4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d101      	bne.n	8006906 <TIM_TI1_SetConfig+0x6a>
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <TIM_TI1_SetConfig+0x6c>
 8006906:	2300      	movs	r3, #0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d008      	beq.n	800691e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f023 0303 	bic.w	r3, r3, #3
 8006912:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	e003      	b.n	8006926 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f043 0301 	orr.w	r3, r3, #1
 8006924:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800692c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	b2db      	uxtb	r3, r3
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f023 030a 	bic.w	r3, r3, #10
 8006940:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f003 030a 	and.w	r3, r3, #10
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	4313      	orrs	r3, r2
 800694c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40010000 	.word	0x40010000
 800696c:	40000400 	.word	0x40000400
 8006970:	40000800 	.word	0x40000800
 8006974:	40000c00 	.word	0x40000c00
 8006978:	40010400 	.word	0x40010400
 800697c:	40014000 	.word	0x40014000
 8006980:	40001800 	.word	0x40001800

08006984 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	f023 0210 	bic.w	r2, r3, #16
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	021b      	lsls	r3, r3, #8
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	031b      	lsls	r3, r3, #12
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069d6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	621a      	str	r2, [r3, #32]
}
 80069f2:	bf00      	nop
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b087      	sub	sp, #28
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	607a      	str	r2, [r7, #4]
 8006a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a3a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006a4e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b087      	sub	sp, #28
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	60f8      	str	r0, [r7, #12]
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607a      	str	r2, [r7, #4]
 8006a82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aa2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ab4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	031b      	lsls	r3, r3, #12
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	031b      	lsls	r3, r3, #12
 8006ace:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	621a      	str	r2, [r3, #32]
}
 8006ae4:	bf00      	nop
 8006ae6:	371c      	adds	r7, #28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f003 031f 	and.w	r3, r3, #31
 8006b02:	2201      	movs	r2, #1
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6a1a      	ldr	r2, [r3, #32]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	43db      	mvns	r3, r3
 8006b12:	401a      	ands	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a1a      	ldr	r2, [r3, #32]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f003 031f 	and.w	r3, r3, #31
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	fa01 f303 	lsl.w	r3, r1, r3
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	621a      	str	r2, [r3, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
	...

08006b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e05a      	b.n	8006c0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a21      	ldr	r2, [pc, #132]	@ (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d022      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba0:	d01d      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a1d      	ldr	r2, [pc, #116]	@ (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d018      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d013      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a1a      	ldr	r2, [pc, #104]	@ (8006c24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00e      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a18      	ldr	r2, [pc, #96]	@ (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d009      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a17      	ldr	r2, [pc, #92]	@ (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d004      	beq.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a15      	ldr	r2, [pc, #84]	@ (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d10c      	bne.n	8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40010000 	.word	0x40010000
 8006c1c:	40000400 	.word	0x40000400
 8006c20:	40000800 	.word	0x40000800
 8006c24:	40000c00 	.word	0x40000c00
 8006c28:	40010400 	.word	0x40010400
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40001800 	.word	0x40001800

08006c34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e03d      	b.n	8006ccc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <gcvt>:
 8006d00:	b530      	push	{r4, r5, lr}
 8006d02:	ed2d 8b02 	vpush	{d8}
 8006d06:	eeb0 8a40 	vmov.f32	s16, s0
 8006d0a:	eef0 8a60 	vmov.f32	s17, s1
 8006d0e:	460c      	mov	r4, r1
 8006d10:	2200      	movs	r2, #0
 8006d12:	b083      	sub	sp, #12
 8006d14:	4605      	mov	r5, r0
 8006d16:	2300      	movs	r3, #0
 8006d18:	ec51 0b10 	vmov	r0, r1, d0
 8006d1c:	f7f9 fede 	bl	8000adc <__aeabi_dcmplt>
 8006d20:	4622      	mov	r2, r4
 8006d22:	b118      	cbz	r0, 8006d2c <gcvt+0x2c>
 8006d24:	232d      	movs	r3, #45	@ 0x2d
 8006d26:	f802 3b01 	strb.w	r3, [r2], #1
 8006d2a:	3d01      	subs	r5, #1
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4809      	ldr	r0, [pc, #36]	@ (8006d54 <gcvt+0x54>)
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	4629      	mov	r1, r5
 8006d34:	2367      	movs	r3, #103	@ 0x67
 8006d36:	eeb0 0a48 	vmov.f32	s0, s16
 8006d3a:	eef0 0a68 	vmov.f32	s1, s17
 8006d3e:	6800      	ldr	r0, [r0, #0]
 8006d40:	f000 fb06 	bl	8007350 <_gcvt>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	bf18      	it	ne
 8006d48:	4620      	movne	r0, r4
 8006d4a:	b003      	add	sp, #12
 8006d4c:	ecbd 8b02 	vpop	{d8}
 8006d50:	bd30      	pop	{r4, r5, pc}
 8006d52:	bf00      	nop
 8006d54:	20000030 	.word	0x20000030

08006d58 <std>:
 8006d58:	2300      	movs	r3, #0
 8006d5a:	b510      	push	{r4, lr}
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d66:	6083      	str	r3, [r0, #8]
 8006d68:	8181      	strh	r1, [r0, #12]
 8006d6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d6c:	81c2      	strh	r2, [r0, #14]
 8006d6e:	6183      	str	r3, [r0, #24]
 8006d70:	4619      	mov	r1, r3
 8006d72:	2208      	movs	r2, #8
 8006d74:	305c      	adds	r0, #92	@ 0x5c
 8006d76:	f000 f8f4 	bl	8006f62 <memset>
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006db0 <std+0x58>)
 8006d7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006db4 <std+0x5c>)
 8006d80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d82:	4b0d      	ldr	r3, [pc, #52]	@ (8006db8 <std+0x60>)
 8006d84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d86:	4b0d      	ldr	r3, [pc, #52]	@ (8006dbc <std+0x64>)
 8006d88:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc0 <std+0x68>)
 8006d8c:	6224      	str	r4, [r4, #32]
 8006d8e:	429c      	cmp	r4, r3
 8006d90:	d006      	beq.n	8006da0 <std+0x48>
 8006d92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d96:	4294      	cmp	r4, r2
 8006d98:	d002      	beq.n	8006da0 <std+0x48>
 8006d9a:	33d0      	adds	r3, #208	@ 0xd0
 8006d9c:	429c      	cmp	r4, r3
 8006d9e:	d105      	bne.n	8006dac <std+0x54>
 8006da0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da8:	f000 b962 	b.w	8007070 <__retarget_lock_init_recursive>
 8006dac:	bd10      	pop	{r4, pc}
 8006dae:	bf00      	nop
 8006db0:	08006edd 	.word	0x08006edd
 8006db4:	08006eff 	.word	0x08006eff
 8006db8:	08006f37 	.word	0x08006f37
 8006dbc:	08006f5b 	.word	0x08006f5b
 8006dc0:	200004a8 	.word	0x200004a8

08006dc4 <stdio_exit_handler>:
 8006dc4:	4a02      	ldr	r2, [pc, #8]	@ (8006dd0 <stdio_exit_handler+0xc>)
 8006dc6:	4903      	ldr	r1, [pc, #12]	@ (8006dd4 <stdio_exit_handler+0x10>)
 8006dc8:	4803      	ldr	r0, [pc, #12]	@ (8006dd8 <stdio_exit_handler+0x14>)
 8006dca:	f000 b869 	b.w	8006ea0 <_fwalk_sglue>
 8006dce:	bf00      	nop
 8006dd0:	20000024 	.word	0x20000024
 8006dd4:	080075e1 	.word	0x080075e1
 8006dd8:	20000034 	.word	0x20000034

08006ddc <cleanup_stdio>:
 8006ddc:	6841      	ldr	r1, [r0, #4]
 8006dde:	4b0c      	ldr	r3, [pc, #48]	@ (8006e10 <cleanup_stdio+0x34>)
 8006de0:	4299      	cmp	r1, r3
 8006de2:	b510      	push	{r4, lr}
 8006de4:	4604      	mov	r4, r0
 8006de6:	d001      	beq.n	8006dec <cleanup_stdio+0x10>
 8006de8:	f000 fbfa 	bl	80075e0 <_fflush_r>
 8006dec:	68a1      	ldr	r1, [r4, #8]
 8006dee:	4b09      	ldr	r3, [pc, #36]	@ (8006e14 <cleanup_stdio+0x38>)
 8006df0:	4299      	cmp	r1, r3
 8006df2:	d002      	beq.n	8006dfa <cleanup_stdio+0x1e>
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 fbf3 	bl	80075e0 <_fflush_r>
 8006dfa:	68e1      	ldr	r1, [r4, #12]
 8006dfc:	4b06      	ldr	r3, [pc, #24]	@ (8006e18 <cleanup_stdio+0x3c>)
 8006dfe:	4299      	cmp	r1, r3
 8006e00:	d004      	beq.n	8006e0c <cleanup_stdio+0x30>
 8006e02:	4620      	mov	r0, r4
 8006e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e08:	f000 bbea 	b.w	80075e0 <_fflush_r>
 8006e0c:	bd10      	pop	{r4, pc}
 8006e0e:	bf00      	nop
 8006e10:	200004a8 	.word	0x200004a8
 8006e14:	20000510 	.word	0x20000510
 8006e18:	20000578 	.word	0x20000578

08006e1c <global_stdio_init.part.0>:
 8006e1c:	b510      	push	{r4, lr}
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e4c <global_stdio_init.part.0+0x30>)
 8006e20:	4c0b      	ldr	r4, [pc, #44]	@ (8006e50 <global_stdio_init.part.0+0x34>)
 8006e22:	4a0c      	ldr	r2, [pc, #48]	@ (8006e54 <global_stdio_init.part.0+0x38>)
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	4620      	mov	r0, r4
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2104      	movs	r1, #4
 8006e2c:	f7ff ff94 	bl	8006d58 <std>
 8006e30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e34:	2201      	movs	r2, #1
 8006e36:	2109      	movs	r1, #9
 8006e38:	f7ff ff8e 	bl	8006d58 <std>
 8006e3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e40:	2202      	movs	r2, #2
 8006e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e46:	2112      	movs	r1, #18
 8006e48:	f7ff bf86 	b.w	8006d58 <std>
 8006e4c:	200005e0 	.word	0x200005e0
 8006e50:	200004a8 	.word	0x200004a8
 8006e54:	08006dc5 	.word	0x08006dc5

08006e58 <__sfp_lock_acquire>:
 8006e58:	4801      	ldr	r0, [pc, #4]	@ (8006e60 <__sfp_lock_acquire+0x8>)
 8006e5a:	f000 b90a 	b.w	8007072 <__retarget_lock_acquire_recursive>
 8006e5e:	bf00      	nop
 8006e60:	200005e9 	.word	0x200005e9

08006e64 <__sfp_lock_release>:
 8006e64:	4801      	ldr	r0, [pc, #4]	@ (8006e6c <__sfp_lock_release+0x8>)
 8006e66:	f000 b905 	b.w	8007074 <__retarget_lock_release_recursive>
 8006e6a:	bf00      	nop
 8006e6c:	200005e9 	.word	0x200005e9

08006e70 <__sinit>:
 8006e70:	b510      	push	{r4, lr}
 8006e72:	4604      	mov	r4, r0
 8006e74:	f7ff fff0 	bl	8006e58 <__sfp_lock_acquire>
 8006e78:	6a23      	ldr	r3, [r4, #32]
 8006e7a:	b11b      	cbz	r3, 8006e84 <__sinit+0x14>
 8006e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e80:	f7ff bff0 	b.w	8006e64 <__sfp_lock_release>
 8006e84:	4b04      	ldr	r3, [pc, #16]	@ (8006e98 <__sinit+0x28>)
 8006e86:	6223      	str	r3, [r4, #32]
 8006e88:	4b04      	ldr	r3, [pc, #16]	@ (8006e9c <__sinit+0x2c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1f5      	bne.n	8006e7c <__sinit+0xc>
 8006e90:	f7ff ffc4 	bl	8006e1c <global_stdio_init.part.0>
 8006e94:	e7f2      	b.n	8006e7c <__sinit+0xc>
 8006e96:	bf00      	nop
 8006e98:	08006ddd 	.word	0x08006ddd
 8006e9c:	200005e0 	.word	0x200005e0

08006ea0 <_fwalk_sglue>:
 8006ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea4:	4607      	mov	r7, r0
 8006ea6:	4688      	mov	r8, r1
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	2600      	movs	r6, #0
 8006eac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eb0:	f1b9 0901 	subs.w	r9, r9, #1
 8006eb4:	d505      	bpl.n	8006ec2 <_fwalk_sglue+0x22>
 8006eb6:	6824      	ldr	r4, [r4, #0]
 8006eb8:	2c00      	cmp	r4, #0
 8006eba:	d1f7      	bne.n	8006eac <_fwalk_sglue+0xc>
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec2:	89ab      	ldrh	r3, [r5, #12]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d907      	bls.n	8006ed8 <_fwalk_sglue+0x38>
 8006ec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	d003      	beq.n	8006ed8 <_fwalk_sglue+0x38>
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	47c0      	blx	r8
 8006ed6:	4306      	orrs	r6, r0
 8006ed8:	3568      	adds	r5, #104	@ 0x68
 8006eda:	e7e9      	b.n	8006eb0 <_fwalk_sglue+0x10>

08006edc <__sread>:
 8006edc:	b510      	push	{r4, lr}
 8006ede:	460c      	mov	r4, r1
 8006ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee4:	f000 f876 	bl	8006fd4 <_read_r>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	bfab      	itete	ge
 8006eec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006eee:	89a3      	ldrhlt	r3, [r4, #12]
 8006ef0:	181b      	addge	r3, r3, r0
 8006ef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ef6:	bfac      	ite	ge
 8006ef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006efa:	81a3      	strhlt	r3, [r4, #12]
 8006efc:	bd10      	pop	{r4, pc}

08006efe <__swrite>:
 8006efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f02:	461f      	mov	r7, r3
 8006f04:	898b      	ldrh	r3, [r1, #12]
 8006f06:	05db      	lsls	r3, r3, #23
 8006f08:	4605      	mov	r5, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	4616      	mov	r6, r2
 8006f0e:	d505      	bpl.n	8006f1c <__swrite+0x1e>
 8006f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f14:	2302      	movs	r3, #2
 8006f16:	2200      	movs	r2, #0
 8006f18:	f000 f84a 	bl	8006fb0 <_lseek_r>
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f26:	81a3      	strh	r3, [r4, #12]
 8006f28:	4632      	mov	r2, r6
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f32:	f000 b861 	b.w	8006ff8 <_write_r>

08006f36 <__sseek>:
 8006f36:	b510      	push	{r4, lr}
 8006f38:	460c      	mov	r4, r1
 8006f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f3e:	f000 f837 	bl	8006fb0 <_lseek_r>
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	bf15      	itete	ne
 8006f48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f52:	81a3      	strheq	r3, [r4, #12]
 8006f54:	bf18      	it	ne
 8006f56:	81a3      	strhne	r3, [r4, #12]
 8006f58:	bd10      	pop	{r4, pc}

08006f5a <__sclose>:
 8006f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5e:	f000 b817 	b.w	8006f90 <_close_r>

08006f62 <memset>:
 8006f62:	4402      	add	r2, r0
 8006f64:	4603      	mov	r3, r0
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d100      	bne.n	8006f6c <memset+0xa>
 8006f6a:	4770      	bx	lr
 8006f6c:	f803 1b01 	strb.w	r1, [r3], #1
 8006f70:	e7f9      	b.n	8006f66 <memset+0x4>

08006f72 <strcat>:
 8006f72:	b510      	push	{r4, lr}
 8006f74:	4602      	mov	r2, r0
 8006f76:	7814      	ldrb	r4, [r2, #0]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	3201      	adds	r2, #1
 8006f7c:	2c00      	cmp	r4, #0
 8006f7e:	d1fa      	bne.n	8006f76 <strcat+0x4>
 8006f80:	3b01      	subs	r3, #1
 8006f82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	d1f9      	bne.n	8006f82 <strcat+0x10>
 8006f8e:	bd10      	pop	{r4, pc}

08006f90 <_close_r>:
 8006f90:	b538      	push	{r3, r4, r5, lr}
 8006f92:	4d06      	ldr	r5, [pc, #24]	@ (8006fac <_close_r+0x1c>)
 8006f94:	2300      	movs	r3, #0
 8006f96:	4604      	mov	r4, r0
 8006f98:	4608      	mov	r0, r1
 8006f9a:	602b      	str	r3, [r5, #0]
 8006f9c:	f7fb fde0 	bl	8002b60 <_close>
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d102      	bne.n	8006faa <_close_r+0x1a>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	b103      	cbz	r3, 8006faa <_close_r+0x1a>
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	bd38      	pop	{r3, r4, r5, pc}
 8006fac:	200005e4 	.word	0x200005e4

08006fb0 <_lseek_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4d07      	ldr	r5, [pc, #28]	@ (8006fd0 <_lseek_r+0x20>)
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	4608      	mov	r0, r1
 8006fb8:	4611      	mov	r1, r2
 8006fba:	2200      	movs	r2, #0
 8006fbc:	602a      	str	r2, [r5, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f7fb fdf5 	bl	8002bae <_lseek>
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	d102      	bne.n	8006fce <_lseek_r+0x1e>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	b103      	cbz	r3, 8006fce <_lseek_r+0x1e>
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	200005e4 	.word	0x200005e4

08006fd4 <_read_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4d07      	ldr	r5, [pc, #28]	@ (8006ff4 <_read_r+0x20>)
 8006fd8:	4604      	mov	r4, r0
 8006fda:	4608      	mov	r0, r1
 8006fdc:	4611      	mov	r1, r2
 8006fde:	2200      	movs	r2, #0
 8006fe0:	602a      	str	r2, [r5, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f7fb fd83 	bl	8002aee <_read>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_read_r+0x1e>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_read_r+0x1e>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	200005e4 	.word	0x200005e4

08006ff8 <_write_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4d07      	ldr	r5, [pc, #28]	@ (8007018 <_write_r+0x20>)
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	4608      	mov	r0, r1
 8007000:	4611      	mov	r1, r2
 8007002:	2200      	movs	r2, #0
 8007004:	602a      	str	r2, [r5, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	f7fb fd8e 	bl	8002b28 <_write>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_write_r+0x1e>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_write_r+0x1e>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	200005e4 	.word	0x200005e4

0800701c <__errno>:
 800701c:	4b01      	ldr	r3, [pc, #4]	@ (8007024 <__errno+0x8>)
 800701e:	6818      	ldr	r0, [r3, #0]
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	20000030 	.word	0x20000030

08007028 <__libc_init_array>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	4d0d      	ldr	r5, [pc, #52]	@ (8007060 <__libc_init_array+0x38>)
 800702c:	4c0d      	ldr	r4, [pc, #52]	@ (8007064 <__libc_init_array+0x3c>)
 800702e:	1b64      	subs	r4, r4, r5
 8007030:	10a4      	asrs	r4, r4, #2
 8007032:	2600      	movs	r6, #0
 8007034:	42a6      	cmp	r6, r4
 8007036:	d109      	bne.n	800704c <__libc_init_array+0x24>
 8007038:	4d0b      	ldr	r5, [pc, #44]	@ (8007068 <__libc_init_array+0x40>)
 800703a:	4c0c      	ldr	r4, [pc, #48]	@ (800706c <__libc_init_array+0x44>)
 800703c:	f003 fa0c 	bl	800a458 <_init>
 8007040:	1b64      	subs	r4, r4, r5
 8007042:	10a4      	asrs	r4, r4, #2
 8007044:	2600      	movs	r6, #0
 8007046:	42a6      	cmp	r6, r4
 8007048:	d105      	bne.n	8007056 <__libc_init_array+0x2e>
 800704a:	bd70      	pop	{r4, r5, r6, pc}
 800704c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007050:	4798      	blx	r3
 8007052:	3601      	adds	r6, #1
 8007054:	e7ee      	b.n	8007034 <__libc_init_array+0xc>
 8007056:	f855 3b04 	ldr.w	r3, [r5], #4
 800705a:	4798      	blx	r3
 800705c:	3601      	adds	r6, #1
 800705e:	e7f2      	b.n	8007046 <__libc_init_array+0x1e>
 8007060:	0800a8d8 	.word	0x0800a8d8
 8007064:	0800a8d8 	.word	0x0800a8d8
 8007068:	0800a8d8 	.word	0x0800a8d8
 800706c:	0800a8dc 	.word	0x0800a8dc

08007070 <__retarget_lock_init_recursive>:
 8007070:	4770      	bx	lr

08007072 <__retarget_lock_acquire_recursive>:
 8007072:	4770      	bx	lr

08007074 <__retarget_lock_release_recursive>:
 8007074:	4770      	bx	lr
	...

08007078 <_free_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4605      	mov	r5, r0
 800707c:	2900      	cmp	r1, #0
 800707e:	d041      	beq.n	8007104 <_free_r+0x8c>
 8007080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007084:	1f0c      	subs	r4, r1, #4
 8007086:	2b00      	cmp	r3, #0
 8007088:	bfb8      	it	lt
 800708a:	18e4      	addlt	r4, r4, r3
 800708c:	f000 f8e0 	bl	8007250 <__malloc_lock>
 8007090:	4a1d      	ldr	r2, [pc, #116]	@ (8007108 <_free_r+0x90>)
 8007092:	6813      	ldr	r3, [r2, #0]
 8007094:	b933      	cbnz	r3, 80070a4 <_free_r+0x2c>
 8007096:	6063      	str	r3, [r4, #4]
 8007098:	6014      	str	r4, [r2, #0]
 800709a:	4628      	mov	r0, r5
 800709c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070a0:	f000 b8dc 	b.w	800725c <__malloc_unlock>
 80070a4:	42a3      	cmp	r3, r4
 80070a6:	d908      	bls.n	80070ba <_free_r+0x42>
 80070a8:	6820      	ldr	r0, [r4, #0]
 80070aa:	1821      	adds	r1, r4, r0
 80070ac:	428b      	cmp	r3, r1
 80070ae:	bf01      	itttt	eq
 80070b0:	6819      	ldreq	r1, [r3, #0]
 80070b2:	685b      	ldreq	r3, [r3, #4]
 80070b4:	1809      	addeq	r1, r1, r0
 80070b6:	6021      	streq	r1, [r4, #0]
 80070b8:	e7ed      	b.n	8007096 <_free_r+0x1e>
 80070ba:	461a      	mov	r2, r3
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	b10b      	cbz	r3, 80070c4 <_free_r+0x4c>
 80070c0:	42a3      	cmp	r3, r4
 80070c2:	d9fa      	bls.n	80070ba <_free_r+0x42>
 80070c4:	6811      	ldr	r1, [r2, #0]
 80070c6:	1850      	adds	r0, r2, r1
 80070c8:	42a0      	cmp	r0, r4
 80070ca:	d10b      	bne.n	80070e4 <_free_r+0x6c>
 80070cc:	6820      	ldr	r0, [r4, #0]
 80070ce:	4401      	add	r1, r0
 80070d0:	1850      	adds	r0, r2, r1
 80070d2:	4283      	cmp	r3, r0
 80070d4:	6011      	str	r1, [r2, #0]
 80070d6:	d1e0      	bne.n	800709a <_free_r+0x22>
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	6053      	str	r3, [r2, #4]
 80070de:	4408      	add	r0, r1
 80070e0:	6010      	str	r0, [r2, #0]
 80070e2:	e7da      	b.n	800709a <_free_r+0x22>
 80070e4:	d902      	bls.n	80070ec <_free_r+0x74>
 80070e6:	230c      	movs	r3, #12
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	e7d6      	b.n	800709a <_free_r+0x22>
 80070ec:	6820      	ldr	r0, [r4, #0]
 80070ee:	1821      	adds	r1, r4, r0
 80070f0:	428b      	cmp	r3, r1
 80070f2:	bf04      	itt	eq
 80070f4:	6819      	ldreq	r1, [r3, #0]
 80070f6:	685b      	ldreq	r3, [r3, #4]
 80070f8:	6063      	str	r3, [r4, #4]
 80070fa:	bf04      	itt	eq
 80070fc:	1809      	addeq	r1, r1, r0
 80070fe:	6021      	streq	r1, [r4, #0]
 8007100:	6054      	str	r4, [r2, #4]
 8007102:	e7ca      	b.n	800709a <_free_r+0x22>
 8007104:	bd38      	pop	{r3, r4, r5, pc}
 8007106:	bf00      	nop
 8007108:	200005f0 	.word	0x200005f0

0800710c <sbrk_aligned>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	4e0f      	ldr	r6, [pc, #60]	@ (800714c <sbrk_aligned+0x40>)
 8007110:	460c      	mov	r4, r1
 8007112:	6831      	ldr	r1, [r6, #0]
 8007114:	4605      	mov	r5, r0
 8007116:	b911      	cbnz	r1, 800711e <sbrk_aligned+0x12>
 8007118:	f000 fa8a 	bl	8007630 <_sbrk_r>
 800711c:	6030      	str	r0, [r6, #0]
 800711e:	4621      	mov	r1, r4
 8007120:	4628      	mov	r0, r5
 8007122:	f000 fa85 	bl	8007630 <_sbrk_r>
 8007126:	1c43      	adds	r3, r0, #1
 8007128:	d103      	bne.n	8007132 <sbrk_aligned+0x26>
 800712a:	f04f 34ff 	mov.w	r4, #4294967295
 800712e:	4620      	mov	r0, r4
 8007130:	bd70      	pop	{r4, r5, r6, pc}
 8007132:	1cc4      	adds	r4, r0, #3
 8007134:	f024 0403 	bic.w	r4, r4, #3
 8007138:	42a0      	cmp	r0, r4
 800713a:	d0f8      	beq.n	800712e <sbrk_aligned+0x22>
 800713c:	1a21      	subs	r1, r4, r0
 800713e:	4628      	mov	r0, r5
 8007140:	f000 fa76 	bl	8007630 <_sbrk_r>
 8007144:	3001      	adds	r0, #1
 8007146:	d1f2      	bne.n	800712e <sbrk_aligned+0x22>
 8007148:	e7ef      	b.n	800712a <sbrk_aligned+0x1e>
 800714a:	bf00      	nop
 800714c:	200005ec 	.word	0x200005ec

08007150 <_malloc_r>:
 8007150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007154:	1ccd      	adds	r5, r1, #3
 8007156:	f025 0503 	bic.w	r5, r5, #3
 800715a:	3508      	adds	r5, #8
 800715c:	2d0c      	cmp	r5, #12
 800715e:	bf38      	it	cc
 8007160:	250c      	movcc	r5, #12
 8007162:	2d00      	cmp	r5, #0
 8007164:	4606      	mov	r6, r0
 8007166:	db01      	blt.n	800716c <_malloc_r+0x1c>
 8007168:	42a9      	cmp	r1, r5
 800716a:	d904      	bls.n	8007176 <_malloc_r+0x26>
 800716c:	230c      	movs	r3, #12
 800716e:	6033      	str	r3, [r6, #0]
 8007170:	2000      	movs	r0, #0
 8007172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800724c <_malloc_r+0xfc>
 800717a:	f000 f869 	bl	8007250 <__malloc_lock>
 800717e:	f8d8 3000 	ldr.w	r3, [r8]
 8007182:	461c      	mov	r4, r3
 8007184:	bb44      	cbnz	r4, 80071d8 <_malloc_r+0x88>
 8007186:	4629      	mov	r1, r5
 8007188:	4630      	mov	r0, r6
 800718a:	f7ff ffbf 	bl	800710c <sbrk_aligned>
 800718e:	1c43      	adds	r3, r0, #1
 8007190:	4604      	mov	r4, r0
 8007192:	d158      	bne.n	8007246 <_malloc_r+0xf6>
 8007194:	f8d8 4000 	ldr.w	r4, [r8]
 8007198:	4627      	mov	r7, r4
 800719a:	2f00      	cmp	r7, #0
 800719c:	d143      	bne.n	8007226 <_malloc_r+0xd6>
 800719e:	2c00      	cmp	r4, #0
 80071a0:	d04b      	beq.n	800723a <_malloc_r+0xea>
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	4639      	mov	r1, r7
 80071a6:	4630      	mov	r0, r6
 80071a8:	eb04 0903 	add.w	r9, r4, r3
 80071ac:	f000 fa40 	bl	8007630 <_sbrk_r>
 80071b0:	4581      	cmp	r9, r0
 80071b2:	d142      	bne.n	800723a <_malloc_r+0xea>
 80071b4:	6821      	ldr	r1, [r4, #0]
 80071b6:	1a6d      	subs	r5, r5, r1
 80071b8:	4629      	mov	r1, r5
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7ff ffa6 	bl	800710c <sbrk_aligned>
 80071c0:	3001      	adds	r0, #1
 80071c2:	d03a      	beq.n	800723a <_malloc_r+0xea>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	442b      	add	r3, r5
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	f8d8 3000 	ldr.w	r3, [r8]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	bb62      	cbnz	r2, 800722c <_malloc_r+0xdc>
 80071d2:	f8c8 7000 	str.w	r7, [r8]
 80071d6:	e00f      	b.n	80071f8 <_malloc_r+0xa8>
 80071d8:	6822      	ldr	r2, [r4, #0]
 80071da:	1b52      	subs	r2, r2, r5
 80071dc:	d420      	bmi.n	8007220 <_malloc_r+0xd0>
 80071de:	2a0b      	cmp	r2, #11
 80071e0:	d917      	bls.n	8007212 <_malloc_r+0xc2>
 80071e2:	1961      	adds	r1, r4, r5
 80071e4:	42a3      	cmp	r3, r4
 80071e6:	6025      	str	r5, [r4, #0]
 80071e8:	bf18      	it	ne
 80071ea:	6059      	strne	r1, [r3, #4]
 80071ec:	6863      	ldr	r3, [r4, #4]
 80071ee:	bf08      	it	eq
 80071f0:	f8c8 1000 	streq.w	r1, [r8]
 80071f4:	5162      	str	r2, [r4, r5]
 80071f6:	604b      	str	r3, [r1, #4]
 80071f8:	4630      	mov	r0, r6
 80071fa:	f000 f82f 	bl	800725c <__malloc_unlock>
 80071fe:	f104 000b 	add.w	r0, r4, #11
 8007202:	1d23      	adds	r3, r4, #4
 8007204:	f020 0007 	bic.w	r0, r0, #7
 8007208:	1ac2      	subs	r2, r0, r3
 800720a:	bf1c      	itt	ne
 800720c:	1a1b      	subne	r3, r3, r0
 800720e:	50a3      	strne	r3, [r4, r2]
 8007210:	e7af      	b.n	8007172 <_malloc_r+0x22>
 8007212:	6862      	ldr	r2, [r4, #4]
 8007214:	42a3      	cmp	r3, r4
 8007216:	bf0c      	ite	eq
 8007218:	f8c8 2000 	streq.w	r2, [r8]
 800721c:	605a      	strne	r2, [r3, #4]
 800721e:	e7eb      	b.n	80071f8 <_malloc_r+0xa8>
 8007220:	4623      	mov	r3, r4
 8007222:	6864      	ldr	r4, [r4, #4]
 8007224:	e7ae      	b.n	8007184 <_malloc_r+0x34>
 8007226:	463c      	mov	r4, r7
 8007228:	687f      	ldr	r7, [r7, #4]
 800722a:	e7b6      	b.n	800719a <_malloc_r+0x4a>
 800722c:	461a      	mov	r2, r3
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	42a3      	cmp	r3, r4
 8007232:	d1fb      	bne.n	800722c <_malloc_r+0xdc>
 8007234:	2300      	movs	r3, #0
 8007236:	6053      	str	r3, [r2, #4]
 8007238:	e7de      	b.n	80071f8 <_malloc_r+0xa8>
 800723a:	230c      	movs	r3, #12
 800723c:	6033      	str	r3, [r6, #0]
 800723e:	4630      	mov	r0, r6
 8007240:	f000 f80c 	bl	800725c <__malloc_unlock>
 8007244:	e794      	b.n	8007170 <_malloc_r+0x20>
 8007246:	6005      	str	r5, [r0, #0]
 8007248:	e7d6      	b.n	80071f8 <_malloc_r+0xa8>
 800724a:	bf00      	nop
 800724c:	200005f0 	.word	0x200005f0

08007250 <__malloc_lock>:
 8007250:	4801      	ldr	r0, [pc, #4]	@ (8007258 <__malloc_lock+0x8>)
 8007252:	f7ff bf0e 	b.w	8007072 <__retarget_lock_acquire_recursive>
 8007256:	bf00      	nop
 8007258:	200005e8 	.word	0x200005e8

0800725c <__malloc_unlock>:
 800725c:	4801      	ldr	r0, [pc, #4]	@ (8007264 <__malloc_unlock+0x8>)
 800725e:	f7ff bf09 	b.w	8007074 <__retarget_lock_release_recursive>
 8007262:	bf00      	nop
 8007264:	200005e8 	.word	0x200005e8

08007268 <print_e>:
 8007268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800726a:	b087      	sub	sp, #28
 800726c:	461e      	mov	r6, r3
 800726e:	ab04      	add	r3, sp, #16
 8007270:	9301      	str	r3, [sp, #4]
 8007272:	ab03      	add	r3, sp, #12
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	460c      	mov	r4, r1
 8007278:	ab05      	add	r3, sp, #20
 800727a:	2102      	movs	r1, #2
 800727c:	4615      	mov	r5, r2
 800727e:	3201      	adds	r2, #1
 8007280:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8007282:	f000 fa75 	bl	8007770 <_dtoa_r>
 8007286:	9b05      	ldr	r3, [sp, #20]
 8007288:	f242 720f 	movw	r2, #9999	@ 0x270f
 800728c:	4293      	cmp	r3, r2
 800728e:	4601      	mov	r1, r0
 8007290:	d104      	bne.n	800729c <print_e+0x34>
 8007292:	4620      	mov	r0, r4
 8007294:	f000 f9dc 	bl	8007650 <strcpy>
 8007298:	b007      	add	sp, #28
 800729a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800729c:	7802      	ldrb	r2, [r0, #0]
 800729e:	f804 2b01 	strb.w	r2, [r4], #1
 80072a2:	2d00      	cmp	r5, #0
 80072a4:	bfc8      	it	gt
 80072a6:	2701      	movgt	r7, #1
 80072a8:	222e      	movs	r2, #46	@ 0x2e
 80072aa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80072ae:	b108      	cbz	r0, 80072b4 <print_e+0x4c>
 80072b0:	2d00      	cmp	r5, #0
 80072b2:	dc29      	bgt.n	8007308 <print_e+0xa0>
 80072b4:	2e67      	cmp	r6, #103	@ 0x67
 80072b6:	d038      	beq.n	800732a <print_e+0xc2>
 80072b8:	2e47      	cmp	r6, #71	@ 0x47
 80072ba:	d038      	beq.n	800732e <print_e+0xc6>
 80072bc:	222e      	movs	r2, #46	@ 0x2e
 80072be:	2130      	movs	r1, #48	@ 0x30
 80072c0:	2d00      	cmp	r5, #0
 80072c2:	dc2a      	bgt.n	800731a <print_e+0xb2>
 80072c4:	1e5a      	subs	r2, r3, #1
 80072c6:	2a00      	cmp	r2, #0
 80072c8:	bfb8      	it	lt
 80072ca:	f1c3 0301 	rsblt	r3, r3, #1
 80072ce:	9205      	str	r2, [sp, #20]
 80072d0:	bfaa      	itet	ge
 80072d2:	232b      	movge	r3, #43	@ 0x2b
 80072d4:	9305      	strlt	r3, [sp, #20]
 80072d6:	7063      	strbge	r3, [r4, #1]
 80072d8:	9b05      	ldr	r3, [sp, #20]
 80072da:	7026      	strb	r6, [r4, #0]
 80072dc:	bfbc      	itt	lt
 80072de:	222d      	movlt	r2, #45	@ 0x2d
 80072e0:	7062      	strblt	r2, [r4, #1]
 80072e2:	2b63      	cmp	r3, #99	@ 0x63
 80072e4:	dc25      	bgt.n	8007332 <print_e+0xca>
 80072e6:	1ca1      	adds	r1, r4, #2
 80072e8:	9b05      	ldr	r3, [sp, #20]
 80072ea:	220a      	movs	r2, #10
 80072ec:	fb93 f2f2 	sdiv	r2, r3, r2
 80072f0:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 80072f4:	7008      	strb	r0, [r1, #0]
 80072f6:	f06f 0009 	mvn.w	r0, #9
 80072fa:	fb00 3302 	mla	r3, r0, r2, r3
 80072fe:	3330      	adds	r3, #48	@ 0x30
 8007300:	704b      	strb	r3, [r1, #1]
 8007302:	2300      	movs	r3, #0
 8007304:	708b      	strb	r3, [r1, #2]
 8007306:	e7c7      	b.n	8007298 <print_e+0x30>
 8007308:	b10f      	cbz	r7, 800730e <print_e+0xa6>
 800730a:	f804 2b01 	strb.w	r2, [r4], #1
 800730e:	7808      	ldrb	r0, [r1, #0]
 8007310:	f804 0b01 	strb.w	r0, [r4], #1
 8007314:	3d01      	subs	r5, #1
 8007316:	2700      	movs	r7, #0
 8007318:	e7c7      	b.n	80072aa <print_e+0x42>
 800731a:	b10f      	cbz	r7, 8007320 <print_e+0xb8>
 800731c:	f804 2b01 	strb.w	r2, [r4], #1
 8007320:	f804 1b01 	strb.w	r1, [r4], #1
 8007324:	3d01      	subs	r5, #1
 8007326:	2700      	movs	r7, #0
 8007328:	e7ca      	b.n	80072c0 <print_e+0x58>
 800732a:	2665      	movs	r6, #101	@ 0x65
 800732c:	e7ca      	b.n	80072c4 <print_e+0x5c>
 800732e:	2645      	movs	r6, #69	@ 0x45
 8007330:	e7c8      	b.n	80072c4 <print_e+0x5c>
 8007332:	2264      	movs	r2, #100	@ 0x64
 8007334:	fb93 f2f2 	sdiv	r2, r3, r2
 8007338:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 800733c:	70a0      	strb	r0, [r4, #2]
 800733e:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8007342:	fb00 3302 	mla	r3, r0, r2, r3
 8007346:	1ce1      	adds	r1, r4, #3
 8007348:	9305      	str	r3, [sp, #20]
 800734a:	e7cd      	b.n	80072e8 <print_e+0x80>
 800734c:	0000      	movs	r0, r0
	...

08007350 <_gcvt>:
 8007350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007354:	ec59 8b10 	vmov	r8, r9, d0
 8007358:	b086      	sub	sp, #24
 800735a:	4605      	mov	r5, r0
 800735c:	460c      	mov	r4, r1
 800735e:	4616      	mov	r6, r2
 8007360:	469a      	mov	sl, r3
 8007362:	2200      	movs	r2, #0
 8007364:	2300      	movs	r3, #0
 8007366:	4640      	mov	r0, r8
 8007368:	4649      	mov	r1, r9
 800736a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 800736c:	f7f9 fbb6 	bl	8000adc <__aeabi_dcmplt>
 8007370:	b110      	cbz	r0, 8007378 <_gcvt+0x28>
 8007372:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007376:	4699      	mov	r9, r3
 8007378:	2200      	movs	r2, #0
 800737a:	2300      	movs	r3, #0
 800737c:	4640      	mov	r0, r8
 800737e:	4649      	mov	r1, r9
 8007380:	f7f9 fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007384:	b138      	cbz	r0, 8007396 <_gcvt+0x46>
 8007386:	2330      	movs	r3, #48	@ 0x30
 8007388:	7033      	strb	r3, [r6, #0]
 800738a:	2300      	movs	r3, #0
 800738c:	7073      	strb	r3, [r6, #1]
 800738e:	4630      	mov	r0, r6
 8007390:	b006      	add	sp, #24
 8007392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007396:	a34e      	add	r3, pc, #312	@ (adr r3, 80074d0 <_gcvt+0x180>)
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	4640      	mov	r0, r8
 800739e:	4649      	mov	r1, r9
 80073a0:	f7f9 fba6 	bl	8000af0 <__aeabi_dcmple>
 80073a4:	b148      	cbz	r0, 80073ba <_gcvt+0x6a>
 80073a6:	ec49 8b10 	vmov	d0, r8, r9
 80073aa:	9700      	str	r7, [sp, #0]
 80073ac:	4653      	mov	r3, sl
 80073ae:	1e62      	subs	r2, r4, #1
 80073b0:	4631      	mov	r1, r6
 80073b2:	4628      	mov	r0, r5
 80073b4:	f7ff ff58 	bl	8007268 <print_e>
 80073b8:	e7e9      	b.n	800738e <_gcvt+0x3e>
 80073ba:	4620      	mov	r0, r4
 80073bc:	f001 fb26 	bl	8008a0c <_mprec_log10>
 80073c0:	4642      	mov	r2, r8
 80073c2:	ec51 0b10 	vmov	r0, r1, d0
 80073c6:	464b      	mov	r3, r9
 80073c8:	f7f9 fb92 	bl	8000af0 <__aeabi_dcmple>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d1ea      	bne.n	80073a6 <_gcvt+0x56>
 80073d0:	ab05      	add	r3, sp, #20
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	ab04      	add	r3, sp, #16
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	4622      	mov	r2, r4
 80073da:	ab03      	add	r3, sp, #12
 80073dc:	2102      	movs	r1, #2
 80073de:	ec49 8b10 	vmov	d0, r8, r9
 80073e2:	4628      	mov	r0, r5
 80073e4:	f000 f9c4 	bl	8007770 <_dtoa_r>
 80073e8:	9a03      	ldr	r2, [sp, #12]
 80073ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80073ee:	429a      	cmp	r2, r3
 80073f0:	4601      	mov	r1, r0
 80073f2:	d00e      	beq.n	8007412 <_gcvt+0xc2>
 80073f4:	4633      	mov	r3, r6
 80073f6:	4608      	mov	r0, r1
 80073f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073fc:	9d03      	ldr	r5, [sp, #12]
 80073fe:	b10a      	cbz	r2, 8007404 <_gcvt+0xb4>
 8007400:	2d00      	cmp	r5, #0
 8007402:	dc0a      	bgt.n	800741a <_gcvt+0xca>
 8007404:	1931      	adds	r1, r6, r4
 8007406:	1ac9      	subs	r1, r1, r3
 8007408:	462c      	mov	r4, r5
 800740a:	2200      	movs	r2, #0
 800740c:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8007410:	e00c      	b.n	800742c <_gcvt+0xdc>
 8007412:	4630      	mov	r0, r6
 8007414:	f000 f91c 	bl	8007650 <strcpy>
 8007418:	e7b9      	b.n	800738e <_gcvt+0x3e>
 800741a:	3d01      	subs	r5, #1
 800741c:	f803 2b01 	strb.w	r2, [r3], #1
 8007420:	9503      	str	r5, [sp, #12]
 8007422:	e7e8      	b.n	80073f6 <_gcvt+0xa6>
 8007424:	f803 cb01 	strb.w	ip, [r3], #1
 8007428:	3901      	subs	r1, #1
 800742a:	2201      	movs	r2, #1
 800742c:	2c00      	cmp	r4, #0
 800742e:	4625      	mov	r5, r4
 8007430:	dc2e      	bgt.n	8007490 <_gcvt+0x140>
 8007432:	b102      	cbz	r2, 8007436 <_gcvt+0xe6>
 8007434:	9403      	str	r4, [sp, #12]
 8007436:	b90f      	cbnz	r7, 800743c <_gcvt+0xec>
 8007438:	7802      	ldrb	r2, [r0, #0]
 800743a:	b332      	cbz	r2, 800748a <_gcvt+0x13a>
 800743c:	42b3      	cmp	r3, r6
 800743e:	bf04      	itt	eq
 8007440:	2230      	moveq	r2, #48	@ 0x30
 8007442:	f803 2b01 	strbeq.w	r2, [r3], #1
 8007446:	222e      	movs	r2, #46	@ 0x2e
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	9a03      	ldr	r2, [sp, #12]
 800744c:	461c      	mov	r4, r3
 800744e:	f04f 0c00 	mov.w	ip, #0
 8007452:	1ad5      	subs	r5, r2, r3
 8007454:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 8007458:	42e5      	cmn	r5, r4
 800745a:	d421      	bmi.n	80074a0 <_gcvt+0x150>
 800745c:	2a00      	cmp	r2, #0
 800745e:	f1c2 0400 	rsb	r4, r2, #0
 8007462:	bfd4      	ite	le
 8007464:	4625      	movle	r5, r4
 8007466:	2500      	movgt	r5, #0
 8007468:	3501      	adds	r5, #1
 800746a:	442b      	add	r3, r5
 800746c:	f1bc 0f00 	cmp.w	ip, #0
 8007470:	d004      	beq.n	800747c <_gcvt+0x12c>
 8007472:	2a00      	cmp	r2, #0
 8007474:	bfc8      	it	gt
 8007476:	2400      	movgt	r4, #0
 8007478:	4422      	add	r2, r4
 800747a:	9203      	str	r2, [sp, #12]
 800747c:	1e42      	subs	r2, r0, #1
 800747e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8007482:	b108      	cbz	r0, 8007488 <_gcvt+0x138>
 8007484:	2900      	cmp	r1, #0
 8007486:	dc10      	bgt.n	80074aa <_gcvt+0x15a>
 8007488:	b9e7      	cbnz	r7, 80074c4 <_gcvt+0x174>
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	e77e      	b.n	800738e <_gcvt+0x3e>
 8007490:	2900      	cmp	r1, #0
 8007492:	f104 34ff 	add.w	r4, r4, #4294967295
 8007496:	dcc5      	bgt.n	8007424 <_gcvt+0xd4>
 8007498:	2a00      	cmp	r2, #0
 800749a:	d0cc      	beq.n	8007436 <_gcvt+0xe6>
 800749c:	9503      	str	r5, [sp, #12]
 800749e:	e7ca      	b.n	8007436 <_gcvt+0xe6>
 80074a0:	f804 ef01 	strb.w	lr, [r4, #1]!
 80074a4:	f04f 0c01 	mov.w	ip, #1
 80074a8:	e7d6      	b.n	8007458 <_gcvt+0x108>
 80074aa:	f803 0b01 	strb.w	r0, [r3], #1
 80074ae:	3901      	subs	r1, #1
 80074b0:	e7e5      	b.n	800747e <_gcvt+0x12e>
 80074b2:	f802 5b01 	strb.w	r5, [r2], #1
 80074b6:	1aa0      	subs	r0, r4, r2
 80074b8:	2800      	cmp	r0, #0
 80074ba:	dcfa      	bgt.n	80074b2 <_gcvt+0x162>
 80074bc:	2900      	cmp	r1, #0
 80074be:	bfa8      	it	ge
 80074c0:	185b      	addge	r3, r3, r1
 80074c2:	e7e2      	b.n	800748a <_gcvt+0x13a>
 80074c4:	461a      	mov	r2, r3
 80074c6:	185c      	adds	r4, r3, r1
 80074c8:	2530      	movs	r5, #48	@ 0x30
 80074ca:	e7f4      	b.n	80074b6 <_gcvt+0x166>
 80074cc:	f3af 8000 	nop.w
 80074d0:	eb1c432d 	.word	0xeb1c432d
 80074d4:	3f1a36e2 	.word	0x3f1a36e2

080074d8 <__sflush_r>:
 80074d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e0:	0716      	lsls	r6, r2, #28
 80074e2:	4605      	mov	r5, r0
 80074e4:	460c      	mov	r4, r1
 80074e6:	d454      	bmi.n	8007592 <__sflush_r+0xba>
 80074e8:	684b      	ldr	r3, [r1, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	dc02      	bgt.n	80074f4 <__sflush_r+0x1c>
 80074ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	dd48      	ble.n	8007586 <__sflush_r+0xae>
 80074f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074f6:	2e00      	cmp	r6, #0
 80074f8:	d045      	beq.n	8007586 <__sflush_r+0xae>
 80074fa:	2300      	movs	r3, #0
 80074fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007500:	682f      	ldr	r7, [r5, #0]
 8007502:	6a21      	ldr	r1, [r4, #32]
 8007504:	602b      	str	r3, [r5, #0]
 8007506:	d030      	beq.n	800756a <__sflush_r+0x92>
 8007508:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	0759      	lsls	r1, r3, #29
 800750e:	d505      	bpl.n	800751c <__sflush_r+0x44>
 8007510:	6863      	ldr	r3, [r4, #4]
 8007512:	1ad2      	subs	r2, r2, r3
 8007514:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007516:	b10b      	cbz	r3, 800751c <__sflush_r+0x44>
 8007518:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800751a:	1ad2      	subs	r2, r2, r3
 800751c:	2300      	movs	r3, #0
 800751e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007520:	6a21      	ldr	r1, [r4, #32]
 8007522:	4628      	mov	r0, r5
 8007524:	47b0      	blx	r6
 8007526:	1c43      	adds	r3, r0, #1
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	d106      	bne.n	800753a <__sflush_r+0x62>
 800752c:	6829      	ldr	r1, [r5, #0]
 800752e:	291d      	cmp	r1, #29
 8007530:	d82b      	bhi.n	800758a <__sflush_r+0xb2>
 8007532:	4a2a      	ldr	r2, [pc, #168]	@ (80075dc <__sflush_r+0x104>)
 8007534:	410a      	asrs	r2, r1
 8007536:	07d6      	lsls	r6, r2, #31
 8007538:	d427      	bmi.n	800758a <__sflush_r+0xb2>
 800753a:	2200      	movs	r2, #0
 800753c:	6062      	str	r2, [r4, #4]
 800753e:	04d9      	lsls	r1, r3, #19
 8007540:	6922      	ldr	r2, [r4, #16]
 8007542:	6022      	str	r2, [r4, #0]
 8007544:	d504      	bpl.n	8007550 <__sflush_r+0x78>
 8007546:	1c42      	adds	r2, r0, #1
 8007548:	d101      	bne.n	800754e <__sflush_r+0x76>
 800754a:	682b      	ldr	r3, [r5, #0]
 800754c:	b903      	cbnz	r3, 8007550 <__sflush_r+0x78>
 800754e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007550:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007552:	602f      	str	r7, [r5, #0]
 8007554:	b1b9      	cbz	r1, 8007586 <__sflush_r+0xae>
 8007556:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800755a:	4299      	cmp	r1, r3
 800755c:	d002      	beq.n	8007564 <__sflush_r+0x8c>
 800755e:	4628      	mov	r0, r5
 8007560:	f7ff fd8a 	bl	8007078 <_free_r>
 8007564:	2300      	movs	r3, #0
 8007566:	6363      	str	r3, [r4, #52]	@ 0x34
 8007568:	e00d      	b.n	8007586 <__sflush_r+0xae>
 800756a:	2301      	movs	r3, #1
 800756c:	4628      	mov	r0, r5
 800756e:	47b0      	blx	r6
 8007570:	4602      	mov	r2, r0
 8007572:	1c50      	adds	r0, r2, #1
 8007574:	d1c9      	bne.n	800750a <__sflush_r+0x32>
 8007576:	682b      	ldr	r3, [r5, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0c6      	beq.n	800750a <__sflush_r+0x32>
 800757c:	2b1d      	cmp	r3, #29
 800757e:	d001      	beq.n	8007584 <__sflush_r+0xac>
 8007580:	2b16      	cmp	r3, #22
 8007582:	d11e      	bne.n	80075c2 <__sflush_r+0xea>
 8007584:	602f      	str	r7, [r5, #0]
 8007586:	2000      	movs	r0, #0
 8007588:	e022      	b.n	80075d0 <__sflush_r+0xf8>
 800758a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800758e:	b21b      	sxth	r3, r3
 8007590:	e01b      	b.n	80075ca <__sflush_r+0xf2>
 8007592:	690f      	ldr	r7, [r1, #16]
 8007594:	2f00      	cmp	r7, #0
 8007596:	d0f6      	beq.n	8007586 <__sflush_r+0xae>
 8007598:	0793      	lsls	r3, r2, #30
 800759a:	680e      	ldr	r6, [r1, #0]
 800759c:	bf08      	it	eq
 800759e:	694b      	ldreq	r3, [r1, #20]
 80075a0:	600f      	str	r7, [r1, #0]
 80075a2:	bf18      	it	ne
 80075a4:	2300      	movne	r3, #0
 80075a6:	eba6 0807 	sub.w	r8, r6, r7
 80075aa:	608b      	str	r3, [r1, #8]
 80075ac:	f1b8 0f00 	cmp.w	r8, #0
 80075b0:	dde9      	ble.n	8007586 <__sflush_r+0xae>
 80075b2:	6a21      	ldr	r1, [r4, #32]
 80075b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80075b6:	4643      	mov	r3, r8
 80075b8:	463a      	mov	r2, r7
 80075ba:	4628      	mov	r0, r5
 80075bc:	47b0      	blx	r6
 80075be:	2800      	cmp	r0, #0
 80075c0:	dc08      	bgt.n	80075d4 <__sflush_r+0xfc>
 80075c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075ca:	81a3      	strh	r3, [r4, #12]
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d4:	4407      	add	r7, r0
 80075d6:	eba8 0800 	sub.w	r8, r8, r0
 80075da:	e7e7      	b.n	80075ac <__sflush_r+0xd4>
 80075dc:	dfbffffe 	.word	0xdfbffffe

080075e0 <_fflush_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	690b      	ldr	r3, [r1, #16]
 80075e4:	4605      	mov	r5, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	b913      	cbnz	r3, 80075f0 <_fflush_r+0x10>
 80075ea:	2500      	movs	r5, #0
 80075ec:	4628      	mov	r0, r5
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	b118      	cbz	r0, 80075fa <_fflush_r+0x1a>
 80075f2:	6a03      	ldr	r3, [r0, #32]
 80075f4:	b90b      	cbnz	r3, 80075fa <_fflush_r+0x1a>
 80075f6:	f7ff fc3b 	bl	8006e70 <__sinit>
 80075fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0f3      	beq.n	80075ea <_fflush_r+0xa>
 8007602:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007604:	07d0      	lsls	r0, r2, #31
 8007606:	d404      	bmi.n	8007612 <_fflush_r+0x32>
 8007608:	0599      	lsls	r1, r3, #22
 800760a:	d402      	bmi.n	8007612 <_fflush_r+0x32>
 800760c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800760e:	f7ff fd30 	bl	8007072 <__retarget_lock_acquire_recursive>
 8007612:	4628      	mov	r0, r5
 8007614:	4621      	mov	r1, r4
 8007616:	f7ff ff5f 	bl	80074d8 <__sflush_r>
 800761a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800761c:	07da      	lsls	r2, r3, #31
 800761e:	4605      	mov	r5, r0
 8007620:	d4e4      	bmi.n	80075ec <_fflush_r+0xc>
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	059b      	lsls	r3, r3, #22
 8007626:	d4e1      	bmi.n	80075ec <_fflush_r+0xc>
 8007628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800762a:	f7ff fd23 	bl	8007074 <__retarget_lock_release_recursive>
 800762e:	e7dd      	b.n	80075ec <_fflush_r+0xc>

08007630 <_sbrk_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d06      	ldr	r5, [pc, #24]	@ (800764c <_sbrk_r+0x1c>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	602b      	str	r3, [r5, #0]
 800763c:	f7fb fac4 	bl	8002bc8 <_sbrk>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_sbrk_r+0x1a>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_sbrk_r+0x1a>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	200005e4 	.word	0x200005e4

08007650 <strcpy>:
 8007650:	4603      	mov	r3, r0
 8007652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007656:	f803 2b01 	strb.w	r2, [r3], #1
 800765a:	2a00      	cmp	r2, #0
 800765c:	d1f9      	bne.n	8007652 <strcpy+0x2>
 800765e:	4770      	bx	lr

08007660 <quorem>:
 8007660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	6903      	ldr	r3, [r0, #16]
 8007666:	690c      	ldr	r4, [r1, #16]
 8007668:	42a3      	cmp	r3, r4
 800766a:	4607      	mov	r7, r0
 800766c:	db7e      	blt.n	800776c <quorem+0x10c>
 800766e:	3c01      	subs	r4, #1
 8007670:	f101 0814 	add.w	r8, r1, #20
 8007674:	00a3      	lsls	r3, r4, #2
 8007676:	f100 0514 	add.w	r5, r0, #20
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007686:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800768a:	3301      	adds	r3, #1
 800768c:	429a      	cmp	r2, r3
 800768e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007692:	fbb2 f6f3 	udiv	r6, r2, r3
 8007696:	d32e      	bcc.n	80076f6 <quorem+0x96>
 8007698:	f04f 0a00 	mov.w	sl, #0
 800769c:	46c4      	mov	ip, r8
 800769e:	46ae      	mov	lr, r5
 80076a0:	46d3      	mov	fp, sl
 80076a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076a6:	b298      	uxth	r0, r3
 80076a8:	fb06 a000 	mla	r0, r6, r0, sl
 80076ac:	0c02      	lsrs	r2, r0, #16
 80076ae:	0c1b      	lsrs	r3, r3, #16
 80076b0:	fb06 2303 	mla	r3, r6, r3, r2
 80076b4:	f8de 2000 	ldr.w	r2, [lr]
 80076b8:	b280      	uxth	r0, r0
 80076ba:	b292      	uxth	r2, r2
 80076bc:	1a12      	subs	r2, r2, r0
 80076be:	445a      	add	r2, fp
 80076c0:	f8de 0000 	ldr.w	r0, [lr]
 80076c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80076ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80076d2:	b292      	uxth	r2, r2
 80076d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076d8:	45e1      	cmp	r9, ip
 80076da:	f84e 2b04 	str.w	r2, [lr], #4
 80076de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076e2:	d2de      	bcs.n	80076a2 <quorem+0x42>
 80076e4:	9b00      	ldr	r3, [sp, #0]
 80076e6:	58eb      	ldr	r3, [r5, r3]
 80076e8:	b92b      	cbnz	r3, 80076f6 <quorem+0x96>
 80076ea:	9b01      	ldr	r3, [sp, #4]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	429d      	cmp	r5, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	d32f      	bcc.n	8007754 <quorem+0xf4>
 80076f4:	613c      	str	r4, [r7, #16]
 80076f6:	4638      	mov	r0, r7
 80076f8:	f001 f880 	bl	80087fc <__mcmp>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	db25      	blt.n	800774c <quorem+0xec>
 8007700:	4629      	mov	r1, r5
 8007702:	2000      	movs	r0, #0
 8007704:	f858 2b04 	ldr.w	r2, [r8], #4
 8007708:	f8d1 c000 	ldr.w	ip, [r1]
 800770c:	fa1f fe82 	uxth.w	lr, r2
 8007710:	fa1f f38c 	uxth.w	r3, ip
 8007714:	eba3 030e 	sub.w	r3, r3, lr
 8007718:	4403      	add	r3, r0
 800771a:	0c12      	lsrs	r2, r2, #16
 800771c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007720:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007724:	b29b      	uxth	r3, r3
 8007726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800772a:	45c1      	cmp	r9, r8
 800772c:	f841 3b04 	str.w	r3, [r1], #4
 8007730:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007734:	d2e6      	bcs.n	8007704 <quorem+0xa4>
 8007736:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800773a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800773e:	b922      	cbnz	r2, 800774a <quorem+0xea>
 8007740:	3b04      	subs	r3, #4
 8007742:	429d      	cmp	r5, r3
 8007744:	461a      	mov	r2, r3
 8007746:	d30b      	bcc.n	8007760 <quorem+0x100>
 8007748:	613c      	str	r4, [r7, #16]
 800774a:	3601      	adds	r6, #1
 800774c:	4630      	mov	r0, r6
 800774e:	b003      	add	sp, #12
 8007750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007754:	6812      	ldr	r2, [r2, #0]
 8007756:	3b04      	subs	r3, #4
 8007758:	2a00      	cmp	r2, #0
 800775a:	d1cb      	bne.n	80076f4 <quorem+0x94>
 800775c:	3c01      	subs	r4, #1
 800775e:	e7c6      	b.n	80076ee <quorem+0x8e>
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	3b04      	subs	r3, #4
 8007764:	2a00      	cmp	r2, #0
 8007766:	d1ef      	bne.n	8007748 <quorem+0xe8>
 8007768:	3c01      	subs	r4, #1
 800776a:	e7ea      	b.n	8007742 <quorem+0xe2>
 800776c:	2000      	movs	r0, #0
 800776e:	e7ee      	b.n	800774e <quorem+0xee>

08007770 <_dtoa_r>:
 8007770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	69c7      	ldr	r7, [r0, #28]
 8007776:	b099      	sub	sp, #100	@ 0x64
 8007778:	ed8d 0b02 	vstr	d0, [sp, #8]
 800777c:	ec55 4b10 	vmov	r4, r5, d0
 8007780:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007782:	9109      	str	r1, [sp, #36]	@ 0x24
 8007784:	4683      	mov	fp, r0
 8007786:	920e      	str	r2, [sp, #56]	@ 0x38
 8007788:	9313      	str	r3, [sp, #76]	@ 0x4c
 800778a:	b97f      	cbnz	r7, 80077ac <_dtoa_r+0x3c>
 800778c:	2010      	movs	r0, #16
 800778e:	f000 fdb3 	bl	80082f8 <malloc>
 8007792:	4602      	mov	r2, r0
 8007794:	f8cb 001c 	str.w	r0, [fp, #28]
 8007798:	b920      	cbnz	r0, 80077a4 <_dtoa_r+0x34>
 800779a:	4ba7      	ldr	r3, [pc, #668]	@ (8007a38 <_dtoa_r+0x2c8>)
 800779c:	21ef      	movs	r1, #239	@ 0xef
 800779e:	48a7      	ldr	r0, [pc, #668]	@ (8007a3c <_dtoa_r+0x2cc>)
 80077a0:	f001 f960 	bl	8008a64 <__assert_func>
 80077a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80077a8:	6007      	str	r7, [r0, #0]
 80077aa:	60c7      	str	r7, [r0, #12]
 80077ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077b0:	6819      	ldr	r1, [r3, #0]
 80077b2:	b159      	cbz	r1, 80077cc <_dtoa_r+0x5c>
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	604a      	str	r2, [r1, #4]
 80077b8:	2301      	movs	r3, #1
 80077ba:	4093      	lsls	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
 80077be:	4658      	mov	r0, fp
 80077c0:	f000 fde2 	bl	8008388 <_Bfree>
 80077c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	1e2b      	subs	r3, r5, #0
 80077ce:	bfb9      	ittee	lt
 80077d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80077d4:	9303      	strlt	r3, [sp, #12]
 80077d6:	2300      	movge	r3, #0
 80077d8:	6033      	strge	r3, [r6, #0]
 80077da:	9f03      	ldr	r7, [sp, #12]
 80077dc:	4b98      	ldr	r3, [pc, #608]	@ (8007a40 <_dtoa_r+0x2d0>)
 80077de:	bfbc      	itt	lt
 80077e0:	2201      	movlt	r2, #1
 80077e2:	6032      	strlt	r2, [r6, #0]
 80077e4:	43bb      	bics	r3, r7
 80077e6:	d112      	bne.n	800780e <_dtoa_r+0x9e>
 80077e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077f4:	4323      	orrs	r3, r4
 80077f6:	f000 854d 	beq.w	8008294 <_dtoa_r+0xb24>
 80077fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007a54 <_dtoa_r+0x2e4>
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 854f 	beq.w	80082a4 <_dtoa_r+0xb34>
 8007806:	f10a 0303 	add.w	r3, sl, #3
 800780a:	f000 bd49 	b.w	80082a0 <_dtoa_r+0xb30>
 800780e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007812:	2200      	movs	r2, #0
 8007814:	ec51 0b17 	vmov	r0, r1, d7
 8007818:	2300      	movs	r3, #0
 800781a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800781e:	f7f9 f953 	bl	8000ac8 <__aeabi_dcmpeq>
 8007822:	4680      	mov	r8, r0
 8007824:	b158      	cbz	r0, 800783e <_dtoa_r+0xce>
 8007826:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007828:	2301      	movs	r3, #1
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800782e:	b113      	cbz	r3, 8007836 <_dtoa_r+0xc6>
 8007830:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007832:	4b84      	ldr	r3, [pc, #528]	@ (8007a44 <_dtoa_r+0x2d4>)
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007a58 <_dtoa_r+0x2e8>
 800783a:	f000 bd33 	b.w	80082a4 <_dtoa_r+0xb34>
 800783e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007842:	aa16      	add	r2, sp, #88	@ 0x58
 8007844:	a917      	add	r1, sp, #92	@ 0x5c
 8007846:	4658      	mov	r0, fp
 8007848:	f001 f888 	bl	800895c <__d2b>
 800784c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007850:	4681      	mov	r9, r0
 8007852:	2e00      	cmp	r6, #0
 8007854:	d077      	beq.n	8007946 <_dtoa_r+0x1d6>
 8007856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007858:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800785c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007864:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007868:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800786c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007870:	4619      	mov	r1, r3
 8007872:	2200      	movs	r2, #0
 8007874:	4b74      	ldr	r3, [pc, #464]	@ (8007a48 <_dtoa_r+0x2d8>)
 8007876:	f7f8 fd07 	bl	8000288 <__aeabi_dsub>
 800787a:	a369      	add	r3, pc, #420	@ (adr r3, 8007a20 <_dtoa_r+0x2b0>)
 800787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007880:	f7f8 feba 	bl	80005f8 <__aeabi_dmul>
 8007884:	a368      	add	r3, pc, #416	@ (adr r3, 8007a28 <_dtoa_r+0x2b8>)
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f7f8 fcff 	bl	800028c <__adddf3>
 800788e:	4604      	mov	r4, r0
 8007890:	4630      	mov	r0, r6
 8007892:	460d      	mov	r5, r1
 8007894:	f7f8 fe46 	bl	8000524 <__aeabi_i2d>
 8007898:	a365      	add	r3, pc, #404	@ (adr r3, 8007a30 <_dtoa_r+0x2c0>)
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	f7f8 feab 	bl	80005f8 <__aeabi_dmul>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4620      	mov	r0, r4
 80078a8:	4629      	mov	r1, r5
 80078aa:	f7f8 fcef 	bl	800028c <__adddf3>
 80078ae:	4604      	mov	r4, r0
 80078b0:	460d      	mov	r5, r1
 80078b2:	f7f9 f93b 	bl	8000b2c <__aeabi_d2iz>
 80078b6:	2200      	movs	r2, #0
 80078b8:	4607      	mov	r7, r0
 80078ba:	2300      	movs	r3, #0
 80078bc:	4620      	mov	r0, r4
 80078be:	4629      	mov	r1, r5
 80078c0:	f7f9 f90c 	bl	8000adc <__aeabi_dcmplt>
 80078c4:	b140      	cbz	r0, 80078d8 <_dtoa_r+0x168>
 80078c6:	4638      	mov	r0, r7
 80078c8:	f7f8 fe2c 	bl	8000524 <__aeabi_i2d>
 80078cc:	4622      	mov	r2, r4
 80078ce:	462b      	mov	r3, r5
 80078d0:	f7f9 f8fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80078d4:	b900      	cbnz	r0, 80078d8 <_dtoa_r+0x168>
 80078d6:	3f01      	subs	r7, #1
 80078d8:	2f16      	cmp	r7, #22
 80078da:	d851      	bhi.n	8007980 <_dtoa_r+0x210>
 80078dc:	4b5b      	ldr	r3, [pc, #364]	@ (8007a4c <_dtoa_r+0x2dc>)
 80078de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078ea:	f7f9 f8f7 	bl	8000adc <__aeabi_dcmplt>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d048      	beq.n	8007984 <_dtoa_r+0x214>
 80078f2:	3f01      	subs	r7, #1
 80078f4:	2300      	movs	r3, #0
 80078f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80078f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80078fa:	1b9b      	subs	r3, r3, r6
 80078fc:	1e5a      	subs	r2, r3, #1
 80078fe:	bf44      	itt	mi
 8007900:	f1c3 0801 	rsbmi	r8, r3, #1
 8007904:	2300      	movmi	r3, #0
 8007906:	9208      	str	r2, [sp, #32]
 8007908:	bf54      	ite	pl
 800790a:	f04f 0800 	movpl.w	r8, #0
 800790e:	9308      	strmi	r3, [sp, #32]
 8007910:	2f00      	cmp	r7, #0
 8007912:	db39      	blt.n	8007988 <_dtoa_r+0x218>
 8007914:	9b08      	ldr	r3, [sp, #32]
 8007916:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007918:	443b      	add	r3, r7
 800791a:	9308      	str	r3, [sp, #32]
 800791c:	2300      	movs	r3, #0
 800791e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007922:	2b09      	cmp	r3, #9
 8007924:	d864      	bhi.n	80079f0 <_dtoa_r+0x280>
 8007926:	2b05      	cmp	r3, #5
 8007928:	bfc4      	itt	gt
 800792a:	3b04      	subgt	r3, #4
 800792c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800792e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007930:	f1a3 0302 	sub.w	r3, r3, #2
 8007934:	bfcc      	ite	gt
 8007936:	2400      	movgt	r4, #0
 8007938:	2401      	movle	r4, #1
 800793a:	2b03      	cmp	r3, #3
 800793c:	d863      	bhi.n	8007a06 <_dtoa_r+0x296>
 800793e:	e8df f003 	tbb	[pc, r3]
 8007942:	372a      	.short	0x372a
 8007944:	5535      	.short	0x5535
 8007946:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800794a:	441e      	add	r6, r3
 800794c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007950:	2b20      	cmp	r3, #32
 8007952:	bfc1      	itttt	gt
 8007954:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007958:	409f      	lslgt	r7, r3
 800795a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800795e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007962:	bfd6      	itet	le
 8007964:	f1c3 0320 	rsble	r3, r3, #32
 8007968:	ea47 0003 	orrgt.w	r0, r7, r3
 800796c:	fa04 f003 	lslle.w	r0, r4, r3
 8007970:	f7f8 fdc8 	bl	8000504 <__aeabi_ui2d>
 8007974:	2201      	movs	r2, #1
 8007976:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800797a:	3e01      	subs	r6, #1
 800797c:	9214      	str	r2, [sp, #80]	@ 0x50
 800797e:	e777      	b.n	8007870 <_dtoa_r+0x100>
 8007980:	2301      	movs	r3, #1
 8007982:	e7b8      	b.n	80078f6 <_dtoa_r+0x186>
 8007984:	9012      	str	r0, [sp, #72]	@ 0x48
 8007986:	e7b7      	b.n	80078f8 <_dtoa_r+0x188>
 8007988:	427b      	negs	r3, r7
 800798a:	930a      	str	r3, [sp, #40]	@ 0x28
 800798c:	2300      	movs	r3, #0
 800798e:	eba8 0807 	sub.w	r8, r8, r7
 8007992:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007994:	e7c4      	b.n	8007920 <_dtoa_r+0x1b0>
 8007996:	2300      	movs	r3, #0
 8007998:	930b      	str	r3, [sp, #44]	@ 0x2c
 800799a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800799c:	2b00      	cmp	r3, #0
 800799e:	dc35      	bgt.n	8007a0c <_dtoa_r+0x29c>
 80079a0:	2301      	movs	r3, #1
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	9307      	str	r3, [sp, #28]
 80079a6:	461a      	mov	r2, r3
 80079a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80079aa:	e00b      	b.n	80079c4 <_dtoa_r+0x254>
 80079ac:	2301      	movs	r3, #1
 80079ae:	e7f3      	b.n	8007998 <_dtoa_r+0x228>
 80079b0:	2300      	movs	r3, #0
 80079b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079b6:	18fb      	adds	r3, r7, r3
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	3301      	adds	r3, #1
 80079bc:	2b01      	cmp	r3, #1
 80079be:	9307      	str	r3, [sp, #28]
 80079c0:	bfb8      	it	lt
 80079c2:	2301      	movlt	r3, #1
 80079c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80079c8:	2100      	movs	r1, #0
 80079ca:	2204      	movs	r2, #4
 80079cc:	f102 0514 	add.w	r5, r2, #20
 80079d0:	429d      	cmp	r5, r3
 80079d2:	d91f      	bls.n	8007a14 <_dtoa_r+0x2a4>
 80079d4:	6041      	str	r1, [r0, #4]
 80079d6:	4658      	mov	r0, fp
 80079d8:	f000 fc96 	bl	8008308 <_Balloc>
 80079dc:	4682      	mov	sl, r0
 80079de:	2800      	cmp	r0, #0
 80079e0:	d13c      	bne.n	8007a5c <_dtoa_r+0x2ec>
 80079e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a50 <_dtoa_r+0x2e0>)
 80079e4:	4602      	mov	r2, r0
 80079e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80079ea:	e6d8      	b.n	800779e <_dtoa_r+0x2e>
 80079ec:	2301      	movs	r3, #1
 80079ee:	e7e0      	b.n	80079b2 <_dtoa_r+0x242>
 80079f0:	2401      	movs	r4, #1
 80079f2:	2300      	movs	r3, #0
 80079f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80079f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079f8:	f04f 33ff 	mov.w	r3, #4294967295
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	9307      	str	r3, [sp, #28]
 8007a00:	2200      	movs	r2, #0
 8007a02:	2312      	movs	r3, #18
 8007a04:	e7d0      	b.n	80079a8 <_dtoa_r+0x238>
 8007a06:	2301      	movs	r3, #1
 8007a08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a0a:	e7f5      	b.n	80079f8 <_dtoa_r+0x288>
 8007a0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	9307      	str	r3, [sp, #28]
 8007a12:	e7d7      	b.n	80079c4 <_dtoa_r+0x254>
 8007a14:	3101      	adds	r1, #1
 8007a16:	0052      	lsls	r2, r2, #1
 8007a18:	e7d8      	b.n	80079cc <_dtoa_r+0x25c>
 8007a1a:	bf00      	nop
 8007a1c:	f3af 8000 	nop.w
 8007a20:	636f4361 	.word	0x636f4361
 8007a24:	3fd287a7 	.word	0x3fd287a7
 8007a28:	8b60c8b3 	.word	0x8b60c8b3
 8007a2c:	3fc68a28 	.word	0x3fc68a28
 8007a30:	509f79fb 	.word	0x509f79fb
 8007a34:	3fd34413 	.word	0x3fd34413
 8007a38:	0800a4af 	.word	0x0800a4af
 8007a3c:	0800a4c6 	.word	0x0800a4c6
 8007a40:	7ff00000 	.word	0x7ff00000
 8007a44:	0800a4ae 	.word	0x0800a4ae
 8007a48:	3ff80000 	.word	0x3ff80000
 8007a4c:	0800a5c0 	.word	0x0800a5c0
 8007a50:	0800a51e 	.word	0x0800a51e
 8007a54:	0800a4a9 	.word	0x0800a4a9
 8007a58:	0800a4ad 	.word	0x0800a4ad
 8007a5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a60:	6018      	str	r0, [r3, #0]
 8007a62:	9b07      	ldr	r3, [sp, #28]
 8007a64:	2b0e      	cmp	r3, #14
 8007a66:	f200 80a4 	bhi.w	8007bb2 <_dtoa_r+0x442>
 8007a6a:	2c00      	cmp	r4, #0
 8007a6c:	f000 80a1 	beq.w	8007bb2 <_dtoa_r+0x442>
 8007a70:	2f00      	cmp	r7, #0
 8007a72:	dd33      	ble.n	8007adc <_dtoa_r+0x36c>
 8007a74:	4bad      	ldr	r3, [pc, #692]	@ (8007d2c <_dtoa_r+0x5bc>)
 8007a76:	f007 020f 	and.w	r2, r7, #15
 8007a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a7e:	ed93 7b00 	vldr	d7, [r3]
 8007a82:	05f8      	lsls	r0, r7, #23
 8007a84:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a8c:	d516      	bpl.n	8007abc <_dtoa_r+0x34c>
 8007a8e:	4ba8      	ldr	r3, [pc, #672]	@ (8007d30 <_dtoa_r+0x5c0>)
 8007a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a98:	f7f8 fed8 	bl	800084c <__aeabi_ddiv>
 8007a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aa0:	f004 040f 	and.w	r4, r4, #15
 8007aa4:	2603      	movs	r6, #3
 8007aa6:	4da2      	ldr	r5, [pc, #648]	@ (8007d30 <_dtoa_r+0x5c0>)
 8007aa8:	b954      	cbnz	r4, 8007ac0 <_dtoa_r+0x350>
 8007aaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ab2:	f7f8 fecb 	bl	800084c <__aeabi_ddiv>
 8007ab6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aba:	e028      	b.n	8007b0e <_dtoa_r+0x39e>
 8007abc:	2602      	movs	r6, #2
 8007abe:	e7f2      	b.n	8007aa6 <_dtoa_r+0x336>
 8007ac0:	07e1      	lsls	r1, r4, #31
 8007ac2:	d508      	bpl.n	8007ad6 <_dtoa_r+0x366>
 8007ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ac8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007acc:	f7f8 fd94 	bl	80005f8 <__aeabi_dmul>
 8007ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ad4:	3601      	adds	r6, #1
 8007ad6:	1064      	asrs	r4, r4, #1
 8007ad8:	3508      	adds	r5, #8
 8007ada:	e7e5      	b.n	8007aa8 <_dtoa_r+0x338>
 8007adc:	f000 80d2 	beq.w	8007c84 <_dtoa_r+0x514>
 8007ae0:	427c      	negs	r4, r7
 8007ae2:	4b92      	ldr	r3, [pc, #584]	@ (8007d2c <_dtoa_r+0x5bc>)
 8007ae4:	4d92      	ldr	r5, [pc, #584]	@ (8007d30 <_dtoa_r+0x5c0>)
 8007ae6:	f004 020f 	and.w	r2, r4, #15
 8007aea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007af6:	f7f8 fd7f 	bl	80005f8 <__aeabi_dmul>
 8007afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007afe:	1124      	asrs	r4, r4, #4
 8007b00:	2300      	movs	r3, #0
 8007b02:	2602      	movs	r6, #2
 8007b04:	2c00      	cmp	r4, #0
 8007b06:	f040 80b2 	bne.w	8007c6e <_dtoa_r+0x4fe>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1d3      	bne.n	8007ab6 <_dtoa_r+0x346>
 8007b0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b10:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 80b7 	beq.w	8007c88 <_dtoa_r+0x518>
 8007b1a:	4b86      	ldr	r3, [pc, #536]	@ (8007d34 <_dtoa_r+0x5c4>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	4620      	mov	r0, r4
 8007b20:	4629      	mov	r1, r5
 8007b22:	f7f8 ffdb 	bl	8000adc <__aeabi_dcmplt>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	f000 80ae 	beq.w	8007c88 <_dtoa_r+0x518>
 8007b2c:	9b07      	ldr	r3, [sp, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 80aa 	beq.w	8007c88 <_dtoa_r+0x518>
 8007b34:	9b00      	ldr	r3, [sp, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dd37      	ble.n	8007baa <_dtoa_r+0x43a>
 8007b3a:	1e7b      	subs	r3, r7, #1
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	4620      	mov	r0, r4
 8007b40:	4b7d      	ldr	r3, [pc, #500]	@ (8007d38 <_dtoa_r+0x5c8>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	4629      	mov	r1, r5
 8007b46:	f7f8 fd57 	bl	80005f8 <__aeabi_dmul>
 8007b4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b4e:	9c00      	ldr	r4, [sp, #0]
 8007b50:	3601      	adds	r6, #1
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7f8 fce6 	bl	8000524 <__aeabi_i2d>
 8007b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b5c:	f7f8 fd4c 	bl	80005f8 <__aeabi_dmul>
 8007b60:	4b76      	ldr	r3, [pc, #472]	@ (8007d3c <_dtoa_r+0x5cc>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	f7f8 fb92 	bl	800028c <__adddf3>
 8007b68:	4605      	mov	r5, r0
 8007b6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b6e:	2c00      	cmp	r4, #0
 8007b70:	f040 808d 	bne.w	8007c8e <_dtoa_r+0x51e>
 8007b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b78:	4b71      	ldr	r3, [pc, #452]	@ (8007d40 <_dtoa_r+0x5d0>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f7f8 fb84 	bl	8000288 <__aeabi_dsub>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b88:	462a      	mov	r2, r5
 8007b8a:	4633      	mov	r3, r6
 8007b8c:	f7f8 ffc4 	bl	8000b18 <__aeabi_dcmpgt>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	f040 828b 	bne.w	80080ac <_dtoa_r+0x93c>
 8007b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b9a:	462a      	mov	r2, r5
 8007b9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ba0:	f7f8 ff9c 	bl	8000adc <__aeabi_dcmplt>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	f040 8128 	bne.w	8007dfa <_dtoa_r+0x68a>
 8007baa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007bae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007bb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f2c0 815a 	blt.w	8007e6e <_dtoa_r+0x6fe>
 8007bba:	2f0e      	cmp	r7, #14
 8007bbc:	f300 8157 	bgt.w	8007e6e <_dtoa_r+0x6fe>
 8007bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8007d2c <_dtoa_r+0x5bc>)
 8007bc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bc6:	ed93 7b00 	vldr	d7, [r3]
 8007bca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	ed8d 7b00 	vstr	d7, [sp]
 8007bd2:	da03      	bge.n	8007bdc <_dtoa_r+0x46c>
 8007bd4:	9b07      	ldr	r3, [sp, #28]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f340 8101 	ble.w	8007dde <_dtoa_r+0x66e>
 8007bdc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007be0:	4656      	mov	r6, sl
 8007be2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007be6:	4620      	mov	r0, r4
 8007be8:	4629      	mov	r1, r5
 8007bea:	f7f8 fe2f 	bl	800084c <__aeabi_ddiv>
 8007bee:	f7f8 ff9d 	bl	8000b2c <__aeabi_d2iz>
 8007bf2:	4680      	mov	r8, r0
 8007bf4:	f7f8 fc96 	bl	8000524 <__aeabi_i2d>
 8007bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bfc:	f7f8 fcfc 	bl	80005f8 <__aeabi_dmul>
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	4620      	mov	r0, r4
 8007c06:	4629      	mov	r1, r5
 8007c08:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c0c:	f7f8 fb3c 	bl	8000288 <__aeabi_dsub>
 8007c10:	f806 4b01 	strb.w	r4, [r6], #1
 8007c14:	9d07      	ldr	r5, [sp, #28]
 8007c16:	eba6 040a 	sub.w	r4, r6, sl
 8007c1a:	42a5      	cmp	r5, r4
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	f040 8117 	bne.w	8007e52 <_dtoa_r+0x6e2>
 8007c24:	f7f8 fb32 	bl	800028c <__adddf3>
 8007c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	460d      	mov	r5, r1
 8007c30:	f7f8 ff72 	bl	8000b18 <__aeabi_dcmpgt>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	f040 80f9 	bne.w	8007e2c <_dtoa_r+0x6bc>
 8007c3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	f7f8 ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c46:	b118      	cbz	r0, 8007c50 <_dtoa_r+0x4e0>
 8007c48:	f018 0f01 	tst.w	r8, #1
 8007c4c:	f040 80ee 	bne.w	8007e2c <_dtoa_r+0x6bc>
 8007c50:	4649      	mov	r1, r9
 8007c52:	4658      	mov	r0, fp
 8007c54:	f000 fb98 	bl	8008388 <_Bfree>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	7033      	strb	r3, [r6, #0]
 8007c5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c5e:	3701      	adds	r7, #1
 8007c60:	601f      	str	r7, [r3, #0]
 8007c62:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 831d 	beq.w	80082a4 <_dtoa_r+0xb34>
 8007c6a:	601e      	str	r6, [r3, #0]
 8007c6c:	e31a      	b.n	80082a4 <_dtoa_r+0xb34>
 8007c6e:	07e2      	lsls	r2, r4, #31
 8007c70:	d505      	bpl.n	8007c7e <_dtoa_r+0x50e>
 8007c72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c76:	f7f8 fcbf 	bl	80005f8 <__aeabi_dmul>
 8007c7a:	3601      	adds	r6, #1
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	1064      	asrs	r4, r4, #1
 8007c80:	3508      	adds	r5, #8
 8007c82:	e73f      	b.n	8007b04 <_dtoa_r+0x394>
 8007c84:	2602      	movs	r6, #2
 8007c86:	e742      	b.n	8007b0e <_dtoa_r+0x39e>
 8007c88:	9c07      	ldr	r4, [sp, #28]
 8007c8a:	9704      	str	r7, [sp, #16]
 8007c8c:	e761      	b.n	8007b52 <_dtoa_r+0x3e2>
 8007c8e:	4b27      	ldr	r3, [pc, #156]	@ (8007d2c <_dtoa_r+0x5bc>)
 8007c90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c9a:	4454      	add	r4, sl
 8007c9c:	2900      	cmp	r1, #0
 8007c9e:	d053      	beq.n	8007d48 <_dtoa_r+0x5d8>
 8007ca0:	4928      	ldr	r1, [pc, #160]	@ (8007d44 <_dtoa_r+0x5d4>)
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	f7f8 fdd2 	bl	800084c <__aeabi_ddiv>
 8007ca8:	4633      	mov	r3, r6
 8007caa:	462a      	mov	r2, r5
 8007cac:	f7f8 faec 	bl	8000288 <__aeabi_dsub>
 8007cb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cb4:	4656      	mov	r6, sl
 8007cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cba:	f7f8 ff37 	bl	8000b2c <__aeabi_d2iz>
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	f7f8 fc30 	bl	8000524 <__aeabi_i2d>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ccc:	f7f8 fadc 	bl	8000288 <__aeabi_dsub>
 8007cd0:	3530      	adds	r5, #48	@ 0x30
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cda:	f806 5b01 	strb.w	r5, [r6], #1
 8007cde:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ce2:	f7f8 fefb 	bl	8000adc <__aeabi_dcmplt>
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d171      	bne.n	8007dce <_dtoa_r+0x65e>
 8007cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cee:	4911      	ldr	r1, [pc, #68]	@ (8007d34 <_dtoa_r+0x5c4>)
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	f7f8 fac9 	bl	8000288 <__aeabi_dsub>
 8007cf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cfa:	f7f8 feef 	bl	8000adc <__aeabi_dcmplt>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	f040 8095 	bne.w	8007e2e <_dtoa_r+0x6be>
 8007d04:	42a6      	cmp	r6, r4
 8007d06:	f43f af50 	beq.w	8007baa <_dtoa_r+0x43a>
 8007d0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d38 <_dtoa_r+0x5c8>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	f7f8 fc71 	bl	80005f8 <__aeabi_dmul>
 8007d16:	4b08      	ldr	r3, [pc, #32]	@ (8007d38 <_dtoa_r+0x5c8>)
 8007d18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d22:	f7f8 fc69 	bl	80005f8 <__aeabi_dmul>
 8007d26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d2a:	e7c4      	b.n	8007cb6 <_dtoa_r+0x546>
 8007d2c:	0800a5c0 	.word	0x0800a5c0
 8007d30:	0800a598 	.word	0x0800a598
 8007d34:	3ff00000 	.word	0x3ff00000
 8007d38:	40240000 	.word	0x40240000
 8007d3c:	401c0000 	.word	0x401c0000
 8007d40:	40140000 	.word	0x40140000
 8007d44:	3fe00000 	.word	0x3fe00000
 8007d48:	4631      	mov	r1, r6
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f7f8 fc54 	bl	80005f8 <__aeabi_dmul>
 8007d50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d54:	9415      	str	r4, [sp, #84]	@ 0x54
 8007d56:	4656      	mov	r6, sl
 8007d58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d5c:	f7f8 fee6 	bl	8000b2c <__aeabi_d2iz>
 8007d60:	4605      	mov	r5, r0
 8007d62:	f7f8 fbdf 	bl	8000524 <__aeabi_i2d>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d6e:	f7f8 fa8b 	bl	8000288 <__aeabi_dsub>
 8007d72:	3530      	adds	r5, #48	@ 0x30
 8007d74:	f806 5b01 	strb.w	r5, [r6], #1
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	42a6      	cmp	r6, r4
 8007d7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d82:	f04f 0200 	mov.w	r2, #0
 8007d86:	d124      	bne.n	8007dd2 <_dtoa_r+0x662>
 8007d88:	4bac      	ldr	r3, [pc, #688]	@ (800803c <_dtoa_r+0x8cc>)
 8007d8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d8e:	f7f8 fa7d 	bl	800028c <__adddf3>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d9a:	f7f8 febd 	bl	8000b18 <__aeabi_dcmpgt>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d145      	bne.n	8007e2e <_dtoa_r+0x6be>
 8007da2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007da6:	49a5      	ldr	r1, [pc, #660]	@ (800803c <_dtoa_r+0x8cc>)
 8007da8:	2000      	movs	r0, #0
 8007daa:	f7f8 fa6d 	bl	8000288 <__aeabi_dsub>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007db6:	f7f8 fe91 	bl	8000adc <__aeabi_dcmplt>
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	f43f aef5 	beq.w	8007baa <_dtoa_r+0x43a>
 8007dc0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007dc2:	1e73      	subs	r3, r6, #1
 8007dc4:	9315      	str	r3, [sp, #84]	@ 0x54
 8007dc6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007dca:	2b30      	cmp	r3, #48	@ 0x30
 8007dcc:	d0f8      	beq.n	8007dc0 <_dtoa_r+0x650>
 8007dce:	9f04      	ldr	r7, [sp, #16]
 8007dd0:	e73e      	b.n	8007c50 <_dtoa_r+0x4e0>
 8007dd2:	4b9b      	ldr	r3, [pc, #620]	@ (8008040 <_dtoa_r+0x8d0>)
 8007dd4:	f7f8 fc10 	bl	80005f8 <__aeabi_dmul>
 8007dd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ddc:	e7bc      	b.n	8007d58 <_dtoa_r+0x5e8>
 8007dde:	d10c      	bne.n	8007dfa <_dtoa_r+0x68a>
 8007de0:	4b98      	ldr	r3, [pc, #608]	@ (8008044 <_dtoa_r+0x8d4>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007de8:	f7f8 fc06 	bl	80005f8 <__aeabi_dmul>
 8007dec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007df0:	f7f8 fe88 	bl	8000b04 <__aeabi_dcmpge>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	f000 8157 	beq.w	80080a8 <_dtoa_r+0x938>
 8007dfa:	2400      	movs	r4, #0
 8007dfc:	4625      	mov	r5, r4
 8007dfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e00:	43db      	mvns	r3, r3
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	4656      	mov	r6, sl
 8007e06:	2700      	movs	r7, #0
 8007e08:	4621      	mov	r1, r4
 8007e0a:	4658      	mov	r0, fp
 8007e0c:	f000 fabc 	bl	8008388 <_Bfree>
 8007e10:	2d00      	cmp	r5, #0
 8007e12:	d0dc      	beq.n	8007dce <_dtoa_r+0x65e>
 8007e14:	b12f      	cbz	r7, 8007e22 <_dtoa_r+0x6b2>
 8007e16:	42af      	cmp	r7, r5
 8007e18:	d003      	beq.n	8007e22 <_dtoa_r+0x6b2>
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	4658      	mov	r0, fp
 8007e1e:	f000 fab3 	bl	8008388 <_Bfree>
 8007e22:	4629      	mov	r1, r5
 8007e24:	4658      	mov	r0, fp
 8007e26:	f000 faaf 	bl	8008388 <_Bfree>
 8007e2a:	e7d0      	b.n	8007dce <_dtoa_r+0x65e>
 8007e2c:	9704      	str	r7, [sp, #16]
 8007e2e:	4633      	mov	r3, r6
 8007e30:	461e      	mov	r6, r3
 8007e32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e36:	2a39      	cmp	r2, #57	@ 0x39
 8007e38:	d107      	bne.n	8007e4a <_dtoa_r+0x6da>
 8007e3a:	459a      	cmp	sl, r3
 8007e3c:	d1f8      	bne.n	8007e30 <_dtoa_r+0x6c0>
 8007e3e:	9a04      	ldr	r2, [sp, #16]
 8007e40:	3201      	adds	r2, #1
 8007e42:	9204      	str	r2, [sp, #16]
 8007e44:	2230      	movs	r2, #48	@ 0x30
 8007e46:	f88a 2000 	strb.w	r2, [sl]
 8007e4a:	781a      	ldrb	r2, [r3, #0]
 8007e4c:	3201      	adds	r2, #1
 8007e4e:	701a      	strb	r2, [r3, #0]
 8007e50:	e7bd      	b.n	8007dce <_dtoa_r+0x65e>
 8007e52:	4b7b      	ldr	r3, [pc, #492]	@ (8008040 <_dtoa_r+0x8d0>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	f7f8 fbcf 	bl	80005f8 <__aeabi_dmul>
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4604      	mov	r4, r0
 8007e60:	460d      	mov	r5, r1
 8007e62:	f7f8 fe31 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	f43f aebb 	beq.w	8007be2 <_dtoa_r+0x472>
 8007e6c:	e6f0      	b.n	8007c50 <_dtoa_r+0x4e0>
 8007e6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e70:	2a00      	cmp	r2, #0
 8007e72:	f000 80db 	beq.w	800802c <_dtoa_r+0x8bc>
 8007e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e78:	2a01      	cmp	r2, #1
 8007e7a:	f300 80bf 	bgt.w	8007ffc <_dtoa_r+0x88c>
 8007e7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e80:	2a00      	cmp	r2, #0
 8007e82:	f000 80b7 	beq.w	8007ff4 <_dtoa_r+0x884>
 8007e86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e8c:	4646      	mov	r6, r8
 8007e8e:	9a08      	ldr	r2, [sp, #32]
 8007e90:	2101      	movs	r1, #1
 8007e92:	441a      	add	r2, r3
 8007e94:	4658      	mov	r0, fp
 8007e96:	4498      	add	r8, r3
 8007e98:	9208      	str	r2, [sp, #32]
 8007e9a:	f000 fb29 	bl	80084f0 <__i2b>
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	b15e      	cbz	r6, 8007eba <_dtoa_r+0x74a>
 8007ea2:	9b08      	ldr	r3, [sp, #32]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	dd08      	ble.n	8007eba <_dtoa_r+0x74a>
 8007ea8:	42b3      	cmp	r3, r6
 8007eaa:	9a08      	ldr	r2, [sp, #32]
 8007eac:	bfa8      	it	ge
 8007eae:	4633      	movge	r3, r6
 8007eb0:	eba8 0803 	sub.w	r8, r8, r3
 8007eb4:	1af6      	subs	r6, r6, r3
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	9308      	str	r3, [sp, #32]
 8007eba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ebc:	b1f3      	cbz	r3, 8007efc <_dtoa_r+0x78c>
 8007ebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80b7 	beq.w	8008034 <_dtoa_r+0x8c4>
 8007ec6:	b18c      	cbz	r4, 8007eec <_dtoa_r+0x77c>
 8007ec8:	4629      	mov	r1, r5
 8007eca:	4622      	mov	r2, r4
 8007ecc:	4658      	mov	r0, fp
 8007ece:	f000 fbcf 	bl	8008670 <__pow5mult>
 8007ed2:	464a      	mov	r2, r9
 8007ed4:	4601      	mov	r1, r0
 8007ed6:	4605      	mov	r5, r0
 8007ed8:	4658      	mov	r0, fp
 8007eda:	f000 fb1f 	bl	800851c <__multiply>
 8007ede:	4649      	mov	r1, r9
 8007ee0:	9004      	str	r0, [sp, #16]
 8007ee2:	4658      	mov	r0, fp
 8007ee4:	f000 fa50 	bl	8008388 <_Bfree>
 8007ee8:	9b04      	ldr	r3, [sp, #16]
 8007eea:	4699      	mov	r9, r3
 8007eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eee:	1b1a      	subs	r2, r3, r4
 8007ef0:	d004      	beq.n	8007efc <_dtoa_r+0x78c>
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	4658      	mov	r0, fp
 8007ef6:	f000 fbbb 	bl	8008670 <__pow5mult>
 8007efa:	4681      	mov	r9, r0
 8007efc:	2101      	movs	r1, #1
 8007efe:	4658      	mov	r0, fp
 8007f00:	f000 faf6 	bl	80084f0 <__i2b>
 8007f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f06:	4604      	mov	r4, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 81cf 	beq.w	80082ac <_dtoa_r+0xb3c>
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4601      	mov	r1, r0
 8007f12:	4658      	mov	r0, fp
 8007f14:	f000 fbac 	bl	8008670 <__pow5mult>
 8007f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	f300 8095 	bgt.w	800804c <_dtoa_r+0x8dc>
 8007f22:	9b02      	ldr	r3, [sp, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f040 8087 	bne.w	8008038 <_dtoa_r+0x8c8>
 8007f2a:	9b03      	ldr	r3, [sp, #12]
 8007f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f040 8089 	bne.w	8008048 <_dtoa_r+0x8d8>
 8007f36:	9b03      	ldr	r3, [sp, #12]
 8007f38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f3c:	0d1b      	lsrs	r3, r3, #20
 8007f3e:	051b      	lsls	r3, r3, #20
 8007f40:	b12b      	cbz	r3, 8007f4e <_dtoa_r+0x7de>
 8007f42:	9b08      	ldr	r3, [sp, #32]
 8007f44:	3301      	adds	r3, #1
 8007f46:	9308      	str	r3, [sp, #32]
 8007f48:	f108 0801 	add.w	r8, r8, #1
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 81b0 	beq.w	80082b8 <_dtoa_r+0xb48>
 8007f58:	6923      	ldr	r3, [r4, #16]
 8007f5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f5e:	6918      	ldr	r0, [r3, #16]
 8007f60:	f000 fa7a 	bl	8008458 <__hi0bits>
 8007f64:	f1c0 0020 	rsb	r0, r0, #32
 8007f68:	9b08      	ldr	r3, [sp, #32]
 8007f6a:	4418      	add	r0, r3
 8007f6c:	f010 001f 	ands.w	r0, r0, #31
 8007f70:	d077      	beq.n	8008062 <_dtoa_r+0x8f2>
 8007f72:	f1c0 0320 	rsb	r3, r0, #32
 8007f76:	2b04      	cmp	r3, #4
 8007f78:	dd6b      	ble.n	8008052 <_dtoa_r+0x8e2>
 8007f7a:	9b08      	ldr	r3, [sp, #32]
 8007f7c:	f1c0 001c 	rsb	r0, r0, #28
 8007f80:	4403      	add	r3, r0
 8007f82:	4480      	add	r8, r0
 8007f84:	4406      	add	r6, r0
 8007f86:	9308      	str	r3, [sp, #32]
 8007f88:	f1b8 0f00 	cmp.w	r8, #0
 8007f8c:	dd05      	ble.n	8007f9a <_dtoa_r+0x82a>
 8007f8e:	4649      	mov	r1, r9
 8007f90:	4642      	mov	r2, r8
 8007f92:	4658      	mov	r0, fp
 8007f94:	f000 fbc6 	bl	8008724 <__lshift>
 8007f98:	4681      	mov	r9, r0
 8007f9a:	9b08      	ldr	r3, [sp, #32]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dd05      	ble.n	8007fac <_dtoa_r+0x83c>
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	4658      	mov	r0, fp
 8007fa6:	f000 fbbd 	bl	8008724 <__lshift>
 8007faa:	4604      	mov	r4, r0
 8007fac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d059      	beq.n	8008066 <_dtoa_r+0x8f6>
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	4648      	mov	r0, r9
 8007fb6:	f000 fc21 	bl	80087fc <__mcmp>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	da53      	bge.n	8008066 <_dtoa_r+0x8f6>
 8007fbe:	1e7b      	subs	r3, r7, #1
 8007fc0:	9304      	str	r3, [sp, #16]
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	220a      	movs	r2, #10
 8007fc8:	4658      	mov	r0, fp
 8007fca:	f000 f9ff 	bl	80083cc <__multadd>
 8007fce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fd0:	4681      	mov	r9, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 8172 	beq.w	80082bc <_dtoa_r+0xb4c>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	4629      	mov	r1, r5
 8007fdc:	220a      	movs	r2, #10
 8007fde:	4658      	mov	r0, fp
 8007fe0:	f000 f9f4 	bl	80083cc <__multadd>
 8007fe4:	9b00      	ldr	r3, [sp, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	4605      	mov	r5, r0
 8007fea:	dc67      	bgt.n	80080bc <_dtoa_r+0x94c>
 8007fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	dc41      	bgt.n	8008076 <_dtoa_r+0x906>
 8007ff2:	e063      	b.n	80080bc <_dtoa_r+0x94c>
 8007ff4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ff6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ffa:	e746      	b.n	8007e8a <_dtoa_r+0x71a>
 8007ffc:	9b07      	ldr	r3, [sp, #28]
 8007ffe:	1e5c      	subs	r4, r3, #1
 8008000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008002:	42a3      	cmp	r3, r4
 8008004:	bfbf      	itttt	lt
 8008006:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008008:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800800a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800800c:	1ae3      	sublt	r3, r4, r3
 800800e:	bfb4      	ite	lt
 8008010:	18d2      	addlt	r2, r2, r3
 8008012:	1b1c      	subge	r4, r3, r4
 8008014:	9b07      	ldr	r3, [sp, #28]
 8008016:	bfbc      	itt	lt
 8008018:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800801a:	2400      	movlt	r4, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	bfb5      	itete	lt
 8008020:	eba8 0603 	sublt.w	r6, r8, r3
 8008024:	9b07      	ldrge	r3, [sp, #28]
 8008026:	2300      	movlt	r3, #0
 8008028:	4646      	movge	r6, r8
 800802a:	e730      	b.n	8007e8e <_dtoa_r+0x71e>
 800802c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800802e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008030:	4646      	mov	r6, r8
 8008032:	e735      	b.n	8007ea0 <_dtoa_r+0x730>
 8008034:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008036:	e75c      	b.n	8007ef2 <_dtoa_r+0x782>
 8008038:	2300      	movs	r3, #0
 800803a:	e788      	b.n	8007f4e <_dtoa_r+0x7de>
 800803c:	3fe00000 	.word	0x3fe00000
 8008040:	40240000 	.word	0x40240000
 8008044:	40140000 	.word	0x40140000
 8008048:	9b02      	ldr	r3, [sp, #8]
 800804a:	e780      	b.n	8007f4e <_dtoa_r+0x7de>
 800804c:	2300      	movs	r3, #0
 800804e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008050:	e782      	b.n	8007f58 <_dtoa_r+0x7e8>
 8008052:	d099      	beq.n	8007f88 <_dtoa_r+0x818>
 8008054:	9a08      	ldr	r2, [sp, #32]
 8008056:	331c      	adds	r3, #28
 8008058:	441a      	add	r2, r3
 800805a:	4498      	add	r8, r3
 800805c:	441e      	add	r6, r3
 800805e:	9208      	str	r2, [sp, #32]
 8008060:	e792      	b.n	8007f88 <_dtoa_r+0x818>
 8008062:	4603      	mov	r3, r0
 8008064:	e7f6      	b.n	8008054 <_dtoa_r+0x8e4>
 8008066:	9b07      	ldr	r3, [sp, #28]
 8008068:	9704      	str	r7, [sp, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	dc20      	bgt.n	80080b0 <_dtoa_r+0x940>
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008072:	2b02      	cmp	r3, #2
 8008074:	dd1e      	ble.n	80080b4 <_dtoa_r+0x944>
 8008076:	9b00      	ldr	r3, [sp, #0]
 8008078:	2b00      	cmp	r3, #0
 800807a:	f47f aec0 	bne.w	8007dfe <_dtoa_r+0x68e>
 800807e:	4621      	mov	r1, r4
 8008080:	2205      	movs	r2, #5
 8008082:	4658      	mov	r0, fp
 8008084:	f000 f9a2 	bl	80083cc <__multadd>
 8008088:	4601      	mov	r1, r0
 800808a:	4604      	mov	r4, r0
 800808c:	4648      	mov	r0, r9
 800808e:	f000 fbb5 	bl	80087fc <__mcmp>
 8008092:	2800      	cmp	r0, #0
 8008094:	f77f aeb3 	ble.w	8007dfe <_dtoa_r+0x68e>
 8008098:	4656      	mov	r6, sl
 800809a:	2331      	movs	r3, #49	@ 0x31
 800809c:	f806 3b01 	strb.w	r3, [r6], #1
 80080a0:	9b04      	ldr	r3, [sp, #16]
 80080a2:	3301      	adds	r3, #1
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	e6ae      	b.n	8007e06 <_dtoa_r+0x696>
 80080a8:	9c07      	ldr	r4, [sp, #28]
 80080aa:	9704      	str	r7, [sp, #16]
 80080ac:	4625      	mov	r5, r4
 80080ae:	e7f3      	b.n	8008098 <_dtoa_r+0x928>
 80080b0:	9b07      	ldr	r3, [sp, #28]
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 8104 	beq.w	80082c4 <_dtoa_r+0xb54>
 80080bc:	2e00      	cmp	r6, #0
 80080be:	dd05      	ble.n	80080cc <_dtoa_r+0x95c>
 80080c0:	4629      	mov	r1, r5
 80080c2:	4632      	mov	r2, r6
 80080c4:	4658      	mov	r0, fp
 80080c6:	f000 fb2d 	bl	8008724 <__lshift>
 80080ca:	4605      	mov	r5, r0
 80080cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d05a      	beq.n	8008188 <_dtoa_r+0xa18>
 80080d2:	6869      	ldr	r1, [r5, #4]
 80080d4:	4658      	mov	r0, fp
 80080d6:	f000 f917 	bl	8008308 <_Balloc>
 80080da:	4606      	mov	r6, r0
 80080dc:	b928      	cbnz	r0, 80080ea <_dtoa_r+0x97a>
 80080de:	4b84      	ldr	r3, [pc, #528]	@ (80082f0 <_dtoa_r+0xb80>)
 80080e0:	4602      	mov	r2, r0
 80080e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080e6:	f7ff bb5a 	b.w	800779e <_dtoa_r+0x2e>
 80080ea:	692a      	ldr	r2, [r5, #16]
 80080ec:	3202      	adds	r2, #2
 80080ee:	0092      	lsls	r2, r2, #2
 80080f0:	f105 010c 	add.w	r1, r5, #12
 80080f4:	300c      	adds	r0, #12
 80080f6:	f000 fca7 	bl	8008a48 <memcpy>
 80080fa:	2201      	movs	r2, #1
 80080fc:	4631      	mov	r1, r6
 80080fe:	4658      	mov	r0, fp
 8008100:	f000 fb10 	bl	8008724 <__lshift>
 8008104:	f10a 0301 	add.w	r3, sl, #1
 8008108:	9307      	str	r3, [sp, #28]
 800810a:	9b00      	ldr	r3, [sp, #0]
 800810c:	4453      	add	r3, sl
 800810e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008110:	9b02      	ldr	r3, [sp, #8]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	462f      	mov	r7, r5
 8008118:	930a      	str	r3, [sp, #40]	@ 0x28
 800811a:	4605      	mov	r5, r0
 800811c:	9b07      	ldr	r3, [sp, #28]
 800811e:	4621      	mov	r1, r4
 8008120:	3b01      	subs	r3, #1
 8008122:	4648      	mov	r0, r9
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	f7ff fa9b 	bl	8007660 <quorem>
 800812a:	4639      	mov	r1, r7
 800812c:	9002      	str	r0, [sp, #8]
 800812e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008132:	4648      	mov	r0, r9
 8008134:	f000 fb62 	bl	80087fc <__mcmp>
 8008138:	462a      	mov	r2, r5
 800813a:	9008      	str	r0, [sp, #32]
 800813c:	4621      	mov	r1, r4
 800813e:	4658      	mov	r0, fp
 8008140:	f000 fb78 	bl	8008834 <__mdiff>
 8008144:	68c2      	ldr	r2, [r0, #12]
 8008146:	4606      	mov	r6, r0
 8008148:	bb02      	cbnz	r2, 800818c <_dtoa_r+0xa1c>
 800814a:	4601      	mov	r1, r0
 800814c:	4648      	mov	r0, r9
 800814e:	f000 fb55 	bl	80087fc <__mcmp>
 8008152:	4602      	mov	r2, r0
 8008154:	4631      	mov	r1, r6
 8008156:	4658      	mov	r0, fp
 8008158:	920e      	str	r2, [sp, #56]	@ 0x38
 800815a:	f000 f915 	bl	8008388 <_Bfree>
 800815e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008160:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008162:	9e07      	ldr	r6, [sp, #28]
 8008164:	ea43 0102 	orr.w	r1, r3, r2
 8008168:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800816a:	4319      	orrs	r1, r3
 800816c:	d110      	bne.n	8008190 <_dtoa_r+0xa20>
 800816e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008172:	d029      	beq.n	80081c8 <_dtoa_r+0xa58>
 8008174:	9b08      	ldr	r3, [sp, #32]
 8008176:	2b00      	cmp	r3, #0
 8008178:	dd02      	ble.n	8008180 <_dtoa_r+0xa10>
 800817a:	9b02      	ldr	r3, [sp, #8]
 800817c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008180:	9b00      	ldr	r3, [sp, #0]
 8008182:	f883 8000 	strb.w	r8, [r3]
 8008186:	e63f      	b.n	8007e08 <_dtoa_r+0x698>
 8008188:	4628      	mov	r0, r5
 800818a:	e7bb      	b.n	8008104 <_dtoa_r+0x994>
 800818c:	2201      	movs	r2, #1
 800818e:	e7e1      	b.n	8008154 <_dtoa_r+0x9e4>
 8008190:	9b08      	ldr	r3, [sp, #32]
 8008192:	2b00      	cmp	r3, #0
 8008194:	db04      	blt.n	80081a0 <_dtoa_r+0xa30>
 8008196:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008198:	430b      	orrs	r3, r1
 800819a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800819c:	430b      	orrs	r3, r1
 800819e:	d120      	bne.n	80081e2 <_dtoa_r+0xa72>
 80081a0:	2a00      	cmp	r2, #0
 80081a2:	dded      	ble.n	8008180 <_dtoa_r+0xa10>
 80081a4:	4649      	mov	r1, r9
 80081a6:	2201      	movs	r2, #1
 80081a8:	4658      	mov	r0, fp
 80081aa:	f000 fabb 	bl	8008724 <__lshift>
 80081ae:	4621      	mov	r1, r4
 80081b0:	4681      	mov	r9, r0
 80081b2:	f000 fb23 	bl	80087fc <__mcmp>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	dc03      	bgt.n	80081c2 <_dtoa_r+0xa52>
 80081ba:	d1e1      	bne.n	8008180 <_dtoa_r+0xa10>
 80081bc:	f018 0f01 	tst.w	r8, #1
 80081c0:	d0de      	beq.n	8008180 <_dtoa_r+0xa10>
 80081c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081c6:	d1d8      	bne.n	800817a <_dtoa_r+0xa0a>
 80081c8:	9a00      	ldr	r2, [sp, #0]
 80081ca:	2339      	movs	r3, #57	@ 0x39
 80081cc:	7013      	strb	r3, [r2, #0]
 80081ce:	4633      	mov	r3, r6
 80081d0:	461e      	mov	r6, r3
 80081d2:	3b01      	subs	r3, #1
 80081d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081d8:	2a39      	cmp	r2, #57	@ 0x39
 80081da:	d052      	beq.n	8008282 <_dtoa_r+0xb12>
 80081dc:	3201      	adds	r2, #1
 80081de:	701a      	strb	r2, [r3, #0]
 80081e0:	e612      	b.n	8007e08 <_dtoa_r+0x698>
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	dd07      	ble.n	80081f6 <_dtoa_r+0xa86>
 80081e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081ea:	d0ed      	beq.n	80081c8 <_dtoa_r+0xa58>
 80081ec:	9a00      	ldr	r2, [sp, #0]
 80081ee:	f108 0301 	add.w	r3, r8, #1
 80081f2:	7013      	strb	r3, [r2, #0]
 80081f4:	e608      	b.n	8007e08 <_dtoa_r+0x698>
 80081f6:	9b07      	ldr	r3, [sp, #28]
 80081f8:	9a07      	ldr	r2, [sp, #28]
 80081fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80081fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008200:	4293      	cmp	r3, r2
 8008202:	d028      	beq.n	8008256 <_dtoa_r+0xae6>
 8008204:	4649      	mov	r1, r9
 8008206:	2300      	movs	r3, #0
 8008208:	220a      	movs	r2, #10
 800820a:	4658      	mov	r0, fp
 800820c:	f000 f8de 	bl	80083cc <__multadd>
 8008210:	42af      	cmp	r7, r5
 8008212:	4681      	mov	r9, r0
 8008214:	f04f 0300 	mov.w	r3, #0
 8008218:	f04f 020a 	mov.w	r2, #10
 800821c:	4639      	mov	r1, r7
 800821e:	4658      	mov	r0, fp
 8008220:	d107      	bne.n	8008232 <_dtoa_r+0xac2>
 8008222:	f000 f8d3 	bl	80083cc <__multadd>
 8008226:	4607      	mov	r7, r0
 8008228:	4605      	mov	r5, r0
 800822a:	9b07      	ldr	r3, [sp, #28]
 800822c:	3301      	adds	r3, #1
 800822e:	9307      	str	r3, [sp, #28]
 8008230:	e774      	b.n	800811c <_dtoa_r+0x9ac>
 8008232:	f000 f8cb 	bl	80083cc <__multadd>
 8008236:	4629      	mov	r1, r5
 8008238:	4607      	mov	r7, r0
 800823a:	2300      	movs	r3, #0
 800823c:	220a      	movs	r2, #10
 800823e:	4658      	mov	r0, fp
 8008240:	f000 f8c4 	bl	80083cc <__multadd>
 8008244:	4605      	mov	r5, r0
 8008246:	e7f0      	b.n	800822a <_dtoa_r+0xaba>
 8008248:	9b00      	ldr	r3, [sp, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	bfcc      	ite	gt
 800824e:	461e      	movgt	r6, r3
 8008250:	2601      	movle	r6, #1
 8008252:	4456      	add	r6, sl
 8008254:	2700      	movs	r7, #0
 8008256:	4649      	mov	r1, r9
 8008258:	2201      	movs	r2, #1
 800825a:	4658      	mov	r0, fp
 800825c:	f000 fa62 	bl	8008724 <__lshift>
 8008260:	4621      	mov	r1, r4
 8008262:	4681      	mov	r9, r0
 8008264:	f000 faca 	bl	80087fc <__mcmp>
 8008268:	2800      	cmp	r0, #0
 800826a:	dcb0      	bgt.n	80081ce <_dtoa_r+0xa5e>
 800826c:	d102      	bne.n	8008274 <_dtoa_r+0xb04>
 800826e:	f018 0f01 	tst.w	r8, #1
 8008272:	d1ac      	bne.n	80081ce <_dtoa_r+0xa5e>
 8008274:	4633      	mov	r3, r6
 8008276:	461e      	mov	r6, r3
 8008278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800827c:	2a30      	cmp	r2, #48	@ 0x30
 800827e:	d0fa      	beq.n	8008276 <_dtoa_r+0xb06>
 8008280:	e5c2      	b.n	8007e08 <_dtoa_r+0x698>
 8008282:	459a      	cmp	sl, r3
 8008284:	d1a4      	bne.n	80081d0 <_dtoa_r+0xa60>
 8008286:	9b04      	ldr	r3, [sp, #16]
 8008288:	3301      	adds	r3, #1
 800828a:	9304      	str	r3, [sp, #16]
 800828c:	2331      	movs	r3, #49	@ 0x31
 800828e:	f88a 3000 	strb.w	r3, [sl]
 8008292:	e5b9      	b.n	8007e08 <_dtoa_r+0x698>
 8008294:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008296:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80082f4 <_dtoa_r+0xb84>
 800829a:	b11b      	cbz	r3, 80082a4 <_dtoa_r+0xb34>
 800829c:	f10a 0308 	add.w	r3, sl, #8
 80082a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	4650      	mov	r0, sl
 80082a6:	b019      	add	sp, #100	@ 0x64
 80082a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	f77f ae37 	ble.w	8007f22 <_dtoa_r+0x7b2>
 80082b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082b8:	2001      	movs	r0, #1
 80082ba:	e655      	b.n	8007f68 <_dtoa_r+0x7f8>
 80082bc:	9b00      	ldr	r3, [sp, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f77f aed6 	ble.w	8008070 <_dtoa_r+0x900>
 80082c4:	4656      	mov	r6, sl
 80082c6:	4621      	mov	r1, r4
 80082c8:	4648      	mov	r0, r9
 80082ca:	f7ff f9c9 	bl	8007660 <quorem>
 80082ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082d2:	f806 8b01 	strb.w	r8, [r6], #1
 80082d6:	9b00      	ldr	r3, [sp, #0]
 80082d8:	eba6 020a 	sub.w	r2, r6, sl
 80082dc:	4293      	cmp	r3, r2
 80082de:	ddb3      	ble.n	8008248 <_dtoa_r+0xad8>
 80082e0:	4649      	mov	r1, r9
 80082e2:	2300      	movs	r3, #0
 80082e4:	220a      	movs	r2, #10
 80082e6:	4658      	mov	r0, fp
 80082e8:	f000 f870 	bl	80083cc <__multadd>
 80082ec:	4681      	mov	r9, r0
 80082ee:	e7ea      	b.n	80082c6 <_dtoa_r+0xb56>
 80082f0:	0800a51e 	.word	0x0800a51e
 80082f4:	0800a4a0 	.word	0x0800a4a0

080082f8 <malloc>:
 80082f8:	4b02      	ldr	r3, [pc, #8]	@ (8008304 <malloc+0xc>)
 80082fa:	4601      	mov	r1, r0
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	f7fe bf27 	b.w	8007150 <_malloc_r>
 8008302:	bf00      	nop
 8008304:	20000030 	.word	0x20000030

08008308 <_Balloc>:
 8008308:	b570      	push	{r4, r5, r6, lr}
 800830a:	69c6      	ldr	r6, [r0, #28]
 800830c:	4604      	mov	r4, r0
 800830e:	460d      	mov	r5, r1
 8008310:	b976      	cbnz	r6, 8008330 <_Balloc+0x28>
 8008312:	2010      	movs	r0, #16
 8008314:	f7ff fff0 	bl	80082f8 <malloc>
 8008318:	4602      	mov	r2, r0
 800831a:	61e0      	str	r0, [r4, #28]
 800831c:	b920      	cbnz	r0, 8008328 <_Balloc+0x20>
 800831e:	4b18      	ldr	r3, [pc, #96]	@ (8008380 <_Balloc+0x78>)
 8008320:	4818      	ldr	r0, [pc, #96]	@ (8008384 <_Balloc+0x7c>)
 8008322:	216b      	movs	r1, #107	@ 0x6b
 8008324:	f000 fb9e 	bl	8008a64 <__assert_func>
 8008328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800832c:	6006      	str	r6, [r0, #0]
 800832e:	60c6      	str	r6, [r0, #12]
 8008330:	69e6      	ldr	r6, [r4, #28]
 8008332:	68f3      	ldr	r3, [r6, #12]
 8008334:	b183      	cbz	r3, 8008358 <_Balloc+0x50>
 8008336:	69e3      	ldr	r3, [r4, #28]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800833e:	b9b8      	cbnz	r0, 8008370 <_Balloc+0x68>
 8008340:	2101      	movs	r1, #1
 8008342:	fa01 f605 	lsl.w	r6, r1, r5
 8008346:	1d72      	adds	r2, r6, #5
 8008348:	0092      	lsls	r2, r2, #2
 800834a:	4620      	mov	r0, r4
 800834c:	f000 fba8 	bl	8008aa0 <_calloc_r>
 8008350:	b160      	cbz	r0, 800836c <_Balloc+0x64>
 8008352:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008356:	e00e      	b.n	8008376 <_Balloc+0x6e>
 8008358:	2221      	movs	r2, #33	@ 0x21
 800835a:	2104      	movs	r1, #4
 800835c:	4620      	mov	r0, r4
 800835e:	f000 fb9f 	bl	8008aa0 <_calloc_r>
 8008362:	69e3      	ldr	r3, [r4, #28]
 8008364:	60f0      	str	r0, [r6, #12]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1e4      	bne.n	8008336 <_Balloc+0x2e>
 800836c:	2000      	movs	r0, #0
 800836e:	bd70      	pop	{r4, r5, r6, pc}
 8008370:	6802      	ldr	r2, [r0, #0]
 8008372:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008376:	2300      	movs	r3, #0
 8008378:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800837c:	e7f7      	b.n	800836e <_Balloc+0x66>
 800837e:	bf00      	nop
 8008380:	0800a4af 	.word	0x0800a4af
 8008384:	0800a52f 	.word	0x0800a52f

08008388 <_Bfree>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	69c6      	ldr	r6, [r0, #28]
 800838c:	4605      	mov	r5, r0
 800838e:	460c      	mov	r4, r1
 8008390:	b976      	cbnz	r6, 80083b0 <_Bfree+0x28>
 8008392:	2010      	movs	r0, #16
 8008394:	f7ff ffb0 	bl	80082f8 <malloc>
 8008398:	4602      	mov	r2, r0
 800839a:	61e8      	str	r0, [r5, #28]
 800839c:	b920      	cbnz	r0, 80083a8 <_Bfree+0x20>
 800839e:	4b09      	ldr	r3, [pc, #36]	@ (80083c4 <_Bfree+0x3c>)
 80083a0:	4809      	ldr	r0, [pc, #36]	@ (80083c8 <_Bfree+0x40>)
 80083a2:	218f      	movs	r1, #143	@ 0x8f
 80083a4:	f000 fb5e 	bl	8008a64 <__assert_func>
 80083a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083ac:	6006      	str	r6, [r0, #0]
 80083ae:	60c6      	str	r6, [r0, #12]
 80083b0:	b13c      	cbz	r4, 80083c2 <_Bfree+0x3a>
 80083b2:	69eb      	ldr	r3, [r5, #28]
 80083b4:	6862      	ldr	r2, [r4, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083bc:	6021      	str	r1, [r4, #0]
 80083be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	0800a4af 	.word	0x0800a4af
 80083c8:	0800a52f 	.word	0x0800a52f

080083cc <__multadd>:
 80083cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d0:	690d      	ldr	r5, [r1, #16]
 80083d2:	4607      	mov	r7, r0
 80083d4:	460c      	mov	r4, r1
 80083d6:	461e      	mov	r6, r3
 80083d8:	f101 0c14 	add.w	ip, r1, #20
 80083dc:	2000      	movs	r0, #0
 80083de:	f8dc 3000 	ldr.w	r3, [ip]
 80083e2:	b299      	uxth	r1, r3
 80083e4:	fb02 6101 	mla	r1, r2, r1, r6
 80083e8:	0c1e      	lsrs	r6, r3, #16
 80083ea:	0c0b      	lsrs	r3, r1, #16
 80083ec:	fb02 3306 	mla	r3, r2, r6, r3
 80083f0:	b289      	uxth	r1, r1
 80083f2:	3001      	adds	r0, #1
 80083f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083f8:	4285      	cmp	r5, r0
 80083fa:	f84c 1b04 	str.w	r1, [ip], #4
 80083fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008402:	dcec      	bgt.n	80083de <__multadd+0x12>
 8008404:	b30e      	cbz	r6, 800844a <__multadd+0x7e>
 8008406:	68a3      	ldr	r3, [r4, #8]
 8008408:	42ab      	cmp	r3, r5
 800840a:	dc19      	bgt.n	8008440 <__multadd+0x74>
 800840c:	6861      	ldr	r1, [r4, #4]
 800840e:	4638      	mov	r0, r7
 8008410:	3101      	adds	r1, #1
 8008412:	f7ff ff79 	bl	8008308 <_Balloc>
 8008416:	4680      	mov	r8, r0
 8008418:	b928      	cbnz	r0, 8008426 <__multadd+0x5a>
 800841a:	4602      	mov	r2, r0
 800841c:	4b0c      	ldr	r3, [pc, #48]	@ (8008450 <__multadd+0x84>)
 800841e:	480d      	ldr	r0, [pc, #52]	@ (8008454 <__multadd+0x88>)
 8008420:	21ba      	movs	r1, #186	@ 0xba
 8008422:	f000 fb1f 	bl	8008a64 <__assert_func>
 8008426:	6922      	ldr	r2, [r4, #16]
 8008428:	3202      	adds	r2, #2
 800842a:	f104 010c 	add.w	r1, r4, #12
 800842e:	0092      	lsls	r2, r2, #2
 8008430:	300c      	adds	r0, #12
 8008432:	f000 fb09 	bl	8008a48 <memcpy>
 8008436:	4621      	mov	r1, r4
 8008438:	4638      	mov	r0, r7
 800843a:	f7ff ffa5 	bl	8008388 <_Bfree>
 800843e:	4644      	mov	r4, r8
 8008440:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008444:	3501      	adds	r5, #1
 8008446:	615e      	str	r6, [r3, #20]
 8008448:	6125      	str	r5, [r4, #16]
 800844a:	4620      	mov	r0, r4
 800844c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008450:	0800a51e 	.word	0x0800a51e
 8008454:	0800a52f 	.word	0x0800a52f

08008458 <__hi0bits>:
 8008458:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800845c:	4603      	mov	r3, r0
 800845e:	bf36      	itet	cc
 8008460:	0403      	lslcc	r3, r0, #16
 8008462:	2000      	movcs	r0, #0
 8008464:	2010      	movcc	r0, #16
 8008466:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800846a:	bf3c      	itt	cc
 800846c:	021b      	lslcc	r3, r3, #8
 800846e:	3008      	addcc	r0, #8
 8008470:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008474:	bf3c      	itt	cc
 8008476:	011b      	lslcc	r3, r3, #4
 8008478:	3004      	addcc	r0, #4
 800847a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800847e:	bf3c      	itt	cc
 8008480:	009b      	lslcc	r3, r3, #2
 8008482:	3002      	addcc	r0, #2
 8008484:	2b00      	cmp	r3, #0
 8008486:	db05      	blt.n	8008494 <__hi0bits+0x3c>
 8008488:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800848c:	f100 0001 	add.w	r0, r0, #1
 8008490:	bf08      	it	eq
 8008492:	2020      	moveq	r0, #32
 8008494:	4770      	bx	lr

08008496 <__lo0bits>:
 8008496:	6803      	ldr	r3, [r0, #0]
 8008498:	4602      	mov	r2, r0
 800849a:	f013 0007 	ands.w	r0, r3, #7
 800849e:	d00b      	beq.n	80084b8 <__lo0bits+0x22>
 80084a0:	07d9      	lsls	r1, r3, #31
 80084a2:	d421      	bmi.n	80084e8 <__lo0bits+0x52>
 80084a4:	0798      	lsls	r0, r3, #30
 80084a6:	bf49      	itett	mi
 80084a8:	085b      	lsrmi	r3, r3, #1
 80084aa:	089b      	lsrpl	r3, r3, #2
 80084ac:	2001      	movmi	r0, #1
 80084ae:	6013      	strmi	r3, [r2, #0]
 80084b0:	bf5c      	itt	pl
 80084b2:	6013      	strpl	r3, [r2, #0]
 80084b4:	2002      	movpl	r0, #2
 80084b6:	4770      	bx	lr
 80084b8:	b299      	uxth	r1, r3
 80084ba:	b909      	cbnz	r1, 80084c0 <__lo0bits+0x2a>
 80084bc:	0c1b      	lsrs	r3, r3, #16
 80084be:	2010      	movs	r0, #16
 80084c0:	b2d9      	uxtb	r1, r3
 80084c2:	b909      	cbnz	r1, 80084c8 <__lo0bits+0x32>
 80084c4:	3008      	adds	r0, #8
 80084c6:	0a1b      	lsrs	r3, r3, #8
 80084c8:	0719      	lsls	r1, r3, #28
 80084ca:	bf04      	itt	eq
 80084cc:	091b      	lsreq	r3, r3, #4
 80084ce:	3004      	addeq	r0, #4
 80084d0:	0799      	lsls	r1, r3, #30
 80084d2:	bf04      	itt	eq
 80084d4:	089b      	lsreq	r3, r3, #2
 80084d6:	3002      	addeq	r0, #2
 80084d8:	07d9      	lsls	r1, r3, #31
 80084da:	d403      	bmi.n	80084e4 <__lo0bits+0x4e>
 80084dc:	085b      	lsrs	r3, r3, #1
 80084de:	f100 0001 	add.w	r0, r0, #1
 80084e2:	d003      	beq.n	80084ec <__lo0bits+0x56>
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	4770      	bx	lr
 80084e8:	2000      	movs	r0, #0
 80084ea:	4770      	bx	lr
 80084ec:	2020      	movs	r0, #32
 80084ee:	4770      	bx	lr

080084f0 <__i2b>:
 80084f0:	b510      	push	{r4, lr}
 80084f2:	460c      	mov	r4, r1
 80084f4:	2101      	movs	r1, #1
 80084f6:	f7ff ff07 	bl	8008308 <_Balloc>
 80084fa:	4602      	mov	r2, r0
 80084fc:	b928      	cbnz	r0, 800850a <__i2b+0x1a>
 80084fe:	4b05      	ldr	r3, [pc, #20]	@ (8008514 <__i2b+0x24>)
 8008500:	4805      	ldr	r0, [pc, #20]	@ (8008518 <__i2b+0x28>)
 8008502:	f240 1145 	movw	r1, #325	@ 0x145
 8008506:	f000 faad 	bl	8008a64 <__assert_func>
 800850a:	2301      	movs	r3, #1
 800850c:	6144      	str	r4, [r0, #20]
 800850e:	6103      	str	r3, [r0, #16]
 8008510:	bd10      	pop	{r4, pc}
 8008512:	bf00      	nop
 8008514:	0800a51e 	.word	0x0800a51e
 8008518:	0800a52f 	.word	0x0800a52f

0800851c <__multiply>:
 800851c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008520:	4614      	mov	r4, r2
 8008522:	690a      	ldr	r2, [r1, #16]
 8008524:	6923      	ldr	r3, [r4, #16]
 8008526:	429a      	cmp	r2, r3
 8008528:	bfa8      	it	ge
 800852a:	4623      	movge	r3, r4
 800852c:	460f      	mov	r7, r1
 800852e:	bfa4      	itt	ge
 8008530:	460c      	movge	r4, r1
 8008532:	461f      	movge	r7, r3
 8008534:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008538:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800853c:	68a3      	ldr	r3, [r4, #8]
 800853e:	6861      	ldr	r1, [r4, #4]
 8008540:	eb0a 0609 	add.w	r6, sl, r9
 8008544:	42b3      	cmp	r3, r6
 8008546:	b085      	sub	sp, #20
 8008548:	bfb8      	it	lt
 800854a:	3101      	addlt	r1, #1
 800854c:	f7ff fedc 	bl	8008308 <_Balloc>
 8008550:	b930      	cbnz	r0, 8008560 <__multiply+0x44>
 8008552:	4602      	mov	r2, r0
 8008554:	4b44      	ldr	r3, [pc, #272]	@ (8008668 <__multiply+0x14c>)
 8008556:	4845      	ldr	r0, [pc, #276]	@ (800866c <__multiply+0x150>)
 8008558:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800855c:	f000 fa82 	bl	8008a64 <__assert_func>
 8008560:	f100 0514 	add.w	r5, r0, #20
 8008564:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008568:	462b      	mov	r3, r5
 800856a:	2200      	movs	r2, #0
 800856c:	4543      	cmp	r3, r8
 800856e:	d321      	bcc.n	80085b4 <__multiply+0x98>
 8008570:	f107 0114 	add.w	r1, r7, #20
 8008574:	f104 0214 	add.w	r2, r4, #20
 8008578:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800857c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008580:	9302      	str	r3, [sp, #8]
 8008582:	1b13      	subs	r3, r2, r4
 8008584:	3b15      	subs	r3, #21
 8008586:	f023 0303 	bic.w	r3, r3, #3
 800858a:	3304      	adds	r3, #4
 800858c:	f104 0715 	add.w	r7, r4, #21
 8008590:	42ba      	cmp	r2, r7
 8008592:	bf38      	it	cc
 8008594:	2304      	movcc	r3, #4
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	9b02      	ldr	r3, [sp, #8]
 800859a:	9103      	str	r1, [sp, #12]
 800859c:	428b      	cmp	r3, r1
 800859e:	d80c      	bhi.n	80085ba <__multiply+0x9e>
 80085a0:	2e00      	cmp	r6, #0
 80085a2:	dd03      	ble.n	80085ac <__multiply+0x90>
 80085a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d05b      	beq.n	8008664 <__multiply+0x148>
 80085ac:	6106      	str	r6, [r0, #16]
 80085ae:	b005      	add	sp, #20
 80085b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b4:	f843 2b04 	str.w	r2, [r3], #4
 80085b8:	e7d8      	b.n	800856c <__multiply+0x50>
 80085ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80085be:	f1ba 0f00 	cmp.w	sl, #0
 80085c2:	d024      	beq.n	800860e <__multiply+0xf2>
 80085c4:	f104 0e14 	add.w	lr, r4, #20
 80085c8:	46a9      	mov	r9, r5
 80085ca:	f04f 0c00 	mov.w	ip, #0
 80085ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085d2:	f8d9 3000 	ldr.w	r3, [r9]
 80085d6:	fa1f fb87 	uxth.w	fp, r7
 80085da:	b29b      	uxth	r3, r3
 80085dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80085e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80085e4:	f8d9 7000 	ldr.w	r7, [r9]
 80085e8:	4463      	add	r3, ip
 80085ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80085ee:	fb0a c70b 	mla	r7, sl, fp, ip
 80085f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80085fc:	4572      	cmp	r2, lr
 80085fe:	f849 3b04 	str.w	r3, [r9], #4
 8008602:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008606:	d8e2      	bhi.n	80085ce <__multiply+0xb2>
 8008608:	9b01      	ldr	r3, [sp, #4]
 800860a:	f845 c003 	str.w	ip, [r5, r3]
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008614:	3104      	adds	r1, #4
 8008616:	f1b9 0f00 	cmp.w	r9, #0
 800861a:	d021      	beq.n	8008660 <__multiply+0x144>
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	f104 0c14 	add.w	ip, r4, #20
 8008622:	46ae      	mov	lr, r5
 8008624:	f04f 0a00 	mov.w	sl, #0
 8008628:	f8bc b000 	ldrh.w	fp, [ip]
 800862c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008630:	fb09 770b 	mla	r7, r9, fp, r7
 8008634:	4457      	add	r7, sl
 8008636:	b29b      	uxth	r3, r3
 8008638:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800863c:	f84e 3b04 	str.w	r3, [lr], #4
 8008640:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008644:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008648:	f8be 3000 	ldrh.w	r3, [lr]
 800864c:	fb09 330a 	mla	r3, r9, sl, r3
 8008650:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008654:	4562      	cmp	r2, ip
 8008656:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800865a:	d8e5      	bhi.n	8008628 <__multiply+0x10c>
 800865c:	9f01      	ldr	r7, [sp, #4]
 800865e:	51eb      	str	r3, [r5, r7]
 8008660:	3504      	adds	r5, #4
 8008662:	e799      	b.n	8008598 <__multiply+0x7c>
 8008664:	3e01      	subs	r6, #1
 8008666:	e79b      	b.n	80085a0 <__multiply+0x84>
 8008668:	0800a51e 	.word	0x0800a51e
 800866c:	0800a52f 	.word	0x0800a52f

08008670 <__pow5mult>:
 8008670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008674:	4615      	mov	r5, r2
 8008676:	f012 0203 	ands.w	r2, r2, #3
 800867a:	4607      	mov	r7, r0
 800867c:	460e      	mov	r6, r1
 800867e:	d007      	beq.n	8008690 <__pow5mult+0x20>
 8008680:	4c25      	ldr	r4, [pc, #148]	@ (8008718 <__pow5mult+0xa8>)
 8008682:	3a01      	subs	r2, #1
 8008684:	2300      	movs	r3, #0
 8008686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800868a:	f7ff fe9f 	bl	80083cc <__multadd>
 800868e:	4606      	mov	r6, r0
 8008690:	10ad      	asrs	r5, r5, #2
 8008692:	d03d      	beq.n	8008710 <__pow5mult+0xa0>
 8008694:	69fc      	ldr	r4, [r7, #28]
 8008696:	b97c      	cbnz	r4, 80086b8 <__pow5mult+0x48>
 8008698:	2010      	movs	r0, #16
 800869a:	f7ff fe2d 	bl	80082f8 <malloc>
 800869e:	4602      	mov	r2, r0
 80086a0:	61f8      	str	r0, [r7, #28]
 80086a2:	b928      	cbnz	r0, 80086b0 <__pow5mult+0x40>
 80086a4:	4b1d      	ldr	r3, [pc, #116]	@ (800871c <__pow5mult+0xac>)
 80086a6:	481e      	ldr	r0, [pc, #120]	@ (8008720 <__pow5mult+0xb0>)
 80086a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80086ac:	f000 f9da 	bl	8008a64 <__assert_func>
 80086b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086b4:	6004      	str	r4, [r0, #0]
 80086b6:	60c4      	str	r4, [r0, #12]
 80086b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80086bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086c0:	b94c      	cbnz	r4, 80086d6 <__pow5mult+0x66>
 80086c2:	f240 2171 	movw	r1, #625	@ 0x271
 80086c6:	4638      	mov	r0, r7
 80086c8:	f7ff ff12 	bl	80084f0 <__i2b>
 80086cc:	2300      	movs	r3, #0
 80086ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80086d2:	4604      	mov	r4, r0
 80086d4:	6003      	str	r3, [r0, #0]
 80086d6:	f04f 0900 	mov.w	r9, #0
 80086da:	07eb      	lsls	r3, r5, #31
 80086dc:	d50a      	bpl.n	80086f4 <__pow5mult+0x84>
 80086de:	4631      	mov	r1, r6
 80086e0:	4622      	mov	r2, r4
 80086e2:	4638      	mov	r0, r7
 80086e4:	f7ff ff1a 	bl	800851c <__multiply>
 80086e8:	4631      	mov	r1, r6
 80086ea:	4680      	mov	r8, r0
 80086ec:	4638      	mov	r0, r7
 80086ee:	f7ff fe4b 	bl	8008388 <_Bfree>
 80086f2:	4646      	mov	r6, r8
 80086f4:	106d      	asrs	r5, r5, #1
 80086f6:	d00b      	beq.n	8008710 <__pow5mult+0xa0>
 80086f8:	6820      	ldr	r0, [r4, #0]
 80086fa:	b938      	cbnz	r0, 800870c <__pow5mult+0x9c>
 80086fc:	4622      	mov	r2, r4
 80086fe:	4621      	mov	r1, r4
 8008700:	4638      	mov	r0, r7
 8008702:	f7ff ff0b 	bl	800851c <__multiply>
 8008706:	6020      	str	r0, [r4, #0]
 8008708:	f8c0 9000 	str.w	r9, [r0]
 800870c:	4604      	mov	r4, r0
 800870e:	e7e4      	b.n	80086da <__pow5mult+0x6a>
 8008710:	4630      	mov	r0, r6
 8008712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008716:	bf00      	nop
 8008718:	0800a588 	.word	0x0800a588
 800871c:	0800a4af 	.word	0x0800a4af
 8008720:	0800a52f 	.word	0x0800a52f

08008724 <__lshift>:
 8008724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008728:	460c      	mov	r4, r1
 800872a:	6849      	ldr	r1, [r1, #4]
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008732:	68a3      	ldr	r3, [r4, #8]
 8008734:	4607      	mov	r7, r0
 8008736:	4691      	mov	r9, r2
 8008738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800873c:	f108 0601 	add.w	r6, r8, #1
 8008740:	42b3      	cmp	r3, r6
 8008742:	db0b      	blt.n	800875c <__lshift+0x38>
 8008744:	4638      	mov	r0, r7
 8008746:	f7ff fddf 	bl	8008308 <_Balloc>
 800874a:	4605      	mov	r5, r0
 800874c:	b948      	cbnz	r0, 8008762 <__lshift+0x3e>
 800874e:	4602      	mov	r2, r0
 8008750:	4b28      	ldr	r3, [pc, #160]	@ (80087f4 <__lshift+0xd0>)
 8008752:	4829      	ldr	r0, [pc, #164]	@ (80087f8 <__lshift+0xd4>)
 8008754:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008758:	f000 f984 	bl	8008a64 <__assert_func>
 800875c:	3101      	adds	r1, #1
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	e7ee      	b.n	8008740 <__lshift+0x1c>
 8008762:	2300      	movs	r3, #0
 8008764:	f100 0114 	add.w	r1, r0, #20
 8008768:	f100 0210 	add.w	r2, r0, #16
 800876c:	4618      	mov	r0, r3
 800876e:	4553      	cmp	r3, sl
 8008770:	db33      	blt.n	80087da <__lshift+0xb6>
 8008772:	6920      	ldr	r0, [r4, #16]
 8008774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008778:	f104 0314 	add.w	r3, r4, #20
 800877c:	f019 091f 	ands.w	r9, r9, #31
 8008780:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008784:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008788:	d02b      	beq.n	80087e2 <__lshift+0xbe>
 800878a:	f1c9 0e20 	rsb	lr, r9, #32
 800878e:	468a      	mov	sl, r1
 8008790:	2200      	movs	r2, #0
 8008792:	6818      	ldr	r0, [r3, #0]
 8008794:	fa00 f009 	lsl.w	r0, r0, r9
 8008798:	4310      	orrs	r0, r2
 800879a:	f84a 0b04 	str.w	r0, [sl], #4
 800879e:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a2:	459c      	cmp	ip, r3
 80087a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80087a8:	d8f3      	bhi.n	8008792 <__lshift+0x6e>
 80087aa:	ebac 0304 	sub.w	r3, ip, r4
 80087ae:	3b15      	subs	r3, #21
 80087b0:	f023 0303 	bic.w	r3, r3, #3
 80087b4:	3304      	adds	r3, #4
 80087b6:	f104 0015 	add.w	r0, r4, #21
 80087ba:	4584      	cmp	ip, r0
 80087bc:	bf38      	it	cc
 80087be:	2304      	movcc	r3, #4
 80087c0:	50ca      	str	r2, [r1, r3]
 80087c2:	b10a      	cbz	r2, 80087c8 <__lshift+0xa4>
 80087c4:	f108 0602 	add.w	r6, r8, #2
 80087c8:	3e01      	subs	r6, #1
 80087ca:	4638      	mov	r0, r7
 80087cc:	612e      	str	r6, [r5, #16]
 80087ce:	4621      	mov	r1, r4
 80087d0:	f7ff fdda 	bl	8008388 <_Bfree>
 80087d4:	4628      	mov	r0, r5
 80087d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087da:	f842 0f04 	str.w	r0, [r2, #4]!
 80087de:	3301      	adds	r3, #1
 80087e0:	e7c5      	b.n	800876e <__lshift+0x4a>
 80087e2:	3904      	subs	r1, #4
 80087e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80087ec:	459c      	cmp	ip, r3
 80087ee:	d8f9      	bhi.n	80087e4 <__lshift+0xc0>
 80087f0:	e7ea      	b.n	80087c8 <__lshift+0xa4>
 80087f2:	bf00      	nop
 80087f4:	0800a51e 	.word	0x0800a51e
 80087f8:	0800a52f 	.word	0x0800a52f

080087fc <__mcmp>:
 80087fc:	690a      	ldr	r2, [r1, #16]
 80087fe:	4603      	mov	r3, r0
 8008800:	6900      	ldr	r0, [r0, #16]
 8008802:	1a80      	subs	r0, r0, r2
 8008804:	b530      	push	{r4, r5, lr}
 8008806:	d10e      	bne.n	8008826 <__mcmp+0x2a>
 8008808:	3314      	adds	r3, #20
 800880a:	3114      	adds	r1, #20
 800880c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008810:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008814:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008818:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800881c:	4295      	cmp	r5, r2
 800881e:	d003      	beq.n	8008828 <__mcmp+0x2c>
 8008820:	d205      	bcs.n	800882e <__mcmp+0x32>
 8008822:	f04f 30ff 	mov.w	r0, #4294967295
 8008826:	bd30      	pop	{r4, r5, pc}
 8008828:	42a3      	cmp	r3, r4
 800882a:	d3f3      	bcc.n	8008814 <__mcmp+0x18>
 800882c:	e7fb      	b.n	8008826 <__mcmp+0x2a>
 800882e:	2001      	movs	r0, #1
 8008830:	e7f9      	b.n	8008826 <__mcmp+0x2a>
	...

08008834 <__mdiff>:
 8008834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008838:	4689      	mov	r9, r1
 800883a:	4606      	mov	r6, r0
 800883c:	4611      	mov	r1, r2
 800883e:	4648      	mov	r0, r9
 8008840:	4614      	mov	r4, r2
 8008842:	f7ff ffdb 	bl	80087fc <__mcmp>
 8008846:	1e05      	subs	r5, r0, #0
 8008848:	d112      	bne.n	8008870 <__mdiff+0x3c>
 800884a:	4629      	mov	r1, r5
 800884c:	4630      	mov	r0, r6
 800884e:	f7ff fd5b 	bl	8008308 <_Balloc>
 8008852:	4602      	mov	r2, r0
 8008854:	b928      	cbnz	r0, 8008862 <__mdiff+0x2e>
 8008856:	4b3f      	ldr	r3, [pc, #252]	@ (8008954 <__mdiff+0x120>)
 8008858:	f240 2137 	movw	r1, #567	@ 0x237
 800885c:	483e      	ldr	r0, [pc, #248]	@ (8008958 <__mdiff+0x124>)
 800885e:	f000 f901 	bl	8008a64 <__assert_func>
 8008862:	2301      	movs	r3, #1
 8008864:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008868:	4610      	mov	r0, r2
 800886a:	b003      	add	sp, #12
 800886c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008870:	bfbc      	itt	lt
 8008872:	464b      	movlt	r3, r9
 8008874:	46a1      	movlt	r9, r4
 8008876:	4630      	mov	r0, r6
 8008878:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800887c:	bfba      	itte	lt
 800887e:	461c      	movlt	r4, r3
 8008880:	2501      	movlt	r5, #1
 8008882:	2500      	movge	r5, #0
 8008884:	f7ff fd40 	bl	8008308 <_Balloc>
 8008888:	4602      	mov	r2, r0
 800888a:	b918      	cbnz	r0, 8008894 <__mdiff+0x60>
 800888c:	4b31      	ldr	r3, [pc, #196]	@ (8008954 <__mdiff+0x120>)
 800888e:	f240 2145 	movw	r1, #581	@ 0x245
 8008892:	e7e3      	b.n	800885c <__mdiff+0x28>
 8008894:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008898:	6926      	ldr	r6, [r4, #16]
 800889a:	60c5      	str	r5, [r0, #12]
 800889c:	f109 0310 	add.w	r3, r9, #16
 80088a0:	f109 0514 	add.w	r5, r9, #20
 80088a4:	f104 0e14 	add.w	lr, r4, #20
 80088a8:	f100 0b14 	add.w	fp, r0, #20
 80088ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80088b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80088b4:	9301      	str	r3, [sp, #4]
 80088b6:	46d9      	mov	r9, fp
 80088b8:	f04f 0c00 	mov.w	ip, #0
 80088bc:	9b01      	ldr	r3, [sp, #4]
 80088be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80088c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80088c6:	9301      	str	r3, [sp, #4]
 80088c8:	fa1f f38a 	uxth.w	r3, sl
 80088cc:	4619      	mov	r1, r3
 80088ce:	b283      	uxth	r3, r0
 80088d0:	1acb      	subs	r3, r1, r3
 80088d2:	0c00      	lsrs	r0, r0, #16
 80088d4:	4463      	add	r3, ip
 80088d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80088da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80088de:	b29b      	uxth	r3, r3
 80088e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80088e4:	4576      	cmp	r6, lr
 80088e6:	f849 3b04 	str.w	r3, [r9], #4
 80088ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80088ee:	d8e5      	bhi.n	80088bc <__mdiff+0x88>
 80088f0:	1b33      	subs	r3, r6, r4
 80088f2:	3b15      	subs	r3, #21
 80088f4:	f023 0303 	bic.w	r3, r3, #3
 80088f8:	3415      	adds	r4, #21
 80088fa:	3304      	adds	r3, #4
 80088fc:	42a6      	cmp	r6, r4
 80088fe:	bf38      	it	cc
 8008900:	2304      	movcc	r3, #4
 8008902:	441d      	add	r5, r3
 8008904:	445b      	add	r3, fp
 8008906:	461e      	mov	r6, r3
 8008908:	462c      	mov	r4, r5
 800890a:	4544      	cmp	r4, r8
 800890c:	d30e      	bcc.n	800892c <__mdiff+0xf8>
 800890e:	f108 0103 	add.w	r1, r8, #3
 8008912:	1b49      	subs	r1, r1, r5
 8008914:	f021 0103 	bic.w	r1, r1, #3
 8008918:	3d03      	subs	r5, #3
 800891a:	45a8      	cmp	r8, r5
 800891c:	bf38      	it	cc
 800891e:	2100      	movcc	r1, #0
 8008920:	440b      	add	r3, r1
 8008922:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008926:	b191      	cbz	r1, 800894e <__mdiff+0x11a>
 8008928:	6117      	str	r7, [r2, #16]
 800892a:	e79d      	b.n	8008868 <__mdiff+0x34>
 800892c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008930:	46e6      	mov	lr, ip
 8008932:	0c08      	lsrs	r0, r1, #16
 8008934:	fa1c fc81 	uxtah	ip, ip, r1
 8008938:	4471      	add	r1, lr
 800893a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800893e:	b289      	uxth	r1, r1
 8008940:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008944:	f846 1b04 	str.w	r1, [r6], #4
 8008948:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800894c:	e7dd      	b.n	800890a <__mdiff+0xd6>
 800894e:	3f01      	subs	r7, #1
 8008950:	e7e7      	b.n	8008922 <__mdiff+0xee>
 8008952:	bf00      	nop
 8008954:	0800a51e 	.word	0x0800a51e
 8008958:	0800a52f 	.word	0x0800a52f

0800895c <__d2b>:
 800895c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008960:	460f      	mov	r7, r1
 8008962:	2101      	movs	r1, #1
 8008964:	ec59 8b10 	vmov	r8, r9, d0
 8008968:	4616      	mov	r6, r2
 800896a:	f7ff fccd 	bl	8008308 <_Balloc>
 800896e:	4604      	mov	r4, r0
 8008970:	b930      	cbnz	r0, 8008980 <__d2b+0x24>
 8008972:	4602      	mov	r2, r0
 8008974:	4b23      	ldr	r3, [pc, #140]	@ (8008a04 <__d2b+0xa8>)
 8008976:	4824      	ldr	r0, [pc, #144]	@ (8008a08 <__d2b+0xac>)
 8008978:	f240 310f 	movw	r1, #783	@ 0x30f
 800897c:	f000 f872 	bl	8008a64 <__assert_func>
 8008980:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008984:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008988:	b10d      	cbz	r5, 800898e <__d2b+0x32>
 800898a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800898e:	9301      	str	r3, [sp, #4]
 8008990:	f1b8 0300 	subs.w	r3, r8, #0
 8008994:	d023      	beq.n	80089de <__d2b+0x82>
 8008996:	4668      	mov	r0, sp
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	f7ff fd7c 	bl	8008496 <__lo0bits>
 800899e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80089a2:	b1d0      	cbz	r0, 80089da <__d2b+0x7e>
 80089a4:	f1c0 0320 	rsb	r3, r0, #32
 80089a8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ac:	430b      	orrs	r3, r1
 80089ae:	40c2      	lsrs	r2, r0
 80089b0:	6163      	str	r3, [r4, #20]
 80089b2:	9201      	str	r2, [sp, #4]
 80089b4:	9b01      	ldr	r3, [sp, #4]
 80089b6:	61a3      	str	r3, [r4, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	bf0c      	ite	eq
 80089bc:	2201      	moveq	r2, #1
 80089be:	2202      	movne	r2, #2
 80089c0:	6122      	str	r2, [r4, #16]
 80089c2:	b1a5      	cbz	r5, 80089ee <__d2b+0x92>
 80089c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80089c8:	4405      	add	r5, r0
 80089ca:	603d      	str	r5, [r7, #0]
 80089cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80089d0:	6030      	str	r0, [r6, #0]
 80089d2:	4620      	mov	r0, r4
 80089d4:	b003      	add	sp, #12
 80089d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089da:	6161      	str	r1, [r4, #20]
 80089dc:	e7ea      	b.n	80089b4 <__d2b+0x58>
 80089de:	a801      	add	r0, sp, #4
 80089e0:	f7ff fd59 	bl	8008496 <__lo0bits>
 80089e4:	9b01      	ldr	r3, [sp, #4]
 80089e6:	6163      	str	r3, [r4, #20]
 80089e8:	3020      	adds	r0, #32
 80089ea:	2201      	movs	r2, #1
 80089ec:	e7e8      	b.n	80089c0 <__d2b+0x64>
 80089ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80089f6:	6038      	str	r0, [r7, #0]
 80089f8:	6918      	ldr	r0, [r3, #16]
 80089fa:	f7ff fd2d 	bl	8008458 <__hi0bits>
 80089fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a02:	e7e5      	b.n	80089d0 <__d2b+0x74>
 8008a04:	0800a51e 	.word	0x0800a51e
 8008a08:	0800a52f 	.word	0x0800a52f

08008a0c <_mprec_log10>:
 8008a0c:	2817      	cmp	r0, #23
 8008a0e:	b5d0      	push	{r4, r6, r7, lr}
 8008a10:	4604      	mov	r4, r0
 8008a12:	dc07      	bgt.n	8008a24 <_mprec_log10+0x18>
 8008a14:	4b09      	ldr	r3, [pc, #36]	@ (8008a3c <_mprec_log10+0x30>)
 8008a16:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8008a1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008a1e:	ec41 0b10 	vmov	d0, r0, r1
 8008a22:	bdd0      	pop	{r4, r6, r7, pc}
 8008a24:	4906      	ldr	r1, [pc, #24]	@ (8008a40 <_mprec_log10+0x34>)
 8008a26:	4f07      	ldr	r7, [pc, #28]	@ (8008a44 <_mprec_log10+0x38>)
 8008a28:	2000      	movs	r0, #0
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	4632      	mov	r2, r6
 8008a2e:	463b      	mov	r3, r7
 8008a30:	f7f7 fde2 	bl	80005f8 <__aeabi_dmul>
 8008a34:	3c01      	subs	r4, #1
 8008a36:	d1f9      	bne.n	8008a2c <_mprec_log10+0x20>
 8008a38:	e7f1      	b.n	8008a1e <_mprec_log10+0x12>
 8008a3a:	bf00      	nop
 8008a3c:	0800a5c0 	.word	0x0800a5c0
 8008a40:	3ff00000 	.word	0x3ff00000
 8008a44:	40240000 	.word	0x40240000

08008a48 <memcpy>:
 8008a48:	440a      	add	r2, r1
 8008a4a:	4291      	cmp	r1, r2
 8008a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a50:	d100      	bne.n	8008a54 <memcpy+0xc>
 8008a52:	4770      	bx	lr
 8008a54:	b510      	push	{r4, lr}
 8008a56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a5e:	4291      	cmp	r1, r2
 8008a60:	d1f9      	bne.n	8008a56 <memcpy+0xe>
 8008a62:	bd10      	pop	{r4, pc}

08008a64 <__assert_func>:
 8008a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a66:	4614      	mov	r4, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4b09      	ldr	r3, [pc, #36]	@ (8008a90 <__assert_func+0x2c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4605      	mov	r5, r0
 8008a70:	68d8      	ldr	r0, [r3, #12]
 8008a72:	b954      	cbnz	r4, 8008a8a <__assert_func+0x26>
 8008a74:	4b07      	ldr	r3, [pc, #28]	@ (8008a94 <__assert_func+0x30>)
 8008a76:	461c      	mov	r4, r3
 8008a78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a7c:	9100      	str	r1, [sp, #0]
 8008a7e:	462b      	mov	r3, r5
 8008a80:	4905      	ldr	r1, [pc, #20]	@ (8008a98 <__assert_func+0x34>)
 8008a82:	f000 f821 	bl	8008ac8 <fiprintf>
 8008a86:	f000 f831 	bl	8008aec <abort>
 8008a8a:	4b04      	ldr	r3, [pc, #16]	@ (8008a9c <__assert_func+0x38>)
 8008a8c:	e7f4      	b.n	8008a78 <__assert_func+0x14>
 8008a8e:	bf00      	nop
 8008a90:	20000030 	.word	0x20000030
 8008a94:	0800a6c3 	.word	0x0800a6c3
 8008a98:	0800a695 	.word	0x0800a695
 8008a9c:	0800a688 	.word	0x0800a688

08008aa0 <_calloc_r>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	fba1 5402 	umull	r5, r4, r1, r2
 8008aa6:	b93c      	cbnz	r4, 8008ab8 <_calloc_r+0x18>
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7fe fb51 	bl	8007150 <_malloc_r>
 8008aae:	4606      	mov	r6, r0
 8008ab0:	b928      	cbnz	r0, 8008abe <_calloc_r+0x1e>
 8008ab2:	2600      	movs	r6, #0
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
 8008ab8:	220c      	movs	r2, #12
 8008aba:	6002      	str	r2, [r0, #0]
 8008abc:	e7f9      	b.n	8008ab2 <_calloc_r+0x12>
 8008abe:	462a      	mov	r2, r5
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	f7fe fa4e 	bl	8006f62 <memset>
 8008ac6:	e7f5      	b.n	8008ab4 <_calloc_r+0x14>

08008ac8 <fiprintf>:
 8008ac8:	b40e      	push	{r1, r2, r3}
 8008aca:	b503      	push	{r0, r1, lr}
 8008acc:	4601      	mov	r1, r0
 8008ace:	ab03      	add	r3, sp, #12
 8008ad0:	4805      	ldr	r0, [pc, #20]	@ (8008ae8 <fiprintf+0x20>)
 8008ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad6:	6800      	ldr	r0, [r0, #0]
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	f000 f837 	bl	8008b4c <_vfiprintf_r>
 8008ade:	b002      	add	sp, #8
 8008ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ae4:	b003      	add	sp, #12
 8008ae6:	4770      	bx	lr
 8008ae8:	20000030 	.word	0x20000030

08008aec <abort>:
 8008aec:	b508      	push	{r3, lr}
 8008aee:	2006      	movs	r0, #6
 8008af0:	f000 fb8e 	bl	8009210 <raise>
 8008af4:	2001      	movs	r0, #1
 8008af6:	f7f9 ffef 	bl	8002ad8 <_exit>

08008afa <__sfputc_r>:
 8008afa:	6893      	ldr	r3, [r2, #8]
 8008afc:	3b01      	subs	r3, #1
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	b410      	push	{r4}
 8008b02:	6093      	str	r3, [r2, #8]
 8008b04:	da08      	bge.n	8008b18 <__sfputc_r+0x1e>
 8008b06:	6994      	ldr	r4, [r2, #24]
 8008b08:	42a3      	cmp	r3, r4
 8008b0a:	db01      	blt.n	8008b10 <__sfputc_r+0x16>
 8008b0c:	290a      	cmp	r1, #10
 8008b0e:	d103      	bne.n	8008b18 <__sfputc_r+0x1e>
 8008b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b14:	f000 bac0 	b.w	8009098 <__swbuf_r>
 8008b18:	6813      	ldr	r3, [r2, #0]
 8008b1a:	1c58      	adds	r0, r3, #1
 8008b1c:	6010      	str	r0, [r2, #0]
 8008b1e:	7019      	strb	r1, [r3, #0]
 8008b20:	4608      	mov	r0, r1
 8008b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <__sfputs_r>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	4614      	mov	r4, r2
 8008b30:	18d5      	adds	r5, r2, r3
 8008b32:	42ac      	cmp	r4, r5
 8008b34:	d101      	bne.n	8008b3a <__sfputs_r+0x12>
 8008b36:	2000      	movs	r0, #0
 8008b38:	e007      	b.n	8008b4a <__sfputs_r+0x22>
 8008b3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b3e:	463a      	mov	r2, r7
 8008b40:	4630      	mov	r0, r6
 8008b42:	f7ff ffda 	bl	8008afa <__sfputc_r>
 8008b46:	1c43      	adds	r3, r0, #1
 8008b48:	d1f3      	bne.n	8008b32 <__sfputs_r+0xa>
 8008b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b4c <_vfiprintf_r>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	460d      	mov	r5, r1
 8008b52:	b09d      	sub	sp, #116	@ 0x74
 8008b54:	4614      	mov	r4, r2
 8008b56:	4698      	mov	r8, r3
 8008b58:	4606      	mov	r6, r0
 8008b5a:	b118      	cbz	r0, 8008b64 <_vfiprintf_r+0x18>
 8008b5c:	6a03      	ldr	r3, [r0, #32]
 8008b5e:	b90b      	cbnz	r3, 8008b64 <_vfiprintf_r+0x18>
 8008b60:	f7fe f986 	bl	8006e70 <__sinit>
 8008b64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b66:	07d9      	lsls	r1, r3, #31
 8008b68:	d405      	bmi.n	8008b76 <_vfiprintf_r+0x2a>
 8008b6a:	89ab      	ldrh	r3, [r5, #12]
 8008b6c:	059a      	lsls	r2, r3, #22
 8008b6e:	d402      	bmi.n	8008b76 <_vfiprintf_r+0x2a>
 8008b70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b72:	f7fe fa7e 	bl	8007072 <__retarget_lock_acquire_recursive>
 8008b76:	89ab      	ldrh	r3, [r5, #12]
 8008b78:	071b      	lsls	r3, r3, #28
 8008b7a:	d501      	bpl.n	8008b80 <_vfiprintf_r+0x34>
 8008b7c:	692b      	ldr	r3, [r5, #16]
 8008b7e:	b99b      	cbnz	r3, 8008ba8 <_vfiprintf_r+0x5c>
 8008b80:	4629      	mov	r1, r5
 8008b82:	4630      	mov	r0, r6
 8008b84:	f000 fac6 	bl	8009114 <__swsetup_r>
 8008b88:	b170      	cbz	r0, 8008ba8 <_vfiprintf_r+0x5c>
 8008b8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b8c:	07dc      	lsls	r4, r3, #31
 8008b8e:	d504      	bpl.n	8008b9a <_vfiprintf_r+0x4e>
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295
 8008b94:	b01d      	add	sp, #116	@ 0x74
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	89ab      	ldrh	r3, [r5, #12]
 8008b9c:	0598      	lsls	r0, r3, #22
 8008b9e:	d4f7      	bmi.n	8008b90 <_vfiprintf_r+0x44>
 8008ba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ba2:	f7fe fa67 	bl	8007074 <__retarget_lock_release_recursive>
 8008ba6:	e7f3      	b.n	8008b90 <_vfiprintf_r+0x44>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bac:	2320      	movs	r3, #32
 8008bae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bb6:	2330      	movs	r3, #48	@ 0x30
 8008bb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d68 <_vfiprintf_r+0x21c>
 8008bbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bc0:	f04f 0901 	mov.w	r9, #1
 8008bc4:	4623      	mov	r3, r4
 8008bc6:	469a      	mov	sl, r3
 8008bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bcc:	b10a      	cbz	r2, 8008bd2 <_vfiprintf_r+0x86>
 8008bce:	2a25      	cmp	r2, #37	@ 0x25
 8008bd0:	d1f9      	bne.n	8008bc6 <_vfiprintf_r+0x7a>
 8008bd2:	ebba 0b04 	subs.w	fp, sl, r4
 8008bd6:	d00b      	beq.n	8008bf0 <_vfiprintf_r+0xa4>
 8008bd8:	465b      	mov	r3, fp
 8008bda:	4622      	mov	r2, r4
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7ff ffa2 	bl	8008b28 <__sfputs_r>
 8008be4:	3001      	adds	r0, #1
 8008be6:	f000 80a7 	beq.w	8008d38 <_vfiprintf_r+0x1ec>
 8008bea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bec:	445a      	add	r2, fp
 8008bee:	9209      	str	r2, [sp, #36]	@ 0x24
 8008bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 809f 	beq.w	8008d38 <_vfiprintf_r+0x1ec>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8008c00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c04:	f10a 0a01 	add.w	sl, sl, #1
 8008c08:	9304      	str	r3, [sp, #16]
 8008c0a:	9307      	str	r3, [sp, #28]
 8008c0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c10:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c12:	4654      	mov	r4, sl
 8008c14:	2205      	movs	r2, #5
 8008c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c1a:	4853      	ldr	r0, [pc, #332]	@ (8008d68 <_vfiprintf_r+0x21c>)
 8008c1c:	f7f7 fae0 	bl	80001e0 <memchr>
 8008c20:	9a04      	ldr	r2, [sp, #16]
 8008c22:	b9d8      	cbnz	r0, 8008c5c <_vfiprintf_r+0x110>
 8008c24:	06d1      	lsls	r1, r2, #27
 8008c26:	bf44      	itt	mi
 8008c28:	2320      	movmi	r3, #32
 8008c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c2e:	0713      	lsls	r3, r2, #28
 8008c30:	bf44      	itt	mi
 8008c32:	232b      	movmi	r3, #43	@ 0x2b
 8008c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c38:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c3e:	d015      	beq.n	8008c6c <_vfiprintf_r+0x120>
 8008c40:	9a07      	ldr	r2, [sp, #28]
 8008c42:	4654      	mov	r4, sl
 8008c44:	2000      	movs	r0, #0
 8008c46:	f04f 0c0a 	mov.w	ip, #10
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c50:	3b30      	subs	r3, #48	@ 0x30
 8008c52:	2b09      	cmp	r3, #9
 8008c54:	d94b      	bls.n	8008cee <_vfiprintf_r+0x1a2>
 8008c56:	b1b0      	cbz	r0, 8008c86 <_vfiprintf_r+0x13a>
 8008c58:	9207      	str	r2, [sp, #28]
 8008c5a:	e014      	b.n	8008c86 <_vfiprintf_r+0x13a>
 8008c5c:	eba0 0308 	sub.w	r3, r0, r8
 8008c60:	fa09 f303 	lsl.w	r3, r9, r3
 8008c64:	4313      	orrs	r3, r2
 8008c66:	9304      	str	r3, [sp, #16]
 8008c68:	46a2      	mov	sl, r4
 8008c6a:	e7d2      	b.n	8008c12 <_vfiprintf_r+0xc6>
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	1d19      	adds	r1, r3, #4
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	9103      	str	r1, [sp, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	bfbb      	ittet	lt
 8008c78:	425b      	neglt	r3, r3
 8008c7a:	f042 0202 	orrlt.w	r2, r2, #2
 8008c7e:	9307      	strge	r3, [sp, #28]
 8008c80:	9307      	strlt	r3, [sp, #28]
 8008c82:	bfb8      	it	lt
 8008c84:	9204      	strlt	r2, [sp, #16]
 8008c86:	7823      	ldrb	r3, [r4, #0]
 8008c88:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c8a:	d10a      	bne.n	8008ca2 <_vfiprintf_r+0x156>
 8008c8c:	7863      	ldrb	r3, [r4, #1]
 8008c8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c90:	d132      	bne.n	8008cf8 <_vfiprintf_r+0x1ac>
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	1d1a      	adds	r2, r3, #4
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	9203      	str	r2, [sp, #12]
 8008c9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c9e:	3402      	adds	r4, #2
 8008ca0:	9305      	str	r3, [sp, #20]
 8008ca2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d78 <_vfiprintf_r+0x22c>
 8008ca6:	7821      	ldrb	r1, [r4, #0]
 8008ca8:	2203      	movs	r2, #3
 8008caa:	4650      	mov	r0, sl
 8008cac:	f7f7 fa98 	bl	80001e0 <memchr>
 8008cb0:	b138      	cbz	r0, 8008cc2 <_vfiprintf_r+0x176>
 8008cb2:	9b04      	ldr	r3, [sp, #16]
 8008cb4:	eba0 000a 	sub.w	r0, r0, sl
 8008cb8:	2240      	movs	r2, #64	@ 0x40
 8008cba:	4082      	lsls	r2, r0
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	3401      	adds	r4, #1
 8008cc0:	9304      	str	r3, [sp, #16]
 8008cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc6:	4829      	ldr	r0, [pc, #164]	@ (8008d6c <_vfiprintf_r+0x220>)
 8008cc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ccc:	2206      	movs	r2, #6
 8008cce:	f7f7 fa87 	bl	80001e0 <memchr>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d03f      	beq.n	8008d56 <_vfiprintf_r+0x20a>
 8008cd6:	4b26      	ldr	r3, [pc, #152]	@ (8008d70 <_vfiprintf_r+0x224>)
 8008cd8:	bb1b      	cbnz	r3, 8008d22 <_vfiprintf_r+0x1d6>
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	3307      	adds	r3, #7
 8008cde:	f023 0307 	bic.w	r3, r3, #7
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	9303      	str	r3, [sp, #12]
 8008ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce8:	443b      	add	r3, r7
 8008cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cec:	e76a      	b.n	8008bc4 <_vfiprintf_r+0x78>
 8008cee:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	2001      	movs	r0, #1
 8008cf6:	e7a8      	b.n	8008c4a <_vfiprintf_r+0xfe>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	3401      	adds	r4, #1
 8008cfc:	9305      	str	r3, [sp, #20]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	f04f 0c0a 	mov.w	ip, #10
 8008d04:	4620      	mov	r0, r4
 8008d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d0a:	3a30      	subs	r2, #48	@ 0x30
 8008d0c:	2a09      	cmp	r2, #9
 8008d0e:	d903      	bls.n	8008d18 <_vfiprintf_r+0x1cc>
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0c6      	beq.n	8008ca2 <_vfiprintf_r+0x156>
 8008d14:	9105      	str	r1, [sp, #20]
 8008d16:	e7c4      	b.n	8008ca2 <_vfiprintf_r+0x156>
 8008d18:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e7f0      	b.n	8008d04 <_vfiprintf_r+0x1b8>
 8008d22:	ab03      	add	r3, sp, #12
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	462a      	mov	r2, r5
 8008d28:	4b12      	ldr	r3, [pc, #72]	@ (8008d74 <_vfiprintf_r+0x228>)
 8008d2a:	a904      	add	r1, sp, #16
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f3af 8000 	nop.w
 8008d32:	4607      	mov	r7, r0
 8008d34:	1c78      	adds	r0, r7, #1
 8008d36:	d1d6      	bne.n	8008ce6 <_vfiprintf_r+0x19a>
 8008d38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d3a:	07d9      	lsls	r1, r3, #31
 8008d3c:	d405      	bmi.n	8008d4a <_vfiprintf_r+0x1fe>
 8008d3e:	89ab      	ldrh	r3, [r5, #12]
 8008d40:	059a      	lsls	r2, r3, #22
 8008d42:	d402      	bmi.n	8008d4a <_vfiprintf_r+0x1fe>
 8008d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d46:	f7fe f995 	bl	8007074 <__retarget_lock_release_recursive>
 8008d4a:	89ab      	ldrh	r3, [r5, #12]
 8008d4c:	065b      	lsls	r3, r3, #25
 8008d4e:	f53f af1f 	bmi.w	8008b90 <_vfiprintf_r+0x44>
 8008d52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d54:	e71e      	b.n	8008b94 <_vfiprintf_r+0x48>
 8008d56:	ab03      	add	r3, sp, #12
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	462a      	mov	r2, r5
 8008d5c:	4b05      	ldr	r3, [pc, #20]	@ (8008d74 <_vfiprintf_r+0x228>)
 8008d5e:	a904      	add	r1, sp, #16
 8008d60:	4630      	mov	r0, r6
 8008d62:	f000 f879 	bl	8008e58 <_printf_i>
 8008d66:	e7e4      	b.n	8008d32 <_vfiprintf_r+0x1e6>
 8008d68:	0800a6c4 	.word	0x0800a6c4
 8008d6c:	0800a6ce 	.word	0x0800a6ce
 8008d70:	00000000 	.word	0x00000000
 8008d74:	08008b29 	.word	0x08008b29
 8008d78:	0800a6ca 	.word	0x0800a6ca

08008d7c <_printf_common>:
 8008d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d80:	4616      	mov	r6, r2
 8008d82:	4698      	mov	r8, r3
 8008d84:	688a      	ldr	r2, [r1, #8]
 8008d86:	690b      	ldr	r3, [r1, #16]
 8008d88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	bfb8      	it	lt
 8008d90:	4613      	movlt	r3, r2
 8008d92:	6033      	str	r3, [r6, #0]
 8008d94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d98:	4607      	mov	r7, r0
 8008d9a:	460c      	mov	r4, r1
 8008d9c:	b10a      	cbz	r2, 8008da2 <_printf_common+0x26>
 8008d9e:	3301      	adds	r3, #1
 8008da0:	6033      	str	r3, [r6, #0]
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	0699      	lsls	r1, r3, #26
 8008da6:	bf42      	ittt	mi
 8008da8:	6833      	ldrmi	r3, [r6, #0]
 8008daa:	3302      	addmi	r3, #2
 8008dac:	6033      	strmi	r3, [r6, #0]
 8008dae:	6825      	ldr	r5, [r4, #0]
 8008db0:	f015 0506 	ands.w	r5, r5, #6
 8008db4:	d106      	bne.n	8008dc4 <_printf_common+0x48>
 8008db6:	f104 0a19 	add.w	sl, r4, #25
 8008dba:	68e3      	ldr	r3, [r4, #12]
 8008dbc:	6832      	ldr	r2, [r6, #0]
 8008dbe:	1a9b      	subs	r3, r3, r2
 8008dc0:	42ab      	cmp	r3, r5
 8008dc2:	dc26      	bgt.n	8008e12 <_printf_common+0x96>
 8008dc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008dc8:	6822      	ldr	r2, [r4, #0]
 8008dca:	3b00      	subs	r3, #0
 8008dcc:	bf18      	it	ne
 8008dce:	2301      	movne	r3, #1
 8008dd0:	0692      	lsls	r2, r2, #26
 8008dd2:	d42b      	bmi.n	8008e2c <_printf_common+0xb0>
 8008dd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008dd8:	4641      	mov	r1, r8
 8008dda:	4638      	mov	r0, r7
 8008ddc:	47c8      	blx	r9
 8008dde:	3001      	adds	r0, #1
 8008de0:	d01e      	beq.n	8008e20 <_printf_common+0xa4>
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	6922      	ldr	r2, [r4, #16]
 8008de6:	f003 0306 	and.w	r3, r3, #6
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	bf02      	ittt	eq
 8008dee:	68e5      	ldreq	r5, [r4, #12]
 8008df0:	6833      	ldreq	r3, [r6, #0]
 8008df2:	1aed      	subeq	r5, r5, r3
 8008df4:	68a3      	ldr	r3, [r4, #8]
 8008df6:	bf0c      	ite	eq
 8008df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dfc:	2500      	movne	r5, #0
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	bfc4      	itt	gt
 8008e02:	1a9b      	subgt	r3, r3, r2
 8008e04:	18ed      	addgt	r5, r5, r3
 8008e06:	2600      	movs	r6, #0
 8008e08:	341a      	adds	r4, #26
 8008e0a:	42b5      	cmp	r5, r6
 8008e0c:	d11a      	bne.n	8008e44 <_printf_common+0xc8>
 8008e0e:	2000      	movs	r0, #0
 8008e10:	e008      	b.n	8008e24 <_printf_common+0xa8>
 8008e12:	2301      	movs	r3, #1
 8008e14:	4652      	mov	r2, sl
 8008e16:	4641      	mov	r1, r8
 8008e18:	4638      	mov	r0, r7
 8008e1a:	47c8      	blx	r9
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d103      	bne.n	8008e28 <_printf_common+0xac>
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295
 8008e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e28:	3501      	adds	r5, #1
 8008e2a:	e7c6      	b.n	8008dba <_printf_common+0x3e>
 8008e2c:	18e1      	adds	r1, r4, r3
 8008e2e:	1c5a      	adds	r2, r3, #1
 8008e30:	2030      	movs	r0, #48	@ 0x30
 8008e32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e36:	4422      	add	r2, r4
 8008e38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e40:	3302      	adds	r3, #2
 8008e42:	e7c7      	b.n	8008dd4 <_printf_common+0x58>
 8008e44:	2301      	movs	r3, #1
 8008e46:	4622      	mov	r2, r4
 8008e48:	4641      	mov	r1, r8
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	47c8      	blx	r9
 8008e4e:	3001      	adds	r0, #1
 8008e50:	d0e6      	beq.n	8008e20 <_printf_common+0xa4>
 8008e52:	3601      	adds	r6, #1
 8008e54:	e7d9      	b.n	8008e0a <_printf_common+0x8e>
	...

08008e58 <_printf_i>:
 8008e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e5c:	7e0f      	ldrb	r7, [r1, #24]
 8008e5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e60:	2f78      	cmp	r7, #120	@ 0x78
 8008e62:	4691      	mov	r9, r2
 8008e64:	4680      	mov	r8, r0
 8008e66:	460c      	mov	r4, r1
 8008e68:	469a      	mov	sl, r3
 8008e6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e6e:	d807      	bhi.n	8008e80 <_printf_i+0x28>
 8008e70:	2f62      	cmp	r7, #98	@ 0x62
 8008e72:	d80a      	bhi.n	8008e8a <_printf_i+0x32>
 8008e74:	2f00      	cmp	r7, #0
 8008e76:	f000 80d2 	beq.w	800901e <_printf_i+0x1c6>
 8008e7a:	2f58      	cmp	r7, #88	@ 0x58
 8008e7c:	f000 80b9 	beq.w	8008ff2 <_printf_i+0x19a>
 8008e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e88:	e03a      	b.n	8008f00 <_printf_i+0xa8>
 8008e8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e8e:	2b15      	cmp	r3, #21
 8008e90:	d8f6      	bhi.n	8008e80 <_printf_i+0x28>
 8008e92:	a101      	add	r1, pc, #4	@ (adr r1, 8008e98 <_printf_i+0x40>)
 8008e94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e98:	08008ef1 	.word	0x08008ef1
 8008e9c:	08008f05 	.word	0x08008f05
 8008ea0:	08008e81 	.word	0x08008e81
 8008ea4:	08008e81 	.word	0x08008e81
 8008ea8:	08008e81 	.word	0x08008e81
 8008eac:	08008e81 	.word	0x08008e81
 8008eb0:	08008f05 	.word	0x08008f05
 8008eb4:	08008e81 	.word	0x08008e81
 8008eb8:	08008e81 	.word	0x08008e81
 8008ebc:	08008e81 	.word	0x08008e81
 8008ec0:	08008e81 	.word	0x08008e81
 8008ec4:	08009005 	.word	0x08009005
 8008ec8:	08008f2f 	.word	0x08008f2f
 8008ecc:	08008fbf 	.word	0x08008fbf
 8008ed0:	08008e81 	.word	0x08008e81
 8008ed4:	08008e81 	.word	0x08008e81
 8008ed8:	08009027 	.word	0x08009027
 8008edc:	08008e81 	.word	0x08008e81
 8008ee0:	08008f2f 	.word	0x08008f2f
 8008ee4:	08008e81 	.word	0x08008e81
 8008ee8:	08008e81 	.word	0x08008e81
 8008eec:	08008fc7 	.word	0x08008fc7
 8008ef0:	6833      	ldr	r3, [r6, #0]
 8008ef2:	1d1a      	adds	r2, r3, #4
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6032      	str	r2, [r6, #0]
 8008ef8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008efc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f00:	2301      	movs	r3, #1
 8008f02:	e09d      	b.n	8009040 <_printf_i+0x1e8>
 8008f04:	6833      	ldr	r3, [r6, #0]
 8008f06:	6820      	ldr	r0, [r4, #0]
 8008f08:	1d19      	adds	r1, r3, #4
 8008f0a:	6031      	str	r1, [r6, #0]
 8008f0c:	0606      	lsls	r6, r0, #24
 8008f0e:	d501      	bpl.n	8008f14 <_printf_i+0xbc>
 8008f10:	681d      	ldr	r5, [r3, #0]
 8008f12:	e003      	b.n	8008f1c <_printf_i+0xc4>
 8008f14:	0645      	lsls	r5, r0, #25
 8008f16:	d5fb      	bpl.n	8008f10 <_printf_i+0xb8>
 8008f18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f1c:	2d00      	cmp	r5, #0
 8008f1e:	da03      	bge.n	8008f28 <_printf_i+0xd0>
 8008f20:	232d      	movs	r3, #45	@ 0x2d
 8008f22:	426d      	negs	r5, r5
 8008f24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f28:	4859      	ldr	r0, [pc, #356]	@ (8009090 <_printf_i+0x238>)
 8008f2a:	230a      	movs	r3, #10
 8008f2c:	e011      	b.n	8008f52 <_printf_i+0xfa>
 8008f2e:	6821      	ldr	r1, [r4, #0]
 8008f30:	6833      	ldr	r3, [r6, #0]
 8008f32:	0608      	lsls	r0, r1, #24
 8008f34:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f38:	d402      	bmi.n	8008f40 <_printf_i+0xe8>
 8008f3a:	0649      	lsls	r1, r1, #25
 8008f3c:	bf48      	it	mi
 8008f3e:	b2ad      	uxthmi	r5, r5
 8008f40:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f42:	4853      	ldr	r0, [pc, #332]	@ (8009090 <_printf_i+0x238>)
 8008f44:	6033      	str	r3, [r6, #0]
 8008f46:	bf14      	ite	ne
 8008f48:	230a      	movne	r3, #10
 8008f4a:	2308      	moveq	r3, #8
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f52:	6866      	ldr	r6, [r4, #4]
 8008f54:	60a6      	str	r6, [r4, #8]
 8008f56:	2e00      	cmp	r6, #0
 8008f58:	bfa2      	ittt	ge
 8008f5a:	6821      	ldrge	r1, [r4, #0]
 8008f5c:	f021 0104 	bicge.w	r1, r1, #4
 8008f60:	6021      	strge	r1, [r4, #0]
 8008f62:	b90d      	cbnz	r5, 8008f68 <_printf_i+0x110>
 8008f64:	2e00      	cmp	r6, #0
 8008f66:	d04b      	beq.n	8009000 <_printf_i+0x1a8>
 8008f68:	4616      	mov	r6, r2
 8008f6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f6e:	fb03 5711 	mls	r7, r3, r1, r5
 8008f72:	5dc7      	ldrb	r7, [r0, r7]
 8008f74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f78:	462f      	mov	r7, r5
 8008f7a:	42bb      	cmp	r3, r7
 8008f7c:	460d      	mov	r5, r1
 8008f7e:	d9f4      	bls.n	8008f6a <_printf_i+0x112>
 8008f80:	2b08      	cmp	r3, #8
 8008f82:	d10b      	bne.n	8008f9c <_printf_i+0x144>
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	07df      	lsls	r7, r3, #31
 8008f88:	d508      	bpl.n	8008f9c <_printf_i+0x144>
 8008f8a:	6923      	ldr	r3, [r4, #16]
 8008f8c:	6861      	ldr	r1, [r4, #4]
 8008f8e:	4299      	cmp	r1, r3
 8008f90:	bfde      	ittt	le
 8008f92:	2330      	movle	r3, #48	@ 0x30
 8008f94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f9c:	1b92      	subs	r2, r2, r6
 8008f9e:	6122      	str	r2, [r4, #16]
 8008fa0:	f8cd a000 	str.w	sl, [sp]
 8008fa4:	464b      	mov	r3, r9
 8008fa6:	aa03      	add	r2, sp, #12
 8008fa8:	4621      	mov	r1, r4
 8008faa:	4640      	mov	r0, r8
 8008fac:	f7ff fee6 	bl	8008d7c <_printf_common>
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d14a      	bne.n	800904a <_printf_i+0x1f2>
 8008fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb8:	b004      	add	sp, #16
 8008fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	f043 0320 	orr.w	r3, r3, #32
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	4833      	ldr	r0, [pc, #204]	@ (8009094 <_printf_i+0x23c>)
 8008fc8:	2778      	movs	r7, #120	@ 0x78
 8008fca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	6831      	ldr	r1, [r6, #0]
 8008fd2:	061f      	lsls	r7, r3, #24
 8008fd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fd8:	d402      	bmi.n	8008fe0 <_printf_i+0x188>
 8008fda:	065f      	lsls	r7, r3, #25
 8008fdc:	bf48      	it	mi
 8008fde:	b2ad      	uxthmi	r5, r5
 8008fe0:	6031      	str	r1, [r6, #0]
 8008fe2:	07d9      	lsls	r1, r3, #31
 8008fe4:	bf44      	itt	mi
 8008fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8008fea:	6023      	strmi	r3, [r4, #0]
 8008fec:	b11d      	cbz	r5, 8008ff6 <_printf_i+0x19e>
 8008fee:	2310      	movs	r3, #16
 8008ff0:	e7ac      	b.n	8008f4c <_printf_i+0xf4>
 8008ff2:	4827      	ldr	r0, [pc, #156]	@ (8009090 <_printf_i+0x238>)
 8008ff4:	e7e9      	b.n	8008fca <_printf_i+0x172>
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	f023 0320 	bic.w	r3, r3, #32
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	e7f6      	b.n	8008fee <_printf_i+0x196>
 8009000:	4616      	mov	r6, r2
 8009002:	e7bd      	b.n	8008f80 <_printf_i+0x128>
 8009004:	6833      	ldr	r3, [r6, #0]
 8009006:	6825      	ldr	r5, [r4, #0]
 8009008:	6961      	ldr	r1, [r4, #20]
 800900a:	1d18      	adds	r0, r3, #4
 800900c:	6030      	str	r0, [r6, #0]
 800900e:	062e      	lsls	r6, r5, #24
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	d501      	bpl.n	8009018 <_printf_i+0x1c0>
 8009014:	6019      	str	r1, [r3, #0]
 8009016:	e002      	b.n	800901e <_printf_i+0x1c6>
 8009018:	0668      	lsls	r0, r5, #25
 800901a:	d5fb      	bpl.n	8009014 <_printf_i+0x1bc>
 800901c:	8019      	strh	r1, [r3, #0]
 800901e:	2300      	movs	r3, #0
 8009020:	6123      	str	r3, [r4, #16]
 8009022:	4616      	mov	r6, r2
 8009024:	e7bc      	b.n	8008fa0 <_printf_i+0x148>
 8009026:	6833      	ldr	r3, [r6, #0]
 8009028:	1d1a      	adds	r2, r3, #4
 800902a:	6032      	str	r2, [r6, #0]
 800902c:	681e      	ldr	r6, [r3, #0]
 800902e:	6862      	ldr	r2, [r4, #4]
 8009030:	2100      	movs	r1, #0
 8009032:	4630      	mov	r0, r6
 8009034:	f7f7 f8d4 	bl	80001e0 <memchr>
 8009038:	b108      	cbz	r0, 800903e <_printf_i+0x1e6>
 800903a:	1b80      	subs	r0, r0, r6
 800903c:	6060      	str	r0, [r4, #4]
 800903e:	6863      	ldr	r3, [r4, #4]
 8009040:	6123      	str	r3, [r4, #16]
 8009042:	2300      	movs	r3, #0
 8009044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009048:	e7aa      	b.n	8008fa0 <_printf_i+0x148>
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	4632      	mov	r2, r6
 800904e:	4649      	mov	r1, r9
 8009050:	4640      	mov	r0, r8
 8009052:	47d0      	blx	sl
 8009054:	3001      	adds	r0, #1
 8009056:	d0ad      	beq.n	8008fb4 <_printf_i+0x15c>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	079b      	lsls	r3, r3, #30
 800905c:	d413      	bmi.n	8009086 <_printf_i+0x22e>
 800905e:	68e0      	ldr	r0, [r4, #12]
 8009060:	9b03      	ldr	r3, [sp, #12]
 8009062:	4298      	cmp	r0, r3
 8009064:	bfb8      	it	lt
 8009066:	4618      	movlt	r0, r3
 8009068:	e7a6      	b.n	8008fb8 <_printf_i+0x160>
 800906a:	2301      	movs	r3, #1
 800906c:	4632      	mov	r2, r6
 800906e:	4649      	mov	r1, r9
 8009070:	4640      	mov	r0, r8
 8009072:	47d0      	blx	sl
 8009074:	3001      	adds	r0, #1
 8009076:	d09d      	beq.n	8008fb4 <_printf_i+0x15c>
 8009078:	3501      	adds	r5, #1
 800907a:	68e3      	ldr	r3, [r4, #12]
 800907c:	9903      	ldr	r1, [sp, #12]
 800907e:	1a5b      	subs	r3, r3, r1
 8009080:	42ab      	cmp	r3, r5
 8009082:	dcf2      	bgt.n	800906a <_printf_i+0x212>
 8009084:	e7eb      	b.n	800905e <_printf_i+0x206>
 8009086:	2500      	movs	r5, #0
 8009088:	f104 0619 	add.w	r6, r4, #25
 800908c:	e7f5      	b.n	800907a <_printf_i+0x222>
 800908e:	bf00      	nop
 8009090:	0800a6d5 	.word	0x0800a6d5
 8009094:	0800a6e6 	.word	0x0800a6e6

08009098 <__swbuf_r>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	460e      	mov	r6, r1
 800909c:	4614      	mov	r4, r2
 800909e:	4605      	mov	r5, r0
 80090a0:	b118      	cbz	r0, 80090aa <__swbuf_r+0x12>
 80090a2:	6a03      	ldr	r3, [r0, #32]
 80090a4:	b90b      	cbnz	r3, 80090aa <__swbuf_r+0x12>
 80090a6:	f7fd fee3 	bl	8006e70 <__sinit>
 80090aa:	69a3      	ldr	r3, [r4, #24]
 80090ac:	60a3      	str	r3, [r4, #8]
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	071a      	lsls	r2, r3, #28
 80090b2:	d501      	bpl.n	80090b8 <__swbuf_r+0x20>
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	b943      	cbnz	r3, 80090ca <__swbuf_r+0x32>
 80090b8:	4621      	mov	r1, r4
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 f82a 	bl	8009114 <__swsetup_r>
 80090c0:	b118      	cbz	r0, 80090ca <__swbuf_r+0x32>
 80090c2:	f04f 37ff 	mov.w	r7, #4294967295
 80090c6:	4638      	mov	r0, r7
 80090c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	6922      	ldr	r2, [r4, #16]
 80090ce:	1a98      	subs	r0, r3, r2
 80090d0:	6963      	ldr	r3, [r4, #20]
 80090d2:	b2f6      	uxtb	r6, r6
 80090d4:	4283      	cmp	r3, r0
 80090d6:	4637      	mov	r7, r6
 80090d8:	dc05      	bgt.n	80090e6 <__swbuf_r+0x4e>
 80090da:	4621      	mov	r1, r4
 80090dc:	4628      	mov	r0, r5
 80090de:	f7fe fa7f 	bl	80075e0 <_fflush_r>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d1ed      	bne.n	80090c2 <__swbuf_r+0x2a>
 80090e6:	68a3      	ldr	r3, [r4, #8]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	60a3      	str	r3, [r4, #8]
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	1c5a      	adds	r2, r3, #1
 80090f0:	6022      	str	r2, [r4, #0]
 80090f2:	701e      	strb	r6, [r3, #0]
 80090f4:	6962      	ldr	r2, [r4, #20]
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d004      	beq.n	8009106 <__swbuf_r+0x6e>
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	07db      	lsls	r3, r3, #31
 8009100:	d5e1      	bpl.n	80090c6 <__swbuf_r+0x2e>
 8009102:	2e0a      	cmp	r6, #10
 8009104:	d1df      	bne.n	80090c6 <__swbuf_r+0x2e>
 8009106:	4621      	mov	r1, r4
 8009108:	4628      	mov	r0, r5
 800910a:	f7fe fa69 	bl	80075e0 <_fflush_r>
 800910e:	2800      	cmp	r0, #0
 8009110:	d0d9      	beq.n	80090c6 <__swbuf_r+0x2e>
 8009112:	e7d6      	b.n	80090c2 <__swbuf_r+0x2a>

08009114 <__swsetup_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4b29      	ldr	r3, [pc, #164]	@ (80091bc <__swsetup_r+0xa8>)
 8009118:	4605      	mov	r5, r0
 800911a:	6818      	ldr	r0, [r3, #0]
 800911c:	460c      	mov	r4, r1
 800911e:	b118      	cbz	r0, 8009128 <__swsetup_r+0x14>
 8009120:	6a03      	ldr	r3, [r0, #32]
 8009122:	b90b      	cbnz	r3, 8009128 <__swsetup_r+0x14>
 8009124:	f7fd fea4 	bl	8006e70 <__sinit>
 8009128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800912c:	0719      	lsls	r1, r3, #28
 800912e:	d422      	bmi.n	8009176 <__swsetup_r+0x62>
 8009130:	06da      	lsls	r2, r3, #27
 8009132:	d407      	bmi.n	8009144 <__swsetup_r+0x30>
 8009134:	2209      	movs	r2, #9
 8009136:	602a      	str	r2, [r5, #0]
 8009138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800913c:	81a3      	strh	r3, [r4, #12]
 800913e:	f04f 30ff 	mov.w	r0, #4294967295
 8009142:	e033      	b.n	80091ac <__swsetup_r+0x98>
 8009144:	0758      	lsls	r0, r3, #29
 8009146:	d512      	bpl.n	800916e <__swsetup_r+0x5a>
 8009148:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800914a:	b141      	cbz	r1, 800915e <__swsetup_r+0x4a>
 800914c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009150:	4299      	cmp	r1, r3
 8009152:	d002      	beq.n	800915a <__swsetup_r+0x46>
 8009154:	4628      	mov	r0, r5
 8009156:	f7fd ff8f 	bl	8007078 <_free_r>
 800915a:	2300      	movs	r3, #0
 800915c:	6363      	str	r3, [r4, #52]	@ 0x34
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	2300      	movs	r3, #0
 8009168:	6063      	str	r3, [r4, #4]
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	f043 0308 	orr.w	r3, r3, #8
 8009174:	81a3      	strh	r3, [r4, #12]
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	b94b      	cbnz	r3, 800918e <__swsetup_r+0x7a>
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009184:	d003      	beq.n	800918e <__swsetup_r+0x7a>
 8009186:	4621      	mov	r1, r4
 8009188:	4628      	mov	r0, r5
 800918a:	f000 f883 	bl	8009294 <__smakebuf_r>
 800918e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009192:	f013 0201 	ands.w	r2, r3, #1
 8009196:	d00a      	beq.n	80091ae <__swsetup_r+0x9a>
 8009198:	2200      	movs	r2, #0
 800919a:	60a2      	str	r2, [r4, #8]
 800919c:	6962      	ldr	r2, [r4, #20]
 800919e:	4252      	negs	r2, r2
 80091a0:	61a2      	str	r2, [r4, #24]
 80091a2:	6922      	ldr	r2, [r4, #16]
 80091a4:	b942      	cbnz	r2, 80091b8 <__swsetup_r+0xa4>
 80091a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091aa:	d1c5      	bne.n	8009138 <__swsetup_r+0x24>
 80091ac:	bd38      	pop	{r3, r4, r5, pc}
 80091ae:	0799      	lsls	r1, r3, #30
 80091b0:	bf58      	it	pl
 80091b2:	6962      	ldrpl	r2, [r4, #20]
 80091b4:	60a2      	str	r2, [r4, #8]
 80091b6:	e7f4      	b.n	80091a2 <__swsetup_r+0x8e>
 80091b8:	2000      	movs	r0, #0
 80091ba:	e7f7      	b.n	80091ac <__swsetup_r+0x98>
 80091bc:	20000030 	.word	0x20000030

080091c0 <_raise_r>:
 80091c0:	291f      	cmp	r1, #31
 80091c2:	b538      	push	{r3, r4, r5, lr}
 80091c4:	4605      	mov	r5, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	d904      	bls.n	80091d4 <_raise_r+0x14>
 80091ca:	2316      	movs	r3, #22
 80091cc:	6003      	str	r3, [r0, #0]
 80091ce:	f04f 30ff 	mov.w	r0, #4294967295
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091d6:	b112      	cbz	r2, 80091de <_raise_r+0x1e>
 80091d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091dc:	b94b      	cbnz	r3, 80091f2 <_raise_r+0x32>
 80091de:	4628      	mov	r0, r5
 80091e0:	f000 f830 	bl	8009244 <_getpid_r>
 80091e4:	4622      	mov	r2, r4
 80091e6:	4601      	mov	r1, r0
 80091e8:	4628      	mov	r0, r5
 80091ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091ee:	f000 b817 	b.w	8009220 <_kill_r>
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d00a      	beq.n	800920c <_raise_r+0x4c>
 80091f6:	1c59      	adds	r1, r3, #1
 80091f8:	d103      	bne.n	8009202 <_raise_r+0x42>
 80091fa:	2316      	movs	r3, #22
 80091fc:	6003      	str	r3, [r0, #0]
 80091fe:	2001      	movs	r0, #1
 8009200:	e7e7      	b.n	80091d2 <_raise_r+0x12>
 8009202:	2100      	movs	r1, #0
 8009204:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009208:	4620      	mov	r0, r4
 800920a:	4798      	blx	r3
 800920c:	2000      	movs	r0, #0
 800920e:	e7e0      	b.n	80091d2 <_raise_r+0x12>

08009210 <raise>:
 8009210:	4b02      	ldr	r3, [pc, #8]	@ (800921c <raise+0xc>)
 8009212:	4601      	mov	r1, r0
 8009214:	6818      	ldr	r0, [r3, #0]
 8009216:	f7ff bfd3 	b.w	80091c0 <_raise_r>
 800921a:	bf00      	nop
 800921c:	20000030 	.word	0x20000030

08009220 <_kill_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d07      	ldr	r5, [pc, #28]	@ (8009240 <_kill_r+0x20>)
 8009224:	2300      	movs	r3, #0
 8009226:	4604      	mov	r4, r0
 8009228:	4608      	mov	r0, r1
 800922a:	4611      	mov	r1, r2
 800922c:	602b      	str	r3, [r5, #0]
 800922e:	f7f9 fc43 	bl	8002ab8 <_kill>
 8009232:	1c43      	adds	r3, r0, #1
 8009234:	d102      	bne.n	800923c <_kill_r+0x1c>
 8009236:	682b      	ldr	r3, [r5, #0]
 8009238:	b103      	cbz	r3, 800923c <_kill_r+0x1c>
 800923a:	6023      	str	r3, [r4, #0]
 800923c:	bd38      	pop	{r3, r4, r5, pc}
 800923e:	bf00      	nop
 8009240:	200005e4 	.word	0x200005e4

08009244 <_getpid_r>:
 8009244:	f7f9 bc30 	b.w	8002aa8 <_getpid>

08009248 <__swhatbuf_r>:
 8009248:	b570      	push	{r4, r5, r6, lr}
 800924a:	460c      	mov	r4, r1
 800924c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009250:	2900      	cmp	r1, #0
 8009252:	b096      	sub	sp, #88	@ 0x58
 8009254:	4615      	mov	r5, r2
 8009256:	461e      	mov	r6, r3
 8009258:	da0d      	bge.n	8009276 <__swhatbuf_r+0x2e>
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009260:	f04f 0100 	mov.w	r1, #0
 8009264:	bf14      	ite	ne
 8009266:	2340      	movne	r3, #64	@ 0x40
 8009268:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800926c:	2000      	movs	r0, #0
 800926e:	6031      	str	r1, [r6, #0]
 8009270:	602b      	str	r3, [r5, #0]
 8009272:	b016      	add	sp, #88	@ 0x58
 8009274:	bd70      	pop	{r4, r5, r6, pc}
 8009276:	466a      	mov	r2, sp
 8009278:	f000 f848 	bl	800930c <_fstat_r>
 800927c:	2800      	cmp	r0, #0
 800927e:	dbec      	blt.n	800925a <__swhatbuf_r+0x12>
 8009280:	9901      	ldr	r1, [sp, #4]
 8009282:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009286:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800928a:	4259      	negs	r1, r3
 800928c:	4159      	adcs	r1, r3
 800928e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009292:	e7eb      	b.n	800926c <__swhatbuf_r+0x24>

08009294 <__smakebuf_r>:
 8009294:	898b      	ldrh	r3, [r1, #12]
 8009296:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009298:	079d      	lsls	r5, r3, #30
 800929a:	4606      	mov	r6, r0
 800929c:	460c      	mov	r4, r1
 800929e:	d507      	bpl.n	80092b0 <__smakebuf_r+0x1c>
 80092a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	6123      	str	r3, [r4, #16]
 80092a8:	2301      	movs	r3, #1
 80092aa:	6163      	str	r3, [r4, #20]
 80092ac:	b003      	add	sp, #12
 80092ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b0:	ab01      	add	r3, sp, #4
 80092b2:	466a      	mov	r2, sp
 80092b4:	f7ff ffc8 	bl	8009248 <__swhatbuf_r>
 80092b8:	9f00      	ldr	r7, [sp, #0]
 80092ba:	4605      	mov	r5, r0
 80092bc:	4639      	mov	r1, r7
 80092be:	4630      	mov	r0, r6
 80092c0:	f7fd ff46 	bl	8007150 <_malloc_r>
 80092c4:	b948      	cbnz	r0, 80092da <__smakebuf_r+0x46>
 80092c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ca:	059a      	lsls	r2, r3, #22
 80092cc:	d4ee      	bmi.n	80092ac <__smakebuf_r+0x18>
 80092ce:	f023 0303 	bic.w	r3, r3, #3
 80092d2:	f043 0302 	orr.w	r3, r3, #2
 80092d6:	81a3      	strh	r3, [r4, #12]
 80092d8:	e7e2      	b.n	80092a0 <__smakebuf_r+0xc>
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	6020      	str	r0, [r4, #0]
 80092de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092e2:	81a3      	strh	r3, [r4, #12]
 80092e4:	9b01      	ldr	r3, [sp, #4]
 80092e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092ea:	b15b      	cbz	r3, 8009304 <__smakebuf_r+0x70>
 80092ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092f0:	4630      	mov	r0, r6
 80092f2:	f000 f81d 	bl	8009330 <_isatty_r>
 80092f6:	b128      	cbz	r0, 8009304 <__smakebuf_r+0x70>
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	f023 0303 	bic.w	r3, r3, #3
 80092fe:	f043 0301 	orr.w	r3, r3, #1
 8009302:	81a3      	strh	r3, [r4, #12]
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	431d      	orrs	r5, r3
 8009308:	81a5      	strh	r5, [r4, #12]
 800930a:	e7cf      	b.n	80092ac <__smakebuf_r+0x18>

0800930c <_fstat_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	4d07      	ldr	r5, [pc, #28]	@ (800932c <_fstat_r+0x20>)
 8009310:	2300      	movs	r3, #0
 8009312:	4604      	mov	r4, r0
 8009314:	4608      	mov	r0, r1
 8009316:	4611      	mov	r1, r2
 8009318:	602b      	str	r3, [r5, #0]
 800931a:	f7f9 fc2d 	bl	8002b78 <_fstat>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	d102      	bne.n	8009328 <_fstat_r+0x1c>
 8009322:	682b      	ldr	r3, [r5, #0]
 8009324:	b103      	cbz	r3, 8009328 <_fstat_r+0x1c>
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	bd38      	pop	{r3, r4, r5, pc}
 800932a:	bf00      	nop
 800932c:	200005e4 	.word	0x200005e4

08009330 <_isatty_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	4d06      	ldr	r5, [pc, #24]	@ (800934c <_isatty_r+0x1c>)
 8009334:	2300      	movs	r3, #0
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	602b      	str	r3, [r5, #0]
 800933c:	f7f9 fc2c 	bl	8002b98 <_isatty>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_isatty_r+0x1a>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	b103      	cbz	r3, 800934a <_isatty_r+0x1a>
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	200005e4 	.word	0x200005e4

08009350 <cos>:
 8009350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009352:	ec53 2b10 	vmov	r2, r3, d0
 8009356:	4826      	ldr	r0, [pc, #152]	@ (80093f0 <cos+0xa0>)
 8009358:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800935c:	4281      	cmp	r1, r0
 800935e:	d806      	bhi.n	800936e <cos+0x1e>
 8009360:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80093e8 <cos+0x98>
 8009364:	b005      	add	sp, #20
 8009366:	f85d eb04 	ldr.w	lr, [sp], #4
 800936a:	f000 b899 	b.w	80094a0 <__kernel_cos>
 800936e:	4821      	ldr	r0, [pc, #132]	@ (80093f4 <cos+0xa4>)
 8009370:	4281      	cmp	r1, r0
 8009372:	d908      	bls.n	8009386 <cos+0x36>
 8009374:	4610      	mov	r0, r2
 8009376:	4619      	mov	r1, r3
 8009378:	f7f6 ff86 	bl	8000288 <__aeabi_dsub>
 800937c:	ec41 0b10 	vmov	d0, r0, r1
 8009380:	b005      	add	sp, #20
 8009382:	f85d fb04 	ldr.w	pc, [sp], #4
 8009386:	4668      	mov	r0, sp
 8009388:	f000 fa0e 	bl	80097a8 <__ieee754_rem_pio2>
 800938c:	f000 0003 	and.w	r0, r0, #3
 8009390:	2801      	cmp	r0, #1
 8009392:	d00b      	beq.n	80093ac <cos+0x5c>
 8009394:	2802      	cmp	r0, #2
 8009396:	d015      	beq.n	80093c4 <cos+0x74>
 8009398:	b9d8      	cbnz	r0, 80093d2 <cos+0x82>
 800939a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800939e:	ed9d 0b00 	vldr	d0, [sp]
 80093a2:	f000 f87d 	bl	80094a0 <__kernel_cos>
 80093a6:	ec51 0b10 	vmov	r0, r1, d0
 80093aa:	e7e7      	b.n	800937c <cos+0x2c>
 80093ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093b0:	ed9d 0b00 	vldr	d0, [sp]
 80093b4:	f000 f93c 	bl	8009630 <__kernel_sin>
 80093b8:	ec53 2b10 	vmov	r2, r3, d0
 80093bc:	4610      	mov	r0, r2
 80093be:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80093c2:	e7db      	b.n	800937c <cos+0x2c>
 80093c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093c8:	ed9d 0b00 	vldr	d0, [sp]
 80093cc:	f000 f868 	bl	80094a0 <__kernel_cos>
 80093d0:	e7f2      	b.n	80093b8 <cos+0x68>
 80093d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093d6:	ed9d 0b00 	vldr	d0, [sp]
 80093da:	2001      	movs	r0, #1
 80093dc:	f000 f928 	bl	8009630 <__kernel_sin>
 80093e0:	e7e1      	b.n	80093a6 <cos+0x56>
 80093e2:	bf00      	nop
 80093e4:	f3af 8000 	nop.w
	...
 80093f0:	3fe921fb 	.word	0x3fe921fb
 80093f4:	7fefffff 	.word	0x7fefffff

080093f8 <sin>:
 80093f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093fa:	ec53 2b10 	vmov	r2, r3, d0
 80093fe:	4826      	ldr	r0, [pc, #152]	@ (8009498 <sin+0xa0>)
 8009400:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009404:	4281      	cmp	r1, r0
 8009406:	d807      	bhi.n	8009418 <sin+0x20>
 8009408:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8009490 <sin+0x98>
 800940c:	2000      	movs	r0, #0
 800940e:	b005      	add	sp, #20
 8009410:	f85d eb04 	ldr.w	lr, [sp], #4
 8009414:	f000 b90c 	b.w	8009630 <__kernel_sin>
 8009418:	4820      	ldr	r0, [pc, #128]	@ (800949c <sin+0xa4>)
 800941a:	4281      	cmp	r1, r0
 800941c:	d908      	bls.n	8009430 <sin+0x38>
 800941e:	4610      	mov	r0, r2
 8009420:	4619      	mov	r1, r3
 8009422:	f7f6 ff31 	bl	8000288 <__aeabi_dsub>
 8009426:	ec41 0b10 	vmov	d0, r0, r1
 800942a:	b005      	add	sp, #20
 800942c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009430:	4668      	mov	r0, sp
 8009432:	f000 f9b9 	bl	80097a8 <__ieee754_rem_pio2>
 8009436:	f000 0003 	and.w	r0, r0, #3
 800943a:	2801      	cmp	r0, #1
 800943c:	d00c      	beq.n	8009458 <sin+0x60>
 800943e:	2802      	cmp	r0, #2
 8009440:	d011      	beq.n	8009466 <sin+0x6e>
 8009442:	b9e8      	cbnz	r0, 8009480 <sin+0x88>
 8009444:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009448:	ed9d 0b00 	vldr	d0, [sp]
 800944c:	2001      	movs	r0, #1
 800944e:	f000 f8ef 	bl	8009630 <__kernel_sin>
 8009452:	ec51 0b10 	vmov	r0, r1, d0
 8009456:	e7e6      	b.n	8009426 <sin+0x2e>
 8009458:	ed9d 1b02 	vldr	d1, [sp, #8]
 800945c:	ed9d 0b00 	vldr	d0, [sp]
 8009460:	f000 f81e 	bl	80094a0 <__kernel_cos>
 8009464:	e7f5      	b.n	8009452 <sin+0x5a>
 8009466:	ed9d 1b02 	vldr	d1, [sp, #8]
 800946a:	ed9d 0b00 	vldr	d0, [sp]
 800946e:	2001      	movs	r0, #1
 8009470:	f000 f8de 	bl	8009630 <__kernel_sin>
 8009474:	ec53 2b10 	vmov	r2, r3, d0
 8009478:	4610      	mov	r0, r2
 800947a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800947e:	e7d2      	b.n	8009426 <sin+0x2e>
 8009480:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009484:	ed9d 0b00 	vldr	d0, [sp]
 8009488:	f000 f80a 	bl	80094a0 <__kernel_cos>
 800948c:	e7f2      	b.n	8009474 <sin+0x7c>
 800948e:	bf00      	nop
	...
 8009498:	3fe921fb 	.word	0x3fe921fb
 800949c:	7fefffff 	.word	0x7fefffff

080094a0 <__kernel_cos>:
 80094a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	ec57 6b10 	vmov	r6, r7, d0
 80094a8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80094ac:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80094b0:	ed8d 1b00 	vstr	d1, [sp]
 80094b4:	d206      	bcs.n	80094c4 <__kernel_cos+0x24>
 80094b6:	4630      	mov	r0, r6
 80094b8:	4639      	mov	r1, r7
 80094ba:	f7f7 fb37 	bl	8000b2c <__aeabi_d2iz>
 80094be:	2800      	cmp	r0, #0
 80094c0:	f000 8088 	beq.w	80095d4 <__kernel_cos+0x134>
 80094c4:	4632      	mov	r2, r6
 80094c6:	463b      	mov	r3, r7
 80094c8:	4630      	mov	r0, r6
 80094ca:	4639      	mov	r1, r7
 80094cc:	f7f7 f894 	bl	80005f8 <__aeabi_dmul>
 80094d0:	4b51      	ldr	r3, [pc, #324]	@ (8009618 <__kernel_cos+0x178>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	4604      	mov	r4, r0
 80094d6:	460d      	mov	r5, r1
 80094d8:	f7f7 f88e 	bl	80005f8 <__aeabi_dmul>
 80094dc:	a340      	add	r3, pc, #256	@ (adr r3, 80095e0 <__kernel_cos+0x140>)
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	4682      	mov	sl, r0
 80094e4:	468b      	mov	fp, r1
 80094e6:	4620      	mov	r0, r4
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7f7 f885 	bl	80005f8 <__aeabi_dmul>
 80094ee:	a33e      	add	r3, pc, #248	@ (adr r3, 80095e8 <__kernel_cos+0x148>)
 80094f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f4:	f7f6 feca 	bl	800028c <__adddf3>
 80094f8:	4622      	mov	r2, r4
 80094fa:	462b      	mov	r3, r5
 80094fc:	f7f7 f87c 	bl	80005f8 <__aeabi_dmul>
 8009500:	a33b      	add	r3, pc, #236	@ (adr r3, 80095f0 <__kernel_cos+0x150>)
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	f7f6 febf 	bl	8000288 <__aeabi_dsub>
 800950a:	4622      	mov	r2, r4
 800950c:	462b      	mov	r3, r5
 800950e:	f7f7 f873 	bl	80005f8 <__aeabi_dmul>
 8009512:	a339      	add	r3, pc, #228	@ (adr r3, 80095f8 <__kernel_cos+0x158>)
 8009514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009518:	f7f6 feb8 	bl	800028c <__adddf3>
 800951c:	4622      	mov	r2, r4
 800951e:	462b      	mov	r3, r5
 8009520:	f7f7 f86a 	bl	80005f8 <__aeabi_dmul>
 8009524:	a336      	add	r3, pc, #216	@ (adr r3, 8009600 <__kernel_cos+0x160>)
 8009526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952a:	f7f6 fead 	bl	8000288 <__aeabi_dsub>
 800952e:	4622      	mov	r2, r4
 8009530:	462b      	mov	r3, r5
 8009532:	f7f7 f861 	bl	80005f8 <__aeabi_dmul>
 8009536:	a334      	add	r3, pc, #208	@ (adr r3, 8009608 <__kernel_cos+0x168>)
 8009538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953c:	f7f6 fea6 	bl	800028c <__adddf3>
 8009540:	4622      	mov	r2, r4
 8009542:	462b      	mov	r3, r5
 8009544:	f7f7 f858 	bl	80005f8 <__aeabi_dmul>
 8009548:	4622      	mov	r2, r4
 800954a:	462b      	mov	r3, r5
 800954c:	f7f7 f854 	bl	80005f8 <__aeabi_dmul>
 8009550:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009554:	4604      	mov	r4, r0
 8009556:	460d      	mov	r5, r1
 8009558:	4630      	mov	r0, r6
 800955a:	4639      	mov	r1, r7
 800955c:	f7f7 f84c 	bl	80005f8 <__aeabi_dmul>
 8009560:	460b      	mov	r3, r1
 8009562:	4602      	mov	r2, r0
 8009564:	4629      	mov	r1, r5
 8009566:	4620      	mov	r0, r4
 8009568:	f7f6 fe8e 	bl	8000288 <__aeabi_dsub>
 800956c:	4b2b      	ldr	r3, [pc, #172]	@ (800961c <__kernel_cos+0x17c>)
 800956e:	4598      	cmp	r8, r3
 8009570:	4606      	mov	r6, r0
 8009572:	460f      	mov	r7, r1
 8009574:	d810      	bhi.n	8009598 <__kernel_cos+0xf8>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4650      	mov	r0, sl
 800957c:	4659      	mov	r1, fp
 800957e:	f7f6 fe83 	bl	8000288 <__aeabi_dsub>
 8009582:	460b      	mov	r3, r1
 8009584:	4926      	ldr	r1, [pc, #152]	@ (8009620 <__kernel_cos+0x180>)
 8009586:	4602      	mov	r2, r0
 8009588:	2000      	movs	r0, #0
 800958a:	f7f6 fe7d 	bl	8000288 <__aeabi_dsub>
 800958e:	ec41 0b10 	vmov	d0, r0, r1
 8009592:	b003      	add	sp, #12
 8009594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009598:	4b22      	ldr	r3, [pc, #136]	@ (8009624 <__kernel_cos+0x184>)
 800959a:	4921      	ldr	r1, [pc, #132]	@ (8009620 <__kernel_cos+0x180>)
 800959c:	4598      	cmp	r8, r3
 800959e:	bf8c      	ite	hi
 80095a0:	4d21      	ldrhi	r5, [pc, #132]	@ (8009628 <__kernel_cos+0x188>)
 80095a2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80095a6:	2400      	movs	r4, #0
 80095a8:	4622      	mov	r2, r4
 80095aa:	462b      	mov	r3, r5
 80095ac:	2000      	movs	r0, #0
 80095ae:	f7f6 fe6b 	bl	8000288 <__aeabi_dsub>
 80095b2:	4622      	mov	r2, r4
 80095b4:	4680      	mov	r8, r0
 80095b6:	4689      	mov	r9, r1
 80095b8:	462b      	mov	r3, r5
 80095ba:	4650      	mov	r0, sl
 80095bc:	4659      	mov	r1, fp
 80095be:	f7f6 fe63 	bl	8000288 <__aeabi_dsub>
 80095c2:	4632      	mov	r2, r6
 80095c4:	463b      	mov	r3, r7
 80095c6:	f7f6 fe5f 	bl	8000288 <__aeabi_dsub>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	4640      	mov	r0, r8
 80095d0:	4649      	mov	r1, r9
 80095d2:	e7da      	b.n	800958a <__kernel_cos+0xea>
 80095d4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8009610 <__kernel_cos+0x170>
 80095d8:	e7db      	b.n	8009592 <__kernel_cos+0xf2>
 80095da:	bf00      	nop
 80095dc:	f3af 8000 	nop.w
 80095e0:	be8838d4 	.word	0xbe8838d4
 80095e4:	bda8fae9 	.word	0xbda8fae9
 80095e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80095ec:	3e21ee9e 	.word	0x3e21ee9e
 80095f0:	809c52ad 	.word	0x809c52ad
 80095f4:	3e927e4f 	.word	0x3e927e4f
 80095f8:	19cb1590 	.word	0x19cb1590
 80095fc:	3efa01a0 	.word	0x3efa01a0
 8009600:	16c15177 	.word	0x16c15177
 8009604:	3f56c16c 	.word	0x3f56c16c
 8009608:	5555554c 	.word	0x5555554c
 800960c:	3fa55555 	.word	0x3fa55555
 8009610:	00000000 	.word	0x00000000
 8009614:	3ff00000 	.word	0x3ff00000
 8009618:	3fe00000 	.word	0x3fe00000
 800961c:	3fd33332 	.word	0x3fd33332
 8009620:	3ff00000 	.word	0x3ff00000
 8009624:	3fe90000 	.word	0x3fe90000
 8009628:	3fd20000 	.word	0x3fd20000
 800962c:	00000000 	.word	0x00000000

08009630 <__kernel_sin>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	ec55 4b10 	vmov	r4, r5, d0
 8009638:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800963c:	b085      	sub	sp, #20
 800963e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009642:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009646:	4680      	mov	r8, r0
 8009648:	d205      	bcs.n	8009656 <__kernel_sin+0x26>
 800964a:	4620      	mov	r0, r4
 800964c:	4629      	mov	r1, r5
 800964e:	f7f7 fa6d 	bl	8000b2c <__aeabi_d2iz>
 8009652:	2800      	cmp	r0, #0
 8009654:	d052      	beq.n	80096fc <__kernel_sin+0xcc>
 8009656:	4622      	mov	r2, r4
 8009658:	462b      	mov	r3, r5
 800965a:	4620      	mov	r0, r4
 800965c:	4629      	mov	r1, r5
 800965e:	f7f6 ffcb 	bl	80005f8 <__aeabi_dmul>
 8009662:	4682      	mov	sl, r0
 8009664:	468b      	mov	fp, r1
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	4620      	mov	r0, r4
 800966c:	4629      	mov	r1, r5
 800966e:	f7f6 ffc3 	bl	80005f8 <__aeabi_dmul>
 8009672:	a342      	add	r3, pc, #264	@ (adr r3, 800977c <__kernel_sin+0x14c>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	e9cd 0100 	strd	r0, r1, [sp]
 800967c:	4650      	mov	r0, sl
 800967e:	4659      	mov	r1, fp
 8009680:	f7f6 ffba 	bl	80005f8 <__aeabi_dmul>
 8009684:	a33f      	add	r3, pc, #252	@ (adr r3, 8009784 <__kernel_sin+0x154>)
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	f7f6 fdfd 	bl	8000288 <__aeabi_dsub>
 800968e:	4652      	mov	r2, sl
 8009690:	465b      	mov	r3, fp
 8009692:	f7f6 ffb1 	bl	80005f8 <__aeabi_dmul>
 8009696:	a33d      	add	r3, pc, #244	@ (adr r3, 800978c <__kernel_sin+0x15c>)
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	f7f6 fdf6 	bl	800028c <__adddf3>
 80096a0:	4652      	mov	r2, sl
 80096a2:	465b      	mov	r3, fp
 80096a4:	f7f6 ffa8 	bl	80005f8 <__aeabi_dmul>
 80096a8:	a33a      	add	r3, pc, #232	@ (adr r3, 8009794 <__kernel_sin+0x164>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f7f6 fdeb 	bl	8000288 <__aeabi_dsub>
 80096b2:	4652      	mov	r2, sl
 80096b4:	465b      	mov	r3, fp
 80096b6:	f7f6 ff9f 	bl	80005f8 <__aeabi_dmul>
 80096ba:	a338      	add	r3, pc, #224	@ (adr r3, 800979c <__kernel_sin+0x16c>)
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	f7f6 fde4 	bl	800028c <__adddf3>
 80096c4:	4606      	mov	r6, r0
 80096c6:	460f      	mov	r7, r1
 80096c8:	f1b8 0f00 	cmp.w	r8, #0
 80096cc:	d11b      	bne.n	8009706 <__kernel_sin+0xd6>
 80096ce:	4602      	mov	r2, r0
 80096d0:	460b      	mov	r3, r1
 80096d2:	4650      	mov	r0, sl
 80096d4:	4659      	mov	r1, fp
 80096d6:	f7f6 ff8f 	bl	80005f8 <__aeabi_dmul>
 80096da:	a325      	add	r3, pc, #148	@ (adr r3, 8009770 <__kernel_sin+0x140>)
 80096dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e0:	f7f6 fdd2 	bl	8000288 <__aeabi_dsub>
 80096e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096e8:	f7f6 ff86 	bl	80005f8 <__aeabi_dmul>
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	4620      	mov	r0, r4
 80096f2:	4629      	mov	r1, r5
 80096f4:	f7f6 fdca 	bl	800028c <__adddf3>
 80096f8:	4604      	mov	r4, r0
 80096fa:	460d      	mov	r5, r1
 80096fc:	ec45 4b10 	vmov	d0, r4, r5
 8009700:	b005      	add	sp, #20
 8009702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800970a:	4b1b      	ldr	r3, [pc, #108]	@ (8009778 <__kernel_sin+0x148>)
 800970c:	2200      	movs	r2, #0
 800970e:	f7f6 ff73 	bl	80005f8 <__aeabi_dmul>
 8009712:	4632      	mov	r2, r6
 8009714:	4680      	mov	r8, r0
 8009716:	4689      	mov	r9, r1
 8009718:	463b      	mov	r3, r7
 800971a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800971e:	f7f6 ff6b 	bl	80005f8 <__aeabi_dmul>
 8009722:	4602      	mov	r2, r0
 8009724:	460b      	mov	r3, r1
 8009726:	4640      	mov	r0, r8
 8009728:	4649      	mov	r1, r9
 800972a:	f7f6 fdad 	bl	8000288 <__aeabi_dsub>
 800972e:	4652      	mov	r2, sl
 8009730:	465b      	mov	r3, fp
 8009732:	f7f6 ff61 	bl	80005f8 <__aeabi_dmul>
 8009736:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800973a:	f7f6 fda5 	bl	8000288 <__aeabi_dsub>
 800973e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009770 <__kernel_sin+0x140>)
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	4606      	mov	r6, r0
 8009746:	460f      	mov	r7, r1
 8009748:	e9dd 0100 	ldrd	r0, r1, [sp]
 800974c:	f7f6 ff54 	bl	80005f8 <__aeabi_dmul>
 8009750:	4602      	mov	r2, r0
 8009752:	460b      	mov	r3, r1
 8009754:	4630      	mov	r0, r6
 8009756:	4639      	mov	r1, r7
 8009758:	f7f6 fd98 	bl	800028c <__adddf3>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	4620      	mov	r0, r4
 8009762:	4629      	mov	r1, r5
 8009764:	f7f6 fd90 	bl	8000288 <__aeabi_dsub>
 8009768:	e7c6      	b.n	80096f8 <__kernel_sin+0xc8>
 800976a:	bf00      	nop
 800976c:	f3af 8000 	nop.w
 8009770:	55555549 	.word	0x55555549
 8009774:	3fc55555 	.word	0x3fc55555
 8009778:	3fe00000 	.word	0x3fe00000
 800977c:	5acfd57c 	.word	0x5acfd57c
 8009780:	3de5d93a 	.word	0x3de5d93a
 8009784:	8a2b9ceb 	.word	0x8a2b9ceb
 8009788:	3e5ae5e6 	.word	0x3e5ae5e6
 800978c:	57b1fe7d 	.word	0x57b1fe7d
 8009790:	3ec71de3 	.word	0x3ec71de3
 8009794:	19c161d5 	.word	0x19c161d5
 8009798:	3f2a01a0 	.word	0x3f2a01a0
 800979c:	1110f8a6 	.word	0x1110f8a6
 80097a0:	3f811111 	.word	0x3f811111
 80097a4:	00000000 	.word	0x00000000

080097a8 <__ieee754_rem_pio2>:
 80097a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ac:	ec57 6b10 	vmov	r6, r7, d0
 80097b0:	4bc5      	ldr	r3, [pc, #788]	@ (8009ac8 <__ieee754_rem_pio2+0x320>)
 80097b2:	b08d      	sub	sp, #52	@ 0x34
 80097b4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80097b8:	4598      	cmp	r8, r3
 80097ba:	4604      	mov	r4, r0
 80097bc:	9704      	str	r7, [sp, #16]
 80097be:	d807      	bhi.n	80097d0 <__ieee754_rem_pio2+0x28>
 80097c0:	2200      	movs	r2, #0
 80097c2:	2300      	movs	r3, #0
 80097c4:	ed80 0b00 	vstr	d0, [r0]
 80097c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80097cc:	2500      	movs	r5, #0
 80097ce:	e028      	b.n	8009822 <__ieee754_rem_pio2+0x7a>
 80097d0:	4bbe      	ldr	r3, [pc, #760]	@ (8009acc <__ieee754_rem_pio2+0x324>)
 80097d2:	4598      	cmp	r8, r3
 80097d4:	d878      	bhi.n	80098c8 <__ieee754_rem_pio2+0x120>
 80097d6:	9b04      	ldr	r3, [sp, #16]
 80097d8:	4dbd      	ldr	r5, [pc, #756]	@ (8009ad0 <__ieee754_rem_pio2+0x328>)
 80097da:	2b00      	cmp	r3, #0
 80097dc:	4630      	mov	r0, r6
 80097de:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009a90 <__ieee754_rem_pio2+0x2e8>)
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	4639      	mov	r1, r7
 80097e6:	dd38      	ble.n	800985a <__ieee754_rem_pio2+0xb2>
 80097e8:	f7f6 fd4e 	bl	8000288 <__aeabi_dsub>
 80097ec:	45a8      	cmp	r8, r5
 80097ee:	4606      	mov	r6, r0
 80097f0:	460f      	mov	r7, r1
 80097f2:	d01a      	beq.n	800982a <__ieee754_rem_pio2+0x82>
 80097f4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009a98 <__ieee754_rem_pio2+0x2f0>)
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	f7f6 fd45 	bl	8000288 <__aeabi_dsub>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4680      	mov	r8, r0
 8009804:	4689      	mov	r9, r1
 8009806:	4630      	mov	r0, r6
 8009808:	4639      	mov	r1, r7
 800980a:	f7f6 fd3d 	bl	8000288 <__aeabi_dsub>
 800980e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009a98 <__ieee754_rem_pio2+0x2f0>)
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f7f6 fd38 	bl	8000288 <__aeabi_dsub>
 8009818:	e9c4 8900 	strd	r8, r9, [r4]
 800981c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009820:	2501      	movs	r5, #1
 8009822:	4628      	mov	r0, r5
 8009824:	b00d      	add	sp, #52	@ 0x34
 8009826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982a:	a39d      	add	r3, pc, #628	@ (adr r3, 8009aa0 <__ieee754_rem_pio2+0x2f8>)
 800982c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009830:	f7f6 fd2a 	bl	8000288 <__aeabi_dsub>
 8009834:	a39c      	add	r3, pc, #624	@ (adr r3, 8009aa8 <__ieee754_rem_pio2+0x300>)
 8009836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983a:	4606      	mov	r6, r0
 800983c:	460f      	mov	r7, r1
 800983e:	f7f6 fd23 	bl	8000288 <__aeabi_dsub>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4680      	mov	r8, r0
 8009848:	4689      	mov	r9, r1
 800984a:	4630      	mov	r0, r6
 800984c:	4639      	mov	r1, r7
 800984e:	f7f6 fd1b 	bl	8000288 <__aeabi_dsub>
 8009852:	a395      	add	r3, pc, #596	@ (adr r3, 8009aa8 <__ieee754_rem_pio2+0x300>)
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	e7dc      	b.n	8009814 <__ieee754_rem_pio2+0x6c>
 800985a:	f7f6 fd17 	bl	800028c <__adddf3>
 800985e:	45a8      	cmp	r8, r5
 8009860:	4606      	mov	r6, r0
 8009862:	460f      	mov	r7, r1
 8009864:	d018      	beq.n	8009898 <__ieee754_rem_pio2+0xf0>
 8009866:	a38c      	add	r3, pc, #560	@ (adr r3, 8009a98 <__ieee754_rem_pio2+0x2f0>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f7f6 fd0e 	bl	800028c <__adddf3>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	4680      	mov	r8, r0
 8009876:	4689      	mov	r9, r1
 8009878:	4630      	mov	r0, r6
 800987a:	4639      	mov	r1, r7
 800987c:	f7f6 fd04 	bl	8000288 <__aeabi_dsub>
 8009880:	a385      	add	r3, pc, #532	@ (adr r3, 8009a98 <__ieee754_rem_pio2+0x2f0>)
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	f7f6 fd01 	bl	800028c <__adddf3>
 800988a:	f04f 35ff 	mov.w	r5, #4294967295
 800988e:	e9c4 8900 	strd	r8, r9, [r4]
 8009892:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009896:	e7c4      	b.n	8009822 <__ieee754_rem_pio2+0x7a>
 8009898:	a381      	add	r3, pc, #516	@ (adr r3, 8009aa0 <__ieee754_rem_pio2+0x2f8>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f7f6 fcf5 	bl	800028c <__adddf3>
 80098a2:	a381      	add	r3, pc, #516	@ (adr r3, 8009aa8 <__ieee754_rem_pio2+0x300>)
 80098a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a8:	4606      	mov	r6, r0
 80098aa:	460f      	mov	r7, r1
 80098ac:	f7f6 fcee 	bl	800028c <__adddf3>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4680      	mov	r8, r0
 80098b6:	4689      	mov	r9, r1
 80098b8:	4630      	mov	r0, r6
 80098ba:	4639      	mov	r1, r7
 80098bc:	f7f6 fce4 	bl	8000288 <__aeabi_dsub>
 80098c0:	a379      	add	r3, pc, #484	@ (adr r3, 8009aa8 <__ieee754_rem_pio2+0x300>)
 80098c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c6:	e7de      	b.n	8009886 <__ieee754_rem_pio2+0xde>
 80098c8:	4b82      	ldr	r3, [pc, #520]	@ (8009ad4 <__ieee754_rem_pio2+0x32c>)
 80098ca:	4598      	cmp	r8, r3
 80098cc:	f200 80d1 	bhi.w	8009a72 <__ieee754_rem_pio2+0x2ca>
 80098d0:	f000 f966 	bl	8009ba0 <fabs>
 80098d4:	ec57 6b10 	vmov	r6, r7, d0
 80098d8:	a375      	add	r3, pc, #468	@ (adr r3, 8009ab0 <__ieee754_rem_pio2+0x308>)
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	4630      	mov	r0, r6
 80098e0:	4639      	mov	r1, r7
 80098e2:	f7f6 fe89 	bl	80005f8 <__aeabi_dmul>
 80098e6:	4b7c      	ldr	r3, [pc, #496]	@ (8009ad8 <__ieee754_rem_pio2+0x330>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	f7f6 fccf 	bl	800028c <__adddf3>
 80098ee:	f7f7 f91d 	bl	8000b2c <__aeabi_d2iz>
 80098f2:	4605      	mov	r5, r0
 80098f4:	f7f6 fe16 	bl	8000524 <__aeabi_i2d>
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009900:	a363      	add	r3, pc, #396	@ (adr r3, 8009a90 <__ieee754_rem_pio2+0x2e8>)
 8009902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009906:	f7f6 fe77 	bl	80005f8 <__aeabi_dmul>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4630      	mov	r0, r6
 8009910:	4639      	mov	r1, r7
 8009912:	f7f6 fcb9 	bl	8000288 <__aeabi_dsub>
 8009916:	a360      	add	r3, pc, #384	@ (adr r3, 8009a98 <__ieee754_rem_pio2+0x2f0>)
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	4682      	mov	sl, r0
 800991e:	468b      	mov	fp, r1
 8009920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009924:	f7f6 fe68 	bl	80005f8 <__aeabi_dmul>
 8009928:	2d1f      	cmp	r5, #31
 800992a:	4606      	mov	r6, r0
 800992c:	460f      	mov	r7, r1
 800992e:	dc0c      	bgt.n	800994a <__ieee754_rem_pio2+0x1a2>
 8009930:	4b6a      	ldr	r3, [pc, #424]	@ (8009adc <__ieee754_rem_pio2+0x334>)
 8009932:	1e6a      	subs	r2, r5, #1
 8009934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009938:	4543      	cmp	r3, r8
 800993a:	d006      	beq.n	800994a <__ieee754_rem_pio2+0x1a2>
 800993c:	4632      	mov	r2, r6
 800993e:	463b      	mov	r3, r7
 8009940:	4650      	mov	r0, sl
 8009942:	4659      	mov	r1, fp
 8009944:	f7f6 fca0 	bl	8000288 <__aeabi_dsub>
 8009948:	e00e      	b.n	8009968 <__ieee754_rem_pio2+0x1c0>
 800994a:	463b      	mov	r3, r7
 800994c:	4632      	mov	r2, r6
 800994e:	4650      	mov	r0, sl
 8009950:	4659      	mov	r1, fp
 8009952:	f7f6 fc99 	bl	8000288 <__aeabi_dsub>
 8009956:	ea4f 5328 	mov.w	r3, r8, asr #20
 800995a:	9305      	str	r3, [sp, #20]
 800995c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009960:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009964:	2b10      	cmp	r3, #16
 8009966:	dc02      	bgt.n	800996e <__ieee754_rem_pio2+0x1c6>
 8009968:	e9c4 0100 	strd	r0, r1, [r4]
 800996c:	e039      	b.n	80099e2 <__ieee754_rem_pio2+0x23a>
 800996e:	a34c      	add	r3, pc, #304	@ (adr r3, 8009aa0 <__ieee754_rem_pio2+0x2f8>)
 8009970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009978:	f7f6 fe3e 	bl	80005f8 <__aeabi_dmul>
 800997c:	4606      	mov	r6, r0
 800997e:	460f      	mov	r7, r1
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4650      	mov	r0, sl
 8009986:	4659      	mov	r1, fp
 8009988:	f7f6 fc7e 	bl	8000288 <__aeabi_dsub>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	4680      	mov	r8, r0
 8009992:	4689      	mov	r9, r1
 8009994:	4650      	mov	r0, sl
 8009996:	4659      	mov	r1, fp
 8009998:	f7f6 fc76 	bl	8000288 <__aeabi_dsub>
 800999c:	4632      	mov	r2, r6
 800999e:	463b      	mov	r3, r7
 80099a0:	f7f6 fc72 	bl	8000288 <__aeabi_dsub>
 80099a4:	a340      	add	r3, pc, #256	@ (adr r3, 8009aa8 <__ieee754_rem_pio2+0x300>)
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	4606      	mov	r6, r0
 80099ac:	460f      	mov	r7, r1
 80099ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099b2:	f7f6 fe21 	bl	80005f8 <__aeabi_dmul>
 80099b6:	4632      	mov	r2, r6
 80099b8:	463b      	mov	r3, r7
 80099ba:	f7f6 fc65 	bl	8000288 <__aeabi_dsub>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	4606      	mov	r6, r0
 80099c4:	460f      	mov	r7, r1
 80099c6:	4640      	mov	r0, r8
 80099c8:	4649      	mov	r1, r9
 80099ca:	f7f6 fc5d 	bl	8000288 <__aeabi_dsub>
 80099ce:	9a05      	ldr	r2, [sp, #20]
 80099d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	2b31      	cmp	r3, #49	@ 0x31
 80099d8:	dc20      	bgt.n	8009a1c <__ieee754_rem_pio2+0x274>
 80099da:	e9c4 0100 	strd	r0, r1, [r4]
 80099de:	46c2      	mov	sl, r8
 80099e0:	46cb      	mov	fp, r9
 80099e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80099e6:	4650      	mov	r0, sl
 80099e8:	4642      	mov	r2, r8
 80099ea:	464b      	mov	r3, r9
 80099ec:	4659      	mov	r1, fp
 80099ee:	f7f6 fc4b 	bl	8000288 <__aeabi_dsub>
 80099f2:	463b      	mov	r3, r7
 80099f4:	4632      	mov	r2, r6
 80099f6:	f7f6 fc47 	bl	8000288 <__aeabi_dsub>
 80099fa:	9b04      	ldr	r3, [sp, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a02:	f6bf af0e 	bge.w	8009822 <__ieee754_rem_pio2+0x7a>
 8009a06:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8009a0a:	6063      	str	r3, [r4, #4]
 8009a0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a10:	f8c4 8000 	str.w	r8, [r4]
 8009a14:	60a0      	str	r0, [r4, #8]
 8009a16:	60e3      	str	r3, [r4, #12]
 8009a18:	426d      	negs	r5, r5
 8009a1a:	e702      	b.n	8009822 <__ieee754_rem_pio2+0x7a>
 8009a1c:	a326      	add	r3, pc, #152	@ (adr r3, 8009ab8 <__ieee754_rem_pio2+0x310>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a26:	f7f6 fde7 	bl	80005f8 <__aeabi_dmul>
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	4640      	mov	r0, r8
 8009a34:	4649      	mov	r1, r9
 8009a36:	f7f6 fc27 	bl	8000288 <__aeabi_dsub>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4682      	mov	sl, r0
 8009a40:	468b      	mov	fp, r1
 8009a42:	4640      	mov	r0, r8
 8009a44:	4649      	mov	r1, r9
 8009a46:	f7f6 fc1f 	bl	8000288 <__aeabi_dsub>
 8009a4a:	4632      	mov	r2, r6
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	f7f6 fc1b 	bl	8000288 <__aeabi_dsub>
 8009a52:	a31b      	add	r3, pc, #108	@ (adr r3, 8009ac0 <__ieee754_rem_pio2+0x318>)
 8009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a58:	4606      	mov	r6, r0
 8009a5a:	460f      	mov	r7, r1
 8009a5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a60:	f7f6 fdca 	bl	80005f8 <__aeabi_dmul>
 8009a64:	4632      	mov	r2, r6
 8009a66:	463b      	mov	r3, r7
 8009a68:	f7f6 fc0e 	bl	8000288 <__aeabi_dsub>
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	460f      	mov	r7, r1
 8009a70:	e764      	b.n	800993c <__ieee754_rem_pio2+0x194>
 8009a72:	4b1b      	ldr	r3, [pc, #108]	@ (8009ae0 <__ieee754_rem_pio2+0x338>)
 8009a74:	4598      	cmp	r8, r3
 8009a76:	d935      	bls.n	8009ae4 <__ieee754_rem_pio2+0x33c>
 8009a78:	4632      	mov	r2, r6
 8009a7a:	463b      	mov	r3, r7
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	4639      	mov	r1, r7
 8009a80:	f7f6 fc02 	bl	8000288 <__aeabi_dsub>
 8009a84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a88:	e9c4 0100 	strd	r0, r1, [r4]
 8009a8c:	e69e      	b.n	80097cc <__ieee754_rem_pio2+0x24>
 8009a8e:	bf00      	nop
 8009a90:	54400000 	.word	0x54400000
 8009a94:	3ff921fb 	.word	0x3ff921fb
 8009a98:	1a626331 	.word	0x1a626331
 8009a9c:	3dd0b461 	.word	0x3dd0b461
 8009aa0:	1a600000 	.word	0x1a600000
 8009aa4:	3dd0b461 	.word	0x3dd0b461
 8009aa8:	2e037073 	.word	0x2e037073
 8009aac:	3ba3198a 	.word	0x3ba3198a
 8009ab0:	6dc9c883 	.word	0x6dc9c883
 8009ab4:	3fe45f30 	.word	0x3fe45f30
 8009ab8:	2e000000 	.word	0x2e000000
 8009abc:	3ba3198a 	.word	0x3ba3198a
 8009ac0:	252049c1 	.word	0x252049c1
 8009ac4:	397b839a 	.word	0x397b839a
 8009ac8:	3fe921fb 	.word	0x3fe921fb
 8009acc:	4002d97b 	.word	0x4002d97b
 8009ad0:	3ff921fb 	.word	0x3ff921fb
 8009ad4:	413921fb 	.word	0x413921fb
 8009ad8:	3fe00000 	.word	0x3fe00000
 8009adc:	0800a6f8 	.word	0x0800a6f8
 8009ae0:	7fefffff 	.word	0x7fefffff
 8009ae4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009ae8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8009aec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009af0:	4630      	mov	r0, r6
 8009af2:	460f      	mov	r7, r1
 8009af4:	f7f7 f81a 	bl	8000b2c <__aeabi_d2iz>
 8009af8:	f7f6 fd14 	bl	8000524 <__aeabi_i2d>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4630      	mov	r0, r6
 8009b02:	4639      	mov	r1, r7
 8009b04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b08:	f7f6 fbbe 	bl	8000288 <__aeabi_dsub>
 8009b0c:	4b22      	ldr	r3, [pc, #136]	@ (8009b98 <__ieee754_rem_pio2+0x3f0>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f7f6 fd72 	bl	80005f8 <__aeabi_dmul>
 8009b14:	460f      	mov	r7, r1
 8009b16:	4606      	mov	r6, r0
 8009b18:	f7f7 f808 	bl	8000b2c <__aeabi_d2iz>
 8009b1c:	f7f6 fd02 	bl	8000524 <__aeabi_i2d>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	4630      	mov	r0, r6
 8009b26:	4639      	mov	r1, r7
 8009b28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b2c:	f7f6 fbac 	bl	8000288 <__aeabi_dsub>
 8009b30:	4b19      	ldr	r3, [pc, #100]	@ (8009b98 <__ieee754_rem_pio2+0x3f0>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	f7f6 fd60 	bl	80005f8 <__aeabi_dmul>
 8009b38:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8009b3c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009b40:	f04f 0803 	mov.w	r8, #3
 8009b44:	2600      	movs	r6, #0
 8009b46:	2700      	movs	r7, #0
 8009b48:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	463b      	mov	r3, r7
 8009b50:	46c2      	mov	sl, r8
 8009b52:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b56:	f7f6 ffb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d1f4      	bne.n	8009b48 <__ieee754_rem_pio2+0x3a0>
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b9c <__ieee754_rem_pio2+0x3f4>)
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	2302      	movs	r3, #2
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	462a      	mov	r2, r5
 8009b68:	4653      	mov	r3, sl
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	a806      	add	r0, sp, #24
 8009b6e:	f000 f81f 	bl	8009bb0 <__kernel_rem_pio2>
 8009b72:	9b04      	ldr	r3, [sp, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	4605      	mov	r5, r0
 8009b78:	f6bf ae53 	bge.w	8009822 <__ieee754_rem_pio2+0x7a>
 8009b7c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009b80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b84:	e9c4 2300 	strd	r2, r3, [r4]
 8009b88:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009b8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b90:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009b94:	e740      	b.n	8009a18 <__ieee754_rem_pio2+0x270>
 8009b96:	bf00      	nop
 8009b98:	41700000 	.word	0x41700000
 8009b9c:	0800a778 	.word	0x0800a778

08009ba0 <fabs>:
 8009ba0:	ec51 0b10 	vmov	r0, r1, d0
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009baa:	ec43 2b10 	vmov	d0, r2, r3
 8009bae:	4770      	bx	lr

08009bb0 <__kernel_rem_pio2>:
 8009bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb4:	ed2d 8b02 	vpush	{d8}
 8009bb8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009bbc:	f112 0f14 	cmn.w	r2, #20
 8009bc0:	9306      	str	r3, [sp, #24]
 8009bc2:	9104      	str	r1, [sp, #16]
 8009bc4:	4bbe      	ldr	r3, [pc, #760]	@ (8009ec0 <__kernel_rem_pio2+0x310>)
 8009bc6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009bc8:	9008      	str	r0, [sp, #32]
 8009bca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	9b06      	ldr	r3, [sp, #24]
 8009bd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009bd6:	bfa8      	it	ge
 8009bd8:	1ed4      	subge	r4, r2, #3
 8009bda:	9305      	str	r3, [sp, #20]
 8009bdc:	bfb2      	itee	lt
 8009bde:	2400      	movlt	r4, #0
 8009be0:	2318      	movge	r3, #24
 8009be2:	fb94 f4f3 	sdivge	r4, r4, r3
 8009be6:	f06f 0317 	mvn.w	r3, #23
 8009bea:	fb04 3303 	mla	r3, r4, r3, r3
 8009bee:	eb03 0b02 	add.w	fp, r3, r2
 8009bf2:	9b00      	ldr	r3, [sp, #0]
 8009bf4:	9a05      	ldr	r2, [sp, #20]
 8009bf6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009eb0 <__kernel_rem_pio2+0x300>
 8009bfa:	eb03 0802 	add.w	r8, r3, r2
 8009bfe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009c00:	1aa7      	subs	r7, r4, r2
 8009c02:	ae20      	add	r6, sp, #128	@ 0x80
 8009c04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009c08:	2500      	movs	r5, #0
 8009c0a:	4545      	cmp	r5, r8
 8009c0c:	dd13      	ble.n	8009c36 <__kernel_rem_pio2+0x86>
 8009c0e:	9b06      	ldr	r3, [sp, #24]
 8009c10:	aa20      	add	r2, sp, #128	@ 0x80
 8009c12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009c16:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8009c1a:	f04f 0800 	mov.w	r8, #0
 8009c1e:	9b00      	ldr	r3, [sp, #0]
 8009c20:	4598      	cmp	r8, r3
 8009c22:	dc31      	bgt.n	8009c88 <__kernel_rem_pio2+0xd8>
 8009c24:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009eb0 <__kernel_rem_pio2+0x300>
 8009c28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c30:	462f      	mov	r7, r5
 8009c32:	2600      	movs	r6, #0
 8009c34:	e01b      	b.n	8009c6e <__kernel_rem_pio2+0xbe>
 8009c36:	42ef      	cmn	r7, r5
 8009c38:	d407      	bmi.n	8009c4a <__kernel_rem_pio2+0x9a>
 8009c3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009c3e:	f7f6 fc71 	bl	8000524 <__aeabi_i2d>
 8009c42:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009c46:	3501      	adds	r5, #1
 8009c48:	e7df      	b.n	8009c0a <__kernel_rem_pio2+0x5a>
 8009c4a:	ec51 0b18 	vmov	r0, r1, d8
 8009c4e:	e7f8      	b.n	8009c42 <__kernel_rem_pio2+0x92>
 8009c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009c58:	f7f6 fcce 	bl	80005f8 <__aeabi_dmul>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c64:	f7f6 fb12 	bl	800028c <__adddf3>
 8009c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c6c:	3601      	adds	r6, #1
 8009c6e:	9b05      	ldr	r3, [sp, #20]
 8009c70:	429e      	cmp	r6, r3
 8009c72:	f1a7 0708 	sub.w	r7, r7, #8
 8009c76:	ddeb      	ble.n	8009c50 <__kernel_rem_pio2+0xa0>
 8009c78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c7c:	f108 0801 	add.w	r8, r8, #1
 8009c80:	ecaa 7b02 	vstmia	sl!, {d7}
 8009c84:	3508      	adds	r5, #8
 8009c86:	e7ca      	b.n	8009c1e <__kernel_rem_pio2+0x6e>
 8009c88:	9b00      	ldr	r3, [sp, #0]
 8009c8a:	f8dd 8000 	ldr.w	r8, [sp]
 8009c8e:	aa0c      	add	r2, sp, #48	@ 0x30
 8009c90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c94:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009c98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c9e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8009ca2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ca4:	ab98      	add	r3, sp, #608	@ 0x260
 8009ca6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009caa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009cae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cb2:	ac0c      	add	r4, sp, #48	@ 0x30
 8009cb4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009cb6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009cba:	46a1      	mov	r9, r4
 8009cbc:	46c2      	mov	sl, r8
 8009cbe:	f1ba 0f00 	cmp.w	sl, #0
 8009cc2:	f1a5 0508 	sub.w	r5, r5, #8
 8009cc6:	dc77      	bgt.n	8009db8 <__kernel_rem_pio2+0x208>
 8009cc8:	4658      	mov	r0, fp
 8009cca:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009cce:	f000 fac7 	bl	800a260 <scalbn>
 8009cd2:	ec57 6b10 	vmov	r6, r7, d0
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009cdc:	4630      	mov	r0, r6
 8009cde:	4639      	mov	r1, r7
 8009ce0:	f7f6 fc8a 	bl	80005f8 <__aeabi_dmul>
 8009ce4:	ec41 0b10 	vmov	d0, r0, r1
 8009ce8:	f000 fb3a 	bl	800a360 <floor>
 8009cec:	4b75      	ldr	r3, [pc, #468]	@ (8009ec4 <__kernel_rem_pio2+0x314>)
 8009cee:	ec51 0b10 	vmov	r0, r1, d0
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f7f6 fc80 	bl	80005f8 <__aeabi_dmul>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	4639      	mov	r1, r7
 8009d00:	f7f6 fac2 	bl	8000288 <__aeabi_dsub>
 8009d04:	460f      	mov	r7, r1
 8009d06:	4606      	mov	r6, r0
 8009d08:	f7f6 ff10 	bl	8000b2c <__aeabi_d2iz>
 8009d0c:	9002      	str	r0, [sp, #8]
 8009d0e:	f7f6 fc09 	bl	8000524 <__aeabi_i2d>
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	4630      	mov	r0, r6
 8009d18:	4639      	mov	r1, r7
 8009d1a:	f7f6 fab5 	bl	8000288 <__aeabi_dsub>
 8009d1e:	f1bb 0f00 	cmp.w	fp, #0
 8009d22:	4606      	mov	r6, r0
 8009d24:	460f      	mov	r7, r1
 8009d26:	dd6c      	ble.n	8009e02 <__kernel_rem_pio2+0x252>
 8009d28:	f108 31ff 	add.w	r1, r8, #4294967295
 8009d2c:	ab0c      	add	r3, sp, #48	@ 0x30
 8009d2e:	9d02      	ldr	r5, [sp, #8]
 8009d30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d34:	f1cb 0018 	rsb	r0, fp, #24
 8009d38:	fa43 f200 	asr.w	r2, r3, r0
 8009d3c:	4415      	add	r5, r2
 8009d3e:	4082      	lsls	r2, r0
 8009d40:	1a9b      	subs	r3, r3, r2
 8009d42:	aa0c      	add	r2, sp, #48	@ 0x30
 8009d44:	9502      	str	r5, [sp, #8]
 8009d46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009d4a:	f1cb 0217 	rsb	r2, fp, #23
 8009d4e:	fa43 f902 	asr.w	r9, r3, r2
 8009d52:	f1b9 0f00 	cmp.w	r9, #0
 8009d56:	dd64      	ble.n	8009e22 <__kernel_rem_pio2+0x272>
 8009d58:	9b02      	ldr	r3, [sp, #8]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	9302      	str	r3, [sp, #8]
 8009d60:	4615      	mov	r5, r2
 8009d62:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8009d66:	4590      	cmp	r8, r2
 8009d68:	f300 80b8 	bgt.w	8009edc <__kernel_rem_pio2+0x32c>
 8009d6c:	f1bb 0f00 	cmp.w	fp, #0
 8009d70:	dd07      	ble.n	8009d82 <__kernel_rem_pio2+0x1d2>
 8009d72:	f1bb 0f01 	cmp.w	fp, #1
 8009d76:	f000 80bf 	beq.w	8009ef8 <__kernel_rem_pio2+0x348>
 8009d7a:	f1bb 0f02 	cmp.w	fp, #2
 8009d7e:	f000 80c6 	beq.w	8009f0e <__kernel_rem_pio2+0x35e>
 8009d82:	f1b9 0f02 	cmp.w	r9, #2
 8009d86:	d14c      	bne.n	8009e22 <__kernel_rem_pio2+0x272>
 8009d88:	4632      	mov	r2, r6
 8009d8a:	463b      	mov	r3, r7
 8009d8c:	494e      	ldr	r1, [pc, #312]	@ (8009ec8 <__kernel_rem_pio2+0x318>)
 8009d8e:	2000      	movs	r0, #0
 8009d90:	f7f6 fa7a 	bl	8000288 <__aeabi_dsub>
 8009d94:	4606      	mov	r6, r0
 8009d96:	460f      	mov	r7, r1
 8009d98:	2d00      	cmp	r5, #0
 8009d9a:	d042      	beq.n	8009e22 <__kernel_rem_pio2+0x272>
 8009d9c:	4658      	mov	r0, fp
 8009d9e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009eb8 <__kernel_rem_pio2+0x308>
 8009da2:	f000 fa5d 	bl	800a260 <scalbn>
 8009da6:	4630      	mov	r0, r6
 8009da8:	4639      	mov	r1, r7
 8009daa:	ec53 2b10 	vmov	r2, r3, d0
 8009dae:	f7f6 fa6b 	bl	8000288 <__aeabi_dsub>
 8009db2:	4606      	mov	r6, r0
 8009db4:	460f      	mov	r7, r1
 8009db6:	e034      	b.n	8009e22 <__kernel_rem_pio2+0x272>
 8009db8:	4b44      	ldr	r3, [pc, #272]	@ (8009ecc <__kernel_rem_pio2+0x31c>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dc0:	f7f6 fc1a 	bl	80005f8 <__aeabi_dmul>
 8009dc4:	f7f6 feb2 	bl	8000b2c <__aeabi_d2iz>
 8009dc8:	f7f6 fbac 	bl	8000524 <__aeabi_i2d>
 8009dcc:	4b40      	ldr	r3, [pc, #256]	@ (8009ed0 <__kernel_rem_pio2+0x320>)
 8009dce:	2200      	movs	r2, #0
 8009dd0:	4606      	mov	r6, r0
 8009dd2:	460f      	mov	r7, r1
 8009dd4:	f7f6 fc10 	bl	80005f8 <__aeabi_dmul>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009de0:	f7f6 fa52 	bl	8000288 <__aeabi_dsub>
 8009de4:	f7f6 fea2 	bl	8000b2c <__aeabi_d2iz>
 8009de8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009dec:	f849 0b04 	str.w	r0, [r9], #4
 8009df0:	4639      	mov	r1, r7
 8009df2:	4630      	mov	r0, r6
 8009df4:	f7f6 fa4a 	bl	800028c <__adddf3>
 8009df8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e00:	e75d      	b.n	8009cbe <__kernel_rem_pio2+0x10e>
 8009e02:	d107      	bne.n	8009e14 <__kernel_rem_pio2+0x264>
 8009e04:	f108 33ff 	add.w	r3, r8, #4294967295
 8009e08:	aa0c      	add	r2, sp, #48	@ 0x30
 8009e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e0e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8009e12:	e79e      	b.n	8009d52 <__kernel_rem_pio2+0x1a2>
 8009e14:	4b2f      	ldr	r3, [pc, #188]	@ (8009ed4 <__kernel_rem_pio2+0x324>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	f7f6 fe74 	bl	8000b04 <__aeabi_dcmpge>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d143      	bne.n	8009ea8 <__kernel_rem_pio2+0x2f8>
 8009e20:	4681      	mov	r9, r0
 8009e22:	2200      	movs	r2, #0
 8009e24:	2300      	movs	r3, #0
 8009e26:	4630      	mov	r0, r6
 8009e28:	4639      	mov	r1, r7
 8009e2a:	f7f6 fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f000 80bf 	beq.w	8009fb2 <__kernel_rem_pio2+0x402>
 8009e34:	f108 33ff 	add.w	r3, r8, #4294967295
 8009e38:	2200      	movs	r2, #0
 8009e3a:	9900      	ldr	r1, [sp, #0]
 8009e3c:	428b      	cmp	r3, r1
 8009e3e:	da6e      	bge.n	8009f1e <__kernel_rem_pio2+0x36e>
 8009e40:	2a00      	cmp	r2, #0
 8009e42:	f000 8089 	beq.w	8009f58 <__kernel_rem_pio2+0x3a8>
 8009e46:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e4a:	ab0c      	add	r3, sp, #48	@ 0x30
 8009e4c:	f1ab 0b18 	sub.w	fp, fp, #24
 8009e50:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d0f6      	beq.n	8009e46 <__kernel_rem_pio2+0x296>
 8009e58:	4658      	mov	r0, fp
 8009e5a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009eb8 <__kernel_rem_pio2+0x308>
 8009e5e:	f000 f9ff 	bl	800a260 <scalbn>
 8009e62:	f108 0301 	add.w	r3, r8, #1
 8009e66:	00da      	lsls	r2, r3, #3
 8009e68:	9205      	str	r2, [sp, #20]
 8009e6a:	ec55 4b10 	vmov	r4, r5, d0
 8009e6e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009e70:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009ecc <__kernel_rem_pio2+0x31c>
 8009e74:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009e78:	4646      	mov	r6, r8
 8009e7a:	f04f 0a00 	mov.w	sl, #0
 8009e7e:	2e00      	cmp	r6, #0
 8009e80:	f280 80cf 	bge.w	800a022 <__kernel_rem_pio2+0x472>
 8009e84:	4644      	mov	r4, r8
 8009e86:	2c00      	cmp	r4, #0
 8009e88:	f2c0 80fd 	blt.w	800a086 <__kernel_rem_pio2+0x4d6>
 8009e8c:	4b12      	ldr	r3, [pc, #72]	@ (8009ed8 <__kernel_rem_pio2+0x328>)
 8009e8e:	461f      	mov	r7, r3
 8009e90:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009e92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e96:	9306      	str	r3, [sp, #24]
 8009e98:	f04f 0a00 	mov.w	sl, #0
 8009e9c:	f04f 0b00 	mov.w	fp, #0
 8009ea0:	2600      	movs	r6, #0
 8009ea2:	eba8 0504 	sub.w	r5, r8, r4
 8009ea6:	e0e2      	b.n	800a06e <__kernel_rem_pio2+0x4be>
 8009ea8:	f04f 0902 	mov.w	r9, #2
 8009eac:	e754      	b.n	8009d58 <__kernel_rem_pio2+0x1a8>
 8009eae:	bf00      	nop
	...
 8009ebc:	3ff00000 	.word	0x3ff00000
 8009ec0:	0800a8c0 	.word	0x0800a8c0
 8009ec4:	40200000 	.word	0x40200000
 8009ec8:	3ff00000 	.word	0x3ff00000
 8009ecc:	3e700000 	.word	0x3e700000
 8009ed0:	41700000 	.word	0x41700000
 8009ed4:	3fe00000 	.word	0x3fe00000
 8009ed8:	0800a880 	.word	0x0800a880
 8009edc:	f854 3b04 	ldr.w	r3, [r4], #4
 8009ee0:	b945      	cbnz	r5, 8009ef4 <__kernel_rem_pio2+0x344>
 8009ee2:	b123      	cbz	r3, 8009eee <__kernel_rem_pio2+0x33e>
 8009ee4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009ee8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009eec:	2301      	movs	r3, #1
 8009eee:	3201      	adds	r2, #1
 8009ef0:	461d      	mov	r5, r3
 8009ef2:	e738      	b.n	8009d66 <__kernel_rem_pio2+0x1b6>
 8009ef4:	1acb      	subs	r3, r1, r3
 8009ef6:	e7f7      	b.n	8009ee8 <__kernel_rem_pio2+0x338>
 8009ef8:	f108 32ff 	add.w	r2, r8, #4294967295
 8009efc:	ab0c      	add	r3, sp, #48	@ 0x30
 8009efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f02:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009f06:	a90c      	add	r1, sp, #48	@ 0x30
 8009f08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009f0c:	e739      	b.n	8009d82 <__kernel_rem_pio2+0x1d2>
 8009f0e:	f108 32ff 	add.w	r2, r8, #4294967295
 8009f12:	ab0c      	add	r3, sp, #48	@ 0x30
 8009f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009f1c:	e7f3      	b.n	8009f06 <__kernel_rem_pio2+0x356>
 8009f1e:	a90c      	add	r1, sp, #48	@ 0x30
 8009f20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	430a      	orrs	r2, r1
 8009f28:	e787      	b.n	8009e3a <__kernel_rem_pio2+0x28a>
 8009f2a:	3401      	adds	r4, #1
 8009f2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f30:	2a00      	cmp	r2, #0
 8009f32:	d0fa      	beq.n	8009f2a <__kernel_rem_pio2+0x37a>
 8009f34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009f3a:	eb0d 0503 	add.w	r5, sp, r3
 8009f3e:	9b06      	ldr	r3, [sp, #24]
 8009f40:	aa20      	add	r2, sp, #128	@ 0x80
 8009f42:	4443      	add	r3, r8
 8009f44:	f108 0701 	add.w	r7, r8, #1
 8009f48:	3d98      	subs	r5, #152	@ 0x98
 8009f4a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009f4e:	4444      	add	r4, r8
 8009f50:	42bc      	cmp	r4, r7
 8009f52:	da04      	bge.n	8009f5e <__kernel_rem_pio2+0x3ae>
 8009f54:	46a0      	mov	r8, r4
 8009f56:	e6a2      	b.n	8009c9e <__kernel_rem_pio2+0xee>
 8009f58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f5a:	2401      	movs	r4, #1
 8009f5c:	e7e6      	b.n	8009f2c <__kernel_rem_pio2+0x37c>
 8009f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f60:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009f64:	f7f6 fade 	bl	8000524 <__aeabi_i2d>
 8009f68:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800a230 <__kernel_rem_pio2+0x680>
 8009f6c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009f70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f78:	46b2      	mov	sl, r6
 8009f7a:	f04f 0800 	mov.w	r8, #0
 8009f7e:	9b05      	ldr	r3, [sp, #20]
 8009f80:	4598      	cmp	r8, r3
 8009f82:	dd05      	ble.n	8009f90 <__kernel_rem_pio2+0x3e0>
 8009f84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f88:	3701      	adds	r7, #1
 8009f8a:	eca5 7b02 	vstmia	r5!, {d7}
 8009f8e:	e7df      	b.n	8009f50 <__kernel_rem_pio2+0x3a0>
 8009f90:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009f94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009f98:	f7f6 fb2e 	bl	80005f8 <__aeabi_dmul>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fa4:	f7f6 f972 	bl	800028c <__adddf3>
 8009fa8:	f108 0801 	add.w	r8, r8, #1
 8009fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fb0:	e7e5      	b.n	8009f7e <__kernel_rem_pio2+0x3ce>
 8009fb2:	f1cb 0000 	rsb	r0, fp, #0
 8009fb6:	ec47 6b10 	vmov	d0, r6, r7
 8009fba:	f000 f951 	bl	800a260 <scalbn>
 8009fbe:	ec55 4b10 	vmov	r4, r5, d0
 8009fc2:	4b9d      	ldr	r3, [pc, #628]	@ (800a238 <__kernel_rem_pio2+0x688>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f7f6 fd9b 	bl	8000b04 <__aeabi_dcmpge>
 8009fce:	b300      	cbz	r0, 800a012 <__kernel_rem_pio2+0x462>
 8009fd0:	4b9a      	ldr	r3, [pc, #616]	@ (800a23c <__kernel_rem_pio2+0x68c>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	f7f6 fb0e 	bl	80005f8 <__aeabi_dmul>
 8009fdc:	f7f6 fda6 	bl	8000b2c <__aeabi_d2iz>
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	f7f6 fa9f 	bl	8000524 <__aeabi_i2d>
 8009fe6:	4b94      	ldr	r3, [pc, #592]	@ (800a238 <__kernel_rem_pio2+0x688>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f7f6 fb05 	bl	80005f8 <__aeabi_dmul>
 8009fee:	460b      	mov	r3, r1
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f7f6 f947 	bl	8000288 <__aeabi_dsub>
 8009ffa:	f7f6 fd97 	bl	8000b2c <__aeabi_d2iz>
 8009ffe:	ab0c      	add	r3, sp, #48	@ 0x30
 800a000:	f10b 0b18 	add.w	fp, fp, #24
 800a004:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a008:	f108 0801 	add.w	r8, r8, #1
 800a00c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800a010:	e722      	b.n	8009e58 <__kernel_rem_pio2+0x2a8>
 800a012:	4620      	mov	r0, r4
 800a014:	4629      	mov	r1, r5
 800a016:	f7f6 fd89 	bl	8000b2c <__aeabi_d2iz>
 800a01a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a01c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800a020:	e71a      	b.n	8009e58 <__kernel_rem_pio2+0x2a8>
 800a022:	ab0c      	add	r3, sp, #48	@ 0x30
 800a024:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a028:	f7f6 fa7c 	bl	8000524 <__aeabi_i2d>
 800a02c:	4622      	mov	r2, r4
 800a02e:	462b      	mov	r3, r5
 800a030:	f7f6 fae2 	bl	80005f8 <__aeabi_dmul>
 800a034:	4652      	mov	r2, sl
 800a036:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800a03a:	465b      	mov	r3, fp
 800a03c:	4620      	mov	r0, r4
 800a03e:	4629      	mov	r1, r5
 800a040:	f7f6 fada 	bl	80005f8 <__aeabi_dmul>
 800a044:	3e01      	subs	r6, #1
 800a046:	4604      	mov	r4, r0
 800a048:	460d      	mov	r5, r1
 800a04a:	e718      	b.n	8009e7e <__kernel_rem_pio2+0x2ce>
 800a04c:	9906      	ldr	r1, [sp, #24]
 800a04e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800a052:	9106      	str	r1, [sp, #24]
 800a054:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800a058:	f7f6 face 	bl	80005f8 <__aeabi_dmul>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	4650      	mov	r0, sl
 800a062:	4659      	mov	r1, fp
 800a064:	f7f6 f912 	bl	800028c <__adddf3>
 800a068:	3601      	adds	r6, #1
 800a06a:	4682      	mov	sl, r0
 800a06c:	468b      	mov	fp, r1
 800a06e:	9b00      	ldr	r3, [sp, #0]
 800a070:	429e      	cmp	r6, r3
 800a072:	dc01      	bgt.n	800a078 <__kernel_rem_pio2+0x4c8>
 800a074:	42b5      	cmp	r5, r6
 800a076:	dae9      	bge.n	800a04c <__kernel_rem_pio2+0x49c>
 800a078:	ab48      	add	r3, sp, #288	@ 0x120
 800a07a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a07e:	e9c5 ab00 	strd	sl, fp, [r5]
 800a082:	3c01      	subs	r4, #1
 800a084:	e6ff      	b.n	8009e86 <__kernel_rem_pio2+0x2d6>
 800a086:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a088:	2b02      	cmp	r3, #2
 800a08a:	dc0b      	bgt.n	800a0a4 <__kernel_rem_pio2+0x4f4>
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dc39      	bgt.n	800a104 <__kernel_rem_pio2+0x554>
 800a090:	d05d      	beq.n	800a14e <__kernel_rem_pio2+0x59e>
 800a092:	9b02      	ldr	r3, [sp, #8]
 800a094:	f003 0007 	and.w	r0, r3, #7
 800a098:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800a09c:	ecbd 8b02 	vpop	{d8}
 800a0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800a0a6:	2b03      	cmp	r3, #3
 800a0a8:	d1f3      	bne.n	800a092 <__kernel_rem_pio2+0x4e2>
 800a0aa:	9b05      	ldr	r3, [sp, #20]
 800a0ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a0b0:	eb0d 0403 	add.w	r4, sp, r3
 800a0b4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800a0b8:	4625      	mov	r5, r4
 800a0ba:	46c2      	mov	sl, r8
 800a0bc:	f1ba 0f00 	cmp.w	sl, #0
 800a0c0:	f1a5 0508 	sub.w	r5, r5, #8
 800a0c4:	dc6b      	bgt.n	800a19e <__kernel_rem_pio2+0x5ee>
 800a0c6:	4645      	mov	r5, r8
 800a0c8:	2d01      	cmp	r5, #1
 800a0ca:	f1a4 0408 	sub.w	r4, r4, #8
 800a0ce:	f300 8087 	bgt.w	800a1e0 <__kernel_rem_pio2+0x630>
 800a0d2:	9c05      	ldr	r4, [sp, #20]
 800a0d4:	ab48      	add	r3, sp, #288	@ 0x120
 800a0d6:	441c      	add	r4, r3
 800a0d8:	2000      	movs	r0, #0
 800a0da:	2100      	movs	r1, #0
 800a0dc:	f1b8 0f01 	cmp.w	r8, #1
 800a0e0:	f300 809c 	bgt.w	800a21c <__kernel_rem_pio2+0x66c>
 800a0e4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800a0e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800a0ec:	f1b9 0f00 	cmp.w	r9, #0
 800a0f0:	f040 80a6 	bne.w	800a240 <__kernel_rem_pio2+0x690>
 800a0f4:	9b04      	ldr	r3, [sp, #16]
 800a0f6:	e9c3 7800 	strd	r7, r8, [r3]
 800a0fa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a0fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a102:	e7c6      	b.n	800a092 <__kernel_rem_pio2+0x4e2>
 800a104:	9d05      	ldr	r5, [sp, #20]
 800a106:	ab48      	add	r3, sp, #288	@ 0x120
 800a108:	441d      	add	r5, r3
 800a10a:	4644      	mov	r4, r8
 800a10c:	2000      	movs	r0, #0
 800a10e:	2100      	movs	r1, #0
 800a110:	2c00      	cmp	r4, #0
 800a112:	da35      	bge.n	800a180 <__kernel_rem_pio2+0x5d0>
 800a114:	f1b9 0f00 	cmp.w	r9, #0
 800a118:	d038      	beq.n	800a18c <__kernel_rem_pio2+0x5dc>
 800a11a:	4602      	mov	r2, r0
 800a11c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a120:	9c04      	ldr	r4, [sp, #16]
 800a122:	e9c4 2300 	strd	r2, r3, [r4]
 800a126:	4602      	mov	r2, r0
 800a128:	460b      	mov	r3, r1
 800a12a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800a12e:	f7f6 f8ab 	bl	8000288 <__aeabi_dsub>
 800a132:	ad4a      	add	r5, sp, #296	@ 0x128
 800a134:	2401      	movs	r4, #1
 800a136:	45a0      	cmp	r8, r4
 800a138:	da2b      	bge.n	800a192 <__kernel_rem_pio2+0x5e2>
 800a13a:	f1b9 0f00 	cmp.w	r9, #0
 800a13e:	d002      	beq.n	800a146 <__kernel_rem_pio2+0x596>
 800a140:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a144:	4619      	mov	r1, r3
 800a146:	9b04      	ldr	r3, [sp, #16]
 800a148:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a14c:	e7a1      	b.n	800a092 <__kernel_rem_pio2+0x4e2>
 800a14e:	9c05      	ldr	r4, [sp, #20]
 800a150:	ab48      	add	r3, sp, #288	@ 0x120
 800a152:	441c      	add	r4, r3
 800a154:	2000      	movs	r0, #0
 800a156:	2100      	movs	r1, #0
 800a158:	f1b8 0f00 	cmp.w	r8, #0
 800a15c:	da09      	bge.n	800a172 <__kernel_rem_pio2+0x5c2>
 800a15e:	f1b9 0f00 	cmp.w	r9, #0
 800a162:	d002      	beq.n	800a16a <__kernel_rem_pio2+0x5ba>
 800a164:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a168:	4619      	mov	r1, r3
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	e9c3 0100 	strd	r0, r1, [r3]
 800a170:	e78f      	b.n	800a092 <__kernel_rem_pio2+0x4e2>
 800a172:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a176:	f7f6 f889 	bl	800028c <__adddf3>
 800a17a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a17e:	e7eb      	b.n	800a158 <__kernel_rem_pio2+0x5a8>
 800a180:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a184:	f7f6 f882 	bl	800028c <__adddf3>
 800a188:	3c01      	subs	r4, #1
 800a18a:	e7c1      	b.n	800a110 <__kernel_rem_pio2+0x560>
 800a18c:	4602      	mov	r2, r0
 800a18e:	460b      	mov	r3, r1
 800a190:	e7c6      	b.n	800a120 <__kernel_rem_pio2+0x570>
 800a192:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800a196:	f7f6 f879 	bl	800028c <__adddf3>
 800a19a:	3401      	adds	r4, #1
 800a19c:	e7cb      	b.n	800a136 <__kernel_rem_pio2+0x586>
 800a19e:	ed95 7b00 	vldr	d7, [r5]
 800a1a2:	ed8d 7b00 	vstr	d7, [sp]
 800a1a6:	ed95 7b02 	vldr	d7, [r5, #8]
 800a1aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ae:	ec53 2b17 	vmov	r2, r3, d7
 800a1b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a1b6:	f7f6 f869 	bl	800028c <__adddf3>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	460b      	mov	r3, r1
 800a1be:	4606      	mov	r6, r0
 800a1c0:	460f      	mov	r7, r1
 800a1c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1c6:	f7f6 f85f 	bl	8000288 <__aeabi_dsub>
 800a1ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1ce:	f7f6 f85d 	bl	800028c <__adddf3>
 800a1d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800a1da:	e9c5 6700 	strd	r6, r7, [r5]
 800a1de:	e76d      	b.n	800a0bc <__kernel_rem_pio2+0x50c>
 800a1e0:	ed94 7b00 	vldr	d7, [r4]
 800a1e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800a1e8:	ec51 0b17 	vmov	r0, r1, d7
 800a1ec:	4652      	mov	r2, sl
 800a1ee:	465b      	mov	r3, fp
 800a1f0:	ed8d 7b00 	vstr	d7, [sp]
 800a1f4:	f7f6 f84a 	bl	800028c <__adddf3>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	460f      	mov	r7, r1
 800a200:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a204:	f7f6 f840 	bl	8000288 <__aeabi_dsub>
 800a208:	4652      	mov	r2, sl
 800a20a:	465b      	mov	r3, fp
 800a20c:	f7f6 f83e 	bl	800028c <__adddf3>
 800a210:	3d01      	subs	r5, #1
 800a212:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a216:	e9c4 6700 	strd	r6, r7, [r4]
 800a21a:	e755      	b.n	800a0c8 <__kernel_rem_pio2+0x518>
 800a21c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a220:	f7f6 f834 	bl	800028c <__adddf3>
 800a224:	f108 38ff 	add.w	r8, r8, #4294967295
 800a228:	e758      	b.n	800a0dc <__kernel_rem_pio2+0x52c>
 800a22a:	bf00      	nop
 800a22c:	f3af 8000 	nop.w
	...
 800a238:	41700000 	.word	0x41700000
 800a23c:	3e700000 	.word	0x3e700000
 800a240:	9b04      	ldr	r3, [sp, #16]
 800a242:	9a04      	ldr	r2, [sp, #16]
 800a244:	601f      	str	r7, [r3, #0]
 800a246:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800a24a:	605c      	str	r4, [r3, #4]
 800a24c:	609d      	str	r5, [r3, #8]
 800a24e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a252:	60d3      	str	r3, [r2, #12]
 800a254:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a258:	6110      	str	r0, [r2, #16]
 800a25a:	6153      	str	r3, [r2, #20]
 800a25c:	e719      	b.n	800a092 <__kernel_rem_pio2+0x4e2>
 800a25e:	bf00      	nop

0800a260 <scalbn>:
 800a260:	b570      	push	{r4, r5, r6, lr}
 800a262:	ec55 4b10 	vmov	r4, r5, d0
 800a266:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a26a:	4606      	mov	r6, r0
 800a26c:	462b      	mov	r3, r5
 800a26e:	b991      	cbnz	r1, 800a296 <scalbn+0x36>
 800a270:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a274:	4323      	orrs	r3, r4
 800a276:	d03d      	beq.n	800a2f4 <scalbn+0x94>
 800a278:	4b35      	ldr	r3, [pc, #212]	@ (800a350 <scalbn+0xf0>)
 800a27a:	4620      	mov	r0, r4
 800a27c:	4629      	mov	r1, r5
 800a27e:	2200      	movs	r2, #0
 800a280:	f7f6 f9ba 	bl	80005f8 <__aeabi_dmul>
 800a284:	4b33      	ldr	r3, [pc, #204]	@ (800a354 <scalbn+0xf4>)
 800a286:	429e      	cmp	r6, r3
 800a288:	4604      	mov	r4, r0
 800a28a:	460d      	mov	r5, r1
 800a28c:	da0f      	bge.n	800a2ae <scalbn+0x4e>
 800a28e:	a328      	add	r3, pc, #160	@ (adr r3, 800a330 <scalbn+0xd0>)
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	e01e      	b.n	800a2d4 <scalbn+0x74>
 800a296:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a29a:	4291      	cmp	r1, r2
 800a29c:	d10b      	bne.n	800a2b6 <scalbn+0x56>
 800a29e:	4622      	mov	r2, r4
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	f7f5 fff2 	bl	800028c <__adddf3>
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	460d      	mov	r5, r1
 800a2ac:	e022      	b.n	800a2f4 <scalbn+0x94>
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a2b4:	3936      	subs	r1, #54	@ 0x36
 800a2b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a2ba:	4296      	cmp	r6, r2
 800a2bc:	dd0d      	ble.n	800a2da <scalbn+0x7a>
 800a2be:	2d00      	cmp	r5, #0
 800a2c0:	a11d      	add	r1, pc, #116	@ (adr r1, 800a338 <scalbn+0xd8>)
 800a2c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2c6:	da02      	bge.n	800a2ce <scalbn+0x6e>
 800a2c8:	a11d      	add	r1, pc, #116	@ (adr r1, 800a340 <scalbn+0xe0>)
 800a2ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2ce:	a31a      	add	r3, pc, #104	@ (adr r3, 800a338 <scalbn+0xd8>)
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	f7f6 f990 	bl	80005f8 <__aeabi_dmul>
 800a2d8:	e7e6      	b.n	800a2a8 <scalbn+0x48>
 800a2da:	1872      	adds	r2, r6, r1
 800a2dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a2e0:	428a      	cmp	r2, r1
 800a2e2:	dcec      	bgt.n	800a2be <scalbn+0x5e>
 800a2e4:	2a00      	cmp	r2, #0
 800a2e6:	dd08      	ble.n	800a2fa <scalbn+0x9a>
 800a2e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a2ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a2f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a2f4:	ec45 4b10 	vmov	d0, r4, r5
 800a2f8:	bd70      	pop	{r4, r5, r6, pc}
 800a2fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a2fe:	da08      	bge.n	800a312 <scalbn+0xb2>
 800a300:	2d00      	cmp	r5, #0
 800a302:	a10b      	add	r1, pc, #44	@ (adr r1, 800a330 <scalbn+0xd0>)
 800a304:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a308:	dac1      	bge.n	800a28e <scalbn+0x2e>
 800a30a:	a10f      	add	r1, pc, #60	@ (adr r1, 800a348 <scalbn+0xe8>)
 800a30c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a310:	e7bd      	b.n	800a28e <scalbn+0x2e>
 800a312:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a316:	3236      	adds	r2, #54	@ 0x36
 800a318:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a31c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a320:	4620      	mov	r0, r4
 800a322:	4b0d      	ldr	r3, [pc, #52]	@ (800a358 <scalbn+0xf8>)
 800a324:	4629      	mov	r1, r5
 800a326:	2200      	movs	r2, #0
 800a328:	e7d4      	b.n	800a2d4 <scalbn+0x74>
 800a32a:	bf00      	nop
 800a32c:	f3af 8000 	nop.w
 800a330:	c2f8f359 	.word	0xc2f8f359
 800a334:	01a56e1f 	.word	0x01a56e1f
 800a338:	8800759c 	.word	0x8800759c
 800a33c:	7e37e43c 	.word	0x7e37e43c
 800a340:	8800759c 	.word	0x8800759c
 800a344:	fe37e43c 	.word	0xfe37e43c
 800a348:	c2f8f359 	.word	0xc2f8f359
 800a34c:	81a56e1f 	.word	0x81a56e1f
 800a350:	43500000 	.word	0x43500000
 800a354:	ffff3cb0 	.word	0xffff3cb0
 800a358:	3c900000 	.word	0x3c900000
 800a35c:	00000000 	.word	0x00000000

0800a360 <floor>:
 800a360:	ec51 0b10 	vmov	r0, r1, d0
 800a364:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800a370:	2e13      	cmp	r6, #19
 800a372:	460c      	mov	r4, r1
 800a374:	4605      	mov	r5, r0
 800a376:	4680      	mov	r8, r0
 800a378:	dc34      	bgt.n	800a3e4 <floor+0x84>
 800a37a:	2e00      	cmp	r6, #0
 800a37c:	da17      	bge.n	800a3ae <floor+0x4e>
 800a37e:	a332      	add	r3, pc, #200	@ (adr r3, 800a448 <floor+0xe8>)
 800a380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a384:	f7f5 ff82 	bl	800028c <__adddf3>
 800a388:	2200      	movs	r2, #0
 800a38a:	2300      	movs	r3, #0
 800a38c:	f7f6 fbc4 	bl	8000b18 <__aeabi_dcmpgt>
 800a390:	b150      	cbz	r0, 800a3a8 <floor+0x48>
 800a392:	2c00      	cmp	r4, #0
 800a394:	da55      	bge.n	800a442 <floor+0xe2>
 800a396:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a39a:	432c      	orrs	r4, r5
 800a39c:	2500      	movs	r5, #0
 800a39e:	42ac      	cmp	r4, r5
 800a3a0:	4c2b      	ldr	r4, [pc, #172]	@ (800a450 <floor+0xf0>)
 800a3a2:	bf08      	it	eq
 800a3a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	4628      	mov	r0, r5
 800a3ac:	e023      	b.n	800a3f6 <floor+0x96>
 800a3ae:	4f29      	ldr	r7, [pc, #164]	@ (800a454 <floor+0xf4>)
 800a3b0:	4137      	asrs	r7, r6
 800a3b2:	ea01 0307 	and.w	r3, r1, r7
 800a3b6:	4303      	orrs	r3, r0
 800a3b8:	d01d      	beq.n	800a3f6 <floor+0x96>
 800a3ba:	a323      	add	r3, pc, #140	@ (adr r3, 800a448 <floor+0xe8>)
 800a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c0:	f7f5 ff64 	bl	800028c <__adddf3>
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	f7f6 fba6 	bl	8000b18 <__aeabi_dcmpgt>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d0eb      	beq.n	800a3a8 <floor+0x48>
 800a3d0:	2c00      	cmp	r4, #0
 800a3d2:	bfbe      	ittt	lt
 800a3d4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a3d8:	4133      	asrlt	r3, r6
 800a3da:	18e4      	addlt	r4, r4, r3
 800a3dc:	ea24 0407 	bic.w	r4, r4, r7
 800a3e0:	2500      	movs	r5, #0
 800a3e2:	e7e1      	b.n	800a3a8 <floor+0x48>
 800a3e4:	2e33      	cmp	r6, #51	@ 0x33
 800a3e6:	dd0a      	ble.n	800a3fe <floor+0x9e>
 800a3e8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a3ec:	d103      	bne.n	800a3f6 <floor+0x96>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	f7f5 ff4b 	bl	800028c <__adddf3>
 800a3f6:	ec41 0b10 	vmov	d0, r0, r1
 800a3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3fe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800a402:	f04f 37ff 	mov.w	r7, #4294967295
 800a406:	40df      	lsrs	r7, r3
 800a408:	4207      	tst	r7, r0
 800a40a:	d0f4      	beq.n	800a3f6 <floor+0x96>
 800a40c:	a30e      	add	r3, pc, #56	@ (adr r3, 800a448 <floor+0xe8>)
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	f7f5 ff3b 	bl	800028c <__adddf3>
 800a416:	2200      	movs	r2, #0
 800a418:	2300      	movs	r3, #0
 800a41a:	f7f6 fb7d 	bl	8000b18 <__aeabi_dcmpgt>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d0c2      	beq.n	800a3a8 <floor+0x48>
 800a422:	2c00      	cmp	r4, #0
 800a424:	da0a      	bge.n	800a43c <floor+0xdc>
 800a426:	2e14      	cmp	r6, #20
 800a428:	d101      	bne.n	800a42e <floor+0xce>
 800a42a:	3401      	adds	r4, #1
 800a42c:	e006      	b.n	800a43c <floor+0xdc>
 800a42e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a432:	2301      	movs	r3, #1
 800a434:	40b3      	lsls	r3, r6
 800a436:	441d      	add	r5, r3
 800a438:	4545      	cmp	r5, r8
 800a43a:	d3f6      	bcc.n	800a42a <floor+0xca>
 800a43c:	ea25 0507 	bic.w	r5, r5, r7
 800a440:	e7b2      	b.n	800a3a8 <floor+0x48>
 800a442:	2500      	movs	r5, #0
 800a444:	462c      	mov	r4, r5
 800a446:	e7af      	b.n	800a3a8 <floor+0x48>
 800a448:	8800759c 	.word	0x8800759c
 800a44c:	7e37e43c 	.word	0x7e37e43c
 800a450:	bff00000 	.word	0xbff00000
 800a454:	000fffff 	.word	0x000fffff

0800a458 <_init>:
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45a:	bf00      	nop
 800a45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a45e:	bc08      	pop	{r3}
 800a460:	469e      	mov	lr, r3
 800a462:	4770      	bx	lr

0800a464 <_fini>:
 800a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a466:	bf00      	nop
 800a468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a46a:	bc08      	pop	{r3}
 800a46c:	469e      	mov	lr, r3
 800a46e:	4770      	bx	lr
