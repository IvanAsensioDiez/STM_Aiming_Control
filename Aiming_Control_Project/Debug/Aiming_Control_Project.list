
Aiming_Control_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08007e34  08007e34  00008e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e98  08007e98  00009010  2**0
                  CONTENTS
  4 .ARM          00000008  08007e98  08007e98  00008e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ea0  08007ea0  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ea0  08007ea0  00008ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ea4  08007ea4  00008ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007ea8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009010  2**0
                  CONTENTS
 10 .bss          000042f8  20000010  20000010  00009010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004308  20004308  00009010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013eed  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003163  00000000  00000000  0001cf2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  00020090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fab  00000000  00000000  00021480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002478f  00000000  00000000  0002242b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017eb5  00000000  00000000  00046bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0af2  00000000  00000000  0005ea6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013f561  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005404  00000000  00000000  0013f5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  001449a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e1c 	.word	0x08007e1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08007e1c 	.word	0x08007e1c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <vApplicationGetIdleTaskMemory+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4a06      	ldr	r2, [pc, #24]	@ (80004f0 <vApplicationGetIdleTaskMemory+0x30>)
 80004d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2280      	movs	r2, #128	@ 0x80
 80004dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000002c 	.word	0x2000002c
 80004f0:	20000080 	.word	0x20000080

080004f4 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	4608      	mov	r0, r1
 80004fe:	4611      	mov	r1, r2
 8000500:	461a      	mov	r2, r3
 8000502:	4603      	mov	r3, r0
 8000504:	70fb      	strb	r3, [r7, #3]
 8000506:	460b      	mov	r3, r1
 8000508:	70bb      	strb	r3, [r7, #2]
 800050a:	4613      	mov	r3, r2
 800050c:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 8000512:	4a4f      	ldr	r2, [pc, #316]	@ (8000650 <lcdInit+0x15c>)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8000518:	78fb      	ldrb	r3, [r7, #3]
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b4c      	ldr	r3, [pc, #304]	@ (8000650 <lcdInit+0x15c>)
 8000520:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 8000522:	4a4b      	ldr	r2, [pc, #300]	@ (8000650 <lcdInit+0x15c>)
 8000524:	78bb      	ldrb	r3, [r7, #2]
 8000526:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8000528:	4a49      	ldr	r2, [pc, #292]	@ (8000650 <lcdInit+0x15c>)
 800052a:	787b      	ldrb	r3, [r7, #1]
 800052c:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 800052e:	4b48      	ldr	r3, [pc, #288]	@ (8000650 <lcdInit+0x15c>)
 8000530:	2208      	movs	r2, #8
 8000532:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8000534:	4b47      	ldr	r3, [pc, #284]	@ (8000654 <lcdInit+0x160>)
 8000536:	2234      	movs	r2, #52	@ 0x34
 8000538:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 800053a:	4b46      	ldr	r3, [pc, #280]	@ (8000654 <lcdInit+0x160>)
 800053c:	781a      	ldrb	r2, [r3, #0]
 800053e:	4b45      	ldr	r3, [pc, #276]	@ (8000654 <lcdInit+0x160>)
 8000540:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8000542:	4b44      	ldr	r3, [pc, #272]	@ (8000654 <lcdInit+0x160>)
 8000544:	2230      	movs	r2, #48	@ 0x30
 8000546:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8000548:	2300      	movs	r3, #0
 800054a:	75fb      	strb	r3, [r7, #23]
 800054c:	e030      	b.n	80005b0 <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 800054e:	4b40      	ldr	r3, [pc, #256]	@ (8000650 <lcdInit+0x15c>)
 8000550:	6818      	ldr	r0, [r3, #0]
 8000552:	4b3f      	ldr	r3, [pc, #252]	@ (8000650 <lcdInit+0x15c>)
 8000554:	799b      	ldrb	r3, [r3, #6]
 8000556:	4619      	mov	r1, r3
 8000558:	2303      	movs	r3, #3
 800055a:	4a3e      	ldr	r2, [pc, #248]	@ (8000654 <lcdInit+0x160>)
 800055c:	f002 fee8 	bl	8003330 <HAL_I2C_Master_Transmit_DMA>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <lcdInit+0x76>
            return false;
 8000566:	2300      	movs	r3, #0
 8000568:	e06d      	b.n	8000646 <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 800056a:	f006 fdaf 	bl	80070cc <xTaskGetTickCount>
 800056e:	4603      	mov	r3, r0
 8000570:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000572:	e002      	b.n	800057a <lcdInit+0x86>
            vTaskDelay(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f006 fc65 	bl	8006e44 <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800057a:	4b35      	ldr	r3, [pc, #212]	@ (8000650 <lcdInit+0x15c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fa5c 	bl	8003a3c <HAL_I2C_GetState>
 8000584:	4603      	mov	r3, r0
 8000586:	2b20      	cmp	r3, #32
 8000588:	d1f4      	bne.n	8000574 <lcdInit+0x80>
        }

        if (i == 2) {
 800058a:	7dfb      	ldrb	r3, [r7, #23]
 800058c:	2b02      	cmp	r3, #2
 800058e:	d106      	bne.n	800059e <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	2101      	movs	r1, #1
 8000596:	4618      	mov	r0, r3
 8000598:	f006 fbd4 	bl	8006d44 <vTaskDelayUntil>
 800059c:	e005      	b.n	80005aa <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	2105      	movs	r1, #5
 80005a4:	4618      	mov	r0, r3
 80005a6:	f006 fbcd 	bl	8006d44 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 80005aa:	7dfb      	ldrb	r3, [r7, #23]
 80005ac:	3301      	adds	r3, #1
 80005ae:	75fb      	strb	r3, [r7, #23]
 80005b0:	7dfb      	ldrb	r3, [r7, #23]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d9cb      	bls.n	800054e <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 80005b6:	4b27      	ldr	r3, [pc, #156]	@ (8000654 <lcdInit+0x160>)
 80005b8:	222c      	movs	r2, #44	@ 0x2c
 80005ba:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80005bc:	4b25      	ldr	r3, [pc, #148]	@ (8000654 <lcdInit+0x160>)
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	4b24      	ldr	r3, [pc, #144]	@ (8000654 <lcdInit+0x160>)
 80005c2:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 80005c4:	4b23      	ldr	r3, [pc, #140]	@ (8000654 <lcdInit+0x160>)
 80005c6:	2228      	movs	r2, #40	@ 0x28
 80005c8:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80005ca:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <lcdInit+0x15c>)
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	4b20      	ldr	r3, [pc, #128]	@ (8000650 <lcdInit+0x15c>)
 80005d0:	799b      	ldrb	r3, [r3, #6]
 80005d2:	4619      	mov	r1, r3
 80005d4:	2303      	movs	r3, #3
 80005d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000654 <lcdInit+0x160>)
 80005d8:	f002 feaa 	bl	8003330 <HAL_I2C_Master_Transmit_DMA>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d004      	beq.n	80005ec <lcdInit+0xf8>
        return false;
 80005e2:	2300      	movs	r3, #0
 80005e4:	e02f      	b.n	8000646 <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 80005e6:	2001      	movs	r0, #1
 80005e8:	f006 fc2c 	bl	8006e44 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80005ec:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <lcdInit+0x15c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 fa23 	bl	8003a3c <HAL_I2C_GetState>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d1f4      	bne.n	80005e6 <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	f043 0302 	orr.w	r3, r3, #2
 8000602:	b2db      	uxtb	r3, r3
 8000604:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 8000606:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <lcdInit+0x15c>)
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d904      	bls.n	8000618 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	f043 0308 	orr.w	r3, r3, #8
 8000614:	b2db      	uxtb	r3, r3
 8000616:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8000618:	f107 030f 	add.w	r3, r7, #15
 800061c:	4619      	mov	r1, r3
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f956 	bl	80008d0 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8000624:	2101      	movs	r1, #1
 8000626:	2001      	movs	r0, #1
 8000628:	f000 f816 	bl	8000658 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 800062c:	2101      	movs	r1, #1
 800062e:	2007      	movs	r0, #7
 8000630:	f000 f812 	bl	8000658 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8000634:	2101      	movs	r1, #1
 8000636:	2002      	movs	r0, #2
 8000638:	f000 f80e 	bl	8000658 <lcdCommand>
    lcdCursorHome();
 800063c:	2101      	movs	r1, #1
 800063e:	2005      	movs	r0, #5
 8000640:	f000 f80a 	bl	8000658 <lcdCommand>

    return true;
 8000644:	2301      	movs	r3, #1
}
 8000646:	4618      	mov	r0, r3
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000288 	.word	0x20000288
 8000654:	20000280 	.word	0x20000280

08000658 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	460a      	mov	r2, r1
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	4613      	mov	r3, r2
 8000666:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8000668:	2300      	movs	r3, #0
 800066a:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 800066c:	79bb      	ldrb	r3, [r7, #6]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d06e      	beq.n	8000750 <lcdCommand+0xf8>
 8000672:	2b01      	cmp	r3, #1
 8000674:	f040 80b4 	bne.w	80007e0 <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b07      	cmp	r3, #7
 800067e:	d864      	bhi.n	800074a <lcdCommand+0xf2>
 8000680:	a201      	add	r2, pc, #4	@ (adr r2, 8000688 <lcdCommand+0x30>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006a9 	.word	0x080006a9
 800068c:	080006d9 	.word	0x080006d9
 8000690:	080006b9 	.word	0x080006b9
 8000694:	080006c9 	.word	0x080006c9
 8000698:	080006fd 	.word	0x080006fd
 800069c:	08000731 	.word	0x08000731
 80006a0:	08000721 	.word	0x08000721
 80006a4:	0800073b 	.word	0x0800073b
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 80006a8:	4b61      	ldr	r3, [pc, #388]	@ (8000830 <lcdCommand+0x1d8>)
 80006aa:	7a1b      	ldrb	r3, [r3, #8]
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b5f      	ldr	r3, [pc, #380]	@ (8000830 <lcdCommand+0x1d8>)
 80006b4:	721a      	strb	r2, [r3, #8]
                    break;
 80006b6:	e04a      	b.n	800074e <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 80006b8:	4b5d      	ldr	r3, [pc, #372]	@ (8000830 <lcdCommand+0x1d8>)
 80006ba:	7a1b      	ldrb	r3, [r3, #8]
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b5b      	ldr	r3, [pc, #364]	@ (8000830 <lcdCommand+0x1d8>)
 80006c4:	721a      	strb	r2, [r3, #8]
                    break;
 80006c6:	e042      	b.n	800074e <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 80006c8:	4b59      	ldr	r3, [pc, #356]	@ (8000830 <lcdCommand+0x1d8>)
 80006ca:	7a1b      	ldrb	r3, [r3, #8]
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b57      	ldr	r3, [pc, #348]	@ (8000830 <lcdCommand+0x1d8>)
 80006d4:	721a      	strb	r2, [r3, #8]
                    break;
 80006d6:	e03a      	b.n	800074e <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 80006d8:	2301      	movs	r3, #1
 80006da:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 80006dc:	f107 030f 	add.w	r3, r7, #15
 80006e0:	4619      	mov	r1, r3
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f8f4 	bl	80008d0 <lcdWriteByte>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d101      	bne.n	80006f2 <lcdCommand+0x9a>
                        return false;
 80006ee:	2300      	movs	r3, #0
 80006f0:	e09a      	b.n	8000828 <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 80006f2:	2002      	movs	r0, #2
 80006f4:	f006 fba6 	bl	8006e44 <vTaskDelay>
                        return true;
 80006f8:	2301      	movs	r3, #1
 80006fa:	e095      	b.n	8000828 <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 80006fc:	2302      	movs	r3, #2
 80006fe:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8000700:	f107 030f 	add.w	r3, r7, #15
 8000704:	4619      	mov	r1, r3
 8000706:	2000      	movs	r0, #0
 8000708:	f000 f8e2 	bl	80008d0 <lcdWriteByte>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <lcdCommand+0xbe>
                        return false;
 8000712:	2300      	movs	r3, #0
 8000714:	e088      	b.n	8000828 <lcdCommand+0x1d0>
                    } else {
                        vTaskDelay(2);
 8000716:	2002      	movs	r0, #2
 8000718:	f006 fb94 	bl	8006e44 <vTaskDelay>
                        return true;
 800071c:	2301      	movs	r3, #1
 800071e:	e083      	b.n	8000828 <lcdCommand+0x1d0>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 8000720:	4b43      	ldr	r3, [pc, #268]	@ (8000830 <lcdCommand+0x1d8>)
 8000722:	7a5b      	ldrb	r3, [r3, #9]
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4b41      	ldr	r3, [pc, #260]	@ (8000830 <lcdCommand+0x1d8>)
 800072c:	725a      	strb	r2, [r3, #9]
                    break;
 800072e:	e00e      	b.n	800074e <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 8000730:	4b3f      	ldr	r3, [pc, #252]	@ (8000830 <lcdCommand+0x1d8>)
 8000732:	7a5a      	ldrb	r2, [r3, #9]
 8000734:	4b3e      	ldr	r3, [pc, #248]	@ (8000830 <lcdCommand+0x1d8>)
 8000736:	725a      	strb	r2, [r3, #9]
                    break;
 8000738:	e009      	b.n	800074e <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 800073a:	4b3d      	ldr	r3, [pc, #244]	@ (8000830 <lcdCommand+0x1d8>)
 800073c:	7a5b      	ldrb	r3, [r3, #9]
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b3a      	ldr	r3, [pc, #232]	@ (8000830 <lcdCommand+0x1d8>)
 8000746:	725a      	strb	r2, [r3, #9]
                    break;
 8000748:	e001      	b.n	800074e <lcdCommand+0xf6>

                default:
                    return false;
 800074a:	2300      	movs	r3, #0
 800074c:	e06c      	b.n	8000828 <lcdCommand+0x1d0>
            }

            break;
 800074e:	e049      	b.n	80007e4 <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	3b01      	subs	r3, #1
 8000754:	2b07      	cmp	r3, #7
 8000756:	d840      	bhi.n	80007da <lcdCommand+0x182>
 8000758:	a201      	add	r2, pc, #4	@ (adr r2, 8000760 <lcdCommand+0x108>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	08000781 	.word	0x08000781
 8000764:	080007db 	.word	0x080007db
 8000768:	08000791 	.word	0x08000791
 800076c:	080007a1 	.word	0x080007a1
 8000770:	080007db 	.word	0x080007db
 8000774:	080007c1 	.word	0x080007c1
 8000778:	080007b1 	.word	0x080007b1
 800077c:	080007cb 	.word	0x080007cb
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 8000780:	4b2b      	ldr	r3, [pc, #172]	@ (8000830 <lcdCommand+0x1d8>)
 8000782:	7a1b      	ldrb	r3, [r3, #8]
 8000784:	f023 0304 	bic.w	r3, r3, #4
 8000788:	b2da      	uxtb	r2, r3
 800078a:	4b29      	ldr	r3, [pc, #164]	@ (8000830 <lcdCommand+0x1d8>)
 800078c:	721a      	strb	r2, [r3, #8]
                    break;
 800078e:	e026      	b.n	80007de <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8000790:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <lcdCommand+0x1d8>)
 8000792:	7a1b      	ldrb	r3, [r3, #8]
 8000794:	f023 0302 	bic.w	r3, r3, #2
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b25      	ldr	r3, [pc, #148]	@ (8000830 <lcdCommand+0x1d8>)
 800079c:	721a      	strb	r2, [r3, #8]
                    break;
 800079e:	e01e      	b.n	80007de <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 80007a0:	4b23      	ldr	r3, [pc, #140]	@ (8000830 <lcdCommand+0x1d8>)
 80007a2:	7a1b      	ldrb	r3, [r3, #8]
 80007a4:	f023 0301 	bic.w	r3, r3, #1
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b21      	ldr	r3, [pc, #132]	@ (8000830 <lcdCommand+0x1d8>)
 80007ac:	721a      	strb	r2, [r3, #8]
                    break;
 80007ae:	e016      	b.n	80007de <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <lcdCommand+0x1d8>)
 80007b2:	7a5b      	ldrb	r3, [r3, #9]
 80007b4:	f023 0302 	bic.w	r3, r3, #2
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <lcdCommand+0x1d8>)
 80007bc:	725a      	strb	r2, [r3, #9]
                    break;
 80007be:	e00e      	b.n	80007de <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <lcdCommand+0x1d8>)
 80007c2:	7a5a      	ldrb	r2, [r3, #9]
 80007c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <lcdCommand+0x1d8>)
 80007c6:	725a      	strb	r2, [r3, #9]
                    break;
 80007c8:	e009      	b.n	80007de <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <lcdCommand+0x1d8>)
 80007cc:	7a5b      	ldrb	r3, [r3, #9]
 80007ce:	f023 0301 	bic.w	r3, r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <lcdCommand+0x1d8>)
 80007d6:	725a      	strb	r2, [r3, #9]
                    break;
 80007d8:	e001      	b.n	80007de <lcdCommand+0x186>

                default:
                    return false;
 80007da:	2300      	movs	r3, #0
 80007dc:	e024      	b.n	8000828 <lcdCommand+0x1d0>
            }

            break;
 80007de:	e001      	b.n	80007e4 <lcdCommand+0x18c>

        default:
            return false;
 80007e0:	2300      	movs	r3, #0
 80007e2:	e021      	b.n	8000828 <lcdCommand+0x1d0>
    }

    /* Now lets send the command */
    switch (command) {
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b08      	cmp	r3, #8
 80007e8:	dc16      	bgt.n	8000818 <lcdCommand+0x1c0>
 80007ea:	2b06      	cmp	r3, #6
 80007ec:	da0d      	bge.n	800080a <lcdCommand+0x1b2>
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d004      	beq.n	80007fc <lcdCommand+0x1a4>
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	dd10      	ble.n	8000818 <lcdCommand+0x1c0>
 80007f6:	3b03      	subs	r3, #3
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d80d      	bhi.n	8000818 <lcdCommand+0x1c0>
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <lcdCommand+0x1d8>)
 80007fe:	7a1b      	ldrb	r3, [r3, #8]
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	b2db      	uxtb	r3, r3
 8000806:	73fb      	strb	r3, [r7, #15]
            break;
 8000808:	e007      	b.n	800081a <lcdCommand+0x1c2>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <lcdCommand+0x1d8>)
 800080c:	7a5b      	ldrb	r3, [r3, #9]
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	b2db      	uxtb	r3, r3
 8000814:	73fb      	strb	r3, [r7, #15]
            break;
 8000816:	e000      	b.n	800081a <lcdCommand+0x1c2>

        default:
            break;
 8000818:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 800081a:	f107 030f 	add.w	r3, r7, #15
 800081e:	4619      	mov	r1, r3
 8000820:	2000      	movs	r0, #0
 8000822:	f000 f855 	bl	80008d0 <lcdWriteByte>
 8000826:	4603      	mov	r3, r0
}
 8000828:	4618      	mov	r0, r3
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000288 	.word	0x20000288

08000834 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	460a      	mov	r2, r1
 800083e:	71fb      	strb	r3, [r7, #7]
 8000840:	4613      	mov	r3, r2
 8000842:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <lcdSetCursorPosition+0x50>)
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	79ba      	ldrb	r2, [r7, #6]
 800084a:	429a      	cmp	r2, r3
 800084c:	d303      	bcc.n	8000856 <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <lcdSetCursorPosition+0x50>)
 8000850:	791b      	ldrb	r3, [r3, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	4a0b      	ldr	r2, [pc, #44]	@ (8000888 <lcdSetCursorPosition+0x54>)
 800085a:	5cd2      	ldrb	r2, [r2, r3]
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4413      	add	r3, r2
 8000860:	b2db      	uxtb	r3, r3
 8000862:	b25b      	sxtb	r3, r3
 8000864:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000868:	b25b      	sxtb	r3, r3
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 800086e:	f107 030f 	add.w	r3, r7, #15
 8000872:	4619      	mov	r1, r3
 8000874:	2000      	movs	r0, #0
 8000876:	f000 f82b 	bl	80008d0 <lcdWriteByte>
 800087a:	4603      	mov	r3, r0
}
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000288 	.word	0x20000288
 8000888:	08007e74 	.word	0x08007e74

0800088c <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e00e      	b.n	80008bc <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	4413      	add	r3, r2
 80008a4:	4619      	mov	r1, r3
 80008a6:	2001      	movs	r0, #1
 80008a8:	f000 f812 	bl	80008d0 <lcdWriteByte>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d101      	bne.n	80008b6 <lcdPrintStr+0x2a>
            return false;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e007      	b.n	80008c6 <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	3301      	adds	r3, #1
 80008ba:	73fb      	strb	r3, [r7, #15]
 80008bc:	7bfa      	ldrb	r2, [r7, #15]
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d3ec      	bcc.n	800089e <lcdPrintStr+0x12>
        }
    }

    return true;
 80008c4:	2301      	movs	r3, #1
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 80008dc:	4b33      	ldr	r3, [pc, #204]	@ (80009ac <lcdWriteByte+0xdc>)
 80008de:	79da      	ldrb	r2, [r3, #7]
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	f023 030f 	bic.w	r3, r3, #15
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b2d      	ldr	r3, [pc, #180]	@ (80009b0 <lcdWriteByte+0xe0>)
 80008fc:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 80008fe:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <lcdWriteByte+0xe0>)
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	4b2b      	ldr	r3, [pc, #172]	@ (80009b0 <lcdWriteByte+0xe0>)
 8000904:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 8000906:	4b29      	ldr	r3, [pc, #164]	@ (80009ac <lcdWriteByte+0xdc>)
 8000908:	79da      	ldrb	r2, [r3, #7]
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	4313      	orrs	r3, r2
 800090e:	b2db      	uxtb	r3, r3
 8000910:	b25a      	sxtb	r2, r3
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b25b      	sxtb	r3, r3
 8000918:	f023 030f 	bic.w	r3, r3, #15
 800091c:	b25b      	sxtb	r3, r3
 800091e:	4313      	orrs	r3, r2
 8000920:	b25b      	sxtb	r3, r3
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <lcdWriteByte+0xe0>)
 8000926:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8000928:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <lcdWriteByte+0xdc>)
 800092a:	79da      	ldrb	r2, [r3, #7]
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	4313      	orrs	r3, r2
 8000930:	b2da      	uxtb	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4313      	orrs	r3, r2
 800093c:	b2db      	uxtb	r3, r3
 800093e:	f043 0304 	orr.w	r3, r3, #4
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <lcdWriteByte+0xe0>)
 8000946:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 8000948:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <lcdWriteByte+0xe0>)
 800094a:	78da      	ldrb	r2, [r3, #3]
 800094c:	4b18      	ldr	r3, [pc, #96]	@ (80009b0 <lcdWriteByte+0xe0>)
 800094e:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8000950:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <lcdWriteByte+0xdc>)
 8000952:	79da      	ldrb	r2, [r3, #7]
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	4313      	orrs	r3, r2
 8000958:	b2db      	uxtb	r3, r3
 800095a:	b25a      	sxtb	r2, r3
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	011b      	lsls	r3, r3, #4
 8000962:	b25b      	sxtb	r3, r3
 8000964:	4313      	orrs	r3, r2
 8000966:	b25b      	sxtb	r3, r3
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <lcdWriteByte+0xe0>)
 800096c:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <lcdWriteByte+0xdc>)
 8000970:	6818      	ldr	r0, [r3, #0]
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <lcdWriteByte+0xdc>)
 8000974:	799b      	ldrb	r3, [r3, #6]
 8000976:	4619      	mov	r1, r3
 8000978:	2306      	movs	r3, #6
 800097a:	4a0d      	ldr	r2, [pc, #52]	@ (80009b0 <lcdWriteByte+0xe0>)
 800097c:	f002 fcd8 	bl	8003330 <HAL_I2C_Master_Transmit_DMA>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d004      	beq.n	8000990 <lcdWriteByte+0xc0>
        return false;
 8000986:	2300      	movs	r3, #0
 8000988:	e00b      	b.n	80009a2 <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 800098a:	2001      	movs	r0, #1
 800098c:	f006 fa5a 	bl	8006e44 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <lcdWriteByte+0xdc>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f003 f851 	bl	8003a3c <HAL_I2C_GetState>
 800099a:	4603      	mov	r3, r0
 800099c:	2b20      	cmp	r3, #32
 800099e:	d1f4      	bne.n	800098a <lcdWriteByte+0xba>
    }

    return true;
 80009a0:	2301      	movs	r3, #1
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000288 	.word	0x20000288
 80009b0:	20000280 	.word	0x20000280

080009b4 <GetPosition>:
    lcdPrintStr((uint8_t*)mensaje, strlen(mensaje));
}

/*----------------------------------LCD Screen Code End----------------------------------------*/
/*-------------------------------------ServoADC Code--------------------------------------*/
float GetPosition(ADC_HandleTypeDef* hadc){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	float val = HAL_ADC_GetValue(hadc);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f001 fa9f 	bl	8001f00 <HAL_ADC_GetValue>
 80009c2:	ee07 0a90 	vmov	s15, r0
 80009c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009ca:	edc7 7a03 	vstr	s15, [r7, #12]
	return (val/ADCResolution)*ServoRange;
 80009ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80009d2:	eddf 6a06 	vldr	s13, [pc, #24]	@ 80009ec <GetPosition+0x38>
 80009d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009da:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80009f0 <GetPosition+0x3c>
 80009de:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80009e2:	eeb0 0a67 	vmov.f32	s0, s15
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	45800000 	.word	0x45800000
 80009f0:	43340000 	.word	0x43340000

080009f4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
		if(hadc->Instance == ADC1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a15      	ldr	r2, [pc, #84]	@ (8000a58 <HAL_ADC_ConvCpltCallback+0x64>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d108      	bne.n	8000a18 <HAL_ADC_ConvCpltCallback+0x24>
			 Pos_S1 = GetPosition(hadc);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ffd4 	bl	80009b4 <GetPosition>
 8000a0c:	eef0 7a40 	vmov.f32	s15, s0
 8000a10:	4b12      	ldr	r3, [pc, #72]	@ (8000a5c <HAL_ADC_ConvCpltCallback+0x68>)
 8000a12:	edc3 7a00 	vstr	s15, [r3]
		else if (hadc->Instance == ADC2)
			Pos_S2 = GetPosition(hadc);
		else if (hadc->Instance == ADC3)
			Pos_S3 = GetPosition(hadc);
	}
 8000a16:	e01a      	b.n	8000a4e <HAL_ADC_ConvCpltCallback+0x5a>
		else if (hadc->Instance == ADC2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a10      	ldr	r2, [pc, #64]	@ (8000a60 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d108      	bne.n	8000a34 <HAL_ADC_ConvCpltCallback+0x40>
			Pos_S2 = GetPosition(hadc);
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ffc6 	bl	80009b4 <GetPosition>
 8000a28:	eef0 7a40 	vmov.f32	s15, s0
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <HAL_ADC_ConvCpltCallback+0x70>)
 8000a2e:	edc3 7a00 	vstr	s15, [r3]
	}
 8000a32:	e00c      	b.n	8000a4e <HAL_ADC_ConvCpltCallback+0x5a>
		else if (hadc->Instance == ADC3)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0b      	ldr	r2, [pc, #44]	@ (8000a68 <HAL_ADC_ConvCpltCallback+0x74>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d107      	bne.n	8000a4e <HAL_ADC_ConvCpltCallback+0x5a>
			Pos_S3 = GetPosition(hadc);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ffb8 	bl	80009b4 <GetPosition>
 8000a44:	eef0 7a40 	vmov.f32	s15, s0
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_ADC_ConvCpltCallback+0x78>)
 8000a4a:	edc3 7a00 	vstr	s15, [r3]
	}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40012000 	.word	0x40012000
 8000a5c:	200005a4 	.word	0x200005a4
 8000a60:	40012100 	.word	0x40012100
 8000a64:	200005a8 	.word	0x200005a8
 8000a68:	40012200 	.word	0x40012200
 8000a6c:	200005ac 	.word	0x200005ac

08000a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a70:	b5b0      	push	{r4, r5, r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a76:	f000 ff9f 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7a:	f000 f85d 	bl	8000b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7e:	f000 fbe9 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a82:	f000 fbbf 	bl	8001204 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a86:	f000 f8c1 	bl	8000c0c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000a8a:	f000 f911 	bl	8000cb0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000a8e:	f000 f961 	bl	8000d54 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000a92:	f000 f9df 	bl	8000e54 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a96:	f000 fa61 	bl	8000f5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a9a:	f000 fadf 	bl	800105c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a9e:	f000 fb5d 	bl	800115c <MX_TIM4_Init>
  MX_I2C1_Init();
 8000aa2:	f000 f9a9 	bl	8000df8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_ADC_Start_IT(&hadc1);
 8000aa6:	481a      	ldr	r0, [pc, #104]	@ (8000b10 <main+0xa0>)
 8000aa8:	f001 f83c 	bl	8001b24 <HAL_ADC_Start_IT>
  	  HAL_ADC_Start_IT(&hadc2);
 8000aac:	4819      	ldr	r0, [pc, #100]	@ (8000b14 <main+0xa4>)
 8000aae:	f001 f839 	bl	8001b24 <HAL_ADC_Start_IT>
      HAL_ADC_Start_IT(&hadc3);
 8000ab2:	4819      	ldr	r0, [pc, #100]	@ (8000b18 <main+0xa8>)
 8000ab4:	f001 f836 	bl	8001b24 <HAL_ADC_Start_IT>
 	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4818      	ldr	r0, [pc, #96]	@ (8000b1c <main+0xac>)
 8000abc:	f004 ffe6 	bl	8005a8c <HAL_TIM_PWM_Start>
 	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4817      	ldr	r0, [pc, #92]	@ (8000b20 <main+0xb0>)
 8000ac4:	f004 ffe2 	bl	8005a8c <HAL_TIM_PWM_Start>
 	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4816      	ldr	r0, [pc, #88]	@ (8000b24 <main+0xb4>)
 8000acc:	f004 ffde 	bl	8005a8c <HAL_TIM_PWM_Start>
 	  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000ad0:	210c      	movs	r1, #12
 8000ad2:	4815      	ldr	r0, [pc, #84]	@ (8000b28 <main+0xb8>)
 8000ad4:	f005 f8f2 	bl	8005cbc <HAL_TIM_IC_Start_IT>
	  lcdInit(&hi2c1, 0x27, 4, 20); // Direction I2C 0x27, 4 rows y 20 columns
 8000ad8:	2314      	movs	r3, #20
 8000ada:	2204      	movs	r2, #4
 8000adc:	2127      	movs	r1, #39	@ 0x27
 8000ade:	4813      	ldr	r0, [pc, #76]	@ (8000b2c <main+0xbc>)
 8000ae0:	f7ff fd08 	bl	80004f4 <lcdInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <main+0xc0>)
 8000ae6:	1d3c      	adds	r4, r7, #4
 8000ae8:	461d      	mov	r5, r3
 8000aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000af2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f005 fe8b 	bl	8006816 <osThreadCreate>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4a0c      	ldr	r2, [pc, #48]	@ (8000b34 <main+0xc4>)
 8000b04:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b06:	f005 fe7f 	bl	8006808 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b0a:	bf00      	nop
 8000b0c:	e7fd      	b.n	8000b0a <main+0x9a>
 8000b0e:	bf00      	nop
 8000b10:	20000294 	.word	0x20000294
 8000b14:	200002dc 	.word	0x200002dc
 8000b18:	20000324 	.word	0x20000324
 8000b1c:	20000480 	.word	0x20000480
 8000b20:	200004c8 	.word	0x200004c8
 8000b24:	20000510 	.word	0x20000510
 8000b28:	20000558 	.word	0x20000558
 8000b2c:	2000036c 	.word	0x2000036c
 8000b30:	08007e40 	.word	0x08007e40
 8000b34:	200005a0 	.word	0x200005a0

08000b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b094      	sub	sp, #80	@ 0x50
 8000b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3e:	f107 0320 	add.w	r3, r7, #32
 8000b42:	2230      	movs	r2, #48	@ 0x30
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 f93c 	bl	8007dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	4b28      	ldr	r3, [pc, #160]	@ (8000c04 <SystemClock_Config+0xcc>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b64:	4a27      	ldr	r2, [pc, #156]	@ (8000c04 <SystemClock_Config+0xcc>)
 8000b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6c:	4b25      	ldr	r3, [pc, #148]	@ (8000c04 <SystemClock_Config+0xcc>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	4b22      	ldr	r3, [pc, #136]	@ (8000c08 <SystemClock_Config+0xd0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a21      	ldr	r2, [pc, #132]	@ (8000c08 <SystemClock_Config+0xd0>)
 8000b82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <SystemClock_Config+0xd0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b94:	2302      	movs	r3, #2
 8000b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000bac:	2332      	movs	r3, #50	@ 0x32
 8000bae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bb4:	2307      	movs	r3, #7
 8000bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb8:	f107 0320 	add.w	r3, r7, #32
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f004 fae1 	bl	8005184 <HAL_RCC_OscConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bc8:	f000 fbc4 	bl	8001354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bcc:	230f      	movs	r3, #15
 8000bce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bd8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000be4:	f107 030c 	add.w	r3, r7, #12
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 fd42 	bl	8005674 <HAL_RCC_ClockConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bf6:	f000 fbad 	bl	8001354 <Error_Handler>
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3750      	adds	r7, #80	@ 0x50
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40007000 	.word	0x40007000

08000c0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c12:	463b      	mov	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c20:	4a21      	ldr	r2, [pc, #132]	@ (8000ca8 <MX_ADC1_Init+0x9c>)
 8000c22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c4c:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <MX_ADC1_Init+0xa0>)
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c6a:	480e      	ldr	r0, [pc, #56]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c6c:	f000 ff16 	bl	8001a9c <HAL_ADC_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c76:	f000 fb6d 	bl	8001354 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c86:	463b      	mov	r3, r7
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	@ (8000ca4 <MX_ADC1_Init+0x98>)
 8000c8c:	f001 f95a 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c96:	f000 fb5d 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000294 	.word	0x20000294
 8000ca8:	40012000 	.word	0x40012000
 8000cac:	0f000001 	.word	0x0f000001

08000cb0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000cc4:	4a21      	ldr	r2, [pc, #132]	@ (8000d4c <MX_ADC2_Init+0x9c>)
 8000cc6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cce:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cee:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000cf0:	4a17      	ldr	r2, [pc, #92]	@ (8000d50 <MX_ADC2_Init+0xa0>)
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d0e:	480e      	ldr	r0, [pc, #56]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000d10:	f000 fec4 	bl	8001a9c <HAL_ADC_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000d1a:	f000 fb1b 	bl	8001354 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d22:	2301      	movs	r3, #1
 8000d24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <MX_ADC2_Init+0x98>)
 8000d30:	f001 f908 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000d3a:	f000 fb0b 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200002dc 	.word	0x200002dc
 8000d4c:	40012100 	.word	0x40012100
 8000d50:	0f000001 	.word	0x0f000001

08000d54 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d66:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000d68:	4a21      	ldr	r2, [pc, #132]	@ (8000df0 <MX_ADC3_Init+0x9c>)
 8000d6a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d72:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000d78:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d84:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000d94:	4a17      	ldr	r2, [pc, #92]	@ (8000df4 <MX_ADC3_Init+0xa0>)
 8000d96:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d98:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000db2:	480e      	ldr	r0, [pc, #56]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000db4:	f000 fe72 	bl	8001a9c <HAL_ADC_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000dbe:	f000 fac9 	bl	8001354 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	@ (8000dec <MX_ADC3_Init+0x98>)
 8000dd4:	f001 f8b6 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000dde:	f000 fab9 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000324 	.word	0x20000324
 8000df0:	40012200 	.word	0x40012200
 8000df4:	0f000001 	.word	0x0f000001

08000df8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000dfe:	4a13      	ldr	r2, [pc, #76]	@ (8000e4c <MX_I2C1_Init+0x54>)
 8000e00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e04:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <MX_I2C1_Init+0x58>)
 8000e06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e28:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	@ (8000e48 <MX_I2C1_Init+0x50>)
 8000e36:	f002 f921 	bl	800307c <HAL_I2C_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e40:	f000 fa88 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000036c 	.word	0x2000036c
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	000186a0 	.word	0x000186a0

08000e54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	@ 0x30
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e80:	4b34      	ldr	r3, [pc, #208]	@ (8000f54 <MX_TIM1_Init+0x100>)
 8000e82:	4a35      	ldr	r2, [pc, #212]	@ (8000f58 <MX_TIM1_Init+0x104>)
 8000e84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 260-1;
 8000e86:	4b33      	ldr	r3, [pc, #204]	@ (8000f54 <MX_TIM1_Init+0x100>)
 8000e88:	f240 1203 	movw	r2, #259	@ 0x103
 8000e8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b31      	ldr	r3, [pc, #196]	@ (8000f54 <MX_TIM1_Init+0x100>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8000e94:	4b2f      	ldr	r3, [pc, #188]	@ (8000f54 <MX_TIM1_Init+0x100>)
 8000e96:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000e9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f54 <MX_TIM1_Init+0x100>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f54 <MX_TIM1_Init+0x100>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f54 <MX_TIM1_Init+0x100>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000eae:	4829      	ldr	r0, [pc, #164]	@ (8000f54 <MX_TIM1_Init+0x100>)
 8000eb0:	f004 feb4 	bl	8005c1c <HAL_TIM_IC_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000eba:	f000 fa4b 	bl	8001354 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000ec2:	2350      	movs	r3, #80	@ 0x50
 8000ec4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	481e      	ldr	r0, [pc, #120]	@ (8000f54 <MX_TIM1_Init+0x100>)
 8000eda:	f005 f8b3 	bl	8006044 <HAL_TIM_SlaveConfigSynchro>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000ee4:	f000 fa36 	bl	8001354 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eec:	2301      	movs	r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2200      	movs	r2, #0
 8000efe:	4619      	mov	r1, r3
 8000f00:	4814      	ldr	r0, [pc, #80]	@ (8000f54 <MX_TIM1_Init+0x100>)
 8000f02:	f005 f803 	bl	8005f0c <HAL_TIM_IC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000f0c:	f000 fa22 	bl	8001354 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000f10:	2302      	movs	r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f14:	2302      	movs	r3, #2
 8000f16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	2204      	movs	r2, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <MX_TIM1_Init+0x100>)
 8000f22:	f004 fff3 	bl	8005f0c <HAL_TIM_IC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000f2c:	f000 fa12 	bl	8001354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <MX_TIM1_Init+0x100>)
 8000f3e:	f005 fbcf 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000f48:	f000 fa04 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3730      	adds	r7, #48	@ 0x30
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000480 	.word	0x20000480
 8000f58:	40010000 	.word	0x40010000

08000f5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	@ 0x30
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
 8000f6e:	60da      	str	r2, [r3, #12]
 8000f70:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f88:	4b33      	ldr	r3, [pc, #204]	@ (8001058 <MX_TIM2_Init+0xfc>)
 8000f8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8000f90:	4b31      	ldr	r3, [pc, #196]	@ (8001058 <MX_TIM2_Init+0xfc>)
 8000f92:	229f      	movs	r2, #159	@ 0x9f
 8000f94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b30      	ldr	r3, [pc, #192]	@ (8001058 <MX_TIM2_Init+0xfc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001058 <MX_TIM2_Init+0xfc>)
 8000f9e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000fa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8001058 <MX_TIM2_Init+0xfc>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000faa:	4b2b      	ldr	r3, [pc, #172]	@ (8001058 <MX_TIM2_Init+0xfc>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000fb0:	4829      	ldr	r0, [pc, #164]	@ (8001058 <MX_TIM2_Init+0xfc>)
 8000fb2:	f004 fe33 	bl	8005c1c <HAL_TIM_IC_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000fbc:	f000 f9ca 	bl	8001354 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000fc4:	2350      	movs	r3, #80	@ 0x50
 8000fc6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481f      	ldr	r0, [pc, #124]	@ (8001058 <MX_TIM2_Init+0xfc>)
 8000fdc:	f005 f832 	bl	8006044 <HAL_TIM_SlaveConfigSynchro>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fe6:	f000 f9b5 	bl	8001354 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2200      	movs	r2, #0
 8001000:	4619      	mov	r1, r3
 8001002:	4815      	ldr	r0, [pc, #84]	@ (8001058 <MX_TIM2_Init+0xfc>)
 8001004:	f004 ff82 	bl	8005f0c <HAL_TIM_IC_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800100e:	f000 f9a1 	bl	8001354 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001012:	2302      	movs	r3, #2
 8001014:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001016:	2302      	movs	r3, #2
 8001018:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2204      	movs	r2, #4
 8001020:	4619      	mov	r1, r3
 8001022:	480d      	ldr	r0, [pc, #52]	@ (8001058 <MX_TIM2_Init+0xfc>)
 8001024:	f004 ff72 	bl	8005f0c <HAL_TIM_IC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800102e:	f000 f991 	bl	8001354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	@ (8001058 <MX_TIM2_Init+0xfc>)
 8001040:	f005 fb4e 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800104a:	f000 f983 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	3730      	adds	r7, #48	@ 0x30
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200004c8 	.word	0x200004c8

0800105c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	@ 0x30
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001088:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <MX_TIM3_Init+0xf8>)
 800108a:	4a33      	ldr	r2, [pc, #204]	@ (8001158 <MX_TIM3_Init+0xfc>)
 800108c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 800108e:	4b31      	ldr	r3, [pc, #196]	@ (8001154 <MX_TIM3_Init+0xf8>)
 8001090:	229f      	movs	r2, #159	@ 0x9f
 8001092:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001094:	4b2f      	ldr	r3, [pc, #188]	@ (8001154 <MX_TIM3_Init+0xf8>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 800109a:	4b2e      	ldr	r3, [pc, #184]	@ (8001154 <MX_TIM3_Init+0xf8>)
 800109c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001154 <MX_TIM3_Init+0xf8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001154 <MX_TIM3_Init+0xf8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80010ae:	4829      	ldr	r0, [pc, #164]	@ (8001154 <MX_TIM3_Init+0xf8>)
 80010b0:	f004 fdb4 	bl	8005c1c <HAL_TIM_IC_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80010ba:	f000 f94b 	bl	8001354 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80010be:	2304      	movs	r3, #4
 80010c0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80010c2:	2350      	movs	r3, #80	@ 0x50
 80010c4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	481e      	ldr	r0, [pc, #120]	@ (8001154 <MX_TIM3_Init+0xf8>)
 80010da:	f004 ffb3 	bl	8006044 <HAL_TIM_SlaveConfigSynchro>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80010e4:	f000 f936 	bl	8001354 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010ec:	2301      	movs	r3, #1
 80010ee:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	4814      	ldr	r0, [pc, #80]	@ (8001154 <MX_TIM3_Init+0xf8>)
 8001102:	f004 ff03 	bl	8005f0c <HAL_TIM_IC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800110c:	f000 f922 	bl	8001354 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001110:	2302      	movs	r3, #2
 8001112:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001114:	2302      	movs	r3, #2
 8001116:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2204      	movs	r2, #4
 800111e:	4619      	mov	r1, r3
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <MX_TIM3_Init+0xf8>)
 8001122:	f004 fef3 	bl	8005f0c <HAL_TIM_IC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800112c:	f000 f912 	bl	8001354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_TIM3_Init+0xf8>)
 800113e:	f005 facf 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001148:	f000 f904 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	3730      	adds	r7, #48	@ 0x30
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000510 	.word	0x20000510
 8001158:	40000400 	.word	0x40000400

0800115c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001178:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <MX_TIM4_Init+0xa0>)
 800117a:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <MX_TIM4_Init+0xa4>)
 800117c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800117e:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <MX_TIM4_Init+0xa0>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <MX_TIM4_Init+0xa0>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <MX_TIM4_Init+0xa0>)
 800118c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001190:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001192:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <MX_TIM4_Init+0xa0>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <MX_TIM4_Init+0xa0>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800119e:	4817      	ldr	r0, [pc, #92]	@ (80011fc <MX_TIM4_Init+0xa0>)
 80011a0:	f004 fd3c 	bl	8005c1c <HAL_TIM_IC_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80011aa:	f000 f8d3 	bl	8001354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011b6:	f107 0310 	add.w	r3, r7, #16
 80011ba:	4619      	mov	r1, r3
 80011bc:	480f      	ldr	r0, [pc, #60]	@ (80011fc <MX_TIM4_Init+0xa0>)
 80011be:	f005 fa8f 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80011c8:	f000 f8c4 	bl	8001354 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011cc:	2300      	movs	r3, #0
 80011ce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011d0:	2301      	movs	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	220c      	movs	r2, #12
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	@ (80011fc <MX_TIM4_Init+0xa0>)
 80011e4:	f004 fe92 	bl	8005f0c <HAL_TIM_IC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80011ee:	f000 f8b1 	bl	8001354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000558 	.word	0x20000558
 8001200:	40000800 	.word	0x40000800

08001204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <MX_DMA_Init+0x4c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a0f      	ldr	r2, [pc, #60]	@ (8001250 <MX_DMA_Init+0x4c>)
 8001214:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <MX_DMA_Init+0x4c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2105      	movs	r1, #5
 800122a:	200b      	movs	r0, #11
 800122c:	f001 f98d 	bl	800254a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001230:	200b      	movs	r0, #11
 8001232:	f001 f9a6 	bl	8002582 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2105      	movs	r1, #5
 800123a:	2011      	movs	r0, #17
 800123c:	f001 f985 	bl	800254a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001240:	2011      	movs	r0, #17
 8001242:	f001 f99e 	bl	8002582 <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	@ 0x28
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <MX_GPIO_Init+0xb4>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a25      	ldr	r2, [pc, #148]	@ (8001308 <MX_GPIO_Init+0xb4>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <MX_GPIO_Init+0xb4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <MX_GPIO_Init+0xb4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a1e      	ldr	r2, [pc, #120]	@ (8001308 <MX_GPIO_Init+0xb4>)
 8001290:	f043 0310 	orr.w	r3, r3, #16
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_GPIO_Init+0xb4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_GPIO_Init+0xb4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a17      	ldr	r2, [pc, #92]	@ (8001308 <MX_GPIO_Init+0xb4>)
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_GPIO_Init+0xb4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0308 	and.w	r3, r3, #8
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <MX_GPIO_Init+0xb4>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a10      	ldr	r2, [pc, #64]	@ (8001308 <MX_GPIO_Init+0xb4>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001308 <MX_GPIO_Init+0xb4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2110      	movs	r1, #16
 80012de:	480b      	ldr	r0, [pc, #44]	@ (800130c <MX_GPIO_Init+0xb8>)
 80012e0:	f001 feb2 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012e4:	2310      	movs	r3, #16
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4804      	ldr	r0, [pc, #16]	@ (800130c <MX_GPIO_Init+0xb8>)
 80012fc:	f001 fd08 	bl	8002d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	@ 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000

08001310 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)4, (uint8_t)20);
 8001318:	2314      	movs	r3, #20
 800131a:	2204      	movs	r2, #4
 800131c:	2127      	movs	r1, #39	@ 0x27
 800131e:	480a      	ldr	r0, [pc, #40]	@ (8001348 <StartDefaultTask+0x38>)
 8001320:	f7ff f8e8 	bl	80004f4 <lcdInit>

	    // Print text and home position 0,0
	    lcdPrintStr((uint8_t*)"Hello,", 6);
 8001324:	2106      	movs	r1, #6
 8001326:	4809      	ldr	r0, [pc, #36]	@ (800134c <StartDefaultTask+0x3c>)
 8001328:	f7ff fab0 	bl	800088c <lcdPrintStr>

	    // Set cursor at zero position of line 3
	    lcdSetCursorPosition(0, 2);
 800132c:	2102      	movs	r1, #2
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fa80 	bl	8000834 <lcdSetCursorPosition>

	    // Print text at cursor position
	    lcdPrintStr((uint8_t*)"World!", 6);
 8001334:	2106      	movs	r1, #6
 8001336:	4806      	ldr	r0, [pc, #24]	@ (8001350 <StartDefaultTask+0x40>)
 8001338:	f7ff faa8 	bl	800088c <lcdPrintStr>

	    for (;;) {
	        vTaskDelay(1000);
 800133c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001340:	f005 fd80 	bl	8006e44 <vTaskDelay>
 8001344:	e7fa      	b.n	800133c <StartDefaultTask+0x2c>
 8001346:	bf00      	nop
 8001348:	2000036c 	.word	0x2000036c
 800134c:	08007e5c 	.word	0x08007e5c
 8001350:	08007e64 	.word	0x08007e64

08001354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001358:	b672      	cpsid	i
}
 800135a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <Error_Handler+0x8>

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <HAL_MspInit+0x54>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	4a11      	ldr	r2, [pc, #68]	@ (80013b4 <HAL_MspInit+0x54>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001374:	6453      	str	r3, [r2, #68]	@ 0x44
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <HAL_MspInit+0x54>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <HAL_MspInit+0x54>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138a:	4a0a      	ldr	r2, [pc, #40]	@ (80013b4 <HAL_MspInit+0x54>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	@ 0x40
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <HAL_MspInit+0x54>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	210f      	movs	r1, #15
 80013a2:	f06f 0001 	mvn.w	r0, #1
 80013a6:	f001 f8d0 	bl	800254a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	@ 0x38
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a51      	ldr	r2, [pc, #324]	@ (800151c <HAL_ADC_MspInit+0x164>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d130      	bne.n	800143c <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
 80013de:	4b50      	ldr	r3, [pc, #320]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	4a4f      	ldr	r2, [pc, #316]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 80013e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	4b49      	ldr	r3, [pc, #292]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a48      	ldr	r2, [pc, #288]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b46      	ldr	r3, [pc, #280]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001412:	2302      	movs	r3, #2
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001416:	2303      	movs	r3, #3
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	483f      	ldr	r0, [pc, #252]	@ (8001524 <HAL_ADC_MspInit+0x16c>)
 8001426:	f001 fc73 	bl	8002d10 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2105      	movs	r1, #5
 800142e:	2012      	movs	r0, #18
 8001430:	f001 f88b 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001434:	2012      	movs	r0, #18
 8001436:	f001 f8a4 	bl	8002582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800143a:	e06a      	b.n	8001512 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a39      	ldr	r2, [pc, #228]	@ (8001528 <HAL_ADC_MspInit+0x170>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d130      	bne.n	80014a8 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	4b35      	ldr	r3, [pc, #212]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	4a34      	ldr	r2, [pc, #208]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 8001450:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001454:	6453      	str	r3, [r2, #68]	@ 0x44
 8001456:	4b32      	ldr	r3, [pc, #200]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	4b2e      	ldr	r3, [pc, #184]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a2d      	ldr	r2, [pc, #180]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b2b      	ldr	r3, [pc, #172]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800147e:	2304      	movs	r3, #4
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001482:	2303      	movs	r3, #3
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800148e:	4619      	mov	r1, r3
 8001490:	4824      	ldr	r0, [pc, #144]	@ (8001524 <HAL_ADC_MspInit+0x16c>)
 8001492:	f001 fc3d 	bl	8002d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2105      	movs	r1, #5
 800149a:	2012      	movs	r0, #18
 800149c:	f001 f855 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80014a0:	2012      	movs	r0, #18
 80014a2:	f001 f86e 	bl	8002582 <HAL_NVIC_EnableIRQ>
}
 80014a6:	e034      	b.n	8001512 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <HAL_ADC_MspInit+0x174>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12f      	bne.n	8001512 <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	4a19      	ldr	r2, [pc, #100]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 80014bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c2:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <HAL_ADC_MspInit+0x168>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014ea:	2308      	movs	r3, #8
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ee:	2303      	movs	r3, #3
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fa:	4619      	mov	r1, r3
 80014fc:	4809      	ldr	r0, [pc, #36]	@ (8001524 <HAL_ADC_MspInit+0x16c>)
 80014fe:	f001 fc07 	bl	8002d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2105      	movs	r1, #5
 8001506:	2012      	movs	r0, #18
 8001508:	f001 f81f 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800150c:	2012      	movs	r0, #18
 800150e:	f001 f838 	bl	8002582 <HAL_NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3738      	adds	r7, #56	@ 0x38
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40012000 	.word	0x40012000
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000
 8001528:	40012100 	.word	0x40012100
 800152c:	40012200 	.word	0x40012200

08001530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a4f      	ldr	r2, [pc, #316]	@ (800168c <HAL_I2C_MspInit+0x15c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	f040 8098 	bne.w	8001684 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	4b4d      	ldr	r3, [pc, #308]	@ (8001690 <HAL_I2C_MspInit+0x160>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	4a4c      	ldr	r2, [pc, #304]	@ (8001690 <HAL_I2C_MspInit+0x160>)
 800155e:	f043 0302 	orr.w	r3, r3, #2
 8001562:	6313      	str	r3, [r2, #48]	@ 0x30
 8001564:	4b4a      	ldr	r3, [pc, #296]	@ (8001690 <HAL_I2C_MspInit+0x160>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001570:	23c0      	movs	r3, #192	@ 0xc0
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001574:	2312      	movs	r3, #18
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001580:	2304      	movs	r3, #4
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4842      	ldr	r0, [pc, #264]	@ (8001694 <HAL_I2C_MspInit+0x164>)
 800158c:	f001 fbc0 	bl	8002d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	4b3e      	ldr	r3, [pc, #248]	@ (8001690 <HAL_I2C_MspInit+0x160>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	4a3d      	ldr	r2, [pc, #244]	@ (8001690 <HAL_I2C_MspInit+0x160>)
 800159a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800159e:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001690 <HAL_I2C_MspInit+0x160>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80015ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001698 <HAL_I2C_MspInit+0x168>)
 80015ae:	4a3b      	ldr	r2, [pc, #236]	@ (800169c <HAL_I2C_MspInit+0x16c>)
 80015b0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80015b2:	4b39      	ldr	r3, [pc, #228]	@ (8001698 <HAL_I2C_MspInit+0x168>)
 80015b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015b8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ba:	4b37      	ldr	r3, [pc, #220]	@ (8001698 <HAL_I2C_MspInit+0x168>)
 80015bc:	2240      	movs	r2, #64	@ 0x40
 80015be:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	4b35      	ldr	r3, [pc, #212]	@ (8001698 <HAL_I2C_MspInit+0x168>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	4b34      	ldr	r3, [pc, #208]	@ (8001698 <HAL_I2C_MspInit+0x168>)
 80015c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015cc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ce:	4b32      	ldr	r3, [pc, #200]	@ (8001698 <HAL_I2C_MspInit+0x168>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d4:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <HAL_I2C_MspInit+0x168>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80015da:	4b2f      	ldr	r3, [pc, #188]	@ (8001698 <HAL_I2C_MspInit+0x168>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001698 <HAL_I2C_MspInit+0x168>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001698 <HAL_I2C_MspInit+0x168>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80015ec:	482a      	ldr	r0, [pc, #168]	@ (8001698 <HAL_I2C_MspInit+0x168>)
 80015ee:	f000 ffe3 	bl	80025b8 <HAL_DMA_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80015f8:	f7ff feac 	bl	8001354 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a26      	ldr	r2, [pc, #152]	@ (8001698 <HAL_I2C_MspInit+0x168>)
 8001600:	635a      	str	r2, [r3, #52]	@ 0x34
 8001602:	4a25      	ldr	r2, [pc, #148]	@ (8001698 <HAL_I2C_MspInit+0x168>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001608:	4b25      	ldr	r3, [pc, #148]	@ (80016a0 <HAL_I2C_MspInit+0x170>)
 800160a:	4a26      	ldr	r2, [pc, #152]	@ (80016a4 <HAL_I2C_MspInit+0x174>)
 800160c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800160e:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <HAL_I2C_MspInit+0x170>)
 8001610:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001614:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001616:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <HAL_I2C_MspInit+0x170>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800161c:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <HAL_I2C_MspInit+0x170>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001622:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <HAL_I2C_MspInit+0x170>)
 8001624:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001628:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <HAL_I2C_MspInit+0x170>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <HAL_I2C_MspInit+0x170>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <HAL_I2C_MspInit+0x170>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <HAL_I2C_MspInit+0x170>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001642:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <HAL_I2C_MspInit+0x170>)
 8001644:	2200      	movs	r2, #0
 8001646:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001648:	4815      	ldr	r0, [pc, #84]	@ (80016a0 <HAL_I2C_MspInit+0x170>)
 800164a:	f000 ffb5 	bl	80025b8 <HAL_DMA_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8001654:	f7ff fe7e 	bl	8001354 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a11      	ldr	r2, [pc, #68]	@ (80016a0 <HAL_I2C_MspInit+0x170>)
 800165c:	639a      	str	r2, [r3, #56]	@ 0x38
 800165e:	4a10      	ldr	r2, [pc, #64]	@ (80016a0 <HAL_I2C_MspInit+0x170>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2105      	movs	r1, #5
 8001668:	201f      	movs	r0, #31
 800166a:	f000 ff6e 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800166e:	201f      	movs	r0, #31
 8001670:	f000 ff87 	bl	8002582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2105      	movs	r1, #5
 8001678:	2020      	movs	r0, #32
 800167a:	f000 ff66 	bl	800254a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800167e:	2020      	movs	r0, #32
 8001680:	f000 ff7f 	bl	8002582 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	@ 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40005400 	.word	0x40005400
 8001690:	40023800 	.word	0x40023800
 8001694:	40020400 	.word	0x40020400
 8001698:	200003c0 	.word	0x200003c0
 800169c:	400260a0 	.word	0x400260a0
 80016a0:	20000420 	.word	0x20000420
 80016a4:	40026010 	.word	0x40026010

080016a8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b090      	sub	sp, #64	@ 0x40
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a65      	ldr	r2, [pc, #404]	@ (800185c <HAL_TIM_IC_MspInit+0x1b4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d12d      	bne.n	8001726 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016ce:	4b64      	ldr	r3, [pc, #400]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	4a63      	ldr	r2, [pc, #396]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016da:	4b61      	ldr	r3, [pc, #388]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001702:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001706:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001714:	2301      	movs	r3, #1
 8001716:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001718:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800171c:	4619      	mov	r1, r3
 800171e:	4851      	ldr	r0, [pc, #324]	@ (8001864 <HAL_TIM_IC_MspInit+0x1bc>)
 8001720:	f001 faf6 	bl	8002d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001724:	e095      	b.n	8001852 <HAL_TIM_IC_MspInit+0x1aa>
  else if(htim_ic->Instance==TIM2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800172e:	d12c      	bne.n	800178a <HAL_TIM_IC_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
 8001734:	4b4a      	ldr	r3, [pc, #296]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	4a49      	ldr	r2, [pc, #292]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001740:	4b47      	ldr	r3, [pc, #284]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	623b      	str	r3, [r7, #32]
 800174a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	4b43      	ldr	r3, [pc, #268]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001754:	4a42      	ldr	r2, [pc, #264]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6313      	str	r3, [r2, #48]	@ 0x30
 800175c:	4b40      	ldr	r3, [pc, #256]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	61fb      	str	r3, [r7, #28]
 8001766:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001768:	2301      	movs	r3, #1
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001778:	2301      	movs	r3, #1
 800177a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001780:	4619      	mov	r1, r3
 8001782:	4839      	ldr	r0, [pc, #228]	@ (8001868 <HAL_TIM_IC_MspInit+0x1c0>)
 8001784:	f001 fac4 	bl	8002d10 <HAL_GPIO_Init>
}
 8001788:	e063      	b.n	8001852 <HAL_TIM_IC_MspInit+0x1aa>
  else if(htim_ic->Instance==TIM3)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a37      	ldr	r2, [pc, #220]	@ (800186c <HAL_TIM_IC_MspInit+0x1c4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d12c      	bne.n	80017ee <HAL_TIM_IC_MspInit+0x146>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001794:	2300      	movs	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	4b31      	ldr	r3, [pc, #196]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	4a30      	ldr	r2, [pc, #192]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 800179e:	f043 0302 	orr.w	r3, r3, #2
 80017a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b8:	4a29      	ldr	r2, [pc, #164]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c0:	4b27      	ldr	r3, [pc, #156]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017cc:	2340      	movs	r3, #64	@ 0x40
 80017ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017dc:	2302      	movs	r3, #2
 80017de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017e4:	4619      	mov	r1, r3
 80017e6:	4820      	ldr	r0, [pc, #128]	@ (8001868 <HAL_TIM_IC_MspInit+0x1c0>)
 80017e8:	f001 fa92 	bl	8002d10 <HAL_GPIO_Init>
}
 80017ec:	e031      	b.n	8001852 <HAL_TIM_IC_MspInit+0x1aa>
  else if(htim_ic->Instance==TIM4)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001870 <HAL_TIM_IC_MspInit+0x1c8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d12c      	bne.n	8001852 <HAL_TIM_IC_MspInit+0x1aa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 8001802:	f043 0304 	orr.w	r3, r3, #4
 8001806:	6413      	str	r3, [r2, #64]	@ 0x40
 8001808:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181c:	4a10      	ldr	r2, [pc, #64]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 800181e:	f043 0308 	orr.w	r3, r3, #8
 8001822:	6313      	str	r3, [r2, #48]	@ 0x30
 8001824:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <HAL_TIM_IC_MspInit+0x1b8>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001830:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001842:	2302      	movs	r3, #2
 8001844:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001846:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800184a:	4619      	mov	r1, r3
 800184c:	4809      	ldr	r0, [pc, #36]	@ (8001874 <HAL_TIM_IC_MspInit+0x1cc>)
 800184e:	f001 fa5f 	bl	8002d10 <HAL_GPIO_Init>
}
 8001852:	bf00      	nop
 8001854:	3740      	adds	r7, #64	@ 0x40
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40010000 	.word	0x40010000
 8001860:	40023800 	.word	0x40023800
 8001864:	40021000 	.word	0x40021000
 8001868:	40020000 	.word	0x40020000
 800186c:	40000400 	.word	0x40000400
 8001870:	40000800 	.word	0x40000800
 8001874:	40020c00 	.word	0x40020c00

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <NMI_Handler+0x4>

08001880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <MemManage_Handler+0x4>

08001890 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <UsageFault_Handler+0x4>

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b2:	f000 f8d3 	bl	8001a5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018b6:	f005 fe05 	bl	80074c4 <xTaskGetSchedulerState>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d001      	beq.n	80018c4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018c0:	f006 f842 	bl	8007948 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <DMA1_Stream0_IRQHandler+0x10>)
 80018ce:	f000 ff9b 	bl	8002808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000420 	.word	0x20000420

080018dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <DMA1_Stream6_IRQHandler+0x10>)
 80018e2:	f000 ff91 	bl	8002808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200003c0 	.word	0x200003c0

080018f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018f4:	4805      	ldr	r0, [pc, #20]	@ (800190c <ADC_IRQHandler+0x1c>)
 80018f6:	f000 f9f3 	bl	8001ce0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80018fa:	4805      	ldr	r0, [pc, #20]	@ (8001910 <ADC_IRQHandler+0x20>)
 80018fc:	f000 f9f0 	bl	8001ce0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8001900:	4804      	ldr	r0, [pc, #16]	@ (8001914 <ADC_IRQHandler+0x24>)
 8001902:	f000 f9ed 	bl	8001ce0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000294 	.word	0x20000294
 8001910:	200002dc 	.word	0x200002dc
 8001914:	20000324 	.word	0x20000324

08001918 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800191c:	4802      	ldr	r0, [pc, #8]	@ (8001928 <I2C1_EV_IRQHandler+0x10>)
 800191e:	f001 fe33 	bl	8003588 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000036c 	.word	0x2000036c

0800192c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <I2C1_ER_IRQHandler+0x10>)
 8001932:	f001 ff7c 	bl	800382e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000036c 	.word	0x2000036c

08001940 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <SystemInit+0x20>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194a:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <SystemInit+0x20>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800199c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001968:	f7ff ffea 	bl	8001940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800196c:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800196e:	490d      	ldr	r1, [pc, #52]	@ (80019a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001970:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001984:	4c0a      	ldr	r4, [pc, #40]	@ (80019b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001992:	f006 fa1f 	bl	8007dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001996:	f7ff f86b 	bl	8000a70 <main>
  bx  lr    
 800199a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800199c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80019a8:	08007ea8 	.word	0x08007ea8
  ldr r2, =_sbss
 80019ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80019b0:	20004308 	.word	0x20004308

080019b4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <CAN1_RX0_IRQHandler>
	...

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019bc:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	@ (80019f8 <HAL_Init+0x40>)
 80019c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <HAL_Init+0x40>)
 80019ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <HAL_Init+0x40>)
 80019da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 fda7 	bl	8002534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	200f      	movs	r0, #15
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fcb8 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fdbf 	bl	800259e <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 fd87 	bl	800254a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	@ (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	200005b0 	.word	0x200005b0

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	200005b0 	.word	0x200005b0

08001a9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e033      	b.n	8001b1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fc7c 	bl	80013b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d118      	bne.n	8001b0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ae2:	f023 0302 	bic.w	r3, r3, #2
 8001ae6:	f043 0202 	orr.w	r2, r3, #2
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fb4a 	bl	8002188 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	f023 0303 	bic.w	r3, r3, #3
 8001b02:	f043 0201 	orr.w	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b0a:	e001      	b.n	8001b10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_Start_IT+0x1a>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e0bd      	b.n	8001cba <HAL_ADC_Start_IT+0x196>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d018      	beq.n	8001b86 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b64:	4b58      	ldr	r3, [pc, #352]	@ (8001cc8 <HAL_ADC_Start_IT+0x1a4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a58      	ldr	r2, [pc, #352]	@ (8001ccc <HAL_ADC_Start_IT+0x1a8>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0c9a      	lsrs	r2, r3, #18
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b78:	e002      	b.n	8001b80 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f9      	bne.n	8001b7a <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	f040 8085 	bne.w	8001ca0 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bc0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bd4:	d106      	bne.n	8001be4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	f023 0206 	bic.w	r2, r3, #6
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001be2:	e002      	b.n	8001bea <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bf2:	4b37      	ldr	r3, [pc, #220]	@ (8001cd0 <HAL_ADC_Start_IT+0x1ac>)
 8001bf4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c0e:	f043 0320 	orr.w	r3, r3, #32
 8001c12:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d12a      	bne.n	8001c76 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a2b      	ldr	r2, [pc, #172]	@ (8001cd4 <HAL_ADC_Start_IT+0x1b0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d015      	beq.n	8001c56 <HAL_ADC_Start_IT+0x132>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8001cd8 <HAL_ADC_Start_IT+0x1b4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d105      	bne.n	8001c40 <HAL_ADC_Start_IT+0x11c>
 8001c34:	4b26      	ldr	r3, [pc, #152]	@ (8001cd0 <HAL_ADC_Start_IT+0x1ac>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00a      	beq.n	8001c56 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a25      	ldr	r2, [pc, #148]	@ (8001cdc <HAL_ADC_Start_IT+0x1b8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d136      	bne.n	8001cb8 <HAL_ADC_Start_IT+0x194>
 8001c4a:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <HAL_ADC_Start_IT+0x1ac>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d130      	bne.n	8001cb8 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d129      	bne.n	8001cb8 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	e020      	b.n	8001cb8 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a16      	ldr	r2, [pc, #88]	@ (8001cd4 <HAL_ADC_Start_IT+0x1b0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d11b      	bne.n	8001cb8 <HAL_ADC_Start_IT+0x194>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d114      	bne.n	8001cb8 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	e00b      	b.n	8001cb8 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	f043 0210 	orr.w	r2, r3, #16
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	431bde83 	.word	0x431bde83
 8001cd0:	40012300 	.word	0x40012300
 8001cd4:	40012000 	.word	0x40012000
 8001cd8:	40012100 	.word	0x40012100
 8001cdc:	40012200 	.word	0x40012200

08001ce0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d049      	beq.n	8001daa <HAL_ADC_IRQHandler+0xca>
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d046      	beq.n	8001daa <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d12b      	bne.n	8001d9a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d127      	bne.n	8001d9a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d50:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d119      	bne.n	8001d9a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0220 	bic.w	r2, r2, #32
 8001d74:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d105      	bne.n	8001d9a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fe2a 	bl	80009f4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0212 	mvn.w	r2, #18
 8001da8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001db8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d057      	beq.n	8001e70 <HAL_ADC_IRQHandler+0x190>
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d054      	beq.n	8001e70 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d105      	bne.n	8001dde <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d139      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d006      	beq.n	8001e08 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d12b      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d124      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d11d      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d119      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e3a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fa8d 	bl	8002380 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f06f 020c 	mvn.w	r2, #12
 8001e6e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d017      	beq.n	8001eb6 <HAL_ADC_IRQHandler+0x1d6>
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d014      	beq.n	8001eb6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d10d      	bne.n	8001eb6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f837 	bl	8001f1a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0201 	mvn.w	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ec4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d015      	beq.n	8001ef8 <HAL_ADC_IRQHandler+0x218>
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d012      	beq.n	8001ef8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	f043 0202 	orr.w	r2, r3, #2
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f06f 0220 	mvn.w	r2, #32
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f820 	bl	8001f2e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f06f 0220 	mvn.w	r2, #32
 8001ef6:	601a      	str	r2, [r3, #0]
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1c>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e105      	b.n	800216c <HAL_ADC_ConfigChannel+0x228>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b09      	cmp	r3, #9
 8001f6e:	d925      	bls.n	8001fbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68d9      	ldr	r1, [r3, #12]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	3b1e      	subs	r3, #30
 8001f86:	2207      	movs	r2, #7
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	400a      	ands	r2, r1
 8001f94:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68d9      	ldr	r1, [r3, #12]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	4603      	mov	r3, r0
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4403      	add	r3, r0
 8001fae:	3b1e      	subs	r3, #30
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	e022      	b.n	8002002 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6919      	ldr	r1, [r3, #16]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	400a      	ands	r2, r1
 8001fde:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6919      	ldr	r1, [r3, #16]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4403      	add	r3, r0
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b06      	cmp	r3, #6
 8002008:	d824      	bhi.n	8002054 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b05      	subs	r3, #5
 800201c:	221f      	movs	r2, #31
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	400a      	ands	r2, r1
 800202a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	4618      	mov	r0, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	3b05      	subs	r3, #5
 8002046:	fa00 f203 	lsl.w	r2, r0, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	635a      	str	r2, [r3, #52]	@ 0x34
 8002052:	e04c      	b.n	80020ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b0c      	cmp	r3, #12
 800205a:	d824      	bhi.n	80020a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	3b23      	subs	r3, #35	@ 0x23
 800206e:	221f      	movs	r2, #31
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43da      	mvns	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	400a      	ands	r2, r1
 800207c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	4618      	mov	r0, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	3b23      	subs	r3, #35	@ 0x23
 8002098:	fa00 f203 	lsl.w	r2, r0, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80020a4:	e023      	b.n	80020ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	3b41      	subs	r3, #65	@ 0x41
 80020b8:	221f      	movs	r2, #31
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	400a      	ands	r2, r1
 80020c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	3b41      	subs	r3, #65	@ 0x41
 80020e2:	fa00 f203 	lsl.w	r2, r0, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ee:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <HAL_ADC_ConfigChannel+0x234>)
 80020f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a21      	ldr	r2, [pc, #132]	@ (800217c <HAL_ADC_ConfigChannel+0x238>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d109      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x1cc>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b12      	cmp	r3, #18
 8002102:	d105      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a19      	ldr	r2, [pc, #100]	@ (800217c <HAL_ADC_ConfigChannel+0x238>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d123      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x21e>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b10      	cmp	r3, #16
 8002120:	d003      	beq.n	800212a <HAL_ADC_ConfigChannel+0x1e6>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b11      	cmp	r3, #17
 8002128:	d11b      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b10      	cmp	r3, #16
 800213c:	d111      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800213e:	4b10      	ldr	r3, [pc, #64]	@ (8002180 <HAL_ADC_ConfigChannel+0x23c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a10      	ldr	r2, [pc, #64]	@ (8002184 <HAL_ADC_ConfigChannel+0x240>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	0c9a      	lsrs	r2, r3, #18
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002154:	e002      	b.n	800215c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3b01      	subs	r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f9      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40012300 	.word	0x40012300
 800217c:	40012000 	.word	0x40012000
 8002180:	20000000 	.word	0x20000000
 8002184:	431bde83 	.word	0x431bde83

08002188 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002190:	4b79      	ldr	r3, [pc, #484]	@ (8002378 <ADC_Init+0x1f0>)
 8002192:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6859      	ldr	r1, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	021a      	lsls	r2, r3, #8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002202:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221a:	4a58      	ldr	r2, [pc, #352]	@ (800237c <ADC_Init+0x1f4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800222e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002250:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	e00f      	b.n	8002286 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002274:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002284:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0202 	bic.w	r2, r2, #2
 8002294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6899      	ldr	r1, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7e1b      	ldrb	r3, [r3, #24]
 80022a0:	005a      	lsls	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01b      	beq.n	80022ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80022d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	3b01      	subs	r3, #1
 80022e0:	035a      	lsls	r2, r3, #13
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	e007      	b.n	80022fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800230a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	3b01      	subs	r3, #1
 8002318:	051a      	lsls	r2, r3, #20
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002330:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6899      	ldr	r1, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800233e:	025a      	lsls	r2, r3, #9
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002356:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6899      	ldr	r1, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	029a      	lsls	r2, r3, #10
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	609a      	str	r2, [r3, #8]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	40012300 	.word	0x40012300
 800237c:	0f000001 	.word	0x0f000001

08002380 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a4:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023b0:	4013      	ands	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c6:	4a04      	ldr	r2, [pc, #16]	@ (80023d8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	60d3      	str	r3, [r2, #12]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e0:	4b04      	ldr	r3, [pc, #16]	@ (80023f4 <__NVIC_GetPriorityGrouping+0x18>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	f003 0307 	and.w	r3, r3, #7
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	2b00      	cmp	r3, #0
 8002408:	db0b      	blt.n	8002422 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	f003 021f 	and.w	r2, r3, #31
 8002410:	4907      	ldr	r1, [pc, #28]	@ (8002430 <__NVIC_EnableIRQ+0x38>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	2001      	movs	r0, #1
 800241a:	fa00 f202 	lsl.w	r2, r0, r2
 800241e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000e100 	.word	0xe000e100

08002434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	db0a      	blt.n	800245e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	490c      	ldr	r1, [pc, #48]	@ (8002480 <__NVIC_SetPriority+0x4c>)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	440b      	add	r3, r1
 8002458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800245c:	e00a      	b.n	8002474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4908      	ldr	r1, [pc, #32]	@ (8002484 <__NVIC_SetPriority+0x50>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3b04      	subs	r3, #4
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	440b      	add	r3, r1
 8002472:	761a      	strb	r2, [r3, #24]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000e100 	.word	0xe000e100
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	@ 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f1c3 0307 	rsb	r3, r3, #7
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	bf28      	it	cs
 80024a6:	2304      	movcs	r3, #4
 80024a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d902      	bls.n	80024b8 <NVIC_EncodePriority+0x30>
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3b03      	subs	r3, #3
 80024b6:	e000      	b.n	80024ba <NVIC_EncodePriority+0x32>
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	401a      	ands	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43d9      	mvns	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	4313      	orrs	r3, r2
         );
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	@ 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002500:	d301      	bcc.n	8002506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002502:	2301      	movs	r3, #1
 8002504:	e00f      	b.n	8002526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002506:	4a0a      	ldr	r2, [pc, #40]	@ (8002530 <SysTick_Config+0x40>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250e:	210f      	movs	r1, #15
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f7ff ff8e 	bl	8002434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002518:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <SysTick_Config+0x40>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251e:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <SysTick_Config+0x40>)
 8002520:	2207      	movs	r2, #7
 8002522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	e000e010 	.word	0xe000e010

08002534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff29 	bl	8002394 <__NVIC_SetPriorityGrouping>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255c:	f7ff ff3e 	bl	80023dc <__NVIC_GetPriorityGrouping>
 8002560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	f7ff ff8e 	bl	8002488 <NVIC_EncodePriority>
 800256c:	4602      	mov	r2, r0
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff5d 	bl	8002434 <__NVIC_SetPriority>
}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff31 	bl	80023f8 <__NVIC_EnableIRQ>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff ffa2 	bl	80024f0 <SysTick_Config>
 80025ac:	4603      	mov	r3, r0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff fa5e 	bl	8001a84 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e099      	b.n	8002708 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f4:	e00f      	b.n	8002616 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f6:	f7ff fa45 	bl	8001a84 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b05      	cmp	r3, #5
 8002602:	d908      	bls.n	8002616 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2220      	movs	r2, #32
 8002608:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2203      	movs	r2, #3
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e078      	b.n	8002708 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e8      	bne.n	80025f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4b38      	ldr	r3, [pc, #224]	@ (8002710 <HAL_DMA_Init+0x158>)
 8002630:	4013      	ands	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002642:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	2b04      	cmp	r3, #4
 800266e:	d107      	bne.n	8002680 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002678:	4313      	orrs	r3, r2
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f023 0307 	bic.w	r3, r3, #7
 8002696:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d117      	bne.n	80026da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00e      	beq.n	80026da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 faab 	bl	8002c18 <DMA_CheckFifoParam>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2240      	movs	r2, #64	@ 0x40
 80026cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026d6:	2301      	movs	r3, #1
 80026d8:	e016      	b.n	8002708 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fa62 	bl	8002bac <DMA_CalcBaseAndBitshift>
 80026e8:	4603      	mov	r3, r0
 80026ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f0:	223f      	movs	r2, #63	@ 0x3f
 80026f2:	409a      	lsls	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	f010803f 	.word	0xf010803f

08002714 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_DMA_Start_IT+0x26>
 8002736:	2302      	movs	r3, #2
 8002738:	e040      	b.n	80027bc <HAL_DMA_Start_IT+0xa8>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d12f      	bne.n	80027ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2202      	movs	r2, #2
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f9f4 	bl	8002b50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276c:	223f      	movs	r2, #63	@ 0x3f
 800276e:	409a      	lsls	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f042 0216 	orr.w	r2, r2, #22
 8002782:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0208 	orr.w	r2, r2, #8
 800279a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	e005      	b.n	80027ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
 80027b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d004      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2280      	movs	r2, #128	@ 0x80
 80027dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e00c      	b.n	80027fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2205      	movs	r2, #5
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0201 	bic.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002814:	4b8e      	ldr	r3, [pc, #568]	@ (8002a50 <HAL_DMA_IRQHandler+0x248>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a8e      	ldr	r2, [pc, #568]	@ (8002a54 <HAL_DMA_IRQHandler+0x24c>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	0a9b      	lsrs	r3, r3, #10
 8002820:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002826:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002832:	2208      	movs	r2, #8
 8002834:	409a      	lsls	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01a      	beq.n	8002874 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d013      	beq.n	8002874 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0204 	bic.w	r2, r2, #4
 800285a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002860:	2208      	movs	r2, #8
 8002862:	409a      	lsls	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002878:	2201      	movs	r2, #1
 800287a:	409a      	lsls	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d012      	beq.n	80028aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002896:	2201      	movs	r2, #1
 8002898:	409a      	lsls	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a2:	f043 0202 	orr.w	r2, r3, #2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ae:	2204      	movs	r2, #4
 80028b0:	409a      	lsls	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d012      	beq.n	80028e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00b      	beq.n	80028e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028cc:	2204      	movs	r2, #4
 80028ce:	409a      	lsls	r2, r3
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d8:	f043 0204 	orr.w	r2, r3, #4
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e4:	2210      	movs	r2, #16
 80028e6:	409a      	lsls	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d043      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d03c      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002902:	2210      	movs	r2, #16
 8002904:	409a      	lsls	r2, r3
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d018      	beq.n	800294a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d108      	bne.n	8002938 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d024      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
 8002936:	e01f      	b.n	8002978 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
 8002948:	e016      	b.n	8002978 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0208 	bic.w	r2, r2, #8
 8002966:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297c:	2220      	movs	r2, #32
 800297e:	409a      	lsls	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 808f 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8087 	beq.w	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800299e:	2220      	movs	r2, #32
 80029a0:	409a      	lsls	r2, r3
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b05      	cmp	r3, #5
 80029b0:	d136      	bne.n	8002a20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0216 	bic.w	r2, r2, #22
 80029c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <HAL_DMA_IRQHandler+0x1da>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d007      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0208 	bic.w	r2, r2, #8
 80029f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f6:	223f      	movs	r2, #63	@ 0x3f
 80029f8:	409a      	lsls	r2, r3
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d07e      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4798      	blx	r3
        }
        return;
 8002a1e:	e079      	b.n	8002b14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01d      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10d      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d031      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
 8002a4c:	e02c      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
 8002a4e:	bf00      	nop
 8002a50:	20000000 	.word	0x20000000
 8002a54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d023      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
 8002a68:	e01e      	b.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10f      	bne.n	8002a98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0210 	bic.w	r2, r2, #16
 8002a86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d032      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d022      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2205      	movs	r2, #5
 8002ac0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d307      	bcc.n	8002af0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f2      	bne.n	8002ad4 <HAL_DMA_IRQHandler+0x2cc>
 8002aee:	e000      	b.n	8002af2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002af0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
 8002b12:	e000      	b.n	8002b16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b14:	bf00      	nop
    }
  }
}
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b2a:	b2db      	uxtb	r3, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b40      	cmp	r3, #64	@ 0x40
 8002b7c:	d108      	bne.n	8002b90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b8e:	e007      	b.n	8002ba0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	3b10      	subs	r3, #16
 8002bbc:	4a14      	ldr	r2, [pc, #80]	@ (8002c10 <DMA_CalcBaseAndBitshift+0x64>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bc6:	4a13      	ldr	r2, [pc, #76]	@ (8002c14 <DMA_CalcBaseAndBitshift+0x68>)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d909      	bls.n	8002bee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	1d1a      	adds	r2, r3, #4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bec:	e007      	b.n	8002bfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bf6:	f023 0303 	bic.w	r3, r3, #3
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	aaaaaaab 	.word	0xaaaaaaab
 8002c14:	08007e90 	.word	0x08007e90

08002c18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11f      	bne.n	8002c72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d856      	bhi.n	8002ce6 <DMA_CheckFifoParam+0xce>
 8002c38:	a201      	add	r2, pc, #4	@ (adr r2, 8002c40 <DMA_CheckFifoParam+0x28>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c63 	.word	0x08002c63
 8002c48:	08002c51 	.word	0x08002c51
 8002c4c:	08002ce7 	.word	0x08002ce7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d046      	beq.n	8002cea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c60:	e043      	b.n	8002cea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c6a:	d140      	bne.n	8002cee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c70:	e03d      	b.n	8002cee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c7a:	d121      	bne.n	8002cc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d837      	bhi.n	8002cf2 <DMA_CheckFifoParam+0xda>
 8002c82:	a201      	add	r2, pc, #4	@ (adr r2, 8002c88 <DMA_CheckFifoParam+0x70>)
 8002c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c88:	08002c99 	.word	0x08002c99
 8002c8c:	08002c9f 	.word	0x08002c9f
 8002c90:	08002c99 	.word	0x08002c99
 8002c94:	08002cb1 	.word	0x08002cb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9c:	e030      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d025      	beq.n	8002cf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cae:	e022      	b.n	8002cf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cb8:	d11f      	bne.n	8002cfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cbe:	e01c      	b.n	8002cfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d903      	bls.n	8002cce <DMA_CheckFifoParam+0xb6>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d003      	beq.n	8002cd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ccc:	e018      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd2:	e015      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00e      	beq.n	8002cfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce4:	e00b      	b.n	8002cfe <DMA_CheckFifoParam+0xe6>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e00a      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cea:	bf00      	nop
 8002cec:	e008      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cee:	bf00      	nop
 8002cf0:	e006      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf2:	bf00      	nop
 8002cf4:	e004      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e002      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cfa:	bf00      	nop
 8002cfc:	e000      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cfe:	bf00      	nop
    }
  } 
  
  return status; 
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	@ 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	e16b      	b.n	8003004 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	f040 815a 	bne.w	8002ffe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d005      	beq.n	8002d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d130      	bne.n	8002dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 0201 	and.w	r2, r3, #1
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d017      	beq.n	8002e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d123      	bne.n	8002e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	08da      	lsrs	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3208      	adds	r2, #8
 8002e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	08da      	lsrs	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80b4 	beq.w	8002ffe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b60      	ldr	r3, [pc, #384]	@ (800301c <HAL_GPIO_Init+0x30c>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	4a5f      	ldr	r2, [pc, #380]	@ (800301c <HAL_GPIO_Init+0x30c>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ea6:	4b5d      	ldr	r3, [pc, #372]	@ (800301c <HAL_GPIO_Init+0x30c>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb2:	4a5b      	ldr	r2, [pc, #364]	@ (8003020 <HAL_GPIO_Init+0x310>)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a52      	ldr	r2, [pc, #328]	@ (8003024 <HAL_GPIO_Init+0x314>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d02b      	beq.n	8002f36 <HAL_GPIO_Init+0x226>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a51      	ldr	r2, [pc, #324]	@ (8003028 <HAL_GPIO_Init+0x318>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d025      	beq.n	8002f32 <HAL_GPIO_Init+0x222>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a50      	ldr	r2, [pc, #320]	@ (800302c <HAL_GPIO_Init+0x31c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01f      	beq.n	8002f2e <HAL_GPIO_Init+0x21e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a4f      	ldr	r2, [pc, #316]	@ (8003030 <HAL_GPIO_Init+0x320>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d019      	beq.n	8002f2a <HAL_GPIO_Init+0x21a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4e      	ldr	r2, [pc, #312]	@ (8003034 <HAL_GPIO_Init+0x324>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <HAL_GPIO_Init+0x216>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4d      	ldr	r2, [pc, #308]	@ (8003038 <HAL_GPIO_Init+0x328>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00d      	beq.n	8002f22 <HAL_GPIO_Init+0x212>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4c      	ldr	r2, [pc, #304]	@ (800303c <HAL_GPIO_Init+0x32c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d007      	beq.n	8002f1e <HAL_GPIO_Init+0x20e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4b      	ldr	r2, [pc, #300]	@ (8003040 <HAL_GPIO_Init+0x330>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d101      	bne.n	8002f1a <HAL_GPIO_Init+0x20a>
 8002f16:	2307      	movs	r3, #7
 8002f18:	e00e      	b.n	8002f38 <HAL_GPIO_Init+0x228>
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	e00c      	b.n	8002f38 <HAL_GPIO_Init+0x228>
 8002f1e:	2306      	movs	r3, #6
 8002f20:	e00a      	b.n	8002f38 <HAL_GPIO_Init+0x228>
 8002f22:	2305      	movs	r3, #5
 8002f24:	e008      	b.n	8002f38 <HAL_GPIO_Init+0x228>
 8002f26:	2304      	movs	r3, #4
 8002f28:	e006      	b.n	8002f38 <HAL_GPIO_Init+0x228>
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e004      	b.n	8002f38 <HAL_GPIO_Init+0x228>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e002      	b.n	8002f38 <HAL_GPIO_Init+0x228>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <HAL_GPIO_Init+0x228>
 8002f36:	2300      	movs	r3, #0
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	f002 0203 	and.w	r2, r2, #3
 8002f3e:	0092      	lsls	r2, r2, #2
 8002f40:	4093      	lsls	r3, r2
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f48:	4935      	ldr	r1, [pc, #212]	@ (8003020 <HAL_GPIO_Init+0x310>)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f56:	4b3b      	ldr	r3, [pc, #236]	@ (8003044 <HAL_GPIO_Init+0x334>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f7a:	4a32      	ldr	r2, [pc, #200]	@ (8003044 <HAL_GPIO_Init+0x334>)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f80:	4b30      	ldr	r3, [pc, #192]	@ (8003044 <HAL_GPIO_Init+0x334>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa4:	4a27      	ldr	r2, [pc, #156]	@ (8003044 <HAL_GPIO_Init+0x334>)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002faa:	4b26      	ldr	r3, [pc, #152]	@ (8003044 <HAL_GPIO_Init+0x334>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fce:	4a1d      	ldr	r2, [pc, #116]	@ (8003044 <HAL_GPIO_Init+0x334>)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003044 <HAL_GPIO_Init+0x334>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff8:	4a12      	ldr	r2, [pc, #72]	@ (8003044 <HAL_GPIO_Init+0x334>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3301      	adds	r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b0f      	cmp	r3, #15
 8003008:	f67f ae90 	bls.w	8002d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3724      	adds	r7, #36	@ 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800
 8003020:	40013800 	.word	0x40013800
 8003024:	40020000 	.word	0x40020000
 8003028:	40020400 	.word	0x40020400
 800302c:	40020800 	.word	0x40020800
 8003030:	40020c00 	.word	0x40020c00
 8003034:	40021000 	.word	0x40021000
 8003038:	40021400 	.word	0x40021400
 800303c:	40021800 	.word	0x40021800
 8003040:	40021c00 	.word	0x40021c00
 8003044:	40013c00 	.word	0x40013c00

08003048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
 8003054:	4613      	mov	r3, r2
 8003056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003058:	787b      	ldrb	r3, [r7, #1]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800305e:	887a      	ldrh	r2, [r7, #2]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003064:	e003      	b.n	800306e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003066:	887b      	ldrh	r3, [r7, #2]
 8003068:	041a      	lsls	r2, r3, #16
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	619a      	str	r2, [r3, #24]
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e12b      	b.n	80032e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fe fa44 	bl	8001530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	@ 0x24
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0201 	bic.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030e0:	f002 fcc0 	bl	8005a64 <HAL_RCC_GetPCLK1Freq>
 80030e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4a81      	ldr	r2, [pc, #516]	@ (80032f0 <HAL_I2C_Init+0x274>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d807      	bhi.n	8003100 <HAL_I2C_Init+0x84>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4a80      	ldr	r2, [pc, #512]	@ (80032f4 <HAL_I2C_Init+0x278>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	bf94      	ite	ls
 80030f8:	2301      	movls	r3, #1
 80030fa:	2300      	movhi	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e006      	b.n	800310e <HAL_I2C_Init+0x92>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a7d      	ldr	r2, [pc, #500]	@ (80032f8 <HAL_I2C_Init+0x27c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	bf94      	ite	ls
 8003108:	2301      	movls	r3, #1
 800310a:	2300      	movhi	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e0e7      	b.n	80032e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4a78      	ldr	r2, [pc, #480]	@ (80032fc <HAL_I2C_Init+0x280>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	0c9b      	lsrs	r3, r3, #18
 8003120:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a6a      	ldr	r2, [pc, #424]	@ (80032f0 <HAL_I2C_Init+0x274>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d802      	bhi.n	8003150 <HAL_I2C_Init+0xd4>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3301      	adds	r3, #1
 800314e:	e009      	b.n	8003164 <HAL_I2C_Init+0xe8>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	4a69      	ldr	r2, [pc, #420]	@ (8003300 <HAL_I2C_Init+0x284>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	3301      	adds	r3, #1
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	430b      	orrs	r3, r1
 800316a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003176:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	495c      	ldr	r1, [pc, #368]	@ (80032f0 <HAL_I2C_Init+0x274>)
 8003180:	428b      	cmp	r3, r1
 8003182:	d819      	bhi.n	80031b8 <HAL_I2C_Init+0x13c>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e59      	subs	r1, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003192:	1c59      	adds	r1, r3, #1
 8003194:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003198:	400b      	ands	r3, r1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_I2C_Init+0x138>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1e59      	subs	r1, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b2:	e051      	b.n	8003258 <HAL_I2C_Init+0x1dc>
 80031b4:	2304      	movs	r3, #4
 80031b6:	e04f      	b.n	8003258 <HAL_I2C_Init+0x1dc>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d111      	bne.n	80031e4 <HAL_I2C_Init+0x168>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1e58      	subs	r0, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	440b      	add	r3, r1
 80031ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	e012      	b.n	800320a <HAL_I2C_Init+0x18e>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1e58      	subs	r0, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	0099      	lsls	r1, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fa:	3301      	adds	r3, #1
 80031fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Init+0x196>
 800320e:	2301      	movs	r3, #1
 8003210:	e022      	b.n	8003258 <HAL_I2C_Init+0x1dc>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10e      	bne.n	8003238 <HAL_I2C_Init+0x1bc>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1e58      	subs	r0, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	460b      	mov	r3, r1
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	440b      	add	r3, r1
 8003228:	fbb0 f3f3 	udiv	r3, r0, r3
 800322c:	3301      	adds	r3, #1
 800322e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003236:	e00f      	b.n	8003258 <HAL_I2C_Init+0x1dc>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	0099      	lsls	r1, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	6809      	ldr	r1, [r1, #0]
 800325c:	4313      	orrs	r3, r2
 800325e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003286:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6911      	ldr	r1, [r2, #16]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68d2      	ldr	r2, [r2, #12]
 8003292:	4311      	orrs	r1, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	430b      	orrs	r3, r1
 800329a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	000186a0 	.word	0x000186a0
 80032f4:	001e847f 	.word	0x001e847f
 80032f8:	003d08ff 	.word	0x003d08ff
 80032fc:	431bde83 	.word	0x431bde83
 8003300:	10624dd3 	.word	0x10624dd3

08003304 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003316:	2b80      	cmp	r3, #128	@ 0x80
 8003318:	d103      	bne.n	8003322 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2200      	movs	r2, #0
 8003320:	611a      	str	r2, [r3, #16]
  }
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	607a      	str	r2, [r7, #4]
 800333a:	461a      	mov	r2, r3
 800333c:	460b      	mov	r3, r1
 800333e:	817b      	strh	r3, [r7, #10]
 8003340:	4613      	mov	r3, r2
 8003342:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b20      	cmp	r3, #32
 8003352:	f040 8109 	bne.w	8003568 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003356:	4b87      	ldr	r3, [pc, #540]	@ (8003574 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	08db      	lsrs	r3, r3, #3
 800335c:	4a86      	ldr	r2, [pc, #536]	@ (8003578 <HAL_I2C_Master_Transmit_DMA+0x248>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	0a1a      	lsrs	r2, r3, #8
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	009a      	lsls	r2, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	3b01      	subs	r3, #1
 8003374:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d112      	bne.n	80033a2 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	f043 0220 	orr.w	r2, r3, #32
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
 80033a0:	e0e3      	b.n	800356a <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d0df      	beq.n	8003370 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_I2C_Master_Transmit_DMA+0x8e>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e0d5      	b.n	800356a <HAL_I2C_Master_Transmit_DMA+0x23a>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d007      	beq.n	80033e4 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2221      	movs	r2, #33	@ 0x21
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2210      	movs	r2, #16
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	893a      	ldrh	r2, [r7, #8]
 8003414:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a56      	ldr	r2, [pc, #344]	@ (800357c <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8003424:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003426:	897a      	ldrh	r2, [r7, #10]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d07b      	beq.n	800352c <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003438:	2b00      	cmp	r3, #0
 800343a:	d02a      	beq.n	8003492 <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003440:	4a4f      	ldr	r2, [pc, #316]	@ (8003580 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8003442:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003448:	4a4e      	ldr	r2, [pc, #312]	@ (8003584 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800344a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003450:	2200      	movs	r2, #0
 8003452:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003458:	2200      	movs	r2, #0
 800345a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003460:	2200      	movs	r2, #0
 8003462:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003468:	2200      	movs	r2, #0
 800346a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	4619      	mov	r1, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3310      	adds	r3, #16
 800347c:	461a      	mov	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003482:	f7ff f947 	bl	8002714 <HAL_DMA_Start_IT>
 8003486:	4603      	mov	r3, r0
 8003488:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800348a:	7dfb      	ldrb	r3, [r7, #23]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d139      	bne.n	8003504 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8003490:	e013      	b.n	80034ba <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e057      	b.n	800356a <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80034d0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034e0:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80034f0:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e02f      	b.n	8003564 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	f043 0210 	orr.w	r2, r3, #16
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e01e      	b.n	800356a <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800353a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800354a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003562:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e000      	b.n	800356a <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
  }
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000000 	.word	0x20000000
 8003578:	14f8b589 	.word	0x14f8b589
 800357c:	ffff0000 	.word	0xffff0000
 8003580:	08004d61 	.word	0x08004d61
 8003584:	08004f1f 	.word	0x08004f1f

08003588 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d003      	beq.n	80035c0 <HAL_I2C_EV_IRQHandler+0x38>
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	2b40      	cmp	r3, #64	@ 0x40
 80035bc:	f040 80b1 	bne.w	8003722 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10d      	bne.n	80035f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80035e0:	d003      	beq.n	80035ea <HAL_I2C_EV_IRQHandler+0x62>
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_EV_IRQHandler+0x66>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_I2C_EV_IRQHandler+0x68>
 80035ee:	2300      	movs	r3, #0
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	f000 8114 	beq.w	800381e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00b      	beq.n	8003618 <HAL_I2C_EV_IRQHandler+0x90>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f001 fd9e 	bl	800514c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fd88 	bl	8004126 <I2C_Master_SB>
 8003616:	e083      	b.n	8003720 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <HAL_I2C_EV_IRQHandler+0xac>
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fe00 	bl	8004232 <I2C_Master_ADD10>
 8003632:	e075      	b.n	8003720 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_I2C_EV_IRQHandler+0xc8>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fe1c 	bl	8004286 <I2C_Master_ADDR>
 800364e:	e067      	b.n	8003720 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	d036      	beq.n	80036c8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003668:	f000 80db 	beq.w	8003822 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <HAL_I2C_EV_IRQHandler+0x10a>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_I2C_EV_IRQHandler+0x10a>
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f9e4 	bl	8003a58 <I2C_MasterTransmit_TXE>
 8003690:	e046      	b.n	8003720 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80c2 	beq.w	8003822 <HAL_I2C_EV_IRQHandler+0x29a>
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80bc 	beq.w	8003822 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80036aa:	7bbb      	ldrb	r3, [r7, #14]
 80036ac:	2b21      	cmp	r3, #33	@ 0x21
 80036ae:	d103      	bne.n	80036b8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fa6d 	bl	8003b90 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036b6:	e0b4      	b.n	8003822 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b40      	cmp	r3, #64	@ 0x40
 80036bc:	f040 80b1 	bne.w	8003822 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fadb 	bl	8003c7c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036c6:	e0ac      	b.n	8003822 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036d6:	f000 80a4 	beq.w	8003822 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00d      	beq.n	8003700 <HAL_I2C_EV_IRQHandler+0x178>
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d008      	beq.n	8003700 <HAL_I2C_EV_IRQHandler+0x178>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d103      	bne.n	8003700 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 fb57 	bl	8003dac <I2C_MasterReceive_RXNE>
 80036fe:	e00f      	b.n	8003720 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 808b 	beq.w	8003822 <HAL_I2C_EV_IRQHandler+0x29a>
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8085 	beq.w	8003822 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fc0f 	bl	8003f3c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800371e:	e080      	b.n	8003822 <HAL_I2C_EV_IRQHandler+0x29a>
 8003720:	e07f      	b.n	8003822 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d004      	beq.n	8003734 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	61fb      	str	r3, [r7, #28]
 8003732:	e007      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d011      	beq.n	8003772 <HAL_I2C_EV_IRQHandler+0x1ea>
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00c      	beq.n	8003772 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003768:	69b9      	ldr	r1, [r7, #24]
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 ffda 	bl	8004724 <I2C_Slave_ADDR>
 8003770:	e05a      	b.n	8003828 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0x206>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f001 f814 	bl	80047b4 <I2C_Slave_STOPF>
 800378c:	e04c      	b.n	8003828 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800378e:	7bbb      	ldrb	r3, [r7, #14]
 8003790:	2b21      	cmp	r3, #33	@ 0x21
 8003792:	d002      	beq.n	800379a <HAL_I2C_EV_IRQHandler+0x212>
 8003794:	7bbb      	ldrb	r3, [r7, #14]
 8003796:	2b29      	cmp	r3, #41	@ 0x29
 8003798:	d120      	bne.n	80037dc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00d      	beq.n	80037c0 <HAL_I2C_EV_IRQHandler+0x238>
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_I2C_EV_IRQHandler+0x238>
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d103      	bne.n	80037c0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fef5 	bl	80045a8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037be:	e032      	b.n	8003826 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d02d      	beq.n	8003826 <HAL_I2C_EV_IRQHandler+0x29e>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d028      	beq.n	8003826 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 ff24 	bl	8004622 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037da:	e024      	b.n	8003826 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <HAL_I2C_EV_IRQHandler+0x27a>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_I2C_EV_IRQHandler+0x27a>
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d103      	bne.n	8003802 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 ff32 	bl	8004664 <I2C_SlaveReceive_RXNE>
 8003800:	e012      	b.n	8003828 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00d      	beq.n	8003828 <HAL_I2C_EV_IRQHandler+0x2a0>
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 ff62 	bl	80046e0 <I2C_SlaveReceive_BTF>
 800381c:	e004      	b.n	8003828 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800381e:	bf00      	nop
 8003820:	e002      	b.n	8003828 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003826:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b08a      	sub	sp, #40	@ 0x28
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003850:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00d      	beq.n	8003878 <HAL_I2C_ER_IRQHandler+0x4a>
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003876:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00d      	beq.n	800389e <HAL_I2C_ER_IRQHandler+0x70>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	f043 0302 	orr.w	r3, r3, #2
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800389c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d03e      	beq.n	8003926 <HAL_I2C_ER_IRQHandler+0xf8>
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d039      	beq.n	8003926 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80038b2:	7efb      	ldrb	r3, [r7, #27]
 80038b4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80038cc:	7ebb      	ldrb	r3, [r7, #26]
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d112      	bne.n	80038f8 <HAL_I2C_ER_IRQHandler+0xca>
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10f      	bne.n	80038f8 <HAL_I2C_ER_IRQHandler+0xca>
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	2b21      	cmp	r3, #33	@ 0x21
 80038dc:	d008      	beq.n	80038f0 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80038de:	7cfb      	ldrb	r3, [r7, #19]
 80038e0:	2b29      	cmp	r3, #41	@ 0x29
 80038e2:	d005      	beq.n	80038f0 <HAL_I2C_ER_IRQHandler+0xc2>
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
 80038e6:	2b28      	cmp	r3, #40	@ 0x28
 80038e8:	d106      	bne.n	80038f8 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b21      	cmp	r3, #33	@ 0x21
 80038ee:	d103      	bne.n	80038f8 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f001 f88f 	bl	8004a14 <I2C_Slave_AF>
 80038f6:	e016      	b.n	8003926 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003900:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	f043 0304 	orr.w	r3, r3, #4
 8003908:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800390a:	7efb      	ldrb	r3, [r7, #27]
 800390c:	2b10      	cmp	r3, #16
 800390e:	d002      	beq.n	8003916 <HAL_I2C_ER_IRQHandler+0xe8>
 8003910:	7efb      	ldrb	r3, [r7, #27]
 8003912:	2b40      	cmp	r3, #64	@ 0x40
 8003914:	d107      	bne.n	8003926 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003924:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00d      	beq.n	800394c <HAL_I2C_ER_IRQHandler+0x11e>
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800393a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393c:	f043 0308 	orr.w	r3, r3, #8
 8003940:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800394a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800394c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394e:	2b00      	cmp	r3, #0
 8003950:	d008      	beq.n	8003964 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f001 f8cc 	bl	8004afc <I2C_ITError>
  }
}
 8003964:	bf00      	nop
 8003966:	3728      	adds	r7, #40	@ 0x28
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	70fb      	strb	r3, [r7, #3]
 80039c8:	4613      	mov	r3, r2
 80039ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a4a:	b2db      	uxtb	r3, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d150      	bne.n	8003b20 <I2C_MasterTransmit_TXE+0xc8>
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	2b21      	cmp	r3, #33	@ 0x21
 8003a82:	d14d      	bne.n	8003b20 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d01d      	beq.n	8003ac6 <I2C_MasterTransmit_TXE+0x6e>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d01a      	beq.n	8003ac6 <I2C_MasterTransmit_TXE+0x6e>
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a96:	d016      	beq.n	8003ac6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003aa6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2211      	movs	r2, #17
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff ff54 	bl	800396c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ac4:	e060      	b.n	8003b88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ad4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b40      	cmp	r3, #64	@ 0x40
 8003afe:	d107      	bne.n	8003b10 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff ff6f 	bl	80039ec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b0e:	e03b      	b.n	8003b88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff ff27 	bl	800396c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b1e:	e033      	b.n	8003b88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b21      	cmp	r3, #33	@ 0x21
 8003b24:	d005      	beq.n	8003b32 <I2C_MasterTransmit_TXE+0xda>
 8003b26:	7bbb      	ldrb	r3, [r7, #14]
 8003b28:	2b40      	cmp	r3, #64	@ 0x40
 8003b2a:	d12d      	bne.n	8003b88 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b22      	cmp	r3, #34	@ 0x22
 8003b30:	d12a      	bne.n	8003b88 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d108      	bne.n	8003b4e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b4a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b4c:	e01c      	b.n	8003b88 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b40      	cmp	r3, #64	@ 0x40
 8003b58:	d103      	bne.n	8003b62 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f88e 	bl	8003c7c <I2C_MemoryTransmit_TXE_BTF>
}
 8003b60:	e012      	b.n	8003b88 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	781a      	ldrb	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b86:	e7ff      	b.n	8003b88 <I2C_MasterTransmit_TXE+0x130>
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b21      	cmp	r3, #33	@ 0x21
 8003ba8:	d164      	bne.n	8003c74 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d012      	beq.n	8003bda <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	781a      	ldrb	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003bd8:	e04c      	b.n	8003c74 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d01d      	beq.n	8003c1c <I2C_MasterTransmit_BTF+0x8c>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d01a      	beq.n	8003c1c <I2C_MasterTransmit_BTF+0x8c>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003bec:	d016      	beq.n	8003c1c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bfc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2211      	movs	r2, #17
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff fea9 	bl	800396c <HAL_I2C_MasterTxCpltCallback>
}
 8003c1a:	e02b      	b.n	8003c74 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c2a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c3a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b40      	cmp	r3, #64	@ 0x40
 8003c54:	d107      	bne.n	8003c66 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff fec4 	bl	80039ec <HAL_I2C_MemTxCpltCallback>
}
 8003c64:	e006      	b.n	8003c74 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff fe7c 	bl	800396c <HAL_I2C_MasterTxCpltCallback>
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d11d      	bne.n	8003cd0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d10b      	bne.n	8003cb4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cac:	1c9a      	adds	r2, r3, #2
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003cb2:	e077      	b.n	8003da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	121b      	asrs	r3, r3, #8
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003cce:	e069      	b.n	8003da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d10b      	bne.n	8003cf0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003cee:	e059      	b.n	8003da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d152      	bne.n	8003d9e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b22      	cmp	r3, #34	@ 0x22
 8003cfc:	d10d      	bne.n	8003d1a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d0c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d18:	e044      	b.n	8003da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d015      	beq.n	8003d50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b21      	cmp	r3, #33	@ 0x21
 8003d28:	d112      	bne.n	8003d50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d4e:	e029      	b.n	8003da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d124      	bne.n	8003da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b21      	cmp	r3, #33	@ 0x21
 8003d5e:	d121      	bne.n	8003da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d6e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff fe28 	bl	80039ec <HAL_I2C_MemTxCpltCallback>
}
 8003d9c:	e002      	b.n	8003da4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff fab0 	bl	8003304 <I2C_Flush_DR>
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b22      	cmp	r3, #34	@ 0x22
 8003dbe:	f040 80b9 	bne.w	8003f34 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d921      	bls.n	8003e1a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	f040 8096 	bne.w	8003f34 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e16:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003e18:	e08c      	b.n	8003f34 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d07f      	beq.n	8003f22 <I2C_MasterReceive_RXNE+0x176>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d002      	beq.n	8003e2e <I2C_MasterReceive_RXNE+0x82>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d179      	bne.n	8003f22 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f001 f95a 	bl	80050e8 <I2C_WaitOnSTOPRequestThroughIT>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d14c      	bne.n	8003ed4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e48:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e58:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b40      	cmp	r3, #64	@ 0x40
 8003e92:	d10a      	bne.n	8003eaa <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff fdac 	bl	8003a00 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ea8:	e044      	b.n	8003f34 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d002      	beq.n	8003ebe <I2C_MasterReceive_RXNE+0x112>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d103      	bne.n	8003ec6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ec4:	e002      	b.n	8003ecc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2212      	movs	r2, #18
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff fd57 	bl	8003980 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ed2:	e02f      	b.n	8003f34 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ee2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff fd7a 	bl	8003a14 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f20:	e008      	b.n	8003f34 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f30:	605a      	str	r2, [r3, #4]
}
 8003f32:	e7ff      	b.n	8003f34 <I2C_MasterReceive_RXNE+0x188>
 8003f34:	bf00      	nop
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d11b      	bne.n	8003f8c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f62:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f8a:	e0c8      	b.n	800411e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d129      	bne.n	8003fea <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d00a      	beq.n	8003fc2 <I2C_MasterReceive_BTF+0x86>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d007      	beq.n	8003fc2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003fe8:	e099      	b.n	800411e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	f040 8081 	bne.w	80040f8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d002      	beq.n	8004002 <I2C_MasterReceive_BTF+0xc6>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d108      	bne.n	8004014 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e019      	b.n	8004048 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b04      	cmp	r3, #4
 8004018:	d002      	beq.n	8004020 <I2C_MasterReceive_BTF+0xe4>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d108      	bne.n	8004032 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e00a      	b.n	8004048 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b10      	cmp	r3, #16
 8004036:	d007      	beq.n	8004048 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004046:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408a:	b29b      	uxth	r3, r3
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80040a2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b40      	cmp	r3, #64	@ 0x40
 80040b6:	d10a      	bne.n	80040ce <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fc9a 	bl	8003a00 <HAL_I2C_MemRxCpltCallback>
}
 80040cc:	e027      	b.n	800411e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d002      	beq.n	80040e2 <I2C_MasterReceive_BTF+0x1a6>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d103      	bne.n	80040ea <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80040e8:	e002      	b.n	80040f0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2212      	movs	r2, #18
 80040ee:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff fc45 	bl	8003980 <HAL_I2C_MasterRxCpltCallback>
}
 80040f6:	e012      	b.n	800411e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b40      	cmp	r3, #64	@ 0x40
 8004138:	d117      	bne.n	800416a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004152:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004154:	e067      	b.n	8004226 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	b2da      	uxtb	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	611a      	str	r2, [r3, #16]
}
 8004168:	e05d      	b.n	8004226 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004172:	d133      	bne.n	80041dc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b21      	cmp	r3, #33	@ 0x21
 800417e:	d109      	bne.n	8004194 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004184:	b2db      	uxtb	r3, r3
 8004186:	461a      	mov	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004190:	611a      	str	r2, [r3, #16]
 8004192:	e008      	b.n	80041a6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004198:	b2db      	uxtb	r3, r3
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <I2C_Master_SB+0x92>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d108      	bne.n	80041ca <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d032      	beq.n	8004226 <I2C_Master_SB+0x100>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d02d      	beq.n	8004226 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d8:	605a      	str	r2, [r3, #4]
}
 80041da:	e024      	b.n	8004226 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10e      	bne.n	8004202 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	11db      	asrs	r3, r3, #7
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f003 0306 	and.w	r3, r3, #6
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f063 030f 	orn	r3, r3, #15
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]
}
 8004200:	e011      	b.n	8004226 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004206:	2b01      	cmp	r3, #1
 8004208:	d10d      	bne.n	8004226 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420e:	b29b      	uxth	r3, r3
 8004210:	11db      	asrs	r3, r3, #7
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f003 0306 	and.w	r3, r3, #6
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f063 030e 	orn	r3, r3, #14
 800421e:	b2da      	uxtb	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	611a      	str	r2, [r3, #16]
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	b2da      	uxtb	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <I2C_Master_ADD10+0x26>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d108      	bne.n	800426a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00c      	beq.n	800427a <I2C_Master_ADD10+0x48>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004278:	605a      	str	r2, [r3, #4]
  }
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004286:	b480      	push	{r7}
 8004288:	b091      	sub	sp, #68	@ 0x44
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004294:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b22      	cmp	r3, #34	@ 0x22
 80042ae:	f040 8169 	bne.w	8004584 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <I2C_Master_ADDR+0x54>
 80042ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80042be:	2b40      	cmp	r3, #64	@ 0x40
 80042c0:	d10b      	bne.n	80042da <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c2:	2300      	movs	r3, #0
 80042c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	e160      	b.n	800459c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d11d      	bne.n	800431e <I2C_Master_ADDR+0x98>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80042ea:	d118      	bne.n	800431e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ec:	2300      	movs	r3, #0
 80042ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004310:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	651a      	str	r2, [r3, #80]	@ 0x50
 800431c:	e13e      	b.n	800459c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d113      	bne.n	8004350 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004328:	2300      	movs	r3, #0
 800432a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	e115      	b.n	800457c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004354:	b29b      	uxth	r3, r3
 8004356:	2b01      	cmp	r3, #1
 8004358:	f040 808a 	bne.w	8004470 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800435c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004362:	d137      	bne.n	80043d4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004372:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800437e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004382:	d113      	bne.n	80043ac <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004392:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004394:	2300      	movs	r3, #0
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	e0e7      	b.n	800457c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ac:	2300      	movs	r3, #0
 80043ae:	623b      	str	r3, [r7, #32]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	623b      	str	r3, [r7, #32]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	623b      	str	r3, [r7, #32]
 80043c0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e0d3      	b.n	800457c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80043d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d02e      	beq.n	8004438 <I2C_Master_ADDR+0x1b2>
 80043da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d02b      	beq.n	8004438 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80043e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e2:	2b12      	cmp	r3, #18
 80043e4:	d102      	bne.n	80043ec <I2C_Master_ADDR+0x166>
 80043e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d125      	bne.n	8004438 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d00e      	beq.n	8004410 <I2C_Master_ADDR+0x18a>
 80043f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d00b      	beq.n	8004410 <I2C_Master_ADDR+0x18a>
 80043f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d008      	beq.n	8004410 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e007      	b.n	8004420 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800441e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004420:	2300      	movs	r3, #0
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	61fb      	str	r3, [r7, #28]
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	e0a1      	b.n	800457c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004446:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004448:	2300      	movs	r3, #0
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	61bb      	str	r3, [r7, #24]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	61bb      	str	r3, [r7, #24]
 800445c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e085      	b.n	800457c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d14d      	bne.n	8004516 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800447a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447c:	2b04      	cmp	r3, #4
 800447e:	d016      	beq.n	80044ae <I2C_Master_ADDR+0x228>
 8004480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004482:	2b02      	cmp	r3, #2
 8004484:	d013      	beq.n	80044ae <I2C_Master_ADDR+0x228>
 8004486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004488:	2b10      	cmp	r3, #16
 800448a:	d010      	beq.n	80044ae <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800449a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e007      	b.n	80044be <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044bc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044cc:	d117      	bne.n	80044fe <I2C_Master_ADDR+0x278>
 80044ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044d4:	d00b      	beq.n	80044ee <I2C_Master_ADDR+0x268>
 80044d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d008      	beq.n	80044ee <I2C_Master_ADDR+0x268>
 80044dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d005      	beq.n	80044ee <I2C_Master_ADDR+0x268>
 80044e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d002      	beq.n	80044ee <I2C_Master_ADDR+0x268>
 80044e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d107      	bne.n	80044fe <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80044fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fe:	2300      	movs	r3, #0
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	617b      	str	r3, [r7, #20]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	e032      	b.n	800457c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004524:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004530:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004534:	d117      	bne.n	8004566 <I2C_Master_ADDR+0x2e0>
 8004536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004538:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800453c:	d00b      	beq.n	8004556 <I2C_Master_ADDR+0x2d0>
 800453e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004540:	2b01      	cmp	r3, #1
 8004542:	d008      	beq.n	8004556 <I2C_Master_ADDR+0x2d0>
 8004544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004546:	2b08      	cmp	r3, #8
 8004548:	d005      	beq.n	8004556 <I2C_Master_ADDR+0x2d0>
 800454a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454c:	2b10      	cmp	r3, #16
 800454e:	d002      	beq.n	8004556 <I2C_Master_ADDR+0x2d0>
 8004550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004552:	2b20      	cmp	r3, #32
 8004554:	d107      	bne.n	8004566 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004564:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004566:	2300      	movs	r3, #0
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004582:	e00b      	b.n	800459c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
}
 800459a:	e7ff      	b.n	800459c <I2C_Master_ADDR+0x316>
 800459c:	bf00      	nop
 800459e:	3744      	adds	r7, #68	@ 0x44
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d02b      	beq.n	800461a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	781a      	ldrb	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d114      	bne.n	800461a <I2C_SlaveTransmit_TXE+0x72>
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	2b29      	cmp	r3, #41	@ 0x29
 80045f4:	d111      	bne.n	800461a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004604:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2221      	movs	r2, #33	@ 0x21
 800460a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2228      	movs	r2, #40	@ 0x28
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff f9bd 	bl	8003994 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800461a:	bf00      	nop
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d011      	beq.n	8004658 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004672:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d02c      	beq.n	80046d8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b29a      	uxth	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d114      	bne.n	80046d8 <I2C_SlaveReceive_RXNE+0x74>
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80046b2:	d111      	bne.n	80046d8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046c2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2222      	movs	r2, #34	@ 0x22
 80046c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2228      	movs	r2, #40	@ 0x28
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff f968 	bl	80039a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d012      	beq.n	8004718 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800472e:	2300      	movs	r3, #0
 8004730:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800473e:	2b28      	cmp	r3, #40	@ 0x28
 8004740:	d125      	bne.n	800478e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004750:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004766:	2b00      	cmp	r3, #0
 8004768:	d103      	bne.n	8004772 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	81bb      	strh	r3, [r7, #12]
 8004770:	e002      	b.n	8004778 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004780:	89ba      	ldrh	r2, [r7, #12]
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff f918 	bl	80039bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800478c:	e00e      	b.n	80047ac <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80047ac:	bf00      	nop
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80047d4:	2300      	movs	r3, #0
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004800:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800480c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004810:	d172      	bne.n	80048f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	2b22      	cmp	r3, #34	@ 0x22
 8004816:	d002      	beq.n	800481e <I2C_Slave_STOPF+0x6a>
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b2a      	cmp	r3, #42	@ 0x2a
 800481c:	d135      	bne.n	800488a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	b29a      	uxth	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d005      	beq.n	8004842 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	f043 0204 	orr.w	r2, r3, #4
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004850:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe f960 	bl	8002b1c <HAL_DMA_GetState>
 800485c:	4603      	mov	r3, r0
 800485e:	2b01      	cmp	r3, #1
 8004860:	d049      	beq.n	80048f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004866:	4a69      	ldr	r2, [pc, #420]	@ (8004a0c <I2C_Slave_STOPF+0x258>)
 8004868:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486e:	4618      	mov	r0, r3
 8004870:	f7fd ffa8 	bl	80027c4 <HAL_DMA_Abort_IT>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d03d      	beq.n	80048f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004884:	4610      	mov	r0, r2
 8004886:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004888:	e035      	b.n	80048f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	b29a      	uxth	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	f043 0204 	orr.w	r2, r3, #4
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe f92a 	bl	8002b1c <HAL_DMA_GetState>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d014      	beq.n	80048f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d2:	4a4e      	ldr	r2, [pc, #312]	@ (8004a0c <I2C_Slave_STOPF+0x258>)
 80048d4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fd ff72 	bl	80027c4 <HAL_DMA_Abort_IT>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d008      	beq.n	80048f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048f0:	4610      	mov	r0, r2
 80048f2:	4798      	blx	r3
 80048f4:	e000      	b.n	80048f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d03e      	beq.n	8004980 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b04      	cmp	r3, #4
 800490e:	d112      	bne.n	8004936 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004940:	2b40      	cmp	r3, #64	@ 0x40
 8004942:	d112      	bne.n	800496a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004978:	f043 0204 	orr.w	r2, r3, #4
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8b7 	bl	8004afc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800498e:	e039      	b.n	8004a04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	2b2a      	cmp	r3, #42	@ 0x2a
 8004994:	d109      	bne.n	80049aa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2228      	movs	r2, #40	@ 0x28
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fe ffff 	bl	80039a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b28      	cmp	r3, #40	@ 0x28
 80049b4:	d111      	bne.n	80049da <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a15      	ldr	r2, [pc, #84]	@ (8004a10 <I2C_Slave_STOPF+0x25c>)
 80049ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff f800 	bl	80039d8 <HAL_I2C_ListenCpltCallback>
}
 80049d8:	e014      	b.n	8004a04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049de:	2b22      	cmp	r3, #34	@ 0x22
 80049e0:	d002      	beq.n	80049e8 <I2C_Slave_STOPF+0x234>
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	2b22      	cmp	r3, #34	@ 0x22
 80049e6:	d10d      	bne.n	8004a04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fe ffd2 	bl	80039a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	08004f99 	.word	0x08004f99
 8004a10:	ffff0000 	.word	0xffff0000

08004a14 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a22:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a28:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	d002      	beq.n	8004a36 <I2C_Slave_AF+0x22>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	d129      	bne.n	8004a8a <I2C_Slave_AF+0x76>
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b28      	cmp	r3, #40	@ 0x28
 8004a3a:	d126      	bne.n	8004a8a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8004af8 <I2C_Slave_AF+0xe4>)
 8004a40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a50:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a5a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a6a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fe ffa8 	bl	80039d8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004a88:	e031      	b.n	8004aee <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	2b21      	cmp	r3, #33	@ 0x21
 8004a8e:	d129      	bne.n	8004ae4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a19      	ldr	r2, [pc, #100]	@ (8004af8 <I2C_Slave_AF+0xe4>)
 8004a94:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2221      	movs	r2, #33	@ 0x21
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004aba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ac4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ad4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fe fc14 	bl	8003304 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7fe ff59 	bl	8003994 <HAL_I2C_SlaveTxCpltCallback>
}
 8004ae2:	e004      	b.n	8004aee <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004aec:	615a      	str	r2, [r3, #20]
}
 8004aee:	bf00      	nop
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	ffff0000 	.word	0xffff0000

08004afc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b14:	7bbb      	ldrb	r3, [r7, #14]
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d002      	beq.n	8004b20 <I2C_ITError+0x24>
 8004b1a:	7bbb      	ldrb	r3, [r7, #14]
 8004b1c:	2b40      	cmp	r3, #64	@ 0x40
 8004b1e:	d10a      	bne.n	8004b36 <I2C_ITError+0x3a>
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
 8004b22:	2b22      	cmp	r3, #34	@ 0x22
 8004b24:	d107      	bne.n	8004b36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b3c:	2b28      	cmp	r3, #40	@ 0x28
 8004b3e:	d107      	bne.n	8004b50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2228      	movs	r2, #40	@ 0x28
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b4e:	e015      	b.n	8004b7c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b5e:	d00a      	beq.n	8004b76 <I2C_ITError+0x7a>
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	2b60      	cmp	r3, #96	@ 0x60
 8004b64:	d007      	beq.n	8004b76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b8a:	d162      	bne.n	8004c52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d020      	beq.n	8004bec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bae:	4a6a      	ldr	r2, [pc, #424]	@ (8004d58 <I2C_ITError+0x25c>)
 8004bb0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fd fe04 	bl	80027c4 <HAL_DMA_Abort_IT>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 8089 	beq.w	8004cd6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0201 	bic.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004be6:	4610      	mov	r0, r2
 8004be8:	4798      	blx	r3
 8004bea:	e074      	b.n	8004cd6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf0:	4a59      	ldr	r2, [pc, #356]	@ (8004d58 <I2C_ITError+0x25c>)
 8004bf2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fd fde3 	bl	80027c4 <HAL_DMA_Abort_IT>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d068      	beq.n	8004cd6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0e:	2b40      	cmp	r3, #64	@ 0x40
 8004c10:	d10b      	bne.n	8004c2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0201 	bic.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4798      	blx	r3
 8004c50:	e041      	b.n	8004cd6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b60      	cmp	r3, #96	@ 0x60
 8004c5c:	d125      	bne.n	8004caa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c76:	2b40      	cmp	r3, #64	@ 0x40
 8004c78:	d10b      	bne.n	8004c92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0201 	bic.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fe fec0 	bl	8003a28 <HAL_I2C_AbortCpltCallback>
 8004ca8:	e015      	b.n	8004cd6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb4:	2b40      	cmp	r3, #64	@ 0x40
 8004cb6:	d10b      	bne.n	8004cd0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691a      	ldr	r2, [r3, #16]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7fe fe9f 	bl	8003a14 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10e      	bne.n	8004d04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d109      	bne.n	8004d04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d104      	bne.n	8004d04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d007      	beq.n	8004d14 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d12:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d1a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d113      	bne.n	8004d50 <I2C_ITError+0x254>
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	2b28      	cmp	r3, #40	@ 0x28
 8004d2c:	d110      	bne.n	8004d50 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a0a      	ldr	r2, [pc, #40]	@ (8004d5c <I2C_ITError+0x260>)
 8004d32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fe fe44 	bl	80039d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	08004f99 	.word	0x08004f99
 8004d5c:	ffff0000 	.word	0xffff0000

08004d60 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d74:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d7c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004d92:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da0:	2200      	movs	r2, #0
 8004da2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db0:	2200      	movs	r2, #0
 8004db2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004db4:	7cfb      	ldrb	r3, [r7, #19]
 8004db6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004dba:	2b21      	cmp	r3, #33	@ 0x21
 8004dbc:	d007      	beq.n	8004dce <I2C_DMAXferCplt+0x6e>
 8004dbe:	7cfb      	ldrb	r3, [r7, #19]
 8004dc0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004dc4:	2b22      	cmp	r3, #34	@ 0x22
 8004dc6:	d131      	bne.n	8004e2c <I2C_DMAXferCplt+0xcc>
 8004dc8:	7cbb      	ldrb	r3, [r7, #18]
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d12e      	bne.n	8004e2c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ddc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2200      	movs	r2, #0
 8004de2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
 8004de6:	2b29      	cmp	r3, #41	@ 0x29
 8004de8:	d10a      	bne.n	8004e00 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2221      	movs	r2, #33	@ 0x21
 8004dee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2228      	movs	r2, #40	@ 0x28
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004df8:	6978      	ldr	r0, [r7, #20]
 8004dfa:	f7fe fdcb 	bl	8003994 <HAL_I2C_SlaveTxCpltCallback>
 8004dfe:	e00c      	b.n	8004e1a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e00:	7cfb      	ldrb	r3, [r7, #19]
 8004e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e04:	d109      	bne.n	8004e1a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2222      	movs	r2, #34	@ 0x22
 8004e0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2228      	movs	r2, #40	@ 0x28
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e14:	6978      	ldr	r0, [r7, #20]
 8004e16:	f7fe fdc7 	bl	80039a8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004e28:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004e2a:	e074      	b.n	8004f16 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d06e      	beq.n	8004f16 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d107      	bne.n	8004e52 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e50:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004e60:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e68:	d009      	beq.n	8004e7e <I2C_DMAXferCplt+0x11e>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d006      	beq.n	8004e7e <I2C_DMAXferCplt+0x11e>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004e76:	d002      	beq.n	8004e7e <I2C_DMAXferCplt+0x11e>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	d107      	bne.n	8004e8e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e8c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e9c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eac:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004ebc:	6978      	ldr	r0, [r7, #20]
 8004ebe:	f7fe fda9 	bl	8003a14 <HAL_I2C_ErrorCallback>
}
 8004ec2:	e028      	b.n	8004f16 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b40      	cmp	r3, #64	@ 0x40
 8004ed6:	d10a      	bne.n	8004eee <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004ee6:	6978      	ldr	r0, [r7, #20]
 8004ee8:	f7fe fd8a 	bl	8003a00 <HAL_I2C_MemRxCpltCallback>
}
 8004eec:	e013      	b.n	8004f16 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d002      	beq.n	8004f02 <I2C_DMAXferCplt+0x1a2>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d103      	bne.n	8004f0a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f08:	e002      	b.n	8004f10 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2212      	movs	r2, #18
 8004f0e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f10:	6978      	ldr	r0, [r7, #20]
 8004f12:	f7fe fd35 	bl	8003980 <HAL_I2C_MasterRxCpltCallback>
}
 8004f16:	bf00      	nop
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b084      	sub	sp, #16
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f38:	2200      	movs	r2, #0
 8004f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f48:	2200      	movs	r2, #0
 8004f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7fd fdf3 	bl	8002b38 <HAL_DMA_GetError>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d01b      	beq.n	8004f90 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f66:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f82:	f043 0210 	orr.w	r2, r3, #16
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7fe fd42 	bl	8003a14 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f90:	bf00      	nop
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80050e0 <I2C_DMAAbort+0x148>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	08db      	lsrs	r3, r3, #3
 8004fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80050e4 <I2C_DMAAbort+0x14c>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	0a1a      	lsrs	r2, r3, #8
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	00da      	lsls	r2, r3, #3
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d106      	bne.n	8004fe0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	f043 0220 	orr.w	r2, r3, #32
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004fde:	e00a      	b.n	8004ff6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ff4:	d0ea      	beq.n	8004fcc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005002:	2200      	movs	r2, #0
 8005004:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005012:	2200      	movs	r2, #0
 8005014:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005024:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2200      	movs	r2, #0
 800502a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005038:	2200      	movs	r2, #0
 800503a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	2200      	movs	r2, #0
 800504a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0201 	bic.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b60      	cmp	r3, #96	@ 0x60
 8005066:	d10e      	bne.n	8005086 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2200      	movs	r2, #0
 800507c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800507e:	6978      	ldr	r0, [r7, #20]
 8005080:	f7fe fcd2 	bl	8003a28 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005084:	e027      	b.n	80050d6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005086:	7cfb      	ldrb	r3, [r7, #19]
 8005088:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800508c:	2b28      	cmp	r3, #40	@ 0x28
 800508e:	d117      	bne.n	80050c0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2200      	movs	r2, #0
 80050b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2228      	movs	r2, #40	@ 0x28
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80050be:	e007      	b.n	80050d0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80050d0:	6978      	ldr	r0, [r7, #20]
 80050d2:	f7fe fc9f 	bl	8003a14 <HAL_I2C_ErrorCallback>
}
 80050d6:	bf00      	nop
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000000 	.word	0x20000000
 80050e4:	14f8b589 	.word	0x14f8b589

080050e8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80050f4:	4b13      	ldr	r3, [pc, #76]	@ (8005144 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	08db      	lsrs	r3, r3, #3
 80050fa:	4a13      	ldr	r2, [pc, #76]	@ (8005148 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	0a1a      	lsrs	r2, r3, #8
 8005102:	4613      	mov	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3b01      	subs	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d107      	bne.n	8005126 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	f043 0220 	orr.w	r2, r3, #32
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e008      	b.n	8005138 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005134:	d0e9      	beq.n	800510a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	20000000 	.word	0x20000000
 8005148:	14f8b589 	.word	0x14f8b589

0800514c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005158:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800515c:	d103      	bne.n	8005166 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005164:	e007      	b.n	8005176 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800516e:	d102      	bne.n	8005176 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2208      	movs	r2, #8
 8005174:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e267      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d075      	beq.n	800528e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051a2:	4b88      	ldr	r3, [pc, #544]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d00c      	beq.n	80051c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ae:	4b85      	ldr	r3, [pc, #532]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d112      	bne.n	80051e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ba:	4b82      	ldr	r3, [pc, #520]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051c6:	d10b      	bne.n	80051e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c8:	4b7e      	ldr	r3, [pc, #504]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d05b      	beq.n	800528c <HAL_RCC_OscConfig+0x108>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d157      	bne.n	800528c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e242      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e8:	d106      	bne.n	80051f8 <HAL_RCC_OscConfig+0x74>
 80051ea:	4b76      	ldr	r3, [pc, #472]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a75      	ldr	r2, [pc, #468]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e01d      	b.n	8005234 <HAL_RCC_OscConfig+0xb0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x98>
 8005202:	4b70      	ldr	r3, [pc, #448]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a6f      	ldr	r2, [pc, #444]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	4b6d      	ldr	r3, [pc, #436]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a6c      	ldr	r2, [pc, #432]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e00b      	b.n	8005234 <HAL_RCC_OscConfig+0xb0>
 800521c:	4b69      	ldr	r3, [pc, #420]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a68      	ldr	r2, [pc, #416]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	4b66      	ldr	r3, [pc, #408]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a65      	ldr	r2, [pc, #404]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 800522e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d013      	beq.n	8005264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523c:	f7fc fc22 	bl	8001a84 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005244:	f7fc fc1e 	bl	8001a84 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b64      	cmp	r3, #100	@ 0x64
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e207      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005256:	4b5b      	ldr	r3, [pc, #364]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0xc0>
 8005262:	e014      	b.n	800528e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005264:	f7fc fc0e 	bl	8001a84 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800526c:	f7fc fc0a 	bl	8001a84 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	@ 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e1f3      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800527e:	4b51      	ldr	r3, [pc, #324]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0xe8>
 800528a:	e000      	b.n	800528e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d063      	beq.n	8005362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800529a:	4b4a      	ldr	r3, [pc, #296]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00b      	beq.n	80052be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052a6:	4b47      	ldr	r3, [pc, #284]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d11c      	bne.n	80052ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052b2:	4b44      	ldr	r3, [pc, #272]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d116      	bne.n	80052ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052be:	4b41      	ldr	r3, [pc, #260]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <HAL_RCC_OscConfig+0x152>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d001      	beq.n	80052d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e1c7      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d6:	4b3b      	ldr	r3, [pc, #236]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4937      	ldr	r1, [pc, #220]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ea:	e03a      	b.n	8005362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d020      	beq.n	8005336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052f4:	4b34      	ldr	r3, [pc, #208]	@ (80053c8 <HAL_RCC_OscConfig+0x244>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fc fbc3 	bl	8001a84 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005302:	f7fc fbbf 	bl	8001a84 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e1a8      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005314:	4b2b      	ldr	r3, [pc, #172]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0f0      	beq.n	8005302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005320:	4b28      	ldr	r3, [pc, #160]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	4925      	ldr	r1, [pc, #148]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005330:	4313      	orrs	r3, r2
 8005332:	600b      	str	r3, [r1, #0]
 8005334:	e015      	b.n	8005362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005336:	4b24      	ldr	r3, [pc, #144]	@ (80053c8 <HAL_RCC_OscConfig+0x244>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fc fba2 	bl	8001a84 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005344:	f7fc fb9e 	bl	8001a84 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e187      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005356:	4b1b      	ldr	r3, [pc, #108]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d036      	beq.n	80053dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d016      	beq.n	80053a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005376:	4b15      	ldr	r3, [pc, #84]	@ (80053cc <HAL_RCC_OscConfig+0x248>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537c:	f7fc fb82 	bl	8001a84 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005384:	f7fc fb7e 	bl	8001a84 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e167      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005396:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x200>
 80053a2:	e01b      	b.n	80053dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053a4:	4b09      	ldr	r3, [pc, #36]	@ (80053cc <HAL_RCC_OscConfig+0x248>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053aa:	f7fc fb6b 	bl	8001a84 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b0:	e00e      	b.n	80053d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b2:	f7fc fb67 	bl	8001a84 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d907      	bls.n	80053d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e150      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
 80053c4:	40023800 	.word	0x40023800
 80053c8:	42470000 	.word	0x42470000
 80053cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d0:	4b88      	ldr	r3, [pc, #544]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80053d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1ea      	bne.n	80053b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8097 	beq.w	8005518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ea:	2300      	movs	r3, #0
 80053ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ee:	4b81      	ldr	r3, [pc, #516]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10f      	bne.n	800541a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	4b7d      	ldr	r3, [pc, #500]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005402:	4a7c      	ldr	r2, [pc, #496]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005408:	6413      	str	r3, [r2, #64]	@ 0x40
 800540a:	4b7a      	ldr	r3, [pc, #488]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005412:	60bb      	str	r3, [r7, #8]
 8005414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541a:	4b77      	ldr	r3, [pc, #476]	@ (80055f8 <HAL_RCC_OscConfig+0x474>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005422:	2b00      	cmp	r3, #0
 8005424:	d118      	bne.n	8005458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005426:	4b74      	ldr	r3, [pc, #464]	@ (80055f8 <HAL_RCC_OscConfig+0x474>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a73      	ldr	r2, [pc, #460]	@ (80055f8 <HAL_RCC_OscConfig+0x474>)
 800542c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005432:	f7fc fb27 	bl	8001a84 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543a:	f7fc fb23 	bl	8001a84 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e10c      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800544c:	4b6a      	ldr	r3, [pc, #424]	@ (80055f8 <HAL_RCC_OscConfig+0x474>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d106      	bne.n	800546e <HAL_RCC_OscConfig+0x2ea>
 8005460:	4b64      	ldr	r3, [pc, #400]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005464:	4a63      	ldr	r2, [pc, #396]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	6713      	str	r3, [r2, #112]	@ 0x70
 800546c:	e01c      	b.n	80054a8 <HAL_RCC_OscConfig+0x324>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2b05      	cmp	r3, #5
 8005474:	d10c      	bne.n	8005490 <HAL_RCC_OscConfig+0x30c>
 8005476:	4b5f      	ldr	r3, [pc, #380]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800547a:	4a5e      	ldr	r2, [pc, #376]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 800547c:	f043 0304 	orr.w	r3, r3, #4
 8005480:	6713      	str	r3, [r2, #112]	@ 0x70
 8005482:	4b5c      	ldr	r3, [pc, #368]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005486:	4a5b      	ldr	r2, [pc, #364]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	6713      	str	r3, [r2, #112]	@ 0x70
 800548e:	e00b      	b.n	80054a8 <HAL_RCC_OscConfig+0x324>
 8005490:	4b58      	ldr	r3, [pc, #352]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005494:	4a57      	ldr	r2, [pc, #348]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	6713      	str	r3, [r2, #112]	@ 0x70
 800549c:	4b55      	ldr	r3, [pc, #340]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a0:	4a54      	ldr	r2, [pc, #336]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80054a2:	f023 0304 	bic.w	r3, r3, #4
 80054a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d015      	beq.n	80054dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fc fae8 	bl	8001a84 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b6:	e00a      	b.n	80054ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b8:	f7fc fae4 	bl	8001a84 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e0cb      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ce:	4b49      	ldr	r3, [pc, #292]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80054d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0ee      	beq.n	80054b8 <HAL_RCC_OscConfig+0x334>
 80054da:	e014      	b.n	8005506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054dc:	f7fc fad2 	bl	8001a84 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054e2:	e00a      	b.n	80054fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e4:	f7fc face 	bl	8001a84 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e0b5      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054fa:	4b3e      	ldr	r3, [pc, #248]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80054fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1ee      	bne.n	80054e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d105      	bne.n	8005518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800550c:	4b39      	ldr	r3, [pc, #228]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	4a38      	ldr	r2, [pc, #224]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005516:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80a1 	beq.w	8005664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005522:	4b34      	ldr	r3, [pc, #208]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 030c 	and.w	r3, r3, #12
 800552a:	2b08      	cmp	r3, #8
 800552c:	d05c      	beq.n	80055e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d141      	bne.n	80055ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005536:	4b31      	ldr	r3, [pc, #196]	@ (80055fc <HAL_RCC_OscConfig+0x478>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553c:	f7fc faa2 	bl	8001a84 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005544:	f7fc fa9e 	bl	8001a84 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e087      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005556:	4b27      	ldr	r3, [pc, #156]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005570:	019b      	lsls	r3, r3, #6
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	3b01      	subs	r3, #1
 800557c:	041b      	lsls	r3, r3, #16
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005584:	061b      	lsls	r3, r3, #24
 8005586:	491b      	ldr	r1, [pc, #108]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005588:	4313      	orrs	r3, r2
 800558a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800558c:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <HAL_RCC_OscConfig+0x478>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005592:	f7fc fa77 	bl	8001a84 <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559a:	f7fc fa73 	bl	8001a84 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e05c      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ac:	4b11      	ldr	r3, [pc, #68]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0f0      	beq.n	800559a <HAL_RCC_OscConfig+0x416>
 80055b8:	e054      	b.n	8005664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ba:	4b10      	ldr	r3, [pc, #64]	@ (80055fc <HAL_RCC_OscConfig+0x478>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c0:	f7fc fa60 	bl	8001a84 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055c8:	f7fc fa5c 	bl	8001a84 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e045      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055da:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f0      	bne.n	80055c8 <HAL_RCC_OscConfig+0x444>
 80055e6:	e03d      	b.n	8005664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d107      	bne.n	8005600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e038      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
 80055f4:	40023800 	.word	0x40023800
 80055f8:	40007000 	.word	0x40007000
 80055fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005600:	4b1b      	ldr	r3, [pc, #108]	@ (8005670 <HAL_RCC_OscConfig+0x4ec>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d028      	beq.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005618:	429a      	cmp	r2, r3
 800561a:	d121      	bne.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d11a      	bne.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005630:	4013      	ands	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005638:	4293      	cmp	r3, r2
 800563a:	d111      	bne.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	3b01      	subs	r3, #1
 800564a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800564c:	429a      	cmp	r2, r3
 800564e:	d107      	bne.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d001      	beq.n	8005664 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e000      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40023800 	.word	0x40023800

08005674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e0cc      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005688:	4b68      	ldr	r3, [pc, #416]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d90c      	bls.n	80056b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b65      	ldr	r3, [pc, #404]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569e:	4b63      	ldr	r3, [pc, #396]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0b8      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d020      	beq.n	80056fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056c8:	4b59      	ldr	r3, [pc, #356]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	4a58      	ldr	r2, [pc, #352]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056e0:	4b53      	ldr	r3, [pc, #332]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4a52      	ldr	r2, [pc, #328]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80056ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ec:	4b50      	ldr	r3, [pc, #320]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	494d      	ldr	r1, [pc, #308]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d044      	beq.n	8005794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d107      	bne.n	8005722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005712:	4b47      	ldr	r3, [pc, #284]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d119      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e07f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d003      	beq.n	8005732 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800572e:	2b03      	cmp	r3, #3
 8005730:	d107      	bne.n	8005742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005732:	4b3f      	ldr	r3, [pc, #252]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e06f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005742:	4b3b      	ldr	r3, [pc, #236]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e067      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005752:	4b37      	ldr	r3, [pc, #220]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f023 0203 	bic.w	r2, r3, #3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	4934      	ldr	r1, [pc, #208]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	4313      	orrs	r3, r2
 8005762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005764:	f7fc f98e 	bl	8001a84 <HAL_GetTick>
 8005768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576a:	e00a      	b.n	8005782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800576c:	f7fc f98a 	bl	8001a84 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e04f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005782:	4b2b      	ldr	r3, [pc, #172]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 020c 	and.w	r2, r3, #12
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	429a      	cmp	r2, r3
 8005792:	d1eb      	bne.n	800576c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005794:	4b25      	ldr	r3, [pc, #148]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d20c      	bcs.n	80057bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a2:	4b22      	ldr	r3, [pc, #136]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	4b20      	ldr	r3, [pc, #128]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e032      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c8:	4b19      	ldr	r3, [pc, #100]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4916      	ldr	r1, [pc, #88]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e6:	4b12      	ldr	r3, [pc, #72]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	490e      	ldr	r1, [pc, #56]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057fa:	f000 f821 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80057fe:	4602      	mov	r2, r0
 8005800:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	490a      	ldr	r1, [pc, #40]	@ (8005834 <HAL_RCC_ClockConfig+0x1c0>)
 800580c:	5ccb      	ldrb	r3, [r1, r3]
 800580e:	fa22 f303 	lsr.w	r3, r2, r3
 8005812:	4a09      	ldr	r2, [pc, #36]	@ (8005838 <HAL_RCC_ClockConfig+0x1c4>)
 8005814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005816:	4b09      	ldr	r3, [pc, #36]	@ (800583c <HAL_RCC_ClockConfig+0x1c8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f7fc f8ee 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40023c00 	.word	0x40023c00
 8005830:	40023800 	.word	0x40023800
 8005834:	08007e78 	.word	0x08007e78
 8005838:	20000000 	.word	0x20000000
 800583c:	20000004 	.word	0x20000004

08005840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005844:	b094      	sub	sp, #80	@ 0x50
 8005846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005858:	4b79      	ldr	r3, [pc, #484]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 030c 	and.w	r3, r3, #12
 8005860:	2b08      	cmp	r3, #8
 8005862:	d00d      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0x40>
 8005864:	2b08      	cmp	r3, #8
 8005866:	f200 80e1 	bhi.w	8005a2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <HAL_RCC_GetSysClockFreq+0x34>
 800586e:	2b04      	cmp	r3, #4
 8005870:	d003      	beq.n	800587a <HAL_RCC_GetSysClockFreq+0x3a>
 8005872:	e0db      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005874:	4b73      	ldr	r3, [pc, #460]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8005876:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005878:	e0db      	b.n	8005a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800587a:	4b73      	ldr	r3, [pc, #460]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x208>)
 800587c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800587e:	e0d8      	b.n	8005a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005880:	4b6f      	ldr	r3, [pc, #444]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005888:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800588a:	4b6d      	ldr	r3, [pc, #436]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d063      	beq.n	800595e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005896:	4b6a      	ldr	r3, [pc, #424]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	099b      	lsrs	r3, r3, #6
 800589c:	2200      	movs	r2, #0
 800589e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058aa:	2300      	movs	r3, #0
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80058b2:	4622      	mov	r2, r4
 80058b4:	462b      	mov	r3, r5
 80058b6:	f04f 0000 	mov.w	r0, #0
 80058ba:	f04f 0100 	mov.w	r1, #0
 80058be:	0159      	lsls	r1, r3, #5
 80058c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058c4:	0150      	lsls	r0, r2, #5
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4621      	mov	r1, r4
 80058cc:	1a51      	subs	r1, r2, r1
 80058ce:	6139      	str	r1, [r7, #16]
 80058d0:	4629      	mov	r1, r5
 80058d2:	eb63 0301 	sbc.w	r3, r3, r1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058e4:	4659      	mov	r1, fp
 80058e6:	018b      	lsls	r3, r1, #6
 80058e8:	4651      	mov	r1, sl
 80058ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058ee:	4651      	mov	r1, sl
 80058f0:	018a      	lsls	r2, r1, #6
 80058f2:	4651      	mov	r1, sl
 80058f4:	ebb2 0801 	subs.w	r8, r2, r1
 80058f8:	4659      	mov	r1, fp
 80058fa:	eb63 0901 	sbc.w	r9, r3, r1
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800590a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800590e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005912:	4690      	mov	r8, r2
 8005914:	4699      	mov	r9, r3
 8005916:	4623      	mov	r3, r4
 8005918:	eb18 0303 	adds.w	r3, r8, r3
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	462b      	mov	r3, r5
 8005920:	eb49 0303 	adc.w	r3, r9, r3
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005932:	4629      	mov	r1, r5
 8005934:	024b      	lsls	r3, r1, #9
 8005936:	4621      	mov	r1, r4
 8005938:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800593c:	4621      	mov	r1, r4
 800593e:	024a      	lsls	r2, r1, #9
 8005940:	4610      	mov	r0, r2
 8005942:	4619      	mov	r1, r3
 8005944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005946:	2200      	movs	r2, #0
 8005948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800594a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800594c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005950:	f7fa fc3e 	bl	80001d0 <__aeabi_uldivmod>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4613      	mov	r3, r2
 800595a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800595c:	e058      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800595e:	4b38      	ldr	r3, [pc, #224]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	099b      	lsrs	r3, r3, #6
 8005964:	2200      	movs	r2, #0
 8005966:	4618      	mov	r0, r3
 8005968:	4611      	mov	r1, r2
 800596a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800596e:	623b      	str	r3, [r7, #32]
 8005970:	2300      	movs	r3, #0
 8005972:	627b      	str	r3, [r7, #36]	@ 0x24
 8005974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005978:	4642      	mov	r2, r8
 800597a:	464b      	mov	r3, r9
 800597c:	f04f 0000 	mov.w	r0, #0
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	0159      	lsls	r1, r3, #5
 8005986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800598a:	0150      	lsls	r0, r2, #5
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4641      	mov	r1, r8
 8005992:	ebb2 0a01 	subs.w	sl, r2, r1
 8005996:	4649      	mov	r1, r9
 8005998:	eb63 0b01 	sbc.w	fp, r3, r1
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059b0:	ebb2 040a 	subs.w	r4, r2, sl
 80059b4:	eb63 050b 	sbc.w	r5, r3, fp
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	00eb      	lsls	r3, r5, #3
 80059c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059c6:	00e2      	lsls	r2, r4, #3
 80059c8:	4614      	mov	r4, r2
 80059ca:	461d      	mov	r5, r3
 80059cc:	4643      	mov	r3, r8
 80059ce:	18e3      	adds	r3, r4, r3
 80059d0:	603b      	str	r3, [r7, #0]
 80059d2:	464b      	mov	r3, r9
 80059d4:	eb45 0303 	adc.w	r3, r5, r3
 80059d8:	607b      	str	r3, [r7, #4]
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059e6:	4629      	mov	r1, r5
 80059e8:	028b      	lsls	r3, r1, #10
 80059ea:	4621      	mov	r1, r4
 80059ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059f0:	4621      	mov	r1, r4
 80059f2:	028a      	lsls	r2, r1, #10
 80059f4:	4610      	mov	r0, r2
 80059f6:	4619      	mov	r1, r3
 80059f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059fa:	2200      	movs	r2, #0
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	61fa      	str	r2, [r7, #28]
 8005a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a04:	f7fa fbe4 	bl	80001d0 <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a10:	4b0b      	ldr	r3, [pc, #44]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a2a:	e002      	b.n	8005a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a2c:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3750      	adds	r7, #80	@ 0x50
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a3e:	bf00      	nop
 8005a40:	40023800 	.word	0x40023800
 8005a44:	00f42400 	.word	0x00f42400
 8005a48:	007a1200 	.word	0x007a1200

08005a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a50:	4b03      	ldr	r3, [pc, #12]	@ (8005a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a52:	681b      	ldr	r3, [r3, #0]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20000000 	.word	0x20000000

08005a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a68:	f7ff fff0 	bl	8005a4c <HAL_RCC_GetHCLKFreq>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	4b05      	ldr	r3, [pc, #20]	@ (8005a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	0a9b      	lsrs	r3, r3, #10
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	4903      	ldr	r1, [pc, #12]	@ (8005a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a7a:	5ccb      	ldrb	r3, [r1, r3]
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40023800 	.word	0x40023800
 8005a88:	08007e88 	.word	0x08007e88

08005a8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d109      	bne.n	8005ab0 <HAL_TIM_PWM_Start+0x24>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	bf14      	ite	ne
 8005aa8:	2301      	movne	r3, #1
 8005aaa:	2300      	moveq	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	e022      	b.n	8005af6 <HAL_TIM_PWM_Start+0x6a>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d109      	bne.n	8005aca <HAL_TIM_PWM_Start+0x3e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	bf14      	ite	ne
 8005ac2:	2301      	movne	r3, #1
 8005ac4:	2300      	moveq	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	e015      	b.n	8005af6 <HAL_TIM_PWM_Start+0x6a>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d109      	bne.n	8005ae4 <HAL_TIM_PWM_Start+0x58>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	bf14      	ite	ne
 8005adc:	2301      	movne	r3, #1
 8005ade:	2300      	moveq	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	e008      	b.n	8005af6 <HAL_TIM_PWM_Start+0x6a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	bf14      	ite	ne
 8005af0:	2301      	movne	r3, #1
 8005af2:	2300      	moveq	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e07c      	b.n	8005bf8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <HAL_TIM_PWM_Start+0x82>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b0c:	e013      	b.n	8005b36 <HAL_TIM_PWM_Start+0xaa>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d104      	bne.n	8005b1e <HAL_TIM_PWM_Start+0x92>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b1c:	e00b      	b.n	8005b36 <HAL_TIM_PWM_Start+0xaa>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d104      	bne.n	8005b2e <HAL_TIM_PWM_Start+0xa2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b2c:	e003      	b.n	8005b36 <HAL_TIM_PWM_Start+0xaa>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2202      	movs	r2, #2
 8005b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fda9 	bl	8006696 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a2d      	ldr	r2, [pc, #180]	@ (8005c00 <HAL_TIM_PWM_Start+0x174>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <HAL_TIM_PWM_Start+0xcc>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a2c      	ldr	r2, [pc, #176]	@ (8005c04 <HAL_TIM_PWM_Start+0x178>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d101      	bne.n	8005b5c <HAL_TIM_PWM_Start+0xd0>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e000      	b.n	8005b5e <HAL_TIM_PWM_Start+0xd2>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a22      	ldr	r2, [pc, #136]	@ (8005c00 <HAL_TIM_PWM_Start+0x174>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d022      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x136>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b84:	d01d      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x136>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005c08 <HAL_TIM_PWM_Start+0x17c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d018      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x136>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1d      	ldr	r2, [pc, #116]	@ (8005c0c <HAL_TIM_PWM_Start+0x180>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d013      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x136>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c10 <HAL_TIM_PWM_Start+0x184>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00e      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x136>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a16      	ldr	r2, [pc, #88]	@ (8005c04 <HAL_TIM_PWM_Start+0x178>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d009      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x136>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a18      	ldr	r2, [pc, #96]	@ (8005c14 <HAL_TIM_PWM_Start+0x188>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <HAL_TIM_PWM_Start+0x136>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a16      	ldr	r2, [pc, #88]	@ (8005c18 <HAL_TIM_PWM_Start+0x18c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d111      	bne.n	8005be6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b06      	cmp	r3, #6
 8005bd2:	d010      	beq.n	8005bf6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0201 	orr.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be4:	e007      	b.n	8005bf6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0201 	orr.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40010000 	.word	0x40010000
 8005c04:	40010400 	.word	0x40010400
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800
 8005c10:	40000c00 	.word	0x40000c00
 8005c14:	40014000 	.word	0x40014000
 8005c18:	40001800 	.word	0x40001800

08005c1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e041      	b.n	8005cb2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d106      	bne.n	8005c48 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7fb fd30 	bl	80016a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	f000 fa34 	bl	80060c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <HAL_TIM_IC_Start_IT+0x1e>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	e013      	b.n	8005d02 <HAL_TIM_IC_Start_IT+0x46>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d104      	bne.n	8005cea <HAL_TIM_IC_Start_IT+0x2e>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	e00b      	b.n	8005d02 <HAL_TIM_IC_Start_IT+0x46>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d104      	bne.n	8005cfa <HAL_TIM_IC_Start_IT+0x3e>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	e003      	b.n	8005d02 <HAL_TIM_IC_Start_IT+0x46>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <HAL_TIM_IC_Start_IT+0x58>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	e013      	b.n	8005d3c <HAL_TIM_IC_Start_IT+0x80>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d104      	bne.n	8005d24 <HAL_TIM_IC_Start_IT+0x68>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	e00b      	b.n	8005d3c <HAL_TIM_IC_Start_IT+0x80>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d104      	bne.n	8005d34 <HAL_TIM_IC_Start_IT+0x78>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	e003      	b.n	8005d3c <HAL_TIM_IC_Start_IT+0x80>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d3e:	7bbb      	ldrb	r3, [r7, #14]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d102      	bne.n	8005d4a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d44:	7b7b      	ldrb	r3, [r7, #13]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d001      	beq.n	8005d4e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e0cc      	b.n	8005ee8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d104      	bne.n	8005d5e <HAL_TIM_IC_Start_IT+0xa2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d5c:	e013      	b.n	8005d86 <HAL_TIM_IC_Start_IT+0xca>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d104      	bne.n	8005d6e <HAL_TIM_IC_Start_IT+0xb2>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d6c:	e00b      	b.n	8005d86 <HAL_TIM_IC_Start_IT+0xca>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d104      	bne.n	8005d7e <HAL_TIM_IC_Start_IT+0xc2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d7c:	e003      	b.n	8005d86 <HAL_TIM_IC_Start_IT+0xca>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2202      	movs	r2, #2
 8005d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d104      	bne.n	8005d96 <HAL_TIM_IC_Start_IT+0xda>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d94:	e013      	b.n	8005dbe <HAL_TIM_IC_Start_IT+0x102>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d104      	bne.n	8005da6 <HAL_TIM_IC_Start_IT+0xea>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005da4:	e00b      	b.n	8005dbe <HAL_TIM_IC_Start_IT+0x102>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d104      	bne.n	8005db6 <HAL_TIM_IC_Start_IT+0xfa>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db4:	e003      	b.n	8005dbe <HAL_TIM_IC_Start_IT+0x102>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2202      	movs	r2, #2
 8005dba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b0c      	cmp	r3, #12
 8005dc2:	d841      	bhi.n	8005e48 <HAL_TIM_IC_Start_IT+0x18c>
 8005dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dcc <HAL_TIM_IC_Start_IT+0x110>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005e01 	.word	0x08005e01
 8005dd0:	08005e49 	.word	0x08005e49
 8005dd4:	08005e49 	.word	0x08005e49
 8005dd8:	08005e49 	.word	0x08005e49
 8005ddc:	08005e13 	.word	0x08005e13
 8005de0:	08005e49 	.word	0x08005e49
 8005de4:	08005e49 	.word	0x08005e49
 8005de8:	08005e49 	.word	0x08005e49
 8005dec:	08005e25 	.word	0x08005e25
 8005df0:	08005e49 	.word	0x08005e49
 8005df4:	08005e49 	.word	0x08005e49
 8005df8:	08005e49 	.word	0x08005e49
 8005dfc:	08005e37 	.word	0x08005e37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0202 	orr.w	r2, r2, #2
 8005e0e:	60da      	str	r2, [r3, #12]
      break;
 8005e10:	e01d      	b.n	8005e4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0204 	orr.w	r2, r2, #4
 8005e20:	60da      	str	r2, [r3, #12]
      break;
 8005e22:	e014      	b.n	8005e4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0208 	orr.w	r2, r2, #8
 8005e32:	60da      	str	r2, [r3, #12]
      break;
 8005e34:	e00b      	b.n	8005e4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0210 	orr.w	r2, r2, #16
 8005e44:	60da      	str	r2, [r3, #12]
      break;
 8005e46:	e002      	b.n	8005e4e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d148      	bne.n	8005ee6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fc1a 	bl	8006696 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a22      	ldr	r2, [pc, #136]	@ (8005ef0 <HAL_TIM_IC_Start_IT+0x234>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d022      	beq.n	8005eb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e74:	d01d      	beq.n	8005eb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ef4 <HAL_TIM_IC_Start_IT+0x238>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d018      	beq.n	8005eb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a1c      	ldr	r2, [pc, #112]	@ (8005ef8 <HAL_TIM_IC_Start_IT+0x23c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d013      	beq.n	8005eb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8005efc <HAL_TIM_IC_Start_IT+0x240>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00e      	beq.n	8005eb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a19      	ldr	r2, [pc, #100]	@ (8005f00 <HAL_TIM_IC_Start_IT+0x244>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d009      	beq.n	8005eb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a18      	ldr	r2, [pc, #96]	@ (8005f04 <HAL_TIM_IC_Start_IT+0x248>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a16      	ldr	r2, [pc, #88]	@ (8005f08 <HAL_TIM_IC_Start_IT+0x24c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d111      	bne.n	8005ed6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b06      	cmp	r3, #6
 8005ec2:	d010      	beq.n	8005ee6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed4:	e007      	b.n	8005ee6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	40000c00 	.word	0x40000c00
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40001800 	.word	0x40001800

08005f0c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e088      	b.n	800603c <HAL_TIM_IC_ConfigChannel+0x130>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d11b      	bne.n	8005f70 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005f48:	f000 f9fc 	bl	8006344 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699a      	ldr	r2, [r3, #24]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 020c 	bic.w	r2, r2, #12
 8005f5a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6999      	ldr	r1, [r3, #24]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	619a      	str	r2, [r3, #24]
 8005f6e:	e060      	b.n	8006032 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d11c      	bne.n	8005fb0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005f86:	f000 fa80 	bl	800648a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	699a      	ldr	r2, [r3, #24]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005f98:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6999      	ldr	r1, [r3, #24]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	021a      	lsls	r2, r3, #8
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	619a      	str	r2, [r3, #24]
 8005fae:	e040      	b.n	8006032 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d11b      	bne.n	8005fee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005fc6:	f000 facd 	bl	8006564 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69da      	ldr	r2, [r3, #28]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 020c 	bic.w	r2, r2, #12
 8005fd8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69d9      	ldr	r1, [r3, #28]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	61da      	str	r2, [r3, #28]
 8005fec:	e021      	b.n	8006032 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b0c      	cmp	r3, #12
 8005ff2:	d11c      	bne.n	800602e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006004:	f000 faea 	bl	80065dc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	69da      	ldr	r2, [r3, #28]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006016:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69d9      	ldr	r1, [r3, #28]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	021a      	lsls	r2, r3, #8
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	61da      	str	r2, [r3, #28]
 800602c:	e001      	b.n	8006032 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800603a:	7dfb      	ldrb	r3, [r7, #23]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006058:	2302      	movs	r3, #2
 800605a:	e031      	b.n	80060c0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f8d6 	bl	8006220 <TIM_SlaveTimer_SetConfig>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e018      	b.n	80060c0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800609c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80060ac:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a46      	ldr	r2, [pc, #280]	@ (80061f4 <TIM_Base_SetConfig+0x12c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d013      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e6:	d00f      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a43      	ldr	r2, [pc, #268]	@ (80061f8 <TIM_Base_SetConfig+0x130>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00b      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a42      	ldr	r2, [pc, #264]	@ (80061fc <TIM_Base_SetConfig+0x134>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d007      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a41      	ldr	r2, [pc, #260]	@ (8006200 <TIM_Base_SetConfig+0x138>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_Base_SetConfig+0x40>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a40      	ldr	r2, [pc, #256]	@ (8006204 <TIM_Base_SetConfig+0x13c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d108      	bne.n	800611a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a35      	ldr	r2, [pc, #212]	@ (80061f4 <TIM_Base_SetConfig+0x12c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d02b      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006128:	d027      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a32      	ldr	r2, [pc, #200]	@ (80061f8 <TIM_Base_SetConfig+0x130>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d023      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a31      	ldr	r2, [pc, #196]	@ (80061fc <TIM_Base_SetConfig+0x134>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01f      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a30      	ldr	r2, [pc, #192]	@ (8006200 <TIM_Base_SetConfig+0x138>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d01b      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a2f      	ldr	r2, [pc, #188]	@ (8006204 <TIM_Base_SetConfig+0x13c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d017      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2e      	ldr	r2, [pc, #184]	@ (8006208 <TIM_Base_SetConfig+0x140>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2d      	ldr	r2, [pc, #180]	@ (800620c <TIM_Base_SetConfig+0x144>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00f      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a2c      	ldr	r2, [pc, #176]	@ (8006210 <TIM_Base_SetConfig+0x148>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00b      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a2b      	ldr	r2, [pc, #172]	@ (8006214 <TIM_Base_SetConfig+0x14c>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d007      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a2a      	ldr	r2, [pc, #168]	@ (8006218 <TIM_Base_SetConfig+0x150>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a29      	ldr	r2, [pc, #164]	@ (800621c <TIM_Base_SetConfig+0x154>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d108      	bne.n	800618c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a10      	ldr	r2, [pc, #64]	@ (80061f4 <TIM_Base_SetConfig+0x12c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_Base_SetConfig+0xf8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a12      	ldr	r2, [pc, #72]	@ (8006204 <TIM_Base_SetConfig+0x13c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d103      	bne.n	80061c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d105      	bne.n	80061e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f023 0201 	bic.w	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	611a      	str	r2, [r3, #16]
  }
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40010000 	.word	0x40010000
 80061f8:	40000400 	.word	0x40000400
 80061fc:	40000800 	.word	0x40000800
 8006200:	40000c00 	.word	0x40000c00
 8006204:	40010400 	.word	0x40010400
 8006208:	40014000 	.word	0x40014000
 800620c:	40014400 	.word	0x40014400
 8006210:	40014800 	.word	0x40014800
 8006214:	40001800 	.word	0x40001800
 8006218:	40001c00 	.word	0x40001c00
 800621c:	40002000 	.word	0x40002000

08006220 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800623c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f023 0307 	bic.w	r3, r3, #7
 800624e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b70      	cmp	r3, #112	@ 0x70
 8006268:	d01a      	beq.n	80062a0 <TIM_SlaveTimer_SetConfig+0x80>
 800626a:	2b70      	cmp	r3, #112	@ 0x70
 800626c:	d860      	bhi.n	8006330 <TIM_SlaveTimer_SetConfig+0x110>
 800626e:	2b60      	cmp	r3, #96	@ 0x60
 8006270:	d054      	beq.n	800631c <TIM_SlaveTimer_SetConfig+0xfc>
 8006272:	2b60      	cmp	r3, #96	@ 0x60
 8006274:	d85c      	bhi.n	8006330 <TIM_SlaveTimer_SetConfig+0x110>
 8006276:	2b50      	cmp	r3, #80	@ 0x50
 8006278:	d046      	beq.n	8006308 <TIM_SlaveTimer_SetConfig+0xe8>
 800627a:	2b50      	cmp	r3, #80	@ 0x50
 800627c:	d858      	bhi.n	8006330 <TIM_SlaveTimer_SetConfig+0x110>
 800627e:	2b40      	cmp	r3, #64	@ 0x40
 8006280:	d019      	beq.n	80062b6 <TIM_SlaveTimer_SetConfig+0x96>
 8006282:	2b40      	cmp	r3, #64	@ 0x40
 8006284:	d854      	bhi.n	8006330 <TIM_SlaveTimer_SetConfig+0x110>
 8006286:	2b30      	cmp	r3, #48	@ 0x30
 8006288:	d055      	beq.n	8006336 <TIM_SlaveTimer_SetConfig+0x116>
 800628a:	2b30      	cmp	r3, #48	@ 0x30
 800628c:	d850      	bhi.n	8006330 <TIM_SlaveTimer_SetConfig+0x110>
 800628e:	2b20      	cmp	r3, #32
 8006290:	d051      	beq.n	8006336 <TIM_SlaveTimer_SetConfig+0x116>
 8006292:	2b20      	cmp	r3, #32
 8006294:	d84c      	bhi.n	8006330 <TIM_SlaveTimer_SetConfig+0x110>
 8006296:	2b00      	cmp	r3, #0
 8006298:	d04d      	beq.n	8006336 <TIM_SlaveTimer_SetConfig+0x116>
 800629a:	2b10      	cmp	r3, #16
 800629c:	d04b      	beq.n	8006336 <TIM_SlaveTimer_SetConfig+0x116>
 800629e:	e047      	b.n	8006330 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80062b0:	f000 f9d1 	bl	8006656 <TIM_ETR_SetConfig>
      break;
 80062b4:	e040      	b.n	8006338 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b05      	cmp	r3, #5
 80062bc:	d101      	bne.n	80062c2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e03b      	b.n	800633a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6a1a      	ldr	r2, [r3, #32]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062e8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	621a      	str	r2, [r3, #32]
      break;
 8006306:	e017      	b.n	8006338 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006314:	461a      	mov	r2, r3
 8006316:	f000 f889 	bl	800642c <TIM_TI1_ConfigInputStage>
      break;
 800631a:	e00d      	b.n	8006338 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006328:	461a      	mov	r2, r3
 800632a:	f000 f8eb 	bl	8006504 <TIM_TI2_ConfigInputStage>
      break;
 800632e:	e003      	b.n	8006338 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	75fb      	strb	r3, [r7, #23]
      break;
 8006334:	e000      	b.n	8006338 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006336:	bf00      	nop
  }

  return status;
 8006338:	7dfb      	ldrb	r3, [r7, #23]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	f023 0201 	bic.w	r2, r3, #1
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4a28      	ldr	r2, [pc, #160]	@ (8006410 <TIM_TI1_SetConfig+0xcc>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d01b      	beq.n	80063aa <TIM_TI1_SetConfig+0x66>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006378:	d017      	beq.n	80063aa <TIM_TI1_SetConfig+0x66>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4a25      	ldr	r2, [pc, #148]	@ (8006414 <TIM_TI1_SetConfig+0xd0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <TIM_TI1_SetConfig+0x66>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4a24      	ldr	r2, [pc, #144]	@ (8006418 <TIM_TI1_SetConfig+0xd4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00f      	beq.n	80063aa <TIM_TI1_SetConfig+0x66>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4a23      	ldr	r2, [pc, #140]	@ (800641c <TIM_TI1_SetConfig+0xd8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00b      	beq.n	80063aa <TIM_TI1_SetConfig+0x66>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4a22      	ldr	r2, [pc, #136]	@ (8006420 <TIM_TI1_SetConfig+0xdc>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d007      	beq.n	80063aa <TIM_TI1_SetConfig+0x66>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4a21      	ldr	r2, [pc, #132]	@ (8006424 <TIM_TI1_SetConfig+0xe0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d003      	beq.n	80063aa <TIM_TI1_SetConfig+0x66>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a20      	ldr	r2, [pc, #128]	@ (8006428 <TIM_TI1_SetConfig+0xe4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d101      	bne.n	80063ae <TIM_TI1_SetConfig+0x6a>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e000      	b.n	80063b0 <TIM_TI1_SetConfig+0x6c>
 80063ae:	2300      	movs	r3, #0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d008      	beq.n	80063c6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	e003      	b.n	80063ce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f043 0301 	orr.w	r3, r3, #1
 80063cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f023 030a 	bic.w	r3, r3, #10
 80063e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f003 030a 	and.w	r3, r3, #10
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40010000 	.word	0x40010000
 8006414:	40000400 	.word	0x40000400
 8006418:	40000800 	.word	0x40000800
 800641c:	40000c00 	.word	0x40000c00
 8006420:	40010400 	.word	0x40010400
 8006424:	40014000 	.word	0x40014000
 8006428:	40001800 	.word	0x40001800

0800642c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	f023 0201 	bic.w	r2, r3, #1
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f023 030a 	bic.w	r3, r3, #10
 8006468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800648a:	b480      	push	{r7}
 800648c:	b087      	sub	sp, #28
 800648e:	af00      	add	r7, sp, #0
 8006490:	60f8      	str	r0, [r7, #12]
 8006492:	60b9      	str	r1, [r7, #8]
 8006494:	607a      	str	r2, [r7, #4]
 8006496:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f023 0210 	bic.w	r2, r3, #16
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	031b      	lsls	r3, r3, #12
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064dc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	621a      	str	r2, [r3, #32]
}
 80064f8:	bf00      	nop
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f023 0210 	bic.w	r2, r3, #16
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800652e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	031b      	lsls	r3, r3, #12
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006540:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	621a      	str	r2, [r3, #32]
}
 8006558:	bf00      	nop
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f023 0303 	bic.w	r3, r3, #3
 8006590:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80065b4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	621a      	str	r2, [r3, #32]
}
 80065d0:	bf00      	nop
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
 80065e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006608:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	021b      	lsls	r3, r3, #8
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800661a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	031b      	lsls	r3, r3, #12
 8006620:	b29b      	uxth	r3, r3
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800662e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	031b      	lsls	r3, r3, #12
 8006634:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	621a      	str	r2, [r3, #32]
}
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006656:	b480      	push	{r7}
 8006658:	b087      	sub	sp, #28
 800665a:	af00      	add	r7, sp, #0
 800665c:	60f8      	str	r0, [r7, #12]
 800665e:	60b9      	str	r1, [r7, #8]
 8006660:	607a      	str	r2, [r7, #4]
 8006662:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006670:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	021a      	lsls	r2, r3, #8
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	431a      	orrs	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4313      	orrs	r3, r2
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	609a      	str	r2, [r3, #8]
}
 800668a:	bf00      	nop
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006696:	b480      	push	{r7}
 8006698:	b087      	sub	sp, #28
 800669a:	af00      	add	r7, sp, #0
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f003 031f 	and.w	r3, r3, #31
 80066a8:	2201      	movs	r2, #1
 80066aa:	fa02 f303 	lsl.w	r3, r2, r3
 80066ae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a1a      	ldr	r2, [r3, #32]
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	43db      	mvns	r3, r3
 80066b8:	401a      	ands	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a1a      	ldr	r2, [r3, #32]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f003 031f 	and.w	r3, r3, #31
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	fa01 f303 	lsl.w	r3, r1, r3
 80066ce:	431a      	orrs	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	621a      	str	r2, [r3, #32]
}
 80066d4:	bf00      	nop
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e05a      	b.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800671e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a21      	ldr	r2, [pc, #132]	@ (80067bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d022      	beq.n	8006782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006744:	d01d      	beq.n	8006782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a1d      	ldr	r2, [pc, #116]	@ (80067c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d018      	beq.n	8006782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a1b      	ldr	r2, [pc, #108]	@ (80067c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a1a      	ldr	r2, [pc, #104]	@ (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00e      	beq.n	8006782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a18      	ldr	r2, [pc, #96]	@ (80067cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d009      	beq.n	8006782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a17      	ldr	r2, [pc, #92]	@ (80067d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d004      	beq.n	8006782 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a15      	ldr	r2, [pc, #84]	@ (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d10c      	bne.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	4313      	orrs	r3, r2
 8006792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	40010000 	.word	0x40010000
 80067c0:	40000400 	.word	0x40000400
 80067c4:	40000800 	.word	0x40000800
 80067c8:	40000c00 	.word	0x40000c00
 80067cc:	40010400 	.word	0x40010400
 80067d0:	40014000 	.word	0x40014000
 80067d4:	40001800 	.word	0x40001800

080067d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80067e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067ea:	2b84      	cmp	r3, #132	@ 0x84
 80067ec:	d005      	beq.n	80067fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80067ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4413      	add	r3, r2
 80067f6:	3303      	adds	r3, #3
 80067f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80067fa:	68fb      	ldr	r3, [r7, #12]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800680c:	f000 fb50 	bl	8006eb0 <vTaskStartScheduler>
  
  return osOK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	bd80      	pop	{r7, pc}

08006816 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006816:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006818:	b089      	sub	sp, #36	@ 0x24
 800681a:	af04      	add	r7, sp, #16
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d020      	beq.n	800686a <osThreadCreate+0x54>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01c      	beq.n	800686a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685c      	ldr	r4, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691e      	ldr	r6, [r3, #16]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff ffc8 	bl	80067d8 <makeFreeRtosPriority>
 8006848:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006852:	9202      	str	r2, [sp, #8]
 8006854:	9301      	str	r3, [sp, #4]
 8006856:	9100      	str	r1, [sp, #0]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	4632      	mov	r2, r6
 800685c:	4629      	mov	r1, r5
 800685e:	4620      	mov	r0, r4
 8006860:	f000 f8d9 	bl	8006a16 <xTaskCreateStatic>
 8006864:	4603      	mov	r3, r0
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e01c      	b.n	80068a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685c      	ldr	r4, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006876:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff ffaa 	bl	80067d8 <makeFreeRtosPriority>
 8006884:	4602      	mov	r2, r0
 8006886:	f107 030c 	add.w	r3, r7, #12
 800688a:	9301      	str	r3, [sp, #4]
 800688c:	9200      	str	r2, [sp, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	4632      	mov	r2, r6
 8006892:	4629      	mov	r1, r5
 8006894:	4620      	mov	r0, r4
 8006896:	f000 f91e 	bl	8006ad6 <xTaskCreate>
 800689a:	4603      	mov	r3, r0
 800689c:	2b01      	cmp	r3, #1
 800689e:	d001      	beq.n	80068a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e000      	b.n	80068a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80068a4:	68fb      	ldr	r3, [r7, #12]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f103 0208 	add.w	r2, r3, #8
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f04f 32ff 	mov.w	r2, #4294967295
 80068c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f103 0208 	add.w	r2, r3, #8
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f103 0208 	add.w	r2, r3, #8
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	601a      	str	r2, [r3, #0]
}
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006966:	d103      	bne.n	8006970 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	e00c      	b.n	800698a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3308      	adds	r3, #8
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	e002      	b.n	800697e <vListInsert+0x2e>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	429a      	cmp	r2, r3
 8006988:	d2f6      	bcs.n	8006978 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	601a      	str	r2, [r3, #0]
}
 80069b6:	bf00      	nop
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6892      	ldr	r2, [r2, #8]
 80069d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	6852      	ldr	r2, [r2, #4]
 80069e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d103      	bne.n	80069f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689a      	ldr	r2, [r3, #8]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	1e5a      	subs	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b08e      	sub	sp, #56	@ 0x38
 8006a1a:	af04      	add	r7, sp, #16
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a3c:	bf00      	nop
 8006a3e:	bf00      	nop
 8006a40:	e7fd      	b.n	8006a3e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	61fb      	str	r3, [r7, #28]
}
 8006a5a:	bf00      	nop
 8006a5c:	bf00      	nop
 8006a5e:	e7fd      	b.n	8006a5c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a60:	2354      	movs	r3, #84	@ 0x54
 8006a62:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b54      	cmp	r3, #84	@ 0x54
 8006a68:	d00b      	beq.n	8006a82 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	61bb      	str	r3, [r7, #24]
}
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	e7fd      	b.n	8006a7e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01e      	beq.n	8006ac8 <xTaskCreateStatic+0xb2>
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01b      	beq.n	8006ac8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a98:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	9303      	str	r3, [sp, #12]
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	9302      	str	r3, [sp, #8]
 8006aaa:	f107 0314 	add.w	r3, r7, #20
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 f850 	bl	8006b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ac0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ac2:	f000 f8d5 	bl	8006c70 <prvAddNewTaskToReadyList>
 8006ac6:	e001      	b.n	8006acc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006acc:	697b      	ldr	r3, [r7, #20]
	}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3728      	adds	r7, #40	@ 0x28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b08c      	sub	sp, #48	@ 0x30
 8006ada:	af04      	add	r7, sp, #16
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	603b      	str	r3, [r7, #0]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 ff7c 	bl	80079e8 <pvPortMalloc>
 8006af0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00e      	beq.n	8006b16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006af8:	2054      	movs	r0, #84	@ 0x54
 8006afa:	f000 ff75 	bl	80079e8 <pvPortMalloc>
 8006afe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b0c:	e005      	b.n	8006b1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b0e:	6978      	ldr	r0, [r7, #20]
 8006b10:	f001 f838 	bl	8007b84 <vPortFree>
 8006b14:	e001      	b.n	8006b1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d017      	beq.n	8006b50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b28:	88fa      	ldrh	r2, [r7, #6]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9303      	str	r3, [sp, #12]
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	9302      	str	r3, [sp, #8]
 8006b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f80e 	bl	8006b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b44:	69f8      	ldr	r0, [r7, #28]
 8006b46:	f000 f893 	bl	8006c70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	61bb      	str	r3, [r7, #24]
 8006b4e:	e002      	b.n	8006b56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b50:	f04f 33ff 	mov.w	r3, #4294967295
 8006b54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b56:	69bb      	ldr	r3, [r7, #24]
	}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	f023 0307 	bic.w	r3, r3, #7
 8006b86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00b      	beq.n	8006baa <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	617b      	str	r3, [r7, #20]
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	e7fd      	b.n	8006ba6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01f      	beq.n	8006bf0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	e012      	b.n	8006bdc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	4413      	add	r3, r2
 8006bbc:	7819      	ldrb	r1, [r3, #0]
 8006bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3334      	adds	r3, #52	@ 0x34
 8006bc6:	460a      	mov	r2, r1
 8006bc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	4413      	add	r3, r2
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d006      	beq.n	8006be4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	61fb      	str	r3, [r7, #28]
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	2b0f      	cmp	r3, #15
 8006be0:	d9e9      	bls.n	8006bb6 <prvInitialiseNewTask+0x56>
 8006be2:	e000      	b.n	8006be6 <prvInitialiseNewTask+0x86>
			{
				break;
 8006be4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bee:	e003      	b.n	8006bf8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfa:	2b06      	cmp	r3, #6
 8006bfc:	d901      	bls.n	8006c02 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bfe:	2306      	movs	r3, #6
 8006c00:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c06:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c0c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	2200      	movs	r2, #0
 8006c12:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	3304      	adds	r3, #4
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff fe68 	bl	80068ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	3318      	adds	r3, #24
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff fe63 	bl	80068ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c30:	f1c3 0207 	rsb	r2, r3, #7
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c3c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	2200      	movs	r2, #0
 8006c42:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	69b8      	ldr	r0, [r7, #24]
 8006c52:	f000 fcbb 	bl	80075cc <pxPortInitialiseStack>
 8006c56:	4602      	mov	r2, r0
 8006c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c68:	bf00      	nop
 8006c6a:	3720      	adds	r7, #32
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c78:	f000 fdd6 	bl	8007828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8006d28 <prvAddNewTaskToReadyList+0xb8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3301      	adds	r3, #1
 8006c82:	4a29      	ldr	r2, [pc, #164]	@ (8006d28 <prvAddNewTaskToReadyList+0xb8>)
 8006c84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c86:	4b29      	ldr	r3, [pc, #164]	@ (8006d2c <prvAddNewTaskToReadyList+0xbc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c8e:	4a27      	ldr	r2, [pc, #156]	@ (8006d2c <prvAddNewTaskToReadyList+0xbc>)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c94:	4b24      	ldr	r3, [pc, #144]	@ (8006d28 <prvAddNewTaskToReadyList+0xb8>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d110      	bne.n	8006cbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c9c:	f000 fb54 	bl	8007348 <prvInitialiseTaskLists>
 8006ca0:	e00d      	b.n	8006cbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ca2:	4b23      	ldr	r3, [pc, #140]	@ (8006d30 <prvAddNewTaskToReadyList+0xc0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d109      	bne.n	8006cbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006caa:	4b20      	ldr	r3, [pc, #128]	@ (8006d2c <prvAddNewTaskToReadyList+0xbc>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d802      	bhi.n	8006cbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8006d2c <prvAddNewTaskToReadyList+0xbc>)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8006d34 <prvAddNewTaskToReadyList+0xc4>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8006d34 <prvAddNewTaskToReadyList+0xc4>)
 8006cc6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ccc:	2201      	movs	r2, #1
 8006cce:	409a      	lsls	r2, r3
 8006cd0:	4b19      	ldr	r3, [pc, #100]	@ (8006d38 <prvAddNewTaskToReadyList+0xc8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	4a18      	ldr	r2, [pc, #96]	@ (8006d38 <prvAddNewTaskToReadyList+0xc8>)
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cde:	4613      	mov	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4a15      	ldr	r2, [pc, #84]	@ (8006d3c <prvAddNewTaskToReadyList+0xcc>)
 8006ce8:	441a      	add	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f7ff fe09 	bl	8006908 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cf6:	f000 fdc9 	bl	800788c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006d30 <prvAddNewTaskToReadyList+0xc0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00e      	beq.n	8006d20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d02:	4b0a      	ldr	r3, [pc, #40]	@ (8006d2c <prvAddNewTaskToReadyList+0xbc>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d207      	bcs.n	8006d20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d10:	4b0b      	ldr	r3, [pc, #44]	@ (8006d40 <prvAddNewTaskToReadyList+0xd0>)
 8006d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	200006b4 	.word	0x200006b4
 8006d2c:	200005b4 	.word	0x200005b4
 8006d30:	200006c0 	.word	0x200006c0
 8006d34:	200006d0 	.word	0x200006d0
 8006d38:	200006bc 	.word	0x200006bc
 8006d3c:	200005b8 	.word	0x200005b8
 8006d40:	e000ed04 	.word	0xe000ed04

08006d44 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	@ 0x28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10b      	bne.n	8006d70 <vTaskDelayUntil+0x2c>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	617b      	str	r3, [r7, #20]
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	e7fd      	b.n	8006d6c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10b      	bne.n	8006d8e <vTaskDelayUntil+0x4a>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	613b      	str	r3, [r7, #16]
}
 8006d88:	bf00      	nop
 8006d8a:	bf00      	nop
 8006d8c:	e7fd      	b.n	8006d8a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8006d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e38 <vTaskDelayUntil+0xf4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <vTaskDelayUntil+0x6a>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	60fb      	str	r3, [r7, #12]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8006dae:	f000 f8e1 	bl	8006f74 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006db2:	4b22      	ldr	r3, [pc, #136]	@ (8006e3c <vTaskDelayUntil+0xf8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6a3a      	ldr	r2, [r7, #32]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d20b      	bcs.n	8006de4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d211      	bcs.n	8006dfa <vTaskDelayUntil+0xb6>
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d90d      	bls.n	8006dfa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006dde:	2301      	movs	r3, #1
 8006de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006de2:	e00a      	b.n	8006dfa <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d303      	bcc.n	8006df6 <vTaskDelayUntil+0xb2>
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d901      	bls.n	8006dfa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006df6:	2301      	movs	r3, #1
 8006df8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69fa      	ldr	r2, [r7, #28]
 8006dfe:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d006      	beq.n	8006e14 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fb76 	bl	8007500 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006e14:	f000 f8bc 	bl	8006f90 <xTaskResumeAll>
 8006e18:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d107      	bne.n	8006e30 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006e20:	4b07      	ldr	r3, [pc, #28]	@ (8006e40 <vTaskDelayUntil+0xfc>)
 8006e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e30:	bf00      	nop
 8006e32:	3728      	adds	r7, #40	@ 0x28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	200006dc 	.word	0x200006dc
 8006e3c:	200006b8 	.word	0x200006b8
 8006e40:	e000ed04 	.word	0xe000ed04

08006e44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d018      	beq.n	8006e88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e56:	4b14      	ldr	r3, [pc, #80]	@ (8006ea8 <vTaskDelay+0x64>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <vTaskDelay+0x32>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	60bb      	str	r3, [r7, #8]
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	e7fd      	b.n	8006e72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e76:	f000 f87d 	bl	8006f74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fb3f 	bl	8007500 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e82:	f000 f885 	bl	8006f90 <xTaskResumeAll>
 8006e86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d107      	bne.n	8006e9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006e8e:	4b07      	ldr	r3, [pc, #28]	@ (8006eac <vTaskDelay+0x68>)
 8006e90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e9e:	bf00      	nop
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	200006dc 	.word	0x200006dc
 8006eac:	e000ed04 	.word	0xe000ed04

08006eb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	@ 0x28
 8006eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ebe:	463a      	mov	r2, r7
 8006ec0:	1d39      	adds	r1, r7, #4
 8006ec2:	f107 0308 	add.w	r3, r7, #8
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7f9 fafa 	bl	80004c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	9202      	str	r2, [sp, #8]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	2300      	movs	r3, #0
 8006edc:	460a      	mov	r2, r1
 8006ede:	491f      	ldr	r1, [pc, #124]	@ (8006f5c <vTaskStartScheduler+0xac>)
 8006ee0:	481f      	ldr	r0, [pc, #124]	@ (8006f60 <vTaskStartScheduler+0xb0>)
 8006ee2:	f7ff fd98 	bl	8006a16 <xTaskCreateStatic>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8006f64 <vTaskStartScheduler+0xb4>)
 8006eea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006eec:	4b1d      	ldr	r3, [pc, #116]	@ (8006f64 <vTaskStartScheduler+0xb4>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	e001      	b.n	8006efe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d116      	bne.n	8006f32 <vTaskStartScheduler+0x82>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	613b      	str	r3, [r7, #16]
}
 8006f16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f18:	4b13      	ldr	r3, [pc, #76]	@ (8006f68 <vTaskStartScheduler+0xb8>)
 8006f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f20:	4b12      	ldr	r3, [pc, #72]	@ (8006f6c <vTaskStartScheduler+0xbc>)
 8006f22:	2201      	movs	r2, #1
 8006f24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f26:	4b12      	ldr	r3, [pc, #72]	@ (8006f70 <vTaskStartScheduler+0xc0>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f2c:	f000 fbd8 	bl	80076e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f30:	e00f      	b.n	8006f52 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f38:	d10b      	bne.n	8006f52 <vTaskStartScheduler+0xa2>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	60fb      	str	r3, [r7, #12]
}
 8006f4c:	bf00      	nop
 8006f4e:	bf00      	nop
 8006f50:	e7fd      	b.n	8006f4e <vTaskStartScheduler+0x9e>
}
 8006f52:	bf00      	nop
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	08007e6c 	.word	0x08007e6c
 8006f60:	08007319 	.word	0x08007319
 8006f64:	200006d8 	.word	0x200006d8
 8006f68:	200006d4 	.word	0x200006d4
 8006f6c:	200006c0 	.word	0x200006c0
 8006f70:	200006b8 	.word	0x200006b8

08006f74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f78:	4b04      	ldr	r3, [pc, #16]	@ (8006f8c <vTaskSuspendAll+0x18>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	4a03      	ldr	r2, [pc, #12]	@ (8006f8c <vTaskSuspendAll+0x18>)
 8006f80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f82:	bf00      	nop
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	200006dc 	.word	0x200006dc

08006f90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f9e:	4b42      	ldr	r3, [pc, #264]	@ (80070a8 <xTaskResumeAll+0x118>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10b      	bne.n	8006fbe <xTaskResumeAll+0x2e>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	603b      	str	r3, [r7, #0]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fbe:	f000 fc33 	bl	8007828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fc2:	4b39      	ldr	r3, [pc, #228]	@ (80070a8 <xTaskResumeAll+0x118>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	4a37      	ldr	r2, [pc, #220]	@ (80070a8 <xTaskResumeAll+0x118>)
 8006fca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fcc:	4b36      	ldr	r3, [pc, #216]	@ (80070a8 <xTaskResumeAll+0x118>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d161      	bne.n	8007098 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fd4:	4b35      	ldr	r3, [pc, #212]	@ (80070ac <xTaskResumeAll+0x11c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d05d      	beq.n	8007098 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fdc:	e02e      	b.n	800703c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fde:	4b34      	ldr	r3, [pc, #208]	@ (80070b0 <xTaskResumeAll+0x120>)
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3318      	adds	r3, #24
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff fce9 	bl	80069c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff fce4 	bl	80069c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffe:	2201      	movs	r2, #1
 8007000:	409a      	lsls	r2, r3
 8007002:	4b2c      	ldr	r3, [pc, #176]	@ (80070b4 <xTaskResumeAll+0x124>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4313      	orrs	r3, r2
 8007008:	4a2a      	ldr	r2, [pc, #168]	@ (80070b4 <xTaskResumeAll+0x124>)
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007010:	4613      	mov	r3, r2
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4a27      	ldr	r2, [pc, #156]	@ (80070b8 <xTaskResumeAll+0x128>)
 800701a:	441a      	add	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3304      	adds	r3, #4
 8007020:	4619      	mov	r1, r3
 8007022:	4610      	mov	r0, r2
 8007024:	f7ff fc70 	bl	8006908 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702c:	4b23      	ldr	r3, [pc, #140]	@ (80070bc <xTaskResumeAll+0x12c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007032:	429a      	cmp	r2, r3
 8007034:	d302      	bcc.n	800703c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007036:	4b22      	ldr	r3, [pc, #136]	@ (80070c0 <xTaskResumeAll+0x130>)
 8007038:	2201      	movs	r2, #1
 800703a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800703c:	4b1c      	ldr	r3, [pc, #112]	@ (80070b0 <xTaskResumeAll+0x120>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1cc      	bne.n	8006fde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800704a:	f000 fa1b 	bl	8007484 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800704e:	4b1d      	ldr	r3, [pc, #116]	@ (80070c4 <xTaskResumeAll+0x134>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d010      	beq.n	800707c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800705a:	f000 f847 	bl	80070ec <xTaskIncrementTick>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007064:	4b16      	ldr	r3, [pc, #88]	@ (80070c0 <xTaskResumeAll+0x130>)
 8007066:	2201      	movs	r2, #1
 8007068:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3b01      	subs	r3, #1
 800706e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f1      	bne.n	800705a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007076:	4b13      	ldr	r3, [pc, #76]	@ (80070c4 <xTaskResumeAll+0x134>)
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800707c:	4b10      	ldr	r3, [pc, #64]	@ (80070c0 <xTaskResumeAll+0x130>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d009      	beq.n	8007098 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007084:	2301      	movs	r3, #1
 8007086:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007088:	4b0f      	ldr	r3, [pc, #60]	@ (80070c8 <xTaskResumeAll+0x138>)
 800708a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007098:	f000 fbf8 	bl	800788c <vPortExitCritical>

	return xAlreadyYielded;
 800709c:	68bb      	ldr	r3, [r7, #8]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	200006dc 	.word	0x200006dc
 80070ac:	200006b4 	.word	0x200006b4
 80070b0:	20000674 	.word	0x20000674
 80070b4:	200006bc 	.word	0x200006bc
 80070b8:	200005b8 	.word	0x200005b8
 80070bc:	200005b4 	.word	0x200005b4
 80070c0:	200006c8 	.word	0x200006c8
 80070c4:	200006c4 	.word	0x200006c4
 80070c8:	e000ed04 	.word	0xe000ed04

080070cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070d2:	4b05      	ldr	r3, [pc, #20]	@ (80070e8 <xTaskGetTickCount+0x1c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070d8:	687b      	ldr	r3, [r7, #4]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	200006b8 	.word	0x200006b8

080070ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070f6:	4b4f      	ldr	r3, [pc, #316]	@ (8007234 <xTaskIncrementTick+0x148>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f040 808f 	bne.w	800721e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007100:	4b4d      	ldr	r3, [pc, #308]	@ (8007238 <xTaskIncrementTick+0x14c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007108:	4a4b      	ldr	r2, [pc, #300]	@ (8007238 <xTaskIncrementTick+0x14c>)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d121      	bne.n	8007158 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007114:	4b49      	ldr	r3, [pc, #292]	@ (800723c <xTaskIncrementTick+0x150>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00b      	beq.n	8007136 <xTaskIncrementTick+0x4a>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	603b      	str	r3, [r7, #0]
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <xTaskIncrementTick+0x46>
 8007136:	4b41      	ldr	r3, [pc, #260]	@ (800723c <xTaskIncrementTick+0x150>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	4b40      	ldr	r3, [pc, #256]	@ (8007240 <xTaskIncrementTick+0x154>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a3e      	ldr	r2, [pc, #248]	@ (800723c <xTaskIncrementTick+0x150>)
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	4a3e      	ldr	r2, [pc, #248]	@ (8007240 <xTaskIncrementTick+0x154>)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6013      	str	r3, [r2, #0]
 800714a:	4b3e      	ldr	r3, [pc, #248]	@ (8007244 <xTaskIncrementTick+0x158>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3301      	adds	r3, #1
 8007150:	4a3c      	ldr	r2, [pc, #240]	@ (8007244 <xTaskIncrementTick+0x158>)
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	f000 f996 	bl	8007484 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007158:	4b3b      	ldr	r3, [pc, #236]	@ (8007248 <xTaskIncrementTick+0x15c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	429a      	cmp	r2, r3
 8007160:	d348      	bcc.n	80071f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007162:	4b36      	ldr	r3, [pc, #216]	@ (800723c <xTaskIncrementTick+0x150>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d104      	bne.n	8007176 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800716c:	4b36      	ldr	r3, [pc, #216]	@ (8007248 <xTaskIncrementTick+0x15c>)
 800716e:	f04f 32ff 	mov.w	r2, #4294967295
 8007172:	601a      	str	r2, [r3, #0]
					break;
 8007174:	e03e      	b.n	80071f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007176:	4b31      	ldr	r3, [pc, #196]	@ (800723c <xTaskIncrementTick+0x150>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	429a      	cmp	r2, r3
 800718c:	d203      	bcs.n	8007196 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800718e:	4a2e      	ldr	r2, [pc, #184]	@ (8007248 <xTaskIncrementTick+0x15c>)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007194:	e02e      	b.n	80071f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	3304      	adds	r3, #4
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fc11 	bl	80069c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	3318      	adds	r3, #24
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff fc08 	bl	80069c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b6:	2201      	movs	r2, #1
 80071b8:	409a      	lsls	r2, r3
 80071ba:	4b24      	ldr	r3, [pc, #144]	@ (800724c <xTaskIncrementTick+0x160>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4313      	orrs	r3, r2
 80071c0:	4a22      	ldr	r2, [pc, #136]	@ (800724c <xTaskIncrementTick+0x160>)
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4a1f      	ldr	r2, [pc, #124]	@ (8007250 <xTaskIncrementTick+0x164>)
 80071d2:	441a      	add	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	f7ff fb94 	bl	8006908 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007254 <xTaskIncrementTick+0x168>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d3b9      	bcc.n	8007162 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80071ee:	2301      	movs	r3, #1
 80071f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071f2:	e7b6      	b.n	8007162 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071f4:	4b17      	ldr	r3, [pc, #92]	@ (8007254 <xTaskIncrementTick+0x168>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fa:	4915      	ldr	r1, [pc, #84]	@ (8007250 <xTaskIncrementTick+0x164>)
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d901      	bls.n	8007210 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800720c:	2301      	movs	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007210:	4b11      	ldr	r3, [pc, #68]	@ (8007258 <xTaskIncrementTick+0x16c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007218:	2301      	movs	r3, #1
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	e004      	b.n	8007228 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800721e:	4b0f      	ldr	r3, [pc, #60]	@ (800725c <xTaskIncrementTick+0x170>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3301      	adds	r3, #1
 8007224:	4a0d      	ldr	r2, [pc, #52]	@ (800725c <xTaskIncrementTick+0x170>)
 8007226:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007228:	697b      	ldr	r3, [r7, #20]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	200006dc 	.word	0x200006dc
 8007238:	200006b8 	.word	0x200006b8
 800723c:	2000066c 	.word	0x2000066c
 8007240:	20000670 	.word	0x20000670
 8007244:	200006cc 	.word	0x200006cc
 8007248:	200006d4 	.word	0x200006d4
 800724c:	200006bc 	.word	0x200006bc
 8007250:	200005b8 	.word	0x200005b8
 8007254:	200005b4 	.word	0x200005b4
 8007258:	200006c8 	.word	0x200006c8
 800725c:	200006c4 	.word	0x200006c4

08007260 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007266:	4b27      	ldr	r3, [pc, #156]	@ (8007304 <vTaskSwitchContext+0xa4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800726e:	4b26      	ldr	r3, [pc, #152]	@ (8007308 <vTaskSwitchContext+0xa8>)
 8007270:	2201      	movs	r2, #1
 8007272:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007274:	e040      	b.n	80072f8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007276:	4b24      	ldr	r3, [pc, #144]	@ (8007308 <vTaskSwitchContext+0xa8>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800727c:	4b23      	ldr	r3, [pc, #140]	@ (800730c <vTaskSwitchContext+0xac>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	fab3 f383 	clz	r3, r3
 8007288:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	f1c3 031f 	rsb	r3, r3, #31
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	491f      	ldr	r1, [pc, #124]	@ (8007310 <vTaskSwitchContext+0xb0>)
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4613      	mov	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10b      	bne.n	80072be <vTaskSwitchContext+0x5e>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	607b      	str	r3, [r7, #4]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <vTaskSwitchContext+0x5a>
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4a11      	ldr	r2, [pc, #68]	@ (8007310 <vTaskSwitchContext+0xb0>)
 80072ca:	4413      	add	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	605a      	str	r2, [r3, #4]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	3308      	adds	r3, #8
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d104      	bne.n	80072ee <vTaskSwitchContext+0x8e>
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	4a07      	ldr	r2, [pc, #28]	@ (8007314 <vTaskSwitchContext+0xb4>)
 80072f6:	6013      	str	r3, [r2, #0]
}
 80072f8:	bf00      	nop
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	200006dc 	.word	0x200006dc
 8007308:	200006c8 	.word	0x200006c8
 800730c:	200006bc 	.word	0x200006bc
 8007310:	200005b8 	.word	0x200005b8
 8007314:	200005b4 	.word	0x200005b4

08007318 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007320:	f000 f852 	bl	80073c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007324:	4b06      	ldr	r3, [pc, #24]	@ (8007340 <prvIdleTask+0x28>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d9f9      	bls.n	8007320 <prvIdleTask+0x8>
			{
				taskYIELD();
 800732c:	4b05      	ldr	r3, [pc, #20]	@ (8007344 <prvIdleTask+0x2c>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800733c:	e7f0      	b.n	8007320 <prvIdleTask+0x8>
 800733e:	bf00      	nop
 8007340:	200005b8 	.word	0x200005b8
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800734e:	2300      	movs	r3, #0
 8007350:	607b      	str	r3, [r7, #4]
 8007352:	e00c      	b.n	800736e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	4613      	mov	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4a12      	ldr	r2, [pc, #72]	@ (80073a8 <prvInitialiseTaskLists+0x60>)
 8007360:	4413      	add	r3, r2
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff faa3 	bl	80068ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3301      	adds	r3, #1
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b06      	cmp	r3, #6
 8007372:	d9ef      	bls.n	8007354 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007374:	480d      	ldr	r0, [pc, #52]	@ (80073ac <prvInitialiseTaskLists+0x64>)
 8007376:	f7ff fa9a 	bl	80068ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800737a:	480d      	ldr	r0, [pc, #52]	@ (80073b0 <prvInitialiseTaskLists+0x68>)
 800737c:	f7ff fa97 	bl	80068ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007380:	480c      	ldr	r0, [pc, #48]	@ (80073b4 <prvInitialiseTaskLists+0x6c>)
 8007382:	f7ff fa94 	bl	80068ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007386:	480c      	ldr	r0, [pc, #48]	@ (80073b8 <prvInitialiseTaskLists+0x70>)
 8007388:	f7ff fa91 	bl	80068ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800738c:	480b      	ldr	r0, [pc, #44]	@ (80073bc <prvInitialiseTaskLists+0x74>)
 800738e:	f7ff fa8e 	bl	80068ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007392:	4b0b      	ldr	r3, [pc, #44]	@ (80073c0 <prvInitialiseTaskLists+0x78>)
 8007394:	4a05      	ldr	r2, [pc, #20]	@ (80073ac <prvInitialiseTaskLists+0x64>)
 8007396:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007398:	4b0a      	ldr	r3, [pc, #40]	@ (80073c4 <prvInitialiseTaskLists+0x7c>)
 800739a:	4a05      	ldr	r2, [pc, #20]	@ (80073b0 <prvInitialiseTaskLists+0x68>)
 800739c:	601a      	str	r2, [r3, #0]
}
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	200005b8 	.word	0x200005b8
 80073ac:	20000644 	.word	0x20000644
 80073b0:	20000658 	.word	0x20000658
 80073b4:	20000674 	.word	0x20000674
 80073b8:	20000688 	.word	0x20000688
 80073bc:	200006a0 	.word	0x200006a0
 80073c0:	2000066c 	.word	0x2000066c
 80073c4:	20000670 	.word	0x20000670

080073c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073ce:	e019      	b.n	8007404 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073d0:	f000 fa2a 	bl	8007828 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073d4:	4b10      	ldr	r3, [pc, #64]	@ (8007418 <prvCheckTasksWaitingTermination+0x50>)
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	3304      	adds	r3, #4
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff faee 	bl	80069c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073e6:	4b0d      	ldr	r3, [pc, #52]	@ (800741c <prvCheckTasksWaitingTermination+0x54>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	4a0b      	ldr	r2, [pc, #44]	@ (800741c <prvCheckTasksWaitingTermination+0x54>)
 80073ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007420 <prvCheckTasksWaitingTermination+0x58>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007420 <prvCheckTasksWaitingTermination+0x58>)
 80073f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073fa:	f000 fa47 	bl	800788c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f810 	bl	8007424 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007404:	4b06      	ldr	r3, [pc, #24]	@ (8007420 <prvCheckTasksWaitingTermination+0x58>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e1      	bne.n	80073d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20000688 	.word	0x20000688
 800741c:	200006b4 	.word	0x200006b4
 8007420:	2000069c 	.word	0x2000069c

08007424 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007432:	2b00      	cmp	r3, #0
 8007434:	d108      	bne.n	8007448 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fba2 	bl	8007b84 <vPortFree>
				vPortFree( pxTCB );
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fb9f 	bl	8007b84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007446:	e019      	b.n	800747c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800744e:	2b01      	cmp	r3, #1
 8007450:	d103      	bne.n	800745a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fb96 	bl	8007b84 <vPortFree>
	}
 8007458:	e010      	b.n	800747c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007460:	2b02      	cmp	r3, #2
 8007462:	d00b      	beq.n	800747c <prvDeleteTCB+0x58>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	60fb      	str	r3, [r7, #12]
}
 8007476:	bf00      	nop
 8007478:	bf00      	nop
 800747a:	e7fd      	b.n	8007478 <prvDeleteTCB+0x54>
	}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800748a:	4b0c      	ldr	r3, [pc, #48]	@ (80074bc <prvResetNextTaskUnblockTime+0x38>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007494:	4b0a      	ldr	r3, [pc, #40]	@ (80074c0 <prvResetNextTaskUnblockTime+0x3c>)
 8007496:	f04f 32ff 	mov.w	r2, #4294967295
 800749a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800749c:	e008      	b.n	80074b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800749e:	4b07      	ldr	r3, [pc, #28]	@ (80074bc <prvResetNextTaskUnblockTime+0x38>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	4a04      	ldr	r2, [pc, #16]	@ (80074c0 <prvResetNextTaskUnblockTime+0x3c>)
 80074ae:	6013      	str	r3, [r2, #0]
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	2000066c 	.word	0x2000066c
 80074c0:	200006d4 	.word	0x200006d4

080074c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074ca:	4b0b      	ldr	r3, [pc, #44]	@ (80074f8 <xTaskGetSchedulerState+0x34>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d102      	bne.n	80074d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074d2:	2301      	movs	r3, #1
 80074d4:	607b      	str	r3, [r7, #4]
 80074d6:	e008      	b.n	80074ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074d8:	4b08      	ldr	r3, [pc, #32]	@ (80074fc <xTaskGetSchedulerState+0x38>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d102      	bne.n	80074e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074e0:	2302      	movs	r3, #2
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	e001      	b.n	80074ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074e6:	2300      	movs	r3, #0
 80074e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074ea:	687b      	ldr	r3, [r7, #4]
	}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	200006c0 	.word	0x200006c0
 80074fc:	200006dc 	.word	0x200006dc

08007500 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800750a:	4b29      	ldr	r3, [pc, #164]	@ (80075b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007510:	4b28      	ldr	r3, [pc, #160]	@ (80075b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3304      	adds	r3, #4
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff fa53 	bl	80069c2 <uxListRemove>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10b      	bne.n	800753a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007522:	4b24      	ldr	r3, [pc, #144]	@ (80075b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007528:	2201      	movs	r2, #1
 800752a:	fa02 f303 	lsl.w	r3, r2, r3
 800752e:	43da      	mvns	r2, r3
 8007530:	4b21      	ldr	r3, [pc, #132]	@ (80075b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4013      	ands	r3, r2
 8007536:	4a20      	ldr	r2, [pc, #128]	@ (80075b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007538:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d10a      	bne.n	8007558 <prvAddCurrentTaskToDelayedList+0x58>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007548:	4b1a      	ldr	r3, [pc, #104]	@ (80075b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3304      	adds	r3, #4
 800754e:	4619      	mov	r1, r3
 8007550:	481a      	ldr	r0, [pc, #104]	@ (80075bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007552:	f7ff f9d9 	bl	8006908 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007556:	e026      	b.n	80075a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4413      	add	r3, r2
 800755e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007560:	4b14      	ldr	r3, [pc, #80]	@ (80075b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	429a      	cmp	r2, r3
 800756e:	d209      	bcs.n	8007584 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007570:	4b13      	ldr	r3, [pc, #76]	@ (80075c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	4b0f      	ldr	r3, [pc, #60]	@ (80075b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3304      	adds	r3, #4
 800757a:	4619      	mov	r1, r3
 800757c:	4610      	mov	r0, r2
 800757e:	f7ff f9e7 	bl	8006950 <vListInsert>
}
 8007582:	e010      	b.n	80075a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007584:	4b0f      	ldr	r3, [pc, #60]	@ (80075c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	4b0a      	ldr	r3, [pc, #40]	@ (80075b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3304      	adds	r3, #4
 800758e:	4619      	mov	r1, r3
 8007590:	4610      	mov	r0, r2
 8007592:	f7ff f9dd 	bl	8006950 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007596:	4b0c      	ldr	r3, [pc, #48]	@ (80075c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	429a      	cmp	r2, r3
 800759e:	d202      	bcs.n	80075a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80075a0:	4a09      	ldr	r2, [pc, #36]	@ (80075c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	6013      	str	r3, [r2, #0]
}
 80075a6:	bf00      	nop
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	200006b8 	.word	0x200006b8
 80075b4:	200005b4 	.word	0x200005b4
 80075b8:	200006bc 	.word	0x200006bc
 80075bc:	200006a0 	.word	0x200006a0
 80075c0:	20000670 	.word	0x20000670
 80075c4:	2000066c 	.word	0x2000066c
 80075c8:	200006d4 	.word	0x200006d4

080075cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	3b04      	subs	r3, #4
 80075dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80075e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3b04      	subs	r3, #4
 80075ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f023 0201 	bic.w	r2, r3, #1
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3b04      	subs	r3, #4
 80075fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007630 <pxPortInitialiseStack+0x64>)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3b14      	subs	r3, #20
 8007606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3b04      	subs	r3, #4
 8007612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f06f 0202 	mvn.w	r2, #2
 800761a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	3b20      	subs	r3, #32
 8007620:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007622:	68fb      	ldr	r3, [r7, #12]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	08007635 	.word	0x08007635

08007634 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800763e:	4b13      	ldr	r3, [pc, #76]	@ (800768c <prvTaskExitError+0x58>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007646:	d00b      	beq.n	8007660 <prvTaskExitError+0x2c>
	__asm volatile
 8007648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	60fb      	str	r3, [r7, #12]
}
 800765a:	bf00      	nop
 800765c:	bf00      	nop
 800765e:	e7fd      	b.n	800765c <prvTaskExitError+0x28>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	60bb      	str	r3, [r7, #8]
}
 8007672:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007674:	bf00      	nop
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0fc      	beq.n	8007676 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800767c:	bf00      	nop
 800767e:	bf00      	nop
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	2000000c 	.word	0x2000000c

08007690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007690:	4b07      	ldr	r3, [pc, #28]	@ (80076b0 <pxCurrentTCBConst2>)
 8007692:	6819      	ldr	r1, [r3, #0]
 8007694:	6808      	ldr	r0, [r1, #0]
 8007696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769a:	f380 8809 	msr	PSP, r0
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f04f 0000 	mov.w	r0, #0
 80076a6:	f380 8811 	msr	BASEPRI, r0
 80076aa:	4770      	bx	lr
 80076ac:	f3af 8000 	nop.w

080076b0 <pxCurrentTCBConst2>:
 80076b0:	200005b4 	.word	0x200005b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop

080076b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80076b8:	4808      	ldr	r0, [pc, #32]	@ (80076dc <prvPortStartFirstTask+0x24>)
 80076ba:	6800      	ldr	r0, [r0, #0]
 80076bc:	6800      	ldr	r0, [r0, #0]
 80076be:	f380 8808 	msr	MSP, r0
 80076c2:	f04f 0000 	mov.w	r0, #0
 80076c6:	f380 8814 	msr	CONTROL, r0
 80076ca:	b662      	cpsie	i
 80076cc:	b661      	cpsie	f
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	df00      	svc	0
 80076d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076da:	bf00      	nop
 80076dc:	e000ed08 	.word	0xe000ed08

080076e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076e6:	4b47      	ldr	r3, [pc, #284]	@ (8007804 <xPortStartScheduler+0x124>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a47      	ldr	r2, [pc, #284]	@ (8007808 <xPortStartScheduler+0x128>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d10b      	bne.n	8007708 <xPortStartScheduler+0x28>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	613b      	str	r3, [r7, #16]
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007708:	4b3e      	ldr	r3, [pc, #248]	@ (8007804 <xPortStartScheduler+0x124>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a3f      	ldr	r2, [pc, #252]	@ (800780c <xPortStartScheduler+0x12c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d10b      	bne.n	800772a <xPortStartScheduler+0x4a>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	60fb      	str	r3, [r7, #12]
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop
 8007728:	e7fd      	b.n	8007726 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800772a:	4b39      	ldr	r3, [pc, #228]	@ (8007810 <xPortStartScheduler+0x130>)
 800772c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	22ff      	movs	r2, #255	@ 0xff
 800773a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800774c:	b2da      	uxtb	r2, r3
 800774e:	4b31      	ldr	r3, [pc, #196]	@ (8007814 <xPortStartScheduler+0x134>)
 8007750:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007752:	4b31      	ldr	r3, [pc, #196]	@ (8007818 <xPortStartScheduler+0x138>)
 8007754:	2207      	movs	r2, #7
 8007756:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007758:	e009      	b.n	800776e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800775a:	4b2f      	ldr	r3, [pc, #188]	@ (8007818 <xPortStartScheduler+0x138>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3b01      	subs	r3, #1
 8007760:	4a2d      	ldr	r2, [pc, #180]	@ (8007818 <xPortStartScheduler+0x138>)
 8007762:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	b2db      	uxtb	r3, r3
 8007768:	005b      	lsls	r3, r3, #1
 800776a:	b2db      	uxtb	r3, r3
 800776c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007776:	2b80      	cmp	r3, #128	@ 0x80
 8007778:	d0ef      	beq.n	800775a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800777a:	4b27      	ldr	r3, [pc, #156]	@ (8007818 <xPortStartScheduler+0x138>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f1c3 0307 	rsb	r3, r3, #7
 8007782:	2b04      	cmp	r3, #4
 8007784:	d00b      	beq.n	800779e <xPortStartScheduler+0xbe>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	60bb      	str	r3, [r7, #8]
}
 8007798:	bf00      	nop
 800779a:	bf00      	nop
 800779c:	e7fd      	b.n	800779a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800779e:	4b1e      	ldr	r3, [pc, #120]	@ (8007818 <xPortStartScheduler+0x138>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	021b      	lsls	r3, r3, #8
 80077a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007818 <xPortStartScheduler+0x138>)
 80077a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007818 <xPortStartScheduler+0x138>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80077b0:	4a19      	ldr	r2, [pc, #100]	@ (8007818 <xPortStartScheduler+0x138>)
 80077b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077bc:	4b17      	ldr	r3, [pc, #92]	@ (800781c <xPortStartScheduler+0x13c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a16      	ldr	r2, [pc, #88]	@ (800781c <xPortStartScheduler+0x13c>)
 80077c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80077c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077c8:	4b14      	ldr	r3, [pc, #80]	@ (800781c <xPortStartScheduler+0x13c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a13      	ldr	r2, [pc, #76]	@ (800781c <xPortStartScheduler+0x13c>)
 80077ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80077d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077d4:	f000 f8da 	bl	800798c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077d8:	4b11      	ldr	r3, [pc, #68]	@ (8007820 <xPortStartScheduler+0x140>)
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077de:	f000 f8f9 	bl	80079d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077e2:	4b10      	ldr	r3, [pc, #64]	@ (8007824 <xPortStartScheduler+0x144>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007824 <xPortStartScheduler+0x144>)
 80077e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80077ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077ee:	f7ff ff63 	bl	80076b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077f2:	f7ff fd35 	bl	8007260 <vTaskSwitchContext>
	prvTaskExitError();
 80077f6:	f7ff ff1d 	bl	8007634 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	e000ed00 	.word	0xe000ed00
 8007808:	410fc271 	.word	0x410fc271
 800780c:	410fc270 	.word	0x410fc270
 8007810:	e000e400 	.word	0xe000e400
 8007814:	200006e0 	.word	0x200006e0
 8007818:	200006e4 	.word	0x200006e4
 800781c:	e000ed20 	.word	0xe000ed20
 8007820:	2000000c 	.word	0x2000000c
 8007824:	e000ef34 	.word	0xe000ef34

08007828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	607b      	str	r3, [r7, #4]
}
 8007840:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007842:	4b10      	ldr	r3, [pc, #64]	@ (8007884 <vPortEnterCritical+0x5c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3301      	adds	r3, #1
 8007848:	4a0e      	ldr	r2, [pc, #56]	@ (8007884 <vPortEnterCritical+0x5c>)
 800784a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800784c:	4b0d      	ldr	r3, [pc, #52]	@ (8007884 <vPortEnterCritical+0x5c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d110      	bne.n	8007876 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007854:	4b0c      	ldr	r3, [pc, #48]	@ (8007888 <vPortEnterCritical+0x60>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00b      	beq.n	8007876 <vPortEnterCritical+0x4e>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	603b      	str	r3, [r7, #0]
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	e7fd      	b.n	8007872 <vPortEnterCritical+0x4a>
	}
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
 8007882:	bf00      	nop
 8007884:	2000000c 	.word	0x2000000c
 8007888:	e000ed04 	.word	0xe000ed04

0800788c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007892:	4b12      	ldr	r3, [pc, #72]	@ (80078dc <vPortExitCritical+0x50>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10b      	bne.n	80078b2 <vPortExitCritical+0x26>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	607b      	str	r3, [r7, #4]
}
 80078ac:	bf00      	nop
 80078ae:	bf00      	nop
 80078b0:	e7fd      	b.n	80078ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80078b2:	4b0a      	ldr	r3, [pc, #40]	@ (80078dc <vPortExitCritical+0x50>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	4a08      	ldr	r2, [pc, #32]	@ (80078dc <vPortExitCritical+0x50>)
 80078ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078bc:	4b07      	ldr	r3, [pc, #28]	@ (80078dc <vPortExitCritical+0x50>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d105      	bne.n	80078d0 <vPortExitCritical+0x44>
 80078c4:	2300      	movs	r3, #0
 80078c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	2000000c 	.word	0x2000000c

080078e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078e0:	f3ef 8009 	mrs	r0, PSP
 80078e4:	f3bf 8f6f 	isb	sy
 80078e8:	4b15      	ldr	r3, [pc, #84]	@ (8007940 <pxCurrentTCBConst>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	f01e 0f10 	tst.w	lr, #16
 80078f0:	bf08      	it	eq
 80078f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fa:	6010      	str	r0, [r2, #0]
 80078fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007900:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007904:	f380 8811 	msr	BASEPRI, r0
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f7ff fca6 	bl	8007260 <vTaskSwitchContext>
 8007914:	f04f 0000 	mov.w	r0, #0
 8007918:	f380 8811 	msr	BASEPRI, r0
 800791c:	bc09      	pop	{r0, r3}
 800791e:	6819      	ldr	r1, [r3, #0]
 8007920:	6808      	ldr	r0, [r1, #0]
 8007922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007926:	f01e 0f10 	tst.w	lr, #16
 800792a:	bf08      	it	eq
 800792c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007930:	f380 8809 	msr	PSP, r0
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	f3af 8000 	nop.w

08007940 <pxCurrentTCBConst>:
 8007940:	200005b4 	.word	0x200005b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop

08007948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	607b      	str	r3, [r7, #4]
}
 8007960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007962:	f7ff fbc3 	bl	80070ec <xTaskIncrementTick>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800796c:	4b06      	ldr	r3, [pc, #24]	@ (8007988 <xPortSysTickHandler+0x40>)
 800796e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	2300      	movs	r3, #0
 8007976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	f383 8811 	msr	BASEPRI, r3
}
 800797e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007990:	4b0b      	ldr	r3, [pc, #44]	@ (80079c0 <vPortSetupTimerInterrupt+0x34>)
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007996:	4b0b      	ldr	r3, [pc, #44]	@ (80079c4 <vPortSetupTimerInterrupt+0x38>)
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800799c:	4b0a      	ldr	r3, [pc, #40]	@ (80079c8 <vPortSetupTimerInterrupt+0x3c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a0a      	ldr	r2, [pc, #40]	@ (80079cc <vPortSetupTimerInterrupt+0x40>)
 80079a2:	fba2 2303 	umull	r2, r3, r2, r3
 80079a6:	099b      	lsrs	r3, r3, #6
 80079a8:	4a09      	ldr	r2, [pc, #36]	@ (80079d0 <vPortSetupTimerInterrupt+0x44>)
 80079aa:	3b01      	subs	r3, #1
 80079ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079ae:	4b04      	ldr	r3, [pc, #16]	@ (80079c0 <vPortSetupTimerInterrupt+0x34>)
 80079b0:	2207      	movs	r2, #7
 80079b2:	601a      	str	r2, [r3, #0]
}
 80079b4:	bf00      	nop
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	e000e010 	.word	0xe000e010
 80079c4:	e000e018 	.word	0xe000e018
 80079c8:	20000000 	.word	0x20000000
 80079cc:	10624dd3 	.word	0x10624dd3
 80079d0:	e000e014 	.word	0xe000e014

080079d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80079e4 <vPortEnableVFP+0x10>
 80079d8:	6801      	ldr	r1, [r0, #0]
 80079da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80079de:	6001      	str	r1, [r0, #0]
 80079e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079e2:	bf00      	nop
 80079e4:	e000ed88 	.word	0xe000ed88

080079e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08a      	sub	sp, #40	@ 0x28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079f0:	2300      	movs	r3, #0
 80079f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079f4:	f7ff fabe 	bl	8006f74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079f8:	4b5c      	ldr	r3, [pc, #368]	@ (8007b6c <pvPortMalloc+0x184>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a00:	f000 f924 	bl	8007c4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a04:	4b5a      	ldr	r3, [pc, #360]	@ (8007b70 <pvPortMalloc+0x188>)
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f040 8095 	bne.w	8007b3c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01e      	beq.n	8007a56 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007a18:	2208      	movs	r2, #8
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d015      	beq.n	8007a56 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f023 0307 	bic.w	r3, r3, #7
 8007a30:	3308      	adds	r3, #8
 8007a32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <pvPortMalloc+0x6e>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	617b      	str	r3, [r7, #20]
}
 8007a50:	bf00      	nop
 8007a52:	bf00      	nop
 8007a54:	e7fd      	b.n	8007a52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d06f      	beq.n	8007b3c <pvPortMalloc+0x154>
 8007a5c:	4b45      	ldr	r3, [pc, #276]	@ (8007b74 <pvPortMalloc+0x18c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d86a      	bhi.n	8007b3c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a66:	4b44      	ldr	r3, [pc, #272]	@ (8007b78 <pvPortMalloc+0x190>)
 8007a68:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a6a:	4b43      	ldr	r3, [pc, #268]	@ (8007b78 <pvPortMalloc+0x190>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a70:	e004      	b.n	8007a7c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a74:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d903      	bls.n	8007a8e <pvPortMalloc+0xa6>
 8007a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1f1      	bne.n	8007a72 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a8e:	4b37      	ldr	r3, [pc, #220]	@ (8007b6c <pvPortMalloc+0x184>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d051      	beq.n	8007b3c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2208      	movs	r2, #8
 8007a9e:	4413      	add	r3, r2
 8007aa0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	1ad2      	subs	r2, r2, r3
 8007ab2:	2308      	movs	r3, #8
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d920      	bls.n	8007afc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4413      	add	r3, r2
 8007ac0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <pvPortMalloc+0xfc>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	613b      	str	r3, [r7, #16]
}
 8007ade:	bf00      	nop
 8007ae0:	bf00      	nop
 8007ae2:	e7fd      	b.n	8007ae0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	1ad2      	subs	r2, r2, r3
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007af6:	69b8      	ldr	r0, [r7, #24]
 8007af8:	f000 f90a 	bl	8007d10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007afc:	4b1d      	ldr	r3, [pc, #116]	@ (8007b74 <pvPortMalloc+0x18c>)
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	4a1b      	ldr	r2, [pc, #108]	@ (8007b74 <pvPortMalloc+0x18c>)
 8007b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8007b74 <pvPortMalloc+0x18c>)
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8007b7c <pvPortMalloc+0x194>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d203      	bcs.n	8007b1e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b16:	4b17      	ldr	r3, [pc, #92]	@ (8007b74 <pvPortMalloc+0x18c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a18      	ldr	r2, [pc, #96]	@ (8007b7c <pvPortMalloc+0x194>)
 8007b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	4b13      	ldr	r3, [pc, #76]	@ (8007b70 <pvPortMalloc+0x188>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b32:	4b13      	ldr	r3, [pc, #76]	@ (8007b80 <pvPortMalloc+0x198>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3301      	adds	r3, #1
 8007b38:	4a11      	ldr	r2, [pc, #68]	@ (8007b80 <pvPortMalloc+0x198>)
 8007b3a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b3c:	f7ff fa28 	bl	8006f90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00b      	beq.n	8007b62 <pvPortMalloc+0x17a>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	60fb      	str	r3, [r7, #12]
}
 8007b5c:	bf00      	nop
 8007b5e:	bf00      	nop
 8007b60:	e7fd      	b.n	8007b5e <pvPortMalloc+0x176>
	return pvReturn;
 8007b62:	69fb      	ldr	r3, [r7, #28]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3728      	adds	r7, #40	@ 0x28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	200042f0 	.word	0x200042f0
 8007b70:	20004304 	.word	0x20004304
 8007b74:	200042f4 	.word	0x200042f4
 8007b78:	200042e8 	.word	0x200042e8
 8007b7c:	200042f8 	.word	0x200042f8
 8007b80:	200042fc 	.word	0x200042fc

08007b84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d04f      	beq.n	8007c36 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b96:	2308      	movs	r3, #8
 8007b98:	425b      	negs	r3, r3
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	4b25      	ldr	r3, [pc, #148]	@ (8007c40 <vPortFree+0xbc>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4013      	ands	r3, r2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10b      	bne.n	8007bca <vPortFree+0x46>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	60fb      	str	r3, [r7, #12]
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	e7fd      	b.n	8007bc6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00b      	beq.n	8007bea <vPortFree+0x66>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	60bb      	str	r3, [r7, #8]
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop
 8007be8:	e7fd      	b.n	8007be6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	4b14      	ldr	r3, [pc, #80]	@ (8007c40 <vPortFree+0xbc>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01e      	beq.n	8007c36 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d11a      	bne.n	8007c36 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	4b0e      	ldr	r3, [pc, #56]	@ (8007c40 <vPortFree+0xbc>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	43db      	mvns	r3, r3
 8007c0a:	401a      	ands	r2, r3
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c10:	f7ff f9b0 	bl	8006f74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	4b0a      	ldr	r3, [pc, #40]	@ (8007c44 <vPortFree+0xc0>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	4a09      	ldr	r2, [pc, #36]	@ (8007c44 <vPortFree+0xc0>)
 8007c20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c22:	6938      	ldr	r0, [r7, #16]
 8007c24:	f000 f874 	bl	8007d10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c28:	4b07      	ldr	r3, [pc, #28]	@ (8007c48 <vPortFree+0xc4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	4a06      	ldr	r2, [pc, #24]	@ (8007c48 <vPortFree+0xc4>)
 8007c30:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c32:	f7ff f9ad 	bl	8006f90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c36:	bf00      	nop
 8007c38:	3718      	adds	r7, #24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20004304 	.word	0x20004304
 8007c44:	200042f4 	.word	0x200042f4
 8007c48:	20004300 	.word	0x20004300

08007c4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c52:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007c56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c58:	4b27      	ldr	r3, [pc, #156]	@ (8007cf8 <prvHeapInit+0xac>)
 8007c5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f003 0307 	and.w	r3, r3, #7
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00c      	beq.n	8007c80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3307      	adds	r3, #7
 8007c6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0307 	bic.w	r3, r3, #7
 8007c72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8007cf8 <prvHeapInit+0xac>)
 8007c7c:	4413      	add	r3, r2
 8007c7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c84:	4a1d      	ldr	r2, [pc, #116]	@ (8007cfc <prvHeapInit+0xb0>)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8007cfc <prvHeapInit+0xb0>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	4413      	add	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c98:	2208      	movs	r2, #8
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	1a9b      	subs	r3, r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0307 	bic.w	r3, r3, #7
 8007ca6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4a15      	ldr	r2, [pc, #84]	@ (8007d00 <prvHeapInit+0xb4>)
 8007cac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007cae:	4b14      	ldr	r3, [pc, #80]	@ (8007d00 <prvHeapInit+0xb4>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cb6:	4b12      	ldr	r3, [pc, #72]	@ (8007d00 <prvHeapInit+0xb4>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	1ad2      	subs	r2, r2, r3
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8007d00 <prvHeapInit+0xb4>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8007d04 <prvHeapInit+0xb8>)
 8007cda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	4a09      	ldr	r2, [pc, #36]	@ (8007d08 <prvHeapInit+0xbc>)
 8007ce2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ce4:	4b09      	ldr	r3, [pc, #36]	@ (8007d0c <prvHeapInit+0xc0>)
 8007ce6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007cea:	601a      	str	r2, [r3, #0]
}
 8007cec:	bf00      	nop
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	200006e8 	.word	0x200006e8
 8007cfc:	200042e8 	.word	0x200042e8
 8007d00:	200042f0 	.word	0x200042f0
 8007d04:	200042f8 	.word	0x200042f8
 8007d08:	200042f4 	.word	0x200042f4
 8007d0c:	20004304 	.word	0x20004304

08007d10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d18:	4b28      	ldr	r3, [pc, #160]	@ (8007dbc <prvInsertBlockIntoFreeList+0xac>)
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	e002      	b.n	8007d24 <prvInsertBlockIntoFreeList+0x14>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d8f7      	bhi.n	8007d1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	4413      	add	r3, r2
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d108      	bne.n	8007d52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	441a      	add	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	441a      	add	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d118      	bne.n	8007d98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	4b15      	ldr	r3, [pc, #84]	@ (8007dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d00d      	beq.n	8007d8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	441a      	add	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	e008      	b.n	8007da0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8007dc0 <prvInsertBlockIntoFreeList+0xb0>)
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	e003      	b.n	8007da0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d002      	beq.n	8007dae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dae:	bf00      	nop
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	200042e8 	.word	0x200042e8
 8007dc0:	200042f0 	.word	0x200042f0

08007dc4 <memset>:
 8007dc4:	4402      	add	r2, r0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d100      	bne.n	8007dce <memset+0xa>
 8007dcc:	4770      	bx	lr
 8007dce:	f803 1b01 	strb.w	r1, [r3], #1
 8007dd2:	e7f9      	b.n	8007dc8 <memset+0x4>

08007dd4 <__libc_init_array>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8007e0c <__libc_init_array+0x38>)
 8007dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8007e10 <__libc_init_array+0x3c>)
 8007dda:	1b64      	subs	r4, r4, r5
 8007ddc:	10a4      	asrs	r4, r4, #2
 8007dde:	2600      	movs	r6, #0
 8007de0:	42a6      	cmp	r6, r4
 8007de2:	d109      	bne.n	8007df8 <__libc_init_array+0x24>
 8007de4:	4d0b      	ldr	r5, [pc, #44]	@ (8007e14 <__libc_init_array+0x40>)
 8007de6:	4c0c      	ldr	r4, [pc, #48]	@ (8007e18 <__libc_init_array+0x44>)
 8007de8:	f000 f818 	bl	8007e1c <_init>
 8007dec:	1b64      	subs	r4, r4, r5
 8007dee:	10a4      	asrs	r4, r4, #2
 8007df0:	2600      	movs	r6, #0
 8007df2:	42a6      	cmp	r6, r4
 8007df4:	d105      	bne.n	8007e02 <__libc_init_array+0x2e>
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dfc:	4798      	blx	r3
 8007dfe:	3601      	adds	r6, #1
 8007e00:	e7ee      	b.n	8007de0 <__libc_init_array+0xc>
 8007e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e06:	4798      	blx	r3
 8007e08:	3601      	adds	r6, #1
 8007e0a:	e7f2      	b.n	8007df2 <__libc_init_array+0x1e>
 8007e0c:	08007ea0 	.word	0x08007ea0
 8007e10:	08007ea0 	.word	0x08007ea0
 8007e14:	08007ea0 	.word	0x08007ea0
 8007e18:	08007ea4 	.word	0x08007ea4

08007e1c <_init>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	bf00      	nop
 8007e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e22:	bc08      	pop	{r3}
 8007e24:	469e      	mov	lr, r3
 8007e26:	4770      	bx	lr

08007e28 <_fini>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	bf00      	nop
 8007e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2e:	bc08      	pop	{r3}
 8007e30:	469e      	mov	lr, r3
 8007e32:	4770      	bx	lr
