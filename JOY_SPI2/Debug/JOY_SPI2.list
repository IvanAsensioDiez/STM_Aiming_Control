
JOY_SPI2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004050  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080041d8  080041d8  000051d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c0  080043c0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080043c0  080043c0  000053c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c8  080043c8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c8  080043c8  000053c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043cc  080043cc  000053cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080043d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000000a4  20000010  20000010  00006010  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000057bd  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000121d  00000000  00000000  0000b7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f8  00000000  00000000  0000ca18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000046c  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fbda  00000000  00000000  0000d47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006f79  00000000  00000000  0002d056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1bb1  00000000  00000000  00033fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f5b80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b18  00000000  00000000  000f5bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000f76dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041c0 	.word	0x080041c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080041c0 	.word	0x080041c0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b96a 	b.w	8000db0 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	460c      	mov	r4, r1
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d14e      	bne.n	8000b9e <__udivmoddi4+0xaa>
 8000b00:	4694      	mov	ip, r2
 8000b02:	458c      	cmp	ip, r1
 8000b04:	4686      	mov	lr, r0
 8000b06:	fab2 f282 	clz	r2, r2
 8000b0a:	d962      	bls.n	8000bd2 <__udivmoddi4+0xde>
 8000b0c:	b14a      	cbz	r2, 8000b22 <__udivmoddi4+0x2e>
 8000b0e:	f1c2 0320 	rsb	r3, r2, #32
 8000b12:	4091      	lsls	r1, r2
 8000b14:	fa20 f303 	lsr.w	r3, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	4319      	orrs	r1, r3
 8000b1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b26:	fa1f f68c 	uxth.w	r6, ip
 8000b2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b32:	fb07 1114 	mls	r1, r7, r4, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb04 f106 	mul.w	r1, r4, r6
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x64>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b4a:	f080 8112 	bcs.w	8000d72 <__udivmoddi4+0x27e>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 810f 	bls.w	8000d72 <__udivmoddi4+0x27e>
 8000b54:	3c02      	subs	r4, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a59      	subs	r1, r3, r1
 8000b5a:	fa1f f38e 	uxth.w	r3, lr
 8000b5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b62:	fb07 1110 	mls	r1, r7, r0, r1
 8000b66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b6a:	fb00 f606 	mul.w	r6, r0, r6
 8000b6e:	429e      	cmp	r6, r3
 8000b70:	d90a      	bls.n	8000b88 <__udivmoddi4+0x94>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b7a:	f080 80fc 	bcs.w	8000d76 <__udivmoddi4+0x282>
 8000b7e:	429e      	cmp	r6, r3
 8000b80:	f240 80f9 	bls.w	8000d76 <__udivmoddi4+0x282>
 8000b84:	4463      	add	r3, ip
 8000b86:	3802      	subs	r0, #2
 8000b88:	1b9b      	subs	r3, r3, r6
 8000b8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b8e:	2100      	movs	r1, #0
 8000b90:	b11d      	cbz	r5, 8000b9a <__udivmoddi4+0xa6>
 8000b92:	40d3      	lsrs	r3, r2
 8000b94:	2200      	movs	r2, #0
 8000b96:	e9c5 3200 	strd	r3, r2, [r5]
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d905      	bls.n	8000bae <__udivmoddi4+0xba>
 8000ba2:	b10d      	cbz	r5, 8000ba8 <__udivmoddi4+0xb4>
 8000ba4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4608      	mov	r0, r1
 8000bac:	e7f5      	b.n	8000b9a <__udivmoddi4+0xa6>
 8000bae:	fab3 f183 	clz	r1, r3
 8000bb2:	2900      	cmp	r1, #0
 8000bb4:	d146      	bne.n	8000c44 <__udivmoddi4+0x150>
 8000bb6:	42a3      	cmp	r3, r4
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xcc>
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	f0c0 80f0 	bcc.w	8000da0 <__udivmoddi4+0x2ac>
 8000bc0:	1a86      	subs	r6, r0, r2
 8000bc2:	eb64 0303 	sbc.w	r3, r4, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d0e6      	beq.n	8000b9a <__udivmoddi4+0xa6>
 8000bcc:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd0:	e7e3      	b.n	8000b9a <__udivmoddi4+0xa6>
 8000bd2:	2a00      	cmp	r2, #0
 8000bd4:	f040 8090 	bne.w	8000cf8 <__udivmoddi4+0x204>
 8000bd8:	eba1 040c 	sub.w	r4, r1, ip
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	fa1f f78c 	uxth.w	r7, ip
 8000be4:	2101      	movs	r1, #1
 8000be6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bee:	fb08 4416 	mls	r4, r8, r6, r4
 8000bf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf6:	fb07 f006 	mul.w	r0, r7, r6
 8000bfa:	4298      	cmp	r0, r3
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x11c>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x11a>
 8000c08:	4298      	cmp	r0, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2b4>
 8000c0e:	4626      	mov	r6, r4
 8000c10:	1a1c      	subs	r4, r3, r0
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c22:	fb00 f707 	mul.w	r7, r0, r7
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x148>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x146>
 8000c34:	429f      	cmp	r7, r3
 8000c36:	f200 80b0 	bhi.w	8000d9a <__udivmoddi4+0x2a6>
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	1bdb      	subs	r3, r3, r7
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	e7a5      	b.n	8000b90 <__udivmoddi4+0x9c>
 8000c44:	f1c1 0620 	rsb	r6, r1, #32
 8000c48:	408b      	lsls	r3, r1
 8000c4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c4e:	431f      	orrs	r7, r3
 8000c50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c54:	fa04 f301 	lsl.w	r3, r4, r1
 8000c58:	ea43 030c 	orr.w	r3, r3, ip
 8000c5c:	40f4      	lsrs	r4, r6
 8000c5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c62:	0c38      	lsrs	r0, r7, #16
 8000c64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c68:	fbb4 fef0 	udiv	lr, r4, r0
 8000c6c:	fa1f fc87 	uxth.w	ip, r7
 8000c70:	fb00 441e 	mls	r4, r0, lr, r4
 8000c74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c78:	fb0e f90c 	mul.w	r9, lr, ip
 8000c7c:	45a1      	cmp	r9, r4
 8000c7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x1a6>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c8a:	f080 8084 	bcs.w	8000d96 <__udivmoddi4+0x2a2>
 8000c8e:	45a1      	cmp	r9, r4
 8000c90:	f240 8081 	bls.w	8000d96 <__udivmoddi4+0x2a2>
 8000c94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	eba4 0409 	sub.w	r4, r4, r9
 8000c9e:	fa1f f983 	uxth.w	r9, r3
 8000ca2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ca6:	fb00 4413 	mls	r4, r0, r3, r4
 8000caa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cb2:	45a4      	cmp	ip, r4
 8000cb4:	d907      	bls.n	8000cc6 <__udivmoddi4+0x1d2>
 8000cb6:	193c      	adds	r4, r7, r4
 8000cb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cbc:	d267      	bcs.n	8000d8e <__udivmoddi4+0x29a>
 8000cbe:	45a4      	cmp	ip, r4
 8000cc0:	d965      	bls.n	8000d8e <__udivmoddi4+0x29a>
 8000cc2:	3b02      	subs	r3, #2
 8000cc4:	443c      	add	r4, r7
 8000cc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cca:	fba0 9302 	umull	r9, r3, r0, r2
 8000cce:	eba4 040c 	sub.w	r4, r4, ip
 8000cd2:	429c      	cmp	r4, r3
 8000cd4:	46ce      	mov	lr, r9
 8000cd6:	469c      	mov	ip, r3
 8000cd8:	d351      	bcc.n	8000d7e <__udivmoddi4+0x28a>
 8000cda:	d04e      	beq.n	8000d7a <__udivmoddi4+0x286>
 8000cdc:	b155      	cbz	r5, 8000cf4 <__udivmoddi4+0x200>
 8000cde:	ebb8 030e 	subs.w	r3, r8, lr
 8000ce2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ce6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cea:	40cb      	lsrs	r3, r1
 8000cec:	431e      	orrs	r6, r3
 8000cee:	40cc      	lsrs	r4, r1
 8000cf0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	e750      	b.n	8000b9a <__udivmoddi4+0xa6>
 8000cf8:	f1c2 0320 	rsb	r3, r2, #32
 8000cfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000d00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d04:	fa24 f303 	lsr.w	r3, r4, r3
 8000d08:	4094      	lsls	r4, r2
 8000d0a:	430c      	orrs	r4, r1
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d20:	0c23      	lsrs	r3, r4, #16
 8000d22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d26:	fb00 f107 	mul.w	r1, r0, r7
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x24c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d36:	d22c      	bcs.n	8000d92 <__udivmoddi4+0x29e>
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	d92a      	bls.n	8000d92 <__udivmoddi4+0x29e>
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	4463      	add	r3, ip
 8000d40:	1a5b      	subs	r3, r3, r1
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d48:	fb08 3311 	mls	r3, r8, r1, r3
 8000d4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d50:	fb01 f307 	mul.w	r3, r1, r7
 8000d54:	42a3      	cmp	r3, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x276>
 8000d58:	eb1c 0404 	adds.w	r4, ip, r4
 8000d5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d60:	d213      	bcs.n	8000d8a <__udivmoddi4+0x296>
 8000d62:	42a3      	cmp	r3, r4
 8000d64:	d911      	bls.n	8000d8a <__udivmoddi4+0x296>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4464      	add	r4, ip
 8000d6a:	1ae4      	subs	r4, r4, r3
 8000d6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d70:	e739      	b.n	8000be6 <__udivmoddi4+0xf2>
 8000d72:	4604      	mov	r4, r0
 8000d74:	e6f0      	b.n	8000b58 <__udivmoddi4+0x64>
 8000d76:	4608      	mov	r0, r1
 8000d78:	e706      	b.n	8000b88 <__udivmoddi4+0x94>
 8000d7a:	45c8      	cmp	r8, r9
 8000d7c:	d2ae      	bcs.n	8000cdc <__udivmoddi4+0x1e8>
 8000d7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d86:	3801      	subs	r0, #1
 8000d88:	e7a8      	b.n	8000cdc <__udivmoddi4+0x1e8>
 8000d8a:	4631      	mov	r1, r6
 8000d8c:	e7ed      	b.n	8000d6a <__udivmoddi4+0x276>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	e799      	b.n	8000cc6 <__udivmoddi4+0x1d2>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e7d4      	b.n	8000d40 <__udivmoddi4+0x24c>
 8000d96:	46d6      	mov	lr, sl
 8000d98:	e77f      	b.n	8000c9a <__udivmoddi4+0x1a6>
 8000d9a:	4463      	add	r3, ip
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	e74d      	b.n	8000c3c <__udivmoddi4+0x148>
 8000da0:	4606      	mov	r6, r0
 8000da2:	4623      	mov	r3, r4
 8000da4:	4608      	mov	r0, r1
 8000da6:	e70f      	b.n	8000bc8 <__udivmoddi4+0xd4>
 8000da8:	3e02      	subs	r6, #2
 8000daa:	4463      	add	r3, ip
 8000dac:	e730      	b.n	8000c10 <__udivmoddi4+0x11c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	0000      	movs	r0, r0
	...

08000db8 <read_joystick_position>:

double x_value=0;
double y_value=0;

//Lectura y tratamiento de coordenadas
void read_joystick_position(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
    uint8_t command = 0x00;  // Comando para leer datos del joystick (según el manual)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	71fb      	strb	r3, [r7, #7]

    // Activamos el CS
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	48aa      	ldr	r0, [pc, #680]	@ (8001070 <read_joystick_position+0x2b8>)
 8000dc8:	f000 fef8 	bl	8001bbc <HAL_GPIO_WritePin>

    //Transmitimos para leer
    HAL_SPI_Transmit(&hspi1, &command, 1, HAL_MAX_DELAY);
 8000dcc:	1df9      	adds	r1, r7, #7
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	48a7      	ldr	r0, [pc, #668]	@ (8001074 <read_joystick_position+0x2bc>)
 8000dd6:	f001 fbf8 	bl	80025ca <HAL_SPI_Transmit>

    // Recibimos el buffer de datos del joystick
    HAL_SPI_Receive(&hspi1, joystick_data, 5, HAL_MAX_DELAY);
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	2205      	movs	r2, #5
 8000de0:	49a5      	ldr	r1, [pc, #660]	@ (8001078 <read_joystick_position+0x2c0>)
 8000de2:	48a4      	ldr	r0, [pc, #656]	@ (8001074 <read_joystick_position+0x2bc>)
 8000de4:	f001 fd35 	bl	8002852 <HAL_SPI_Receive>

    // Cerramos el CS
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2110      	movs	r1, #16
 8000dec:	48a0      	ldr	r0, [pc, #640]	@ (8001070 <read_joystick_position+0x2b8>)
 8000dee:	f000 fee5 	bl	8001bbc <HAL_GPIO_WritePin>

    // Procesar los datos: joystick_data[1] y joystick_data[2] son las posiciones X e Y
    v_directorx = joystick_data[0];
 8000df2:	4ba1      	ldr	r3, [pc, #644]	@ (8001078 <read_joystick_position+0x2c0>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	4ba0      	ldr	r3, [pc, #640]	@ (800107c <read_joystick_position+0x2c4>)
 8000dfa:	801a      	strh	r2, [r3, #0]
    angulo = joystick_data[1];  //Valores de angulo
 8000dfc:	4b9e      	ldr	r3, [pc, #632]	@ (8001078 <read_joystick_position+0x2c0>)
 8000dfe:	785b      	ldrb	r3, [r3, #1]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b9f      	ldr	r3, [pc, #636]	@ (8001080 <read_joystick_position+0x2c8>)
 8000e04:	801a      	strh	r2, [r3, #0]
    v_directory = joystick_data[2];  //Sectores de angulo
 8000e06:	4b9c      	ldr	r3, [pc, #624]	@ (8001078 <read_joystick_position+0x2c0>)
 8000e08:	789b      	ldrb	r3, [r3, #2]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b9d      	ldr	r3, [pc, #628]	@ (8001084 <read_joystick_position+0x2cc>)
 8000e0e:	801a      	strh	r2, [r3, #0]
    boton1 = joystick_data[3]; //Boton central y lateral
 8000e10:	4b99      	ldr	r3, [pc, #612]	@ (8001078 <read_joystick_position+0x2c0>)
 8000e12:	78db      	ldrb	r3, [r3, #3]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b9c      	ldr	r3, [pc, #624]	@ (8001088 <read_joystick_position+0x2d0>)
 8000e18:	801a      	strh	r2, [r3, #0]
    boton2 = joystick_data[4]; //Confirmación de boton central y lateral
 8000e1a:	4b97      	ldr	r3, [pc, #604]	@ (8001078 <read_joystick_position+0x2c0>)
 8000e1c:	791b      	ldrb	r3, [r3, #4]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b9a      	ldr	r3, [pc, #616]	@ (800108c <read_joystick_position+0x2d4>)
 8000e22:	801a      	strh	r2, [r3, #0]

    //Boton lateral o central como seguro
    if(boton2)
 8000e24:	4b99      	ldr	r3, [pc, #612]	@ (800108c <read_joystick_position+0x2d4>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 81b9 	beq.w	80011a0 <read_joystick_position+0x3e8>
    	          {
    	//Valores de coordenadas en x e y para azimut y giro
    		          x_value= 100*cos((M_PI*angulo_grados)/180);
 8000e2e:	4b98      	ldr	r3, [pc, #608]	@ (8001090 <read_joystick_position+0x2d8>)
 8000e30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e34:	a38a      	add	r3, pc, #552	@ (adr r3, 8001060 <read_joystick_position+0x2a8>)
 8000e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3a:	f7ff fb81 	bl	8000540 <__aeabi_dmul>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4610      	mov	r0, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	4b92      	ldr	r3, [pc, #584]	@ (8001094 <read_joystick_position+0x2dc>)
 8000e4c:	f7ff fca2 	bl	8000794 <__aeabi_ddiv>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	ec43 2b17 	vmov	d7, r2, r3
 8000e58:	eeb0 0a47 	vmov.f32	s0, s14
 8000e5c:	eef0 0a67 	vmov.f32	s1, s15
 8000e60:	f002 f92a 	bl	80030b8 <cos>
 8000e64:	ec51 0b10 	vmov	r0, r1, d0
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	4b8a      	ldr	r3, [pc, #552]	@ (8001098 <read_joystick_position+0x2e0>)
 8000e6e:	f7ff fb67 	bl	8000540 <__aeabi_dmul>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4989      	ldr	r1, [pc, #548]	@ (800109c <read_joystick_position+0x2e4>)
 8000e78:	e9c1 2300 	strd	r2, r3, [r1]
    		          y_value= 100*sin((M_PI*angulo_grados)/180);
 8000e7c:	4b84      	ldr	r3, [pc, #528]	@ (8001090 <read_joystick_position+0x2d8>)
 8000e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e82:	a377      	add	r3, pc, #476	@ (adr r3, 8001060 <read_joystick_position+0x2a8>)
 8000e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e88:	f7ff fb5a 	bl	8000540 <__aeabi_dmul>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f04f 0200 	mov.w	r2, #0
 8000e98:	4b7e      	ldr	r3, [pc, #504]	@ (8001094 <read_joystick_position+0x2dc>)
 8000e9a:	f7ff fc7b 	bl	8000794 <__aeabi_ddiv>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	ec43 2b17 	vmov	d7, r2, r3
 8000ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8000eaa:	eef0 0a67 	vmov.f32	s1, s15
 8000eae:	f002 f957 	bl	8003160 <sin>
 8000eb2:	ec51 0b10 	vmov	r0, r1, d0
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	4b77      	ldr	r3, [pc, #476]	@ (8001098 <read_joystick_position+0x2e0>)
 8000ebc:	f7ff fb40 	bl	8000540 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4976      	ldr	r1, [pc, #472]	@ (80010a0 <read_joystick_position+0x2e8>)
 8000ec6:	e9c1 2300 	strd	r2, r3, [r1]

    		          //Sector 0-60
    		          if(v_directorx>1 && v_directory> 1 && v_directory< 3)
 8000eca:	4b6c      	ldr	r3, [pc, #432]	@ (800107c <read_joystick_position+0x2c4>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d920      	bls.n	8000f14 <read_joystick_position+0x15c>
 8000ed2:	4b6c      	ldr	r3, [pc, #432]	@ (8001084 <read_joystick_position+0x2cc>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d91c      	bls.n	8000f14 <read_joystick_position+0x15c>
 8000eda:	4b6a      	ldr	r3, [pc, #424]	@ (8001084 <read_joystick_position+0x2cc>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d818      	bhi.n	8000f14 <read_joystick_position+0x15c>
    		            {
    		          	 angulo_grados=60*1.0*angulo/255;
 8000ee2:	4b67      	ldr	r3, [pc, #412]	@ (8001080 <read_joystick_position+0x2c8>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fac0 	bl	800046c <__aeabi_i2d>
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	4b6c      	ldr	r3, [pc, #432]	@ (80010a4 <read_joystick_position+0x2ec>)
 8000ef2:	f7ff fb25 	bl	8000540 <__aeabi_dmul>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	4610      	mov	r0, r2
 8000efc:	4619      	mov	r1, r3
 8000efe:	a35a      	add	r3, pc, #360	@ (adr r3, 8001068 <read_joystick_position+0x2b0>)
 8000f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f04:	f7ff fc46 	bl	8000794 <__aeabi_ddiv>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4960      	ldr	r1, [pc, #384]	@ (8001090 <read_joystick_position+0x2d8>)
 8000f0e:	e9c1 2300 	strd	r2, r3, [r1]
 8000f12:	e154      	b.n	80011be <read_joystick_position+0x406>
    		            }
    		          //Sector 60-90
    		            else if(v_directory== 3 && v_directorx>1)
 8000f14:	4b5b      	ldr	r3, [pc, #364]	@ (8001084 <read_joystick_position+0x2cc>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d121      	bne.n	8000f60 <read_joystick_position+0x1a8>
 8000f1c:	4b57      	ldr	r3, [pc, #348]	@ (800107c <read_joystick_position+0x2c4>)
 8000f1e:	881b      	ldrh	r3, [r3, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d91d      	bls.n	8000f60 <read_joystick_position+0x1a8>
    		            {
    		          	 angulo_grados= 60+30*angulo*1.0/68;
 8000f24:	4b56      	ldr	r3, [pc, #344]	@ (8001080 <read_joystick_position+0x2c8>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fa9a 	bl	800046c <__aeabi_i2d>
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	4b5a      	ldr	r3, [pc, #360]	@ (80010a8 <read_joystick_position+0x2f0>)
 8000f3e:	f7ff fc29 	bl	8000794 <__aeabi_ddiv>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	4b55      	ldr	r3, [pc, #340]	@ (80010a4 <read_joystick_position+0x2ec>)
 8000f50:	f7ff f940 	bl	80001d4 <__adddf3>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	494d      	ldr	r1, [pc, #308]	@ (8001090 <read_joystick_position+0x2d8>)
 8000f5a:	e9c1 2300 	strd	r2, r3, [r1]
 8000f5e:	e12e      	b.n	80011be <read_joystick_position+0x406>
    		            }
    		          //Sector 90-120
    		            else if(v_directory== 3 && v_directorx<2)
 8000f60:	4b48      	ldr	r3, [pc, #288]	@ (8001084 <read_joystick_position+0x2cc>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	d122      	bne.n	8000fae <read_joystick_position+0x1f6>
 8000f68:	4b44      	ldr	r3, [pc, #272]	@ (800107c <read_joystick_position+0x2c4>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d81e      	bhi.n	8000fae <read_joystick_position+0x1f6>
    		            {
    		            	 angulo_grados= 90+30*(68-angulo)*1.0/68;
 8000f70:	4b43      	ldr	r3, [pc, #268]	@ (8001080 <read_joystick_position+0x2c8>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	f1c3 0244 	rsb	r2, r3, #68	@ 0x44
 8000f78:	4613      	mov	r3, r2
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	1a9b      	subs	r3, r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fa73 	bl	800046c <__aeabi_i2d>
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	4b47      	ldr	r3, [pc, #284]	@ (80010a8 <read_joystick_position+0x2f0>)
 8000f8c:	f7ff fc02 	bl	8000794 <__aeabi_ddiv>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	4b43      	ldr	r3, [pc, #268]	@ (80010ac <read_joystick_position+0x2f4>)
 8000f9e:	f7ff f919 	bl	80001d4 <__adddf3>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	493a      	ldr	r1, [pc, #232]	@ (8001090 <read_joystick_position+0x2d8>)
 8000fa8:	e9c1 2300 	strd	r2, r3, [r1]
 8000fac:	e107      	b.n	80011be <read_joystick_position+0x406>
    		            }
    		          //Sector 120-180
    		            else if(v_directorx<2 && v_directory> 1 && v_directory< 3)
 8000fae:	4b33      	ldr	r3, [pc, #204]	@ (800107c <read_joystick_position+0x2c4>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d826      	bhi.n	8001004 <read_joystick_position+0x24c>
 8000fb6:	4b33      	ldr	r3, [pc, #204]	@ (8001084 <read_joystick_position+0x2cc>)
 8000fb8:	881b      	ldrh	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d922      	bls.n	8001004 <read_joystick_position+0x24c>
 8000fbe:	4b31      	ldr	r3, [pc, #196]	@ (8001084 <read_joystick_position+0x2cc>)
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d81e      	bhi.n	8001004 <read_joystick_position+0x24c>
    		            {
    		               angulo_grados= 120+60*(255-angulo)*1.0/255;
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001080 <read_joystick_position+0x2c8>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8000fce:	4613      	mov	r3, r2
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	1a9b      	subs	r3, r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fa48 	bl	800046c <__aeabi_i2d>
 8000fdc:	a322      	add	r3, pc, #136	@ (adr r3, 8001068 <read_joystick_position+0x2b0>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fbd7 	bl	8000794 <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80010b0 <read_joystick_position+0x2f8>)
 8000ff4:	f7ff f8ee 	bl	80001d4 <__adddf3>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4924      	ldr	r1, [pc, #144]	@ (8001090 <read_joystick_position+0x2d8>)
 8000ffe:	e9c1 2300 	strd	r2, r3, [r1]
 8001002:	e0dc      	b.n	80011be <read_joystick_position+0x406>
    		            }
    		          //Sector 180-240
    		            else if(v_directorx<2 && v_directory< 2 && v_directory> 0)
 8001004:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <read_joystick_position+0x2c4>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d853      	bhi.n	80010b4 <read_joystick_position+0x2fc>
 800100c:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <read_joystick_position+0x2cc>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d84f      	bhi.n	80010b4 <read_joystick_position+0x2fc>
 8001014:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <read_joystick_position+0x2cc>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d04b      	beq.n	80010b4 <read_joystick_position+0x2fc>
    		            {
    		               angulo_grados= 180+60*(255-angulo)*1.0/255;
 800101c:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <read_joystick_position+0x2c8>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8001024:	4613      	mov	r3, r2
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	1a9b      	subs	r3, r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa1d 	bl	800046c <__aeabi_i2d>
 8001032:	a30d      	add	r3, pc, #52	@ (adr r3, 8001068 <read_joystick_position+0x2b0>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff fbac 	bl	8000794 <__aeabi_ddiv>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <read_joystick_position+0x2dc>)
 800104a:	f7ff f8c3 	bl	80001d4 <__adddf3>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	490f      	ldr	r1, [pc, #60]	@ (8001090 <read_joystick_position+0x2d8>)
 8001054:	e9c1 2300 	strd	r2, r3, [r1]
 8001058:	e0b1      	b.n	80011be <read_joystick_position+0x406>
 800105a:	bf00      	nop
 800105c:	f3af 8000 	nop.w
 8001060:	54442d18 	.word	0x54442d18
 8001064:	400921fb 	.word	0x400921fb
 8001068:	00000000 	.word	0x00000000
 800106c:	406fe000 	.word	0x406fe000
 8001070:	40020000 	.word	0x40020000
 8001074:	2000002c 	.word	0x2000002c
 8001078:	20000084 	.word	0x20000084
 800107c:	20000090 	.word	0x20000090
 8001080:	2000008e 	.word	0x2000008e
 8001084:	20000092 	.word	0x20000092
 8001088:	2000008a 	.word	0x2000008a
 800108c:	2000008c 	.word	0x2000008c
 8001090:	20000098 	.word	0x20000098
 8001094:	40668000 	.word	0x40668000
 8001098:	40590000 	.word	0x40590000
 800109c:	200000a0 	.word	0x200000a0
 80010a0:	200000a8 	.word	0x200000a8
 80010a4:	404e0000 	.word	0x404e0000
 80010a8:	40510000 	.word	0x40510000
 80010ac:	40568000 	.word	0x40568000
 80010b0:	405e0000 	.word	0x405e0000
    		            }
    		          //Sector 240-270
    		            else if(v_directory== 0 && v_directorx<2)
 80010b4:	4b4a      	ldr	r3, [pc, #296]	@ (80011e0 <read_joystick_position+0x428>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d120      	bne.n	80010fe <read_joystick_position+0x346>
 80010bc:	4b49      	ldr	r3, [pc, #292]	@ (80011e4 <read_joystick_position+0x42c>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d81c      	bhi.n	80010fe <read_joystick_position+0x346>
    		            {
    		               angulo_grados= 240-30*(angulo-255)*1.0/68;
 80010c4:	4b48      	ldr	r3, [pc, #288]	@ (80011e8 <read_joystick_position+0x430>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	f1a3 02ff 	sub.w	r2, r3, #255	@ 0xff
 80010cc:	4613      	mov	r3, r2
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	1a9b      	subs	r3, r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f9c9 	bl	800046c <__aeabi_i2d>
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b43      	ldr	r3, [pc, #268]	@ (80011ec <read_joystick_position+0x434>)
 80010e0:	f7ff fb58 	bl	8000794 <__aeabi_ddiv>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	f04f 0000 	mov.w	r0, #0
 80010ec:	4940      	ldr	r1, [pc, #256]	@ (80011f0 <read_joystick_position+0x438>)
 80010ee:	f7ff f86f 	bl	80001d0 <__aeabi_dsub>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	493f      	ldr	r1, [pc, #252]	@ (80011f4 <read_joystick_position+0x43c>)
 80010f8:	e9c1 2300 	strd	r2, r3, [r1]
 80010fc:	e05f      	b.n	80011be <read_joystick_position+0x406>
    		            }
    		          //Sector 270-300
    		            else if(v_directory== 0 && v_directorx>1)
 80010fe:	4b38      	ldr	r3, [pc, #224]	@ (80011e0 <read_joystick_position+0x428>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d122      	bne.n	800114c <read_joystick_position+0x394>
 8001106:	4b37      	ldr	r3, [pc, #220]	@ (80011e4 <read_joystick_position+0x42c>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d91e      	bls.n	800114c <read_joystick_position+0x394>
    		            {
    		                 angulo_grados= 270+30*(angulo-255+68)*1.0/68;
 800110e:	4b36      	ldr	r3, [pc, #216]	@ (80011e8 <read_joystick_position+0x430>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	f1a3 02bb 	sub.w	r2, r3, #187	@ 0xbb
 8001116:	4613      	mov	r3, r2
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f9a4 	bl	800046c <__aeabi_i2d>
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	4b30      	ldr	r3, [pc, #192]	@ (80011ec <read_joystick_position+0x434>)
 800112a:	f7ff fb33 	bl	8000794 <__aeabi_ddiv>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	a324      	add	r3, pc, #144	@ (adr r3, 80011c8 <read_joystick_position+0x410>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff f84a 	bl	80001d4 <__adddf3>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	492b      	ldr	r1, [pc, #172]	@ (80011f4 <read_joystick_position+0x43c>)
 8001146:	e9c1 2300 	strd	r2, r3, [r1]
 800114a:	e038      	b.n	80011be <read_joystick_position+0x406>
    		            }
    		          //Sector 300-330
    		            else if(v_directorx>1 && v_directory< 2 && v_directory> 0)
 800114c:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <read_joystick_position+0x42c>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d934      	bls.n	80011be <read_joystick_position+0x406>
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <read_joystick_position+0x428>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d830      	bhi.n	80011be <read_joystick_position+0x406>
 800115c:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <read_joystick_position+0x428>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d02c      	beq.n	80011be <read_joystick_position+0x406>
    		            {
    		          	 angulo_grados= 300+60*(angulo)*1.0/255;
 8001164:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <read_joystick_position+0x430>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4613      	mov	r3, r2
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	1a9b      	subs	r3, r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f97a 	bl	800046c <__aeabi_i2d>
 8001178:	a315      	add	r3, pc, #84	@ (adr r3, 80011d0 <read_joystick_position+0x418>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff fb09 	bl	8000794 <__aeabi_ddiv>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	a313      	add	r3, pc, #76	@ (adr r3, 80011d8 <read_joystick_position+0x420>)
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	f7ff f820 	bl	80001d4 <__adddf3>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4916      	ldr	r1, [pc, #88]	@ (80011f4 <read_joystick_position+0x43c>)
 800119a:	e9c1 2300 	strd	r2, r3, [r1]
    	          {
    	        	  //Si se ha quitado el seguro valores por defecto a cero y la torreta se queda inmovil
    	        	  x_value= 0;
    	        	  y_value= 0;
    	          }
}
 800119e:	e00e      	b.n	80011be <read_joystick_position+0x406>
    	        	  x_value= 0;
 80011a0:	4915      	ldr	r1, [pc, #84]	@ (80011f8 <read_joystick_position+0x440>)
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	e9c1 2300 	strd	r2, r3, [r1]
    	        	  y_value= 0;
 80011ae:	4913      	ldr	r1, [pc, #76]	@ (80011fc <read_joystick_position+0x444>)
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	f04f 0300 	mov.w	r3, #0
 80011b8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80011bc:	e7ff      	b.n	80011be <read_joystick_position+0x406>
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	00000000 	.word	0x00000000
 80011cc:	4070e000 	.word	0x4070e000
 80011d0:	00000000 	.word	0x00000000
 80011d4:	406fe000 	.word	0x406fe000
 80011d8:	00000000 	.word	0x00000000
 80011dc:	4072c000 	.word	0x4072c000
 80011e0:	20000092 	.word	0x20000092
 80011e4:	20000090 	.word	0x20000090
 80011e8:	2000008e 	.word	0x2000008e
 80011ec:	40510000 	.word	0x40510000
 80011f0:	406e0000 	.word	0x406e0000
 80011f4:	20000098 	.word	0x20000098
 80011f8:	200000a0 	.word	0x200000a0
 80011fc:	200000a8 	.word	0x200000a8

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001204:	f000 f9c2 	bl	800158c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001208:	f000 f80c 	bl	8001224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120c:	f000 f8aa 	bl	8001364 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001210:	f000 f872 	bl	80012f8 <MX_SPI1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Llamada a la función de lectura
	          read_joystick_position();
 8001214:	f7ff fdd0 	bl	8000db8 <read_joystick_position>

	          // Retardo recomendado en la DATASHEET
	          HAL_Delay(100);
 8001218:	2064      	movs	r0, #100	@ 0x64
 800121a:	f000 fa29 	bl	8001670 <HAL_Delay>
	          read_joystick_position();
 800121e:	bf00      	nop
 8001220:	e7f8      	b.n	8001214 <main+0x14>
	...

08001224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	@ 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f001 ff12 	bl	800305c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <SystemClock_Config+0xcc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a27      	ldr	r2, [pc, #156]	@ (80012f0 <SystemClock_Config+0xcc>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
 8001258:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <SystemClock_Config+0xcc>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <SystemClock_Config+0xd0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a21      	ldr	r2, [pc, #132]	@ (80012f4 <SystemClock_Config+0xd0>)
 800126e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <SystemClock_Config+0xd0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001280:	2302      	movs	r3, #2
 8001282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001284:	2301      	movs	r3, #1
 8001286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001288:	2310      	movs	r3, #16
 800128a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128c:	2302      	movs	r3, #2
 800128e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001290:	2300      	movs	r3, #0
 8001292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001294:	2308      	movs	r3, #8
 8001296:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001298:	2332      	movs	r3, #50	@ 0x32
 800129a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800129c:	2304      	movs	r3, #4
 800129e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012a0:	2307      	movs	r3, #7
 80012a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fca1 	bl	8001bf0 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012b4:	f000 f888 	bl	80013c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012bc:	2302      	movs	r3, #2
 80012be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 ff02 	bl	80020e0 <HAL_RCC_ClockConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012e2:	f000 f871 	bl	80013c8 <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3750      	adds	r7, #80	@ 0x50
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40007000 	.word	0x40007000

080012f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012fc:	4b17      	ldr	r3, [pc, #92]	@ (800135c <MX_SPI1_Init+0x64>)
 80012fe:	4a18      	ldr	r2, [pc, #96]	@ (8001360 <MX_SPI1_Init+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001302:	4b16      	ldr	r3, [pc, #88]	@ (800135c <MX_SPI1_Init+0x64>)
 8001304:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001308:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_SPI1_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_SPI1_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_SPI1_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_SPI1_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_SPI1_Init+0x64>)
 8001324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001328:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_SPI1_Init+0x64>)
 800132c:	2218      	movs	r2, #24
 800132e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <MX_SPI1_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_SPI1_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <MX_SPI1_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_SPI1_Init+0x64>)
 8001344:	220a      	movs	r2, #10
 8001346:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_SPI1_Init+0x64>)
 800134a:	f001 f8b5 	bl	80024b8 <HAL_SPI_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001354:	f000 f838 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000002c 	.word	0x2000002c
 8001360:	40013000 	.word	0x40013000

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <MX_GPIO_Init+0x5c>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	4a0f      	ldr	r2, [pc, #60]	@ (80013c0 <MX_GPIO_Init+0x5c>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6313      	str	r3, [r2, #48]	@ 0x30
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <MX_GPIO_Init+0x5c>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2110      	movs	r1, #16
 8001398:	480a      	ldr	r0, [pc, #40]	@ (80013c4 <MX_GPIO_Init+0x60>)
 800139a:	f000 fc0f 	bl	8001bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800139e:	2310      	movs	r3, #16
 80013a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4619      	mov	r1, r3
 80013b2:	4804      	ldr	r0, [pc, #16]	@ (80013c4 <MX_GPIO_Init+0x60>)
 80013b4:	f000 fa66 	bl	8001884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b8:	bf00      	nop
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <Error_Handler+0x8>

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001420 <HAL_MspInit+0x4c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	@ (8001420 <HAL_MspInit+0x4c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	@ 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001412:	2007      	movs	r0, #7
 8001414:	f000 fa02 	bl	800181c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800

08001424 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a19      	ldr	r2, [pc, #100]	@ (80014a8 <HAL_SPI_MspInit+0x84>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d12b      	bne.n	800149e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <HAL_SPI_MspInit+0x88>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	4a17      	ldr	r2, [pc, #92]	@ (80014ac <HAL_SPI_MspInit+0x88>)
 8001450:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001454:	6453      	str	r3, [r2, #68]	@ 0x44
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HAL_SPI_MspInit+0x88>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <HAL_SPI_MspInit+0x88>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a10      	ldr	r2, [pc, #64]	@ (80014ac <HAL_SPI_MspInit+0x88>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <HAL_SPI_MspInit+0x88>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800147e:	23e0      	movs	r3, #224	@ 0xe0
 8001480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	2303      	movs	r3, #3
 800148c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800148e:	2305      	movs	r3, #5
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <HAL_SPI_MspInit+0x8c>)
 800149a:	f000 f9f3 	bl	8001884 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	@ 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40013000 	.word	0x40013000
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <NMI_Handler+0x4>

080014bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <MemManage_Handler+0x4>

080014cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <UsageFault_Handler+0x4>

080014dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150a:	f000 f891 	bl	8001630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <SystemInit+0x20>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <SystemInit+0x20>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001538:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001570 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800153c:	f7ff ffea 	bl	8001514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001542:	490d      	ldr	r1, [pc, #52]	@ (8001578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001558:	4c0a      	ldr	r4, [pc, #40]	@ (8001584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001566:	f001 fd81 	bl	800306c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156a:	f7ff fe49 	bl	8001200 <main>
  bx  lr    
 800156e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001578:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800157c:	080043d0 	.word	0x080043d0
  ldr r2, =_sbss
 8001580:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001584:	200000b4 	.word	0x200000b4

08001588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC_IRQHandler>
	...

0800158c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001590:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0d      	ldr	r2, [pc, #52]	@ (80015cc <HAL_Init+0x40>)
 8001596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800159a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <HAL_Init+0x40>)
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a07      	ldr	r2, [pc, #28]	@ (80015cc <HAL_Init+0x40>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f931 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f000 f808 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c0:	f7ff ff08 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023c00 	.word	0x40023c00

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_InitTick+0x54>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_InitTick+0x58>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f93b 	bl	800186a <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00e      	b.n	800161c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d80a      	bhi.n	800161a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f000 f911 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001610:	4a06      	ldr	r2, [pc, #24]	@ (800162c <HAL_InitTick+0x5c>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000
 8001628:	20000008 	.word	0x20000008
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_IncTick+0x24>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <HAL_IncTick+0x24>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008
 8001654:	200000b0 	.word	0x200000b0

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200000b0 	.word	0x200000b0

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff ffee 	bl	8001658 <HAL_GetTick>
 800167c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d005      	beq.n	8001696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_Delay+0x44>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001696:	bf00      	nop
 8001698:	f7ff ffde 	bl	8001658 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d8f7      	bhi.n	8001698 <HAL_Delay+0x28>
  {
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	@ (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	@ (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	@ 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	@ 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff47 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff5c 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffb0 	bl	80017d8 <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	@ 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e16b      	b.n	8001b78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a0:	2201      	movs	r2, #1
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	f040 815a 	bne.w	8001b72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d005      	beq.n	80018d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d130      	bne.n	8001938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800190c:	2201      	movs	r2, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 0201 	and.w	r2, r3, #1
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	2b03      	cmp	r3, #3
 8001942:	d017      	beq.n	8001974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2203      	movs	r2, #3
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d123      	bne.n	80019c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	08da      	lsrs	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3208      	adds	r2, #8
 80019c2:	69b9      	ldr	r1, [r7, #24]
 80019c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0203 	and.w	r2, r3, #3
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80b4 	beq.w	8001b72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b60      	ldr	r3, [pc, #384]	@ (8001b90 <HAL_GPIO_Init+0x30c>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	4a5f      	ldr	r2, [pc, #380]	@ (8001b90 <HAL_GPIO_Init+0x30c>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b90 <HAL_GPIO_Init+0x30c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a26:	4a5b      	ldr	r2, [pc, #364]	@ (8001b94 <HAL_GPIO_Init+0x310>)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	@ (8001b98 <HAL_GPIO_Init+0x314>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d02b      	beq.n	8001aaa <HAL_GPIO_Init+0x226>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a51      	ldr	r2, [pc, #324]	@ (8001b9c <HAL_GPIO_Init+0x318>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d025      	beq.n	8001aa6 <HAL_GPIO_Init+0x222>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a50      	ldr	r2, [pc, #320]	@ (8001ba0 <HAL_GPIO_Init+0x31c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d01f      	beq.n	8001aa2 <HAL_GPIO_Init+0x21e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba4 <HAL_GPIO_Init+0x320>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d019      	beq.n	8001a9e <HAL_GPIO_Init+0x21a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d013      	beq.n	8001a9a <HAL_GPIO_Init+0x216>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4d      	ldr	r2, [pc, #308]	@ (8001bac <HAL_GPIO_Init+0x328>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00d      	beq.n	8001a96 <HAL_GPIO_Init+0x212>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8001bb0 <HAL_GPIO_Init+0x32c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <HAL_GPIO_Init+0x20e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4b      	ldr	r2, [pc, #300]	@ (8001bb4 <HAL_GPIO_Init+0x330>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_GPIO_Init+0x20a>
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	e00e      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001a8e:	2308      	movs	r3, #8
 8001a90:	e00c      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001a92:	2306      	movs	r3, #6
 8001a94:	e00a      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001a96:	2305      	movs	r3, #5
 8001a98:	e008      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x228>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f002 0203 	and.w	r2, r2, #3
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001abc:	4935      	ldr	r1, [pc, #212]	@ (8001b94 <HAL_GPIO_Init+0x310>)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aca:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb8 <HAL_GPIO_Init+0x334>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aee:	4a32      	ldr	r2, [pc, #200]	@ (8001bb8 <HAL_GPIO_Init+0x334>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af4:	4b30      	ldr	r3, [pc, #192]	@ (8001bb8 <HAL_GPIO_Init+0x334>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b18:	4a27      	ldr	r2, [pc, #156]	@ (8001bb8 <HAL_GPIO_Init+0x334>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b1e:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <HAL_GPIO_Init+0x334>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b42:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb8 <HAL_GPIO_Init+0x334>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_GPIO_Init+0x334>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b6c:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <HAL_GPIO_Init+0x334>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3301      	adds	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	f67f ae90 	bls.w	80018a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3724      	adds	r7, #36	@ 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40013800 	.word	0x40013800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020c00 	.word	0x40020c00
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40021400 	.word	0x40021400
 8001bb0:	40021800 	.word	0x40021800
 8001bb4:	40021c00 	.word	0x40021c00
 8001bb8:	40013c00 	.word	0x40013c00

08001bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bd8:	e003      	b.n	8001be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bda:	887b      	ldrh	r3, [r7, #2]
 8001bdc:	041a      	lsls	r2, r3, #16
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	619a      	str	r2, [r3, #24]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e267      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d075      	beq.n	8001cfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c0e:	4b88      	ldr	r3, [pc, #544]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d00c      	beq.n	8001c34 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1a:	4b85      	ldr	r3, [pc, #532]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d112      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c26:	4b82      	ldr	r3, [pc, #520]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c32:	d10b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	4b7e      	ldr	r3, [pc, #504]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d05b      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x108>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d157      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e242      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c54:	d106      	bne.n	8001c64 <HAL_RCC_OscConfig+0x74>
 8001c56:	4b76      	ldr	r3, [pc, #472]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a75      	ldr	r2, [pc, #468]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0xb0>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x98>
 8001c6e:	4b70      	ldr	r3, [pc, #448]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6f      	ldr	r2, [pc, #444]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6c      	ldr	r2, [pc, #432]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xb0>
 8001c88:	4b69      	ldr	r3, [pc, #420]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a68      	ldr	r2, [pc, #416]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b66      	ldr	r3, [pc, #408]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a65      	ldr	r2, [pc, #404]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fcd6 	bl	8001658 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fcd2 	bl	8001658 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	@ 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e207      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xc0>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fcc2 	bl	8001658 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fcbe 	bl	8001658 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	@ 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1f3      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	4b51      	ldr	r3, [pc, #324]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xe8>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d063      	beq.n	8001dce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d06:	4b4a      	ldr	r3, [pc, #296]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d12:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d11c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d1e:	4b44      	ldr	r3, [pc, #272]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d116      	bne.n	8001d58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	4b41      	ldr	r3, [pc, #260]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x152>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e1c7      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b3b      	ldr	r3, [pc, #236]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4937      	ldr	r1, [pc, #220]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	e03a      	b.n	8001dce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d60:	4b34      	ldr	r3, [pc, #208]	@ (8001e34 <HAL_RCC_OscConfig+0x244>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d66:	f7ff fc77 	bl	8001658 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fc73 	bl	8001658 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1a8      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	4b2b      	ldr	r3, [pc, #172]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b28      	ldr	r3, [pc, #160]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4925      	ldr	r1, [pc, #148]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
 8001da0:	e015      	b.n	8001dce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da2:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <HAL_RCC_OscConfig+0x244>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff fc56 	bl	8001658 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db0:	f7ff fc52 	bl	8001658 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e187      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d036      	beq.n	8001e48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d016      	beq.n	8001e10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de2:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <HAL_RCC_OscConfig+0x248>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff fc36 	bl	8001658 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff fc32 	bl	8001658 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e167      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x200>
 8001e0e:	e01b      	b.n	8001e48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e10:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_RCC_OscConfig+0x248>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e16:	f7ff fc1f 	bl	8001658 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	e00e      	b.n	8001e3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fc1b 	bl	8001658 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d907      	bls.n	8001e3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e150      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
 8001e30:	40023800 	.word	0x40023800
 8001e34:	42470000 	.word	0x42470000
 8001e38:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	4b88      	ldr	r3, [pc, #544]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1ea      	bne.n	8001e1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8097 	beq.w	8001f84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4b81      	ldr	r3, [pc, #516]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10f      	bne.n	8001e86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b7d      	ldr	r3, [pc, #500]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	4a7c      	ldr	r2, [pc, #496]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e76:	4b7a      	ldr	r3, [pc, #488]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e82:	2301      	movs	r3, #1
 8001e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e86:	4b77      	ldr	r3, [pc, #476]	@ (8002064 <HAL_RCC_OscConfig+0x474>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e92:	4b74      	ldr	r3, [pc, #464]	@ (8002064 <HAL_RCC_OscConfig+0x474>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a73      	ldr	r2, [pc, #460]	@ (8002064 <HAL_RCC_OscConfig+0x474>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff fbdb 	bl	8001658 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea6:	f7ff fbd7 	bl	8001658 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e10c      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	@ (8002064 <HAL_RCC_OscConfig+0x474>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x2ea>
 8001ecc:	4b64      	ldr	r3, [pc, #400]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed0:	4a63      	ldr	r2, [pc, #396]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed8:	e01c      	b.n	8001f14 <HAL_RCC_OscConfig+0x324>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x30c>
 8001ee2:	4b5f      	ldr	r3, [pc, #380]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee6:	4a5e      	ldr	r2, [pc, #376]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eee:	4b5c      	ldr	r3, [pc, #368]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef2:	4a5b      	ldr	r2, [pc, #364]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0x324>
 8001efc:	4b58      	ldr	r3, [pc, #352]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f00:	4a57      	ldr	r2, [pc, #348]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f08:	4b55      	ldr	r3, [pc, #340]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0c:	4a54      	ldr	r2, [pc, #336]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	f023 0304 	bic.w	r3, r3, #4
 8001f12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d015      	beq.n	8001f48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7ff fb9c 	bl	8001658 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7ff fb98 	bl	8001658 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e0cb      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3a:	4b49      	ldr	r3, [pc, #292]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0ee      	beq.n	8001f24 <HAL_RCC_OscConfig+0x334>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7ff fb86 	bl	8001658 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7ff fb82 	bl	8001658 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0b5      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f66:	4b3e      	ldr	r3, [pc, #248]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ee      	bne.n	8001f50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d105      	bne.n	8001f84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f78:	4b39      	ldr	r3, [pc, #228]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	4a38      	ldr	r2, [pc, #224]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80a1 	beq.w	80020d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f8e:	4b34      	ldr	r3, [pc, #208]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d05c      	beq.n	8002054 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d141      	bne.n	8002026 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b31      	ldr	r3, [pc, #196]	@ (8002068 <HAL_RCC_OscConfig+0x478>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fb56 	bl	8001658 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7ff fb52 	bl	8001658 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e087      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc2:	4b27      	ldr	r3, [pc, #156]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69da      	ldr	r2, [r3, #28]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	019b      	lsls	r3, r3, #6
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	085b      	lsrs	r3, r3, #1
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	041b      	lsls	r3, r3, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	491b      	ldr	r1, [pc, #108]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <HAL_RCC_OscConfig+0x478>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff fb2b 	bl	8001658 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7ff fb27 	bl	8001658 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e05c      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x416>
 8002024:	e054      	b.n	80020d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <HAL_RCC_OscConfig+0x478>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fb14 	bl	8001658 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff fb10 	bl	8001658 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e045      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_RCC_OscConfig+0x470>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x444>
 8002052:	e03d      	b.n	80020d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d107      	bne.n	800206c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e038      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
 8002060:	40023800 	.word	0x40023800
 8002064:	40007000 	.word	0x40007000
 8002068:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800206c:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <HAL_RCC_OscConfig+0x4ec>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d028      	beq.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d121      	bne.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d11a      	bne.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800209c:	4013      	ands	r3, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d111      	bne.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	085b      	lsrs	r3, r3, #1
 80020b4:	3b01      	subs	r3, #1
 80020b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d107      	bne.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800

080020e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0cc      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	4b68      	ldr	r3, [pc, #416]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d90c      	bls.n	800211c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b65      	ldr	r3, [pc, #404]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b63      	ldr	r3, [pc, #396]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0b8      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002134:	4b59      	ldr	r3, [pc, #356]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a58      	ldr	r2, [pc, #352]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800213e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800214c:	4b53      	ldr	r3, [pc, #332]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a52      	ldr	r2, [pc, #328]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b50      	ldr	r3, [pc, #320]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	494d      	ldr	r1, [pc, #308]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d044      	beq.n	8002200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b47      	ldr	r3, [pc, #284]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d119      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e07f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d003      	beq.n	800219e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219a:	2b03      	cmp	r3, #3
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219e:	4b3f      	ldr	r3, [pc, #252]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e06f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ae:	4b3b      	ldr	r3, [pc, #236]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e067      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021be:	4b37      	ldr	r3, [pc, #220]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f023 0203 	bic.w	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4934      	ldr	r1, [pc, #208]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d0:	f7ff fa42 	bl	8001658 <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7ff fa3e 	bl	8001658 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e04f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	4b2b      	ldr	r3, [pc, #172]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 020c 	and.w	r2, r3, #12
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d1eb      	bne.n	80021d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002200:	4b25      	ldr	r3, [pc, #148]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d20c      	bcs.n	8002228 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e032      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002234:	4b19      	ldr	r3, [pc, #100]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4916      	ldr	r1, [pc, #88]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002252:	4b12      	ldr	r3, [pc, #72]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	490e      	ldr	r1, [pc, #56]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002266:	f000 f821 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 800226a:	4602      	mov	r2, r0
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	490a      	ldr	r1, [pc, #40]	@ (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	5ccb      	ldrb	r3, [r1, r3]
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	4a09      	ldr	r2, [pc, #36]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002282:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff f9a2 	bl	80015d0 <HAL_InitTick>

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023c00 	.word	0x40023c00
 800229c:	40023800 	.word	0x40023800
 80022a0:	080041d8 	.word	0x080041d8
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000004 	.word	0x20000004

080022ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b0:	b094      	sub	sp, #80	@ 0x50
 80022b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022c4:	4b79      	ldr	r3, [pc, #484]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x200>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d00d      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x40>
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	f200 80e1 	bhi.w	8002498 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x34>
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022de:	e0db      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b73      	ldr	r3, [pc, #460]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80022e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022e4:	e0db      	b.n	800249e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022e6:	4b73      	ldr	r3, [pc, #460]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80022e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022ea:	e0d8      	b.n	800249e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ec:	4b6f      	ldr	r3, [pc, #444]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x200>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f6:	4b6d      	ldr	r3, [pc, #436]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x200>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d063      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002302:	4b6a      	ldr	r3, [pc, #424]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	099b      	lsrs	r3, r3, #6
 8002308:	2200      	movs	r2, #0
 800230a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800230c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800230e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002314:	633b      	str	r3, [r7, #48]	@ 0x30
 8002316:	2300      	movs	r3, #0
 8002318:	637b      	str	r3, [r7, #52]	@ 0x34
 800231a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800231e:	4622      	mov	r2, r4
 8002320:	462b      	mov	r3, r5
 8002322:	f04f 0000 	mov.w	r0, #0
 8002326:	f04f 0100 	mov.w	r1, #0
 800232a:	0159      	lsls	r1, r3, #5
 800232c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002330:	0150      	lsls	r0, r2, #5
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4621      	mov	r1, r4
 8002338:	1a51      	subs	r1, r2, r1
 800233a:	6139      	str	r1, [r7, #16]
 800233c:	4629      	mov	r1, r5
 800233e:	eb63 0301 	sbc.w	r3, r3, r1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002350:	4659      	mov	r1, fp
 8002352:	018b      	lsls	r3, r1, #6
 8002354:	4651      	mov	r1, sl
 8002356:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800235a:	4651      	mov	r1, sl
 800235c:	018a      	lsls	r2, r1, #6
 800235e:	4651      	mov	r1, sl
 8002360:	ebb2 0801 	subs.w	r8, r2, r1
 8002364:	4659      	mov	r1, fp
 8002366:	eb63 0901 	sbc.w	r9, r3, r1
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002376:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800237a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800237e:	4690      	mov	r8, r2
 8002380:	4699      	mov	r9, r3
 8002382:	4623      	mov	r3, r4
 8002384:	eb18 0303 	adds.w	r3, r8, r3
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	462b      	mov	r3, r5
 800238c:	eb49 0303 	adc.w	r3, r9, r3
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800239e:	4629      	mov	r1, r5
 80023a0:	024b      	lsls	r3, r1, #9
 80023a2:	4621      	mov	r1, r4
 80023a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023a8:	4621      	mov	r1, r4
 80023aa:	024a      	lsls	r2, r1, #9
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023b2:	2200      	movs	r2, #0
 80023b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023bc:	f7fe fb82 	bl	8000ac4 <__aeabi_uldivmod>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4613      	mov	r3, r2
 80023c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023c8:	e058      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ca:	4b38      	ldr	r3, [pc, #224]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x200>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	099b      	lsrs	r3, r3, #6
 80023d0:	2200      	movs	r2, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	4611      	mov	r1, r2
 80023d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023da:	623b      	str	r3, [r7, #32]
 80023dc:	2300      	movs	r3, #0
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023e4:	4642      	mov	r2, r8
 80023e6:	464b      	mov	r3, r9
 80023e8:	f04f 0000 	mov.w	r0, #0
 80023ec:	f04f 0100 	mov.w	r1, #0
 80023f0:	0159      	lsls	r1, r3, #5
 80023f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023f6:	0150      	lsls	r0, r2, #5
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	4641      	mov	r1, r8
 80023fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002402:	4649      	mov	r1, r9
 8002404:	eb63 0b01 	sbc.w	fp, r3, r1
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002414:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002418:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800241c:	ebb2 040a 	subs.w	r4, r2, sl
 8002420:	eb63 050b 	sbc.w	r5, r3, fp
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	00eb      	lsls	r3, r5, #3
 800242e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002432:	00e2      	lsls	r2, r4, #3
 8002434:	4614      	mov	r4, r2
 8002436:	461d      	mov	r5, r3
 8002438:	4643      	mov	r3, r8
 800243a:	18e3      	adds	r3, r4, r3
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	464b      	mov	r3, r9
 8002440:	eb45 0303 	adc.w	r3, r5, r3
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002452:	4629      	mov	r1, r5
 8002454:	028b      	lsls	r3, r1, #10
 8002456:	4621      	mov	r1, r4
 8002458:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800245c:	4621      	mov	r1, r4
 800245e:	028a      	lsls	r2, r1, #10
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002466:	2200      	movs	r2, #0
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	61fa      	str	r2, [r7, #28]
 800246c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002470:	f7fe fb28 	bl	8000ac4 <__aeabi_uldivmod>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4613      	mov	r3, r2
 800247a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800247c:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x200>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	3301      	adds	r3, #1
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800248c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800248e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002496:	e002      	b.n	800249e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800249a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800249c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800249e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3750      	adds	r7, #80	@ 0x50
 80024a4:	46bd      	mov	sp, r7
 80024a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	00f42400 	.word	0x00f42400
 80024b4:	007a1200 	.word	0x007a1200

080024b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e07b      	b.n	80025c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d108      	bne.n	80024e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024da:	d009      	beq.n	80024f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]
 80024e2:	e005      	b.n	80024f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe ff8a 	bl	8001424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002526:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002574:	ea42 0103 	orr.w	r1, r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	f003 0104 	and.w	r1, r3, #4
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	f003 0210 	and.w	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b088      	sub	sp, #32
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	603b      	str	r3, [r7, #0]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025da:	f7ff f83d 	bl	8001658 <HAL_GetTick>
 80025de:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d001      	beq.n	80025f4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
 80025f2:	e12a      	b.n	800284a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d002      	beq.n	8002600 <HAL_SPI_Transmit+0x36>
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e122      	b.n	800284a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_SPI_Transmit+0x48>
 800260e:	2302      	movs	r3, #2
 8002610:	e11b      	b.n	800284a <HAL_SPI_Transmit+0x280>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2203      	movs	r2, #3
 800261e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	88fa      	ldrh	r2, [r7, #6]
 8002632:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	88fa      	ldrh	r2, [r7, #6]
 8002638:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002660:	d10f      	bne.n	8002682 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002670:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002680:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268c:	2b40      	cmp	r3, #64	@ 0x40
 800268e:	d007      	beq.n	80026a0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800269e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026a8:	d152      	bne.n	8002750 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_SPI_Transmit+0xee>
 80026b2:	8b7b      	ldrh	r3, [r7, #26]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d145      	bne.n	8002744 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	881a      	ldrh	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c8:	1c9a      	adds	r2, r3, #2
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026dc:	e032      	b.n	8002744 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d112      	bne.n	8002712 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	881a      	ldrh	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fc:	1c9a      	adds	r2, r3, #2
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002710:	e018      	b.n	8002744 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002712:	f7fe ffa1 	bl	8001658 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d803      	bhi.n	800272a <HAL_SPI_Transmit+0x160>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d102      	bne.n	8002730 <HAL_SPI_Transmit+0x166>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e082      	b.n	800284a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1c7      	bne.n	80026de <HAL_SPI_Transmit+0x114>
 800274e:	e053      	b.n	80027f8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d002      	beq.n	800275e <HAL_SPI_Transmit+0x194>
 8002758:	8b7b      	ldrh	r3, [r7, #26]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d147      	bne.n	80027ee <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	330c      	adds	r3, #12
 8002768:	7812      	ldrb	r2, [r2, #0]
 800276a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800277a:	b29b      	uxth	r3, r3
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002784:	e033      	b.n	80027ee <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b02      	cmp	r3, #2
 8002792:	d113      	bne.n	80027bc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	330c      	adds	r3, #12
 800279e:	7812      	ldrb	r2, [r2, #0]
 80027a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80027ba:	e018      	b.n	80027ee <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027bc:	f7fe ff4c 	bl	8001658 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d803      	bhi.n	80027d4 <HAL_SPI_Transmit+0x20a>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d2:	d102      	bne.n	80027da <HAL_SPI_Transmit+0x210>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e02d      	b.n	800284a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1c6      	bne.n	8002786 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fbd9 	bl	8002fb4 <SPI_EndRxTxTransaction>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10a      	bne.n	800282c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002848:	2300      	movs	r3, #0
  }
}
 800284a:	4618      	mov	r0, r3
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b088      	sub	sp, #32
 8002856:	af02      	add	r7, sp, #8
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	603b      	str	r3, [r7, #0]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d001      	beq.n	8002872 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
 8002870:	e104      	b.n	8002a7c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800287a:	d112      	bne.n	80028a2 <HAL_SPI_Receive+0x50>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10e      	bne.n	80028a2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2204      	movs	r2, #4
 8002888:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800288c:	88fa      	ldrh	r2, [r7, #6]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4613      	mov	r3, r2
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f8f3 	bl	8002a84 <HAL_SPI_TransmitReceive>
 800289e:	4603      	mov	r3, r0
 80028a0:	e0ec      	b.n	8002a7c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028a2:	f7fe fed9 	bl	8001658 <HAL_GetTick>
 80028a6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_SPI_Receive+0x62>
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0e1      	b.n	8002a7c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_SPI_Receive+0x74>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e0da      	b.n	8002a7c <HAL_SPI_Receive+0x22a>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2204      	movs	r2, #4
 80028d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002914:	d10f      	bne.n	8002936 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002924:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002934:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002940:	2b40      	cmp	r3, #64	@ 0x40
 8002942:	d007      	beq.n	8002954 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002952:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d170      	bne.n	8002a3e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800295c:	e035      	b.n	80029ca <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d115      	bne.n	8002998 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f103 020c 	add.w	r2, r3, #12
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002978:	7812      	ldrb	r2, [r2, #0]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002996:	e018      	b.n	80029ca <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002998:	f7fe fe5e 	bl	8001658 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d803      	bhi.n	80029b0 <HAL_SPI_Receive+0x15e>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ae:	d102      	bne.n	80029b6 <HAL_SPI_Receive+0x164>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e058      	b.n	8002a7c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1c4      	bne.n	800295e <HAL_SPI_Receive+0x10c>
 80029d4:	e038      	b.n	8002a48 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d113      	bne.n	8002a0c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ee:	b292      	uxth	r2, r2
 80029f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f6:	1c9a      	adds	r2, r3, #2
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a0a:	e018      	b.n	8002a3e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a0c:	f7fe fe24 	bl	8001658 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d803      	bhi.n	8002a24 <HAL_SPI_Receive+0x1d2>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a22:	d102      	bne.n	8002a2a <HAL_SPI_Receive+0x1d8>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e01e      	b.n	8002a7c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1c6      	bne.n	80029d6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fa4b 	bl	8002ee8 <SPI_EndRxTransaction>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
  }
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	@ 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a92:	2301      	movs	r3, #1
 8002a94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a96:	f7fe fddf 	bl	8001658 <HAL_GetTick>
 8002a9a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002aa2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002aaa:	887b      	ldrh	r3, [r7, #2]
 8002aac:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002aae:	7ffb      	ldrb	r3, [r7, #31]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d00c      	beq.n	8002ace <HAL_SPI_TransmitReceive+0x4a>
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aba:	d106      	bne.n	8002aca <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d102      	bne.n	8002aca <HAL_SPI_TransmitReceive+0x46>
 8002ac4:	7ffb      	ldrb	r3, [r7, #31]
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d001      	beq.n	8002ace <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
 8002acc:	e17f      	b.n	8002dce <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <HAL_SPI_TransmitReceive+0x5c>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_SPI_TransmitReceive+0x5c>
 8002ada:	887b      	ldrh	r3, [r7, #2]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e174      	b.n	8002dce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_SPI_TransmitReceive+0x6e>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e16d      	b.n	8002dce <HAL_SPI_TransmitReceive+0x34a>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d003      	beq.n	8002b0e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2205      	movs	r2, #5
 8002b0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	887a      	ldrh	r2, [r7, #2]
 8002b1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	887a      	ldrh	r2, [r7, #2]
 8002b36:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4e:	2b40      	cmp	r3, #64	@ 0x40
 8002b50:	d007      	beq.n	8002b62 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b6a:	d17e      	bne.n	8002c6a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_SPI_TransmitReceive+0xf6>
 8002b74:	8afb      	ldrh	r3, [r7, #22]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d16c      	bne.n	8002c54 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	881a      	ldrh	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	1c9a      	adds	r2, r3, #2
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b9e:	e059      	b.n	8002c54 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d11b      	bne.n	8002be6 <HAL_SPI_TransmitReceive+0x162>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d016      	beq.n	8002be6 <HAL_SPI_TransmitReceive+0x162>
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d113      	bne.n	8002be6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	881a      	ldrh	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	1c9a      	adds	r2, r3, #2
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d119      	bne.n	8002c28 <HAL_SPI_TransmitReceive+0x1a4>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d014      	beq.n	8002c28 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c08:	b292      	uxth	r2, r2
 8002c0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c10:	1c9a      	adds	r2, r3, #2
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c24:	2301      	movs	r3, #1
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c28:	f7fe fd16 	bl	8001658 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d80d      	bhi.n	8002c54 <HAL_SPI_TransmitReceive+0x1d0>
 8002c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3e:	d009      	beq.n	8002c54 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e0bc      	b.n	8002dce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1a0      	bne.n	8002ba0 <HAL_SPI_TransmitReceive+0x11c>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d19b      	bne.n	8002ba0 <HAL_SPI_TransmitReceive+0x11c>
 8002c68:	e082      	b.n	8002d70 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_SPI_TransmitReceive+0x1f4>
 8002c72:	8afb      	ldrh	r3, [r7, #22]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d171      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	330c      	adds	r3, #12
 8002c82:	7812      	ldrb	r2, [r2, #0]
 8002c84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c9e:	e05d      	b.n	8002d5c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d11c      	bne.n	8002ce8 <HAL_SPI_TransmitReceive+0x264>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d017      	beq.n	8002ce8 <HAL_SPI_TransmitReceive+0x264>
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d114      	bne.n	8002ce8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	330c      	adds	r3, #12
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d119      	bne.n	8002d2a <HAL_SPI_TransmitReceive+0x2a6>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d014      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d26:	2301      	movs	r3, #1
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d2a:	f7fe fc95 	bl	8001658 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d803      	bhi.n	8002d42 <HAL_SPI_TransmitReceive+0x2be>
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d102      	bne.n	8002d48 <HAL_SPI_TransmitReceive+0x2c4>
 8002d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d109      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e038      	b.n	8002dce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d19c      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x21c>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d197      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d70:	6a3a      	ldr	r2, [r7, #32]
 8002d72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f91d 	bl	8002fb4 <SPI_EndRxTxTransaction>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e01d      	b.n	8002dce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3728      	adds	r7, #40	@ 0x28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002de8:	f7fe fc36 	bl	8001658 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	4413      	add	r3, r2
 8002df6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002df8:	f7fe fc2e 	bl	8001658 <HAL_GetTick>
 8002dfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dfe:	4b39      	ldr	r3, [pc, #228]	@ (8002ee4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	015b      	lsls	r3, r3, #5
 8002e04:	0d1b      	lsrs	r3, r3, #20
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e0e:	e054      	b.n	8002eba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d050      	beq.n	8002eba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e18:	f7fe fc1e 	bl	8001658 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d902      	bls.n	8002e2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d13d      	bne.n	8002eaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e46:	d111      	bne.n	8002e6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e50:	d004      	beq.n	8002e5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e5a:	d107      	bne.n	8002e6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e74:	d10f      	bne.n	8002e96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e017      	b.n	8002eda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	bf0c      	ite	eq
 8002eca:	2301      	moveq	r3, #1
 8002ecc:	2300      	movne	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d19b      	bne.n	8002e10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000000 	.word	0x20000000

08002ee8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002efc:	d111      	bne.n	8002f22 <SPI_EndRxTransaction+0x3a>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f06:	d004      	beq.n	8002f12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f10:	d107      	bne.n	8002f22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f2a:	d12a      	bne.n	8002f82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f34:	d012      	beq.n	8002f5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2180      	movs	r1, #128	@ 0x80
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7ff ff49 	bl	8002dd8 <SPI_WaitFlagStateUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d02d      	beq.n	8002fa8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e026      	b.n	8002faa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2200      	movs	r2, #0
 8002f64:	2101      	movs	r1, #1
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7ff ff36 	bl	8002dd8 <SPI_WaitFlagStateUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01a      	beq.n	8002fa8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f76:	f043 0220 	orr.w	r2, r3, #32
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e013      	b.n	8002faa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff ff23 	bl	8002dd8 <SPI_WaitFlagStateUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e000      	b.n	8002faa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	2102      	movs	r1, #2
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f7ff ff04 	bl	8002dd8 <SPI_WaitFlagStateUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fda:	f043 0220 	orr.w	r2, r3, #32
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e032      	b.n	800304c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8003054 <SPI_EndRxTxTransaction+0xa0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1b      	ldr	r2, [pc, #108]	@ (8003058 <SPI_EndRxTxTransaction+0xa4>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	0d5b      	lsrs	r3, r3, #21
 8002ff2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003004:	d112      	bne.n	800302c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2200      	movs	r2, #0
 800300e:	2180      	movs	r1, #128	@ 0x80
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f7ff fee1 	bl	8002dd8 <SPI_WaitFlagStateUntilTimeout>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d016      	beq.n	800304a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e00f      	b.n	800304c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3b01      	subs	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003042:	2b80      	cmp	r3, #128	@ 0x80
 8003044:	d0f2      	beq.n	800302c <SPI_EndRxTxTransaction+0x78>
 8003046:	e000      	b.n	800304a <SPI_EndRxTxTransaction+0x96>
        break;
 8003048:	bf00      	nop
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20000000 	.word	0x20000000
 8003058:	165e9f81 	.word	0x165e9f81

0800305c <memset>:
 800305c:	4402      	add	r2, r0
 800305e:	4603      	mov	r3, r0
 8003060:	4293      	cmp	r3, r2
 8003062:	d100      	bne.n	8003066 <memset+0xa>
 8003064:	4770      	bx	lr
 8003066:	f803 1b01 	strb.w	r1, [r3], #1
 800306a:	e7f9      	b.n	8003060 <memset+0x4>

0800306c <__libc_init_array>:
 800306c:	b570      	push	{r4, r5, r6, lr}
 800306e:	4d0d      	ldr	r5, [pc, #52]	@ (80030a4 <__libc_init_array+0x38>)
 8003070:	4c0d      	ldr	r4, [pc, #52]	@ (80030a8 <__libc_init_array+0x3c>)
 8003072:	1b64      	subs	r4, r4, r5
 8003074:	10a4      	asrs	r4, r4, #2
 8003076:	2600      	movs	r6, #0
 8003078:	42a6      	cmp	r6, r4
 800307a:	d109      	bne.n	8003090 <__libc_init_array+0x24>
 800307c:	4d0b      	ldr	r5, [pc, #44]	@ (80030ac <__libc_init_array+0x40>)
 800307e:	4c0c      	ldr	r4, [pc, #48]	@ (80030b0 <__libc_init_array+0x44>)
 8003080:	f001 f89e 	bl	80041c0 <_init>
 8003084:	1b64      	subs	r4, r4, r5
 8003086:	10a4      	asrs	r4, r4, #2
 8003088:	2600      	movs	r6, #0
 800308a:	42a6      	cmp	r6, r4
 800308c:	d105      	bne.n	800309a <__libc_init_array+0x2e>
 800308e:	bd70      	pop	{r4, r5, r6, pc}
 8003090:	f855 3b04 	ldr.w	r3, [r5], #4
 8003094:	4798      	blx	r3
 8003096:	3601      	adds	r6, #1
 8003098:	e7ee      	b.n	8003078 <__libc_init_array+0xc>
 800309a:	f855 3b04 	ldr.w	r3, [r5], #4
 800309e:	4798      	blx	r3
 80030a0:	3601      	adds	r6, #1
 80030a2:	e7f2      	b.n	800308a <__libc_init_array+0x1e>
 80030a4:	080043c8 	.word	0x080043c8
 80030a8:	080043c8 	.word	0x080043c8
 80030ac:	080043c8 	.word	0x080043c8
 80030b0:	080043cc 	.word	0x080043cc
 80030b4:	00000000 	.word	0x00000000

080030b8 <cos>:
 80030b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80030ba:	ec53 2b10 	vmov	r2, r3, d0
 80030be:	4826      	ldr	r0, [pc, #152]	@ (8003158 <cos+0xa0>)
 80030c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80030c4:	4281      	cmp	r1, r0
 80030c6:	d806      	bhi.n	80030d6 <cos+0x1e>
 80030c8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003150 <cos+0x98>
 80030cc:	b005      	add	sp, #20
 80030ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80030d2:	f000 b899 	b.w	8003208 <__kernel_cos>
 80030d6:	4821      	ldr	r0, [pc, #132]	@ (800315c <cos+0xa4>)
 80030d8:	4281      	cmp	r1, r0
 80030da:	d908      	bls.n	80030ee <cos+0x36>
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	f7fd f876 	bl	80001d0 <__aeabi_dsub>
 80030e4:	ec41 0b10 	vmov	d0, r0, r1
 80030e8:	b005      	add	sp, #20
 80030ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80030ee:	4668      	mov	r0, sp
 80030f0:	f000 fa0e 	bl	8003510 <__ieee754_rem_pio2>
 80030f4:	f000 0003 	and.w	r0, r0, #3
 80030f8:	2801      	cmp	r0, #1
 80030fa:	d00b      	beq.n	8003114 <cos+0x5c>
 80030fc:	2802      	cmp	r0, #2
 80030fe:	d015      	beq.n	800312c <cos+0x74>
 8003100:	b9d8      	cbnz	r0, 800313a <cos+0x82>
 8003102:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003106:	ed9d 0b00 	vldr	d0, [sp]
 800310a:	f000 f87d 	bl	8003208 <__kernel_cos>
 800310e:	ec51 0b10 	vmov	r0, r1, d0
 8003112:	e7e7      	b.n	80030e4 <cos+0x2c>
 8003114:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003118:	ed9d 0b00 	vldr	d0, [sp]
 800311c:	f000 f93c 	bl	8003398 <__kernel_sin>
 8003120:	ec53 2b10 	vmov	r2, r3, d0
 8003124:	4610      	mov	r0, r2
 8003126:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800312a:	e7db      	b.n	80030e4 <cos+0x2c>
 800312c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003130:	ed9d 0b00 	vldr	d0, [sp]
 8003134:	f000 f868 	bl	8003208 <__kernel_cos>
 8003138:	e7f2      	b.n	8003120 <cos+0x68>
 800313a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800313e:	ed9d 0b00 	vldr	d0, [sp]
 8003142:	2001      	movs	r0, #1
 8003144:	f000 f928 	bl	8003398 <__kernel_sin>
 8003148:	e7e1      	b.n	800310e <cos+0x56>
 800314a:	bf00      	nop
 800314c:	f3af 8000 	nop.w
	...
 8003158:	3fe921fb 	.word	0x3fe921fb
 800315c:	7fefffff 	.word	0x7fefffff

08003160 <sin>:
 8003160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003162:	ec53 2b10 	vmov	r2, r3, d0
 8003166:	4826      	ldr	r0, [pc, #152]	@ (8003200 <sin+0xa0>)
 8003168:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800316c:	4281      	cmp	r1, r0
 800316e:	d807      	bhi.n	8003180 <sin+0x20>
 8003170:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80031f8 <sin+0x98>
 8003174:	2000      	movs	r0, #0
 8003176:	b005      	add	sp, #20
 8003178:	f85d eb04 	ldr.w	lr, [sp], #4
 800317c:	f000 b90c 	b.w	8003398 <__kernel_sin>
 8003180:	4820      	ldr	r0, [pc, #128]	@ (8003204 <sin+0xa4>)
 8003182:	4281      	cmp	r1, r0
 8003184:	d908      	bls.n	8003198 <sin+0x38>
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	f7fd f821 	bl	80001d0 <__aeabi_dsub>
 800318e:	ec41 0b10 	vmov	d0, r0, r1
 8003192:	b005      	add	sp, #20
 8003194:	f85d fb04 	ldr.w	pc, [sp], #4
 8003198:	4668      	mov	r0, sp
 800319a:	f000 f9b9 	bl	8003510 <__ieee754_rem_pio2>
 800319e:	f000 0003 	and.w	r0, r0, #3
 80031a2:	2801      	cmp	r0, #1
 80031a4:	d00c      	beq.n	80031c0 <sin+0x60>
 80031a6:	2802      	cmp	r0, #2
 80031a8:	d011      	beq.n	80031ce <sin+0x6e>
 80031aa:	b9e8      	cbnz	r0, 80031e8 <sin+0x88>
 80031ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80031b0:	ed9d 0b00 	vldr	d0, [sp]
 80031b4:	2001      	movs	r0, #1
 80031b6:	f000 f8ef 	bl	8003398 <__kernel_sin>
 80031ba:	ec51 0b10 	vmov	r0, r1, d0
 80031be:	e7e6      	b.n	800318e <sin+0x2e>
 80031c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80031c4:	ed9d 0b00 	vldr	d0, [sp]
 80031c8:	f000 f81e 	bl	8003208 <__kernel_cos>
 80031cc:	e7f5      	b.n	80031ba <sin+0x5a>
 80031ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80031d2:	ed9d 0b00 	vldr	d0, [sp]
 80031d6:	2001      	movs	r0, #1
 80031d8:	f000 f8de 	bl	8003398 <__kernel_sin>
 80031dc:	ec53 2b10 	vmov	r2, r3, d0
 80031e0:	4610      	mov	r0, r2
 80031e2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80031e6:	e7d2      	b.n	800318e <sin+0x2e>
 80031e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80031ec:	ed9d 0b00 	vldr	d0, [sp]
 80031f0:	f000 f80a 	bl	8003208 <__kernel_cos>
 80031f4:	e7f2      	b.n	80031dc <sin+0x7c>
 80031f6:	bf00      	nop
	...
 8003200:	3fe921fb 	.word	0x3fe921fb
 8003204:	7fefffff 	.word	0x7fefffff

08003208 <__kernel_cos>:
 8003208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320c:	ec57 6b10 	vmov	r6, r7, d0
 8003210:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003214:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003218:	ed8d 1b00 	vstr	d1, [sp]
 800321c:	d206      	bcs.n	800322c <__kernel_cos+0x24>
 800321e:	4630      	mov	r0, r6
 8003220:	4639      	mov	r1, r7
 8003222:	f7fd fc27 	bl	8000a74 <__aeabi_d2iz>
 8003226:	2800      	cmp	r0, #0
 8003228:	f000 8088 	beq.w	800333c <__kernel_cos+0x134>
 800322c:	4632      	mov	r2, r6
 800322e:	463b      	mov	r3, r7
 8003230:	4630      	mov	r0, r6
 8003232:	4639      	mov	r1, r7
 8003234:	f7fd f984 	bl	8000540 <__aeabi_dmul>
 8003238:	4b51      	ldr	r3, [pc, #324]	@ (8003380 <__kernel_cos+0x178>)
 800323a:	2200      	movs	r2, #0
 800323c:	4604      	mov	r4, r0
 800323e:	460d      	mov	r5, r1
 8003240:	f7fd f97e 	bl	8000540 <__aeabi_dmul>
 8003244:	a340      	add	r3, pc, #256	@ (adr r3, 8003348 <__kernel_cos+0x140>)
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	4682      	mov	sl, r0
 800324c:	468b      	mov	fp, r1
 800324e:	4620      	mov	r0, r4
 8003250:	4629      	mov	r1, r5
 8003252:	f7fd f975 	bl	8000540 <__aeabi_dmul>
 8003256:	a33e      	add	r3, pc, #248	@ (adr r3, 8003350 <__kernel_cos+0x148>)
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	f7fc ffba 	bl	80001d4 <__adddf3>
 8003260:	4622      	mov	r2, r4
 8003262:	462b      	mov	r3, r5
 8003264:	f7fd f96c 	bl	8000540 <__aeabi_dmul>
 8003268:	a33b      	add	r3, pc, #236	@ (adr r3, 8003358 <__kernel_cos+0x150>)
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	f7fc ffaf 	bl	80001d0 <__aeabi_dsub>
 8003272:	4622      	mov	r2, r4
 8003274:	462b      	mov	r3, r5
 8003276:	f7fd f963 	bl	8000540 <__aeabi_dmul>
 800327a:	a339      	add	r3, pc, #228	@ (adr r3, 8003360 <__kernel_cos+0x158>)
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f7fc ffa8 	bl	80001d4 <__adddf3>
 8003284:	4622      	mov	r2, r4
 8003286:	462b      	mov	r3, r5
 8003288:	f7fd f95a 	bl	8000540 <__aeabi_dmul>
 800328c:	a336      	add	r3, pc, #216	@ (adr r3, 8003368 <__kernel_cos+0x160>)
 800328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003292:	f7fc ff9d 	bl	80001d0 <__aeabi_dsub>
 8003296:	4622      	mov	r2, r4
 8003298:	462b      	mov	r3, r5
 800329a:	f7fd f951 	bl	8000540 <__aeabi_dmul>
 800329e:	a334      	add	r3, pc, #208	@ (adr r3, 8003370 <__kernel_cos+0x168>)
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	f7fc ff96 	bl	80001d4 <__adddf3>
 80032a8:	4622      	mov	r2, r4
 80032aa:	462b      	mov	r3, r5
 80032ac:	f7fd f948 	bl	8000540 <__aeabi_dmul>
 80032b0:	4622      	mov	r2, r4
 80032b2:	462b      	mov	r3, r5
 80032b4:	f7fd f944 	bl	8000540 <__aeabi_dmul>
 80032b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80032bc:	4604      	mov	r4, r0
 80032be:	460d      	mov	r5, r1
 80032c0:	4630      	mov	r0, r6
 80032c2:	4639      	mov	r1, r7
 80032c4:	f7fd f93c 	bl	8000540 <__aeabi_dmul>
 80032c8:	460b      	mov	r3, r1
 80032ca:	4602      	mov	r2, r0
 80032cc:	4629      	mov	r1, r5
 80032ce:	4620      	mov	r0, r4
 80032d0:	f7fc ff7e 	bl	80001d0 <__aeabi_dsub>
 80032d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003384 <__kernel_cos+0x17c>)
 80032d6:	4598      	cmp	r8, r3
 80032d8:	4606      	mov	r6, r0
 80032da:	460f      	mov	r7, r1
 80032dc:	d810      	bhi.n	8003300 <__kernel_cos+0xf8>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4650      	mov	r0, sl
 80032e4:	4659      	mov	r1, fp
 80032e6:	f7fc ff73 	bl	80001d0 <__aeabi_dsub>
 80032ea:	460b      	mov	r3, r1
 80032ec:	4926      	ldr	r1, [pc, #152]	@ (8003388 <__kernel_cos+0x180>)
 80032ee:	4602      	mov	r2, r0
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7fc ff6d 	bl	80001d0 <__aeabi_dsub>
 80032f6:	ec41 0b10 	vmov	d0, r0, r1
 80032fa:	b003      	add	sp, #12
 80032fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003300:	4b22      	ldr	r3, [pc, #136]	@ (800338c <__kernel_cos+0x184>)
 8003302:	4921      	ldr	r1, [pc, #132]	@ (8003388 <__kernel_cos+0x180>)
 8003304:	4598      	cmp	r8, r3
 8003306:	bf8c      	ite	hi
 8003308:	4d21      	ldrhi	r5, [pc, #132]	@ (8003390 <__kernel_cos+0x188>)
 800330a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800330e:	2400      	movs	r4, #0
 8003310:	4622      	mov	r2, r4
 8003312:	462b      	mov	r3, r5
 8003314:	2000      	movs	r0, #0
 8003316:	f7fc ff5b 	bl	80001d0 <__aeabi_dsub>
 800331a:	4622      	mov	r2, r4
 800331c:	4680      	mov	r8, r0
 800331e:	4689      	mov	r9, r1
 8003320:	462b      	mov	r3, r5
 8003322:	4650      	mov	r0, sl
 8003324:	4659      	mov	r1, fp
 8003326:	f7fc ff53 	bl	80001d0 <__aeabi_dsub>
 800332a:	4632      	mov	r2, r6
 800332c:	463b      	mov	r3, r7
 800332e:	f7fc ff4f 	bl	80001d0 <__aeabi_dsub>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4640      	mov	r0, r8
 8003338:	4649      	mov	r1, r9
 800333a:	e7da      	b.n	80032f2 <__kernel_cos+0xea>
 800333c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003378 <__kernel_cos+0x170>
 8003340:	e7db      	b.n	80032fa <__kernel_cos+0xf2>
 8003342:	bf00      	nop
 8003344:	f3af 8000 	nop.w
 8003348:	be8838d4 	.word	0xbe8838d4
 800334c:	bda8fae9 	.word	0xbda8fae9
 8003350:	bdb4b1c4 	.word	0xbdb4b1c4
 8003354:	3e21ee9e 	.word	0x3e21ee9e
 8003358:	809c52ad 	.word	0x809c52ad
 800335c:	3e927e4f 	.word	0x3e927e4f
 8003360:	19cb1590 	.word	0x19cb1590
 8003364:	3efa01a0 	.word	0x3efa01a0
 8003368:	16c15177 	.word	0x16c15177
 800336c:	3f56c16c 	.word	0x3f56c16c
 8003370:	5555554c 	.word	0x5555554c
 8003374:	3fa55555 	.word	0x3fa55555
 8003378:	00000000 	.word	0x00000000
 800337c:	3ff00000 	.word	0x3ff00000
 8003380:	3fe00000 	.word	0x3fe00000
 8003384:	3fd33332 	.word	0x3fd33332
 8003388:	3ff00000 	.word	0x3ff00000
 800338c:	3fe90000 	.word	0x3fe90000
 8003390:	3fd20000 	.word	0x3fd20000
 8003394:	00000000 	.word	0x00000000

08003398 <__kernel_sin>:
 8003398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800339c:	ec55 4b10 	vmov	r4, r5, d0
 80033a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80033a4:	b085      	sub	sp, #20
 80033a6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80033aa:	ed8d 1b02 	vstr	d1, [sp, #8]
 80033ae:	4680      	mov	r8, r0
 80033b0:	d205      	bcs.n	80033be <__kernel_sin+0x26>
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	f7fd fb5d 	bl	8000a74 <__aeabi_d2iz>
 80033ba:	2800      	cmp	r0, #0
 80033bc:	d052      	beq.n	8003464 <__kernel_sin+0xcc>
 80033be:	4622      	mov	r2, r4
 80033c0:	462b      	mov	r3, r5
 80033c2:	4620      	mov	r0, r4
 80033c4:	4629      	mov	r1, r5
 80033c6:	f7fd f8bb 	bl	8000540 <__aeabi_dmul>
 80033ca:	4682      	mov	sl, r0
 80033cc:	468b      	mov	fp, r1
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4620      	mov	r0, r4
 80033d4:	4629      	mov	r1, r5
 80033d6:	f7fd f8b3 	bl	8000540 <__aeabi_dmul>
 80033da:	a342      	add	r3, pc, #264	@ (adr r3, 80034e4 <__kernel_sin+0x14c>)
 80033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e0:	e9cd 0100 	strd	r0, r1, [sp]
 80033e4:	4650      	mov	r0, sl
 80033e6:	4659      	mov	r1, fp
 80033e8:	f7fd f8aa 	bl	8000540 <__aeabi_dmul>
 80033ec:	a33f      	add	r3, pc, #252	@ (adr r3, 80034ec <__kernel_sin+0x154>)
 80033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f2:	f7fc feed 	bl	80001d0 <__aeabi_dsub>
 80033f6:	4652      	mov	r2, sl
 80033f8:	465b      	mov	r3, fp
 80033fa:	f7fd f8a1 	bl	8000540 <__aeabi_dmul>
 80033fe:	a33d      	add	r3, pc, #244	@ (adr r3, 80034f4 <__kernel_sin+0x15c>)
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f7fc fee6 	bl	80001d4 <__adddf3>
 8003408:	4652      	mov	r2, sl
 800340a:	465b      	mov	r3, fp
 800340c:	f7fd f898 	bl	8000540 <__aeabi_dmul>
 8003410:	a33a      	add	r3, pc, #232	@ (adr r3, 80034fc <__kernel_sin+0x164>)
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	f7fc fedb 	bl	80001d0 <__aeabi_dsub>
 800341a:	4652      	mov	r2, sl
 800341c:	465b      	mov	r3, fp
 800341e:	f7fd f88f 	bl	8000540 <__aeabi_dmul>
 8003422:	a338      	add	r3, pc, #224	@ (adr r3, 8003504 <__kernel_sin+0x16c>)
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f7fc fed4 	bl	80001d4 <__adddf3>
 800342c:	4606      	mov	r6, r0
 800342e:	460f      	mov	r7, r1
 8003430:	f1b8 0f00 	cmp.w	r8, #0
 8003434:	d11b      	bne.n	800346e <__kernel_sin+0xd6>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4650      	mov	r0, sl
 800343c:	4659      	mov	r1, fp
 800343e:	f7fd f87f 	bl	8000540 <__aeabi_dmul>
 8003442:	a325      	add	r3, pc, #148	@ (adr r3, 80034d8 <__kernel_sin+0x140>)
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f7fc fec2 	bl	80001d0 <__aeabi_dsub>
 800344c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003450:	f7fd f876 	bl	8000540 <__aeabi_dmul>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4620      	mov	r0, r4
 800345a:	4629      	mov	r1, r5
 800345c:	f7fc feba 	bl	80001d4 <__adddf3>
 8003460:	4604      	mov	r4, r0
 8003462:	460d      	mov	r5, r1
 8003464:	ec45 4b10 	vmov	d0, r4, r5
 8003468:	b005      	add	sp, #20
 800346a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800346e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003472:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <__kernel_sin+0x148>)
 8003474:	2200      	movs	r2, #0
 8003476:	f7fd f863 	bl	8000540 <__aeabi_dmul>
 800347a:	4632      	mov	r2, r6
 800347c:	4680      	mov	r8, r0
 800347e:	4689      	mov	r9, r1
 8003480:	463b      	mov	r3, r7
 8003482:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003486:	f7fd f85b 	bl	8000540 <__aeabi_dmul>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4640      	mov	r0, r8
 8003490:	4649      	mov	r1, r9
 8003492:	f7fc fe9d 	bl	80001d0 <__aeabi_dsub>
 8003496:	4652      	mov	r2, sl
 8003498:	465b      	mov	r3, fp
 800349a:	f7fd f851 	bl	8000540 <__aeabi_dmul>
 800349e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80034a2:	f7fc fe95 	bl	80001d0 <__aeabi_dsub>
 80034a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80034d8 <__kernel_sin+0x140>)
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	4606      	mov	r6, r0
 80034ae:	460f      	mov	r7, r1
 80034b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034b4:	f7fd f844 	bl	8000540 <__aeabi_dmul>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4630      	mov	r0, r6
 80034be:	4639      	mov	r1, r7
 80034c0:	f7fc fe88 	bl	80001d4 <__adddf3>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4620      	mov	r0, r4
 80034ca:	4629      	mov	r1, r5
 80034cc:	f7fc fe80 	bl	80001d0 <__aeabi_dsub>
 80034d0:	e7c6      	b.n	8003460 <__kernel_sin+0xc8>
 80034d2:	bf00      	nop
 80034d4:	f3af 8000 	nop.w
 80034d8:	55555549 	.word	0x55555549
 80034dc:	3fc55555 	.word	0x3fc55555
 80034e0:	3fe00000 	.word	0x3fe00000
 80034e4:	5acfd57c 	.word	0x5acfd57c
 80034e8:	3de5d93a 	.word	0x3de5d93a
 80034ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80034f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80034f4:	57b1fe7d 	.word	0x57b1fe7d
 80034f8:	3ec71de3 	.word	0x3ec71de3
 80034fc:	19c161d5 	.word	0x19c161d5
 8003500:	3f2a01a0 	.word	0x3f2a01a0
 8003504:	1110f8a6 	.word	0x1110f8a6
 8003508:	3f811111 	.word	0x3f811111
 800350c:	00000000 	.word	0x00000000

08003510 <__ieee754_rem_pio2>:
 8003510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003514:	ec57 6b10 	vmov	r6, r7, d0
 8003518:	4bc5      	ldr	r3, [pc, #788]	@ (8003830 <__ieee754_rem_pio2+0x320>)
 800351a:	b08d      	sub	sp, #52	@ 0x34
 800351c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003520:	4598      	cmp	r8, r3
 8003522:	4604      	mov	r4, r0
 8003524:	9704      	str	r7, [sp, #16]
 8003526:	d807      	bhi.n	8003538 <__ieee754_rem_pio2+0x28>
 8003528:	2200      	movs	r2, #0
 800352a:	2300      	movs	r3, #0
 800352c:	ed80 0b00 	vstr	d0, [r0]
 8003530:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003534:	2500      	movs	r5, #0
 8003536:	e028      	b.n	800358a <__ieee754_rem_pio2+0x7a>
 8003538:	4bbe      	ldr	r3, [pc, #760]	@ (8003834 <__ieee754_rem_pio2+0x324>)
 800353a:	4598      	cmp	r8, r3
 800353c:	d878      	bhi.n	8003630 <__ieee754_rem_pio2+0x120>
 800353e:	9b04      	ldr	r3, [sp, #16]
 8003540:	4dbd      	ldr	r5, [pc, #756]	@ (8003838 <__ieee754_rem_pio2+0x328>)
 8003542:	2b00      	cmp	r3, #0
 8003544:	4630      	mov	r0, r6
 8003546:	a3ac      	add	r3, pc, #688	@ (adr r3, 80037f8 <__ieee754_rem_pio2+0x2e8>)
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	4639      	mov	r1, r7
 800354e:	dd38      	ble.n	80035c2 <__ieee754_rem_pio2+0xb2>
 8003550:	f7fc fe3e 	bl	80001d0 <__aeabi_dsub>
 8003554:	45a8      	cmp	r8, r5
 8003556:	4606      	mov	r6, r0
 8003558:	460f      	mov	r7, r1
 800355a:	d01a      	beq.n	8003592 <__ieee754_rem_pio2+0x82>
 800355c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003800 <__ieee754_rem_pio2+0x2f0>)
 800355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003562:	f7fc fe35 	bl	80001d0 <__aeabi_dsub>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4680      	mov	r8, r0
 800356c:	4689      	mov	r9, r1
 800356e:	4630      	mov	r0, r6
 8003570:	4639      	mov	r1, r7
 8003572:	f7fc fe2d 	bl	80001d0 <__aeabi_dsub>
 8003576:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003800 <__ieee754_rem_pio2+0x2f0>)
 8003578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357c:	f7fc fe28 	bl	80001d0 <__aeabi_dsub>
 8003580:	e9c4 8900 	strd	r8, r9, [r4]
 8003584:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003588:	2501      	movs	r5, #1
 800358a:	4628      	mov	r0, r5
 800358c:	b00d      	add	sp, #52	@ 0x34
 800358e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003592:	a39d      	add	r3, pc, #628	@ (adr r3, 8003808 <__ieee754_rem_pio2+0x2f8>)
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	f7fc fe1a 	bl	80001d0 <__aeabi_dsub>
 800359c:	a39c      	add	r3, pc, #624	@ (adr r3, 8003810 <__ieee754_rem_pio2+0x300>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	4606      	mov	r6, r0
 80035a4:	460f      	mov	r7, r1
 80035a6:	f7fc fe13 	bl	80001d0 <__aeabi_dsub>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4680      	mov	r8, r0
 80035b0:	4689      	mov	r9, r1
 80035b2:	4630      	mov	r0, r6
 80035b4:	4639      	mov	r1, r7
 80035b6:	f7fc fe0b 	bl	80001d0 <__aeabi_dsub>
 80035ba:	a395      	add	r3, pc, #596	@ (adr r3, 8003810 <__ieee754_rem_pio2+0x300>)
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	e7dc      	b.n	800357c <__ieee754_rem_pio2+0x6c>
 80035c2:	f7fc fe07 	bl	80001d4 <__adddf3>
 80035c6:	45a8      	cmp	r8, r5
 80035c8:	4606      	mov	r6, r0
 80035ca:	460f      	mov	r7, r1
 80035cc:	d018      	beq.n	8003600 <__ieee754_rem_pio2+0xf0>
 80035ce:	a38c      	add	r3, pc, #560	@ (adr r3, 8003800 <__ieee754_rem_pio2+0x2f0>)
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	f7fc fdfe 	bl	80001d4 <__adddf3>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4680      	mov	r8, r0
 80035de:	4689      	mov	r9, r1
 80035e0:	4630      	mov	r0, r6
 80035e2:	4639      	mov	r1, r7
 80035e4:	f7fc fdf4 	bl	80001d0 <__aeabi_dsub>
 80035e8:	a385      	add	r3, pc, #532	@ (adr r3, 8003800 <__ieee754_rem_pio2+0x2f0>)
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f7fc fdf1 	bl	80001d4 <__adddf3>
 80035f2:	f04f 35ff 	mov.w	r5, #4294967295
 80035f6:	e9c4 8900 	strd	r8, r9, [r4]
 80035fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80035fe:	e7c4      	b.n	800358a <__ieee754_rem_pio2+0x7a>
 8003600:	a381      	add	r3, pc, #516	@ (adr r3, 8003808 <__ieee754_rem_pio2+0x2f8>)
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f7fc fde5 	bl	80001d4 <__adddf3>
 800360a:	a381      	add	r3, pc, #516	@ (adr r3, 8003810 <__ieee754_rem_pio2+0x300>)
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	4606      	mov	r6, r0
 8003612:	460f      	mov	r7, r1
 8003614:	f7fc fdde 	bl	80001d4 <__adddf3>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4680      	mov	r8, r0
 800361e:	4689      	mov	r9, r1
 8003620:	4630      	mov	r0, r6
 8003622:	4639      	mov	r1, r7
 8003624:	f7fc fdd4 	bl	80001d0 <__aeabi_dsub>
 8003628:	a379      	add	r3, pc, #484	@ (adr r3, 8003810 <__ieee754_rem_pio2+0x300>)
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	e7de      	b.n	80035ee <__ieee754_rem_pio2+0xde>
 8003630:	4b82      	ldr	r3, [pc, #520]	@ (800383c <__ieee754_rem_pio2+0x32c>)
 8003632:	4598      	cmp	r8, r3
 8003634:	f200 80d1 	bhi.w	80037da <__ieee754_rem_pio2+0x2ca>
 8003638:	f000 f966 	bl	8003908 <fabs>
 800363c:	ec57 6b10 	vmov	r6, r7, d0
 8003640:	a375      	add	r3, pc, #468	@ (adr r3, 8003818 <__ieee754_rem_pio2+0x308>)
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	4630      	mov	r0, r6
 8003648:	4639      	mov	r1, r7
 800364a:	f7fc ff79 	bl	8000540 <__aeabi_dmul>
 800364e:	4b7c      	ldr	r3, [pc, #496]	@ (8003840 <__ieee754_rem_pio2+0x330>)
 8003650:	2200      	movs	r2, #0
 8003652:	f7fc fdbf 	bl	80001d4 <__adddf3>
 8003656:	f7fd fa0d 	bl	8000a74 <__aeabi_d2iz>
 800365a:	4605      	mov	r5, r0
 800365c:	f7fc ff06 	bl	800046c <__aeabi_i2d>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003668:	a363      	add	r3, pc, #396	@ (adr r3, 80037f8 <__ieee754_rem_pio2+0x2e8>)
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	f7fc ff67 	bl	8000540 <__aeabi_dmul>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4630      	mov	r0, r6
 8003678:	4639      	mov	r1, r7
 800367a:	f7fc fda9 	bl	80001d0 <__aeabi_dsub>
 800367e:	a360      	add	r3, pc, #384	@ (adr r3, 8003800 <__ieee754_rem_pio2+0x2f0>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	4682      	mov	sl, r0
 8003686:	468b      	mov	fp, r1
 8003688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800368c:	f7fc ff58 	bl	8000540 <__aeabi_dmul>
 8003690:	2d1f      	cmp	r5, #31
 8003692:	4606      	mov	r6, r0
 8003694:	460f      	mov	r7, r1
 8003696:	dc0c      	bgt.n	80036b2 <__ieee754_rem_pio2+0x1a2>
 8003698:	4b6a      	ldr	r3, [pc, #424]	@ (8003844 <__ieee754_rem_pio2+0x334>)
 800369a:	1e6a      	subs	r2, r5, #1
 800369c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a0:	4543      	cmp	r3, r8
 80036a2:	d006      	beq.n	80036b2 <__ieee754_rem_pio2+0x1a2>
 80036a4:	4632      	mov	r2, r6
 80036a6:	463b      	mov	r3, r7
 80036a8:	4650      	mov	r0, sl
 80036aa:	4659      	mov	r1, fp
 80036ac:	f7fc fd90 	bl	80001d0 <__aeabi_dsub>
 80036b0:	e00e      	b.n	80036d0 <__ieee754_rem_pio2+0x1c0>
 80036b2:	463b      	mov	r3, r7
 80036b4:	4632      	mov	r2, r6
 80036b6:	4650      	mov	r0, sl
 80036b8:	4659      	mov	r1, fp
 80036ba:	f7fc fd89 	bl	80001d0 <__aeabi_dsub>
 80036be:	ea4f 5328 	mov.w	r3, r8, asr #20
 80036c2:	9305      	str	r3, [sp, #20]
 80036c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80036c8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	dc02      	bgt.n	80036d6 <__ieee754_rem_pio2+0x1c6>
 80036d0:	e9c4 0100 	strd	r0, r1, [r4]
 80036d4:	e039      	b.n	800374a <__ieee754_rem_pio2+0x23a>
 80036d6:	a34c      	add	r3, pc, #304	@ (adr r3, 8003808 <__ieee754_rem_pio2+0x2f8>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036e0:	f7fc ff2e 	bl	8000540 <__aeabi_dmul>
 80036e4:	4606      	mov	r6, r0
 80036e6:	460f      	mov	r7, r1
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4650      	mov	r0, sl
 80036ee:	4659      	mov	r1, fp
 80036f0:	f7fc fd6e 	bl	80001d0 <__aeabi_dsub>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4680      	mov	r8, r0
 80036fa:	4689      	mov	r9, r1
 80036fc:	4650      	mov	r0, sl
 80036fe:	4659      	mov	r1, fp
 8003700:	f7fc fd66 	bl	80001d0 <__aeabi_dsub>
 8003704:	4632      	mov	r2, r6
 8003706:	463b      	mov	r3, r7
 8003708:	f7fc fd62 	bl	80001d0 <__aeabi_dsub>
 800370c:	a340      	add	r3, pc, #256	@ (adr r3, 8003810 <__ieee754_rem_pio2+0x300>)
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	4606      	mov	r6, r0
 8003714:	460f      	mov	r7, r1
 8003716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800371a:	f7fc ff11 	bl	8000540 <__aeabi_dmul>
 800371e:	4632      	mov	r2, r6
 8003720:	463b      	mov	r3, r7
 8003722:	f7fc fd55 	bl	80001d0 <__aeabi_dsub>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4606      	mov	r6, r0
 800372c:	460f      	mov	r7, r1
 800372e:	4640      	mov	r0, r8
 8003730:	4649      	mov	r1, r9
 8003732:	f7fc fd4d 	bl	80001d0 <__aeabi_dsub>
 8003736:	9a05      	ldr	r2, [sp, #20]
 8003738:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b31      	cmp	r3, #49	@ 0x31
 8003740:	dc20      	bgt.n	8003784 <__ieee754_rem_pio2+0x274>
 8003742:	e9c4 0100 	strd	r0, r1, [r4]
 8003746:	46c2      	mov	sl, r8
 8003748:	46cb      	mov	fp, r9
 800374a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800374e:	4650      	mov	r0, sl
 8003750:	4642      	mov	r2, r8
 8003752:	464b      	mov	r3, r9
 8003754:	4659      	mov	r1, fp
 8003756:	f7fc fd3b 	bl	80001d0 <__aeabi_dsub>
 800375a:	463b      	mov	r3, r7
 800375c:	4632      	mov	r2, r6
 800375e:	f7fc fd37 	bl	80001d0 <__aeabi_dsub>
 8003762:	9b04      	ldr	r3, [sp, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800376a:	f6bf af0e 	bge.w	800358a <__ieee754_rem_pio2+0x7a>
 800376e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003772:	6063      	str	r3, [r4, #4]
 8003774:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003778:	f8c4 8000 	str.w	r8, [r4]
 800377c:	60a0      	str	r0, [r4, #8]
 800377e:	60e3      	str	r3, [r4, #12]
 8003780:	426d      	negs	r5, r5
 8003782:	e702      	b.n	800358a <__ieee754_rem_pio2+0x7a>
 8003784:	a326      	add	r3, pc, #152	@ (adr r3, 8003820 <__ieee754_rem_pio2+0x310>)
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800378e:	f7fc fed7 	bl	8000540 <__aeabi_dmul>
 8003792:	4606      	mov	r6, r0
 8003794:	460f      	mov	r7, r1
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4640      	mov	r0, r8
 800379c:	4649      	mov	r1, r9
 800379e:	f7fc fd17 	bl	80001d0 <__aeabi_dsub>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4682      	mov	sl, r0
 80037a8:	468b      	mov	fp, r1
 80037aa:	4640      	mov	r0, r8
 80037ac:	4649      	mov	r1, r9
 80037ae:	f7fc fd0f 	bl	80001d0 <__aeabi_dsub>
 80037b2:	4632      	mov	r2, r6
 80037b4:	463b      	mov	r3, r7
 80037b6:	f7fc fd0b 	bl	80001d0 <__aeabi_dsub>
 80037ba:	a31b      	add	r3, pc, #108	@ (adr r3, 8003828 <__ieee754_rem_pio2+0x318>)
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	4606      	mov	r6, r0
 80037c2:	460f      	mov	r7, r1
 80037c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037c8:	f7fc feba 	bl	8000540 <__aeabi_dmul>
 80037cc:	4632      	mov	r2, r6
 80037ce:	463b      	mov	r3, r7
 80037d0:	f7fc fcfe 	bl	80001d0 <__aeabi_dsub>
 80037d4:	4606      	mov	r6, r0
 80037d6:	460f      	mov	r7, r1
 80037d8:	e764      	b.n	80036a4 <__ieee754_rem_pio2+0x194>
 80037da:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <__ieee754_rem_pio2+0x338>)
 80037dc:	4598      	cmp	r8, r3
 80037de:	d935      	bls.n	800384c <__ieee754_rem_pio2+0x33c>
 80037e0:	4632      	mov	r2, r6
 80037e2:	463b      	mov	r3, r7
 80037e4:	4630      	mov	r0, r6
 80037e6:	4639      	mov	r1, r7
 80037e8:	f7fc fcf2 	bl	80001d0 <__aeabi_dsub>
 80037ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80037f0:	e9c4 0100 	strd	r0, r1, [r4]
 80037f4:	e69e      	b.n	8003534 <__ieee754_rem_pio2+0x24>
 80037f6:	bf00      	nop
 80037f8:	54400000 	.word	0x54400000
 80037fc:	3ff921fb 	.word	0x3ff921fb
 8003800:	1a626331 	.word	0x1a626331
 8003804:	3dd0b461 	.word	0x3dd0b461
 8003808:	1a600000 	.word	0x1a600000
 800380c:	3dd0b461 	.word	0x3dd0b461
 8003810:	2e037073 	.word	0x2e037073
 8003814:	3ba3198a 	.word	0x3ba3198a
 8003818:	6dc9c883 	.word	0x6dc9c883
 800381c:	3fe45f30 	.word	0x3fe45f30
 8003820:	2e000000 	.word	0x2e000000
 8003824:	3ba3198a 	.word	0x3ba3198a
 8003828:	252049c1 	.word	0x252049c1
 800382c:	397b839a 	.word	0x397b839a
 8003830:	3fe921fb 	.word	0x3fe921fb
 8003834:	4002d97b 	.word	0x4002d97b
 8003838:	3ff921fb 	.word	0x3ff921fb
 800383c:	413921fb 	.word	0x413921fb
 8003840:	3fe00000 	.word	0x3fe00000
 8003844:	080041e8 	.word	0x080041e8
 8003848:	7fefffff 	.word	0x7fefffff
 800384c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003850:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8003854:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003858:	4630      	mov	r0, r6
 800385a:	460f      	mov	r7, r1
 800385c:	f7fd f90a 	bl	8000a74 <__aeabi_d2iz>
 8003860:	f7fc fe04 	bl	800046c <__aeabi_i2d>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4630      	mov	r0, r6
 800386a:	4639      	mov	r1, r7
 800386c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003870:	f7fc fcae 	bl	80001d0 <__aeabi_dsub>
 8003874:	4b22      	ldr	r3, [pc, #136]	@ (8003900 <__ieee754_rem_pio2+0x3f0>)
 8003876:	2200      	movs	r2, #0
 8003878:	f7fc fe62 	bl	8000540 <__aeabi_dmul>
 800387c:	460f      	mov	r7, r1
 800387e:	4606      	mov	r6, r0
 8003880:	f7fd f8f8 	bl	8000a74 <__aeabi_d2iz>
 8003884:	f7fc fdf2 	bl	800046c <__aeabi_i2d>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4630      	mov	r0, r6
 800388e:	4639      	mov	r1, r7
 8003890:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003894:	f7fc fc9c 	bl	80001d0 <__aeabi_dsub>
 8003898:	4b19      	ldr	r3, [pc, #100]	@ (8003900 <__ieee754_rem_pio2+0x3f0>)
 800389a:	2200      	movs	r2, #0
 800389c:	f7fc fe50 	bl	8000540 <__aeabi_dmul>
 80038a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80038a4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80038a8:	f04f 0803 	mov.w	r8, #3
 80038ac:	2600      	movs	r6, #0
 80038ae:	2700      	movs	r7, #0
 80038b0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80038b4:	4632      	mov	r2, r6
 80038b6:	463b      	mov	r3, r7
 80038b8:	46c2      	mov	sl, r8
 80038ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80038be:	f7fd f8a7 	bl	8000a10 <__aeabi_dcmpeq>
 80038c2:	2800      	cmp	r0, #0
 80038c4:	d1f4      	bne.n	80038b0 <__ieee754_rem_pio2+0x3a0>
 80038c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003904 <__ieee754_rem_pio2+0x3f4>)
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	2302      	movs	r3, #2
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	462a      	mov	r2, r5
 80038d0:	4653      	mov	r3, sl
 80038d2:	4621      	mov	r1, r4
 80038d4:	a806      	add	r0, sp, #24
 80038d6:	f000 f81f 	bl	8003918 <__kernel_rem_pio2>
 80038da:	9b04      	ldr	r3, [sp, #16]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	4605      	mov	r5, r0
 80038e0:	f6bf ae53 	bge.w	800358a <__ieee754_rem_pio2+0x7a>
 80038e4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80038e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80038ec:	e9c4 2300 	strd	r2, r3, [r4]
 80038f0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80038f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80038f8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80038fc:	e740      	b.n	8003780 <__ieee754_rem_pio2+0x270>
 80038fe:	bf00      	nop
 8003900:	41700000 	.word	0x41700000
 8003904:	08004268 	.word	0x08004268

08003908 <fabs>:
 8003908:	ec51 0b10 	vmov	r0, r1, d0
 800390c:	4602      	mov	r2, r0
 800390e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003912:	ec43 2b10 	vmov	d0, r2, r3
 8003916:	4770      	bx	lr

08003918 <__kernel_rem_pio2>:
 8003918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391c:	ed2d 8b02 	vpush	{d8}
 8003920:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003924:	f112 0f14 	cmn.w	r2, #20
 8003928:	9306      	str	r3, [sp, #24]
 800392a:	9104      	str	r1, [sp, #16]
 800392c:	4bbe      	ldr	r3, [pc, #760]	@ (8003c28 <__kernel_rem_pio2+0x310>)
 800392e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8003930:	9008      	str	r0, [sp, #32]
 8003932:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	9b06      	ldr	r3, [sp, #24]
 800393a:	f103 33ff 	add.w	r3, r3, #4294967295
 800393e:	bfa8      	it	ge
 8003940:	1ed4      	subge	r4, r2, #3
 8003942:	9305      	str	r3, [sp, #20]
 8003944:	bfb2      	itee	lt
 8003946:	2400      	movlt	r4, #0
 8003948:	2318      	movge	r3, #24
 800394a:	fb94 f4f3 	sdivge	r4, r4, r3
 800394e:	f06f 0317 	mvn.w	r3, #23
 8003952:	fb04 3303 	mla	r3, r4, r3, r3
 8003956:	eb03 0b02 	add.w	fp, r3, r2
 800395a:	9b00      	ldr	r3, [sp, #0]
 800395c:	9a05      	ldr	r2, [sp, #20]
 800395e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8003c18 <__kernel_rem_pio2+0x300>
 8003962:	eb03 0802 	add.w	r8, r3, r2
 8003966:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003968:	1aa7      	subs	r7, r4, r2
 800396a:	ae20      	add	r6, sp, #128	@ 0x80
 800396c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003970:	2500      	movs	r5, #0
 8003972:	4545      	cmp	r5, r8
 8003974:	dd13      	ble.n	800399e <__kernel_rem_pio2+0x86>
 8003976:	9b06      	ldr	r3, [sp, #24]
 8003978:	aa20      	add	r2, sp, #128	@ 0x80
 800397a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800397e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8003982:	f04f 0800 	mov.w	r8, #0
 8003986:	9b00      	ldr	r3, [sp, #0]
 8003988:	4598      	cmp	r8, r3
 800398a:	dc31      	bgt.n	80039f0 <__kernel_rem_pio2+0xd8>
 800398c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8003c18 <__kernel_rem_pio2+0x300>
 8003990:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003994:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003998:	462f      	mov	r7, r5
 800399a:	2600      	movs	r6, #0
 800399c:	e01b      	b.n	80039d6 <__kernel_rem_pio2+0xbe>
 800399e:	42ef      	cmn	r7, r5
 80039a0:	d407      	bmi.n	80039b2 <__kernel_rem_pio2+0x9a>
 80039a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80039a6:	f7fc fd61 	bl	800046c <__aeabi_i2d>
 80039aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80039ae:	3501      	adds	r5, #1
 80039b0:	e7df      	b.n	8003972 <__kernel_rem_pio2+0x5a>
 80039b2:	ec51 0b18 	vmov	r0, r1, d8
 80039b6:	e7f8      	b.n	80039aa <__kernel_rem_pio2+0x92>
 80039b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80039c0:	f7fc fdbe 	bl	8000540 <__aeabi_dmul>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039cc:	f7fc fc02 	bl	80001d4 <__adddf3>
 80039d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039d4:	3601      	adds	r6, #1
 80039d6:	9b05      	ldr	r3, [sp, #20]
 80039d8:	429e      	cmp	r6, r3
 80039da:	f1a7 0708 	sub.w	r7, r7, #8
 80039de:	ddeb      	ble.n	80039b8 <__kernel_rem_pio2+0xa0>
 80039e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80039e4:	f108 0801 	add.w	r8, r8, #1
 80039e8:	ecaa 7b02 	vstmia	sl!, {d7}
 80039ec:	3508      	adds	r5, #8
 80039ee:	e7ca      	b.n	8003986 <__kernel_rem_pio2+0x6e>
 80039f0:	9b00      	ldr	r3, [sp, #0]
 80039f2:	f8dd 8000 	ldr.w	r8, [sp]
 80039f6:	aa0c      	add	r2, sp, #48	@ 0x30
 80039f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80039fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80039fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003a00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a06:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003a0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a0c:	ab98      	add	r3, sp, #608	@ 0x260
 8003a0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003a12:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8003a16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003a1a:	ac0c      	add	r4, sp, #48	@ 0x30
 8003a1c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003a1e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8003a22:	46a1      	mov	r9, r4
 8003a24:	46c2      	mov	sl, r8
 8003a26:	f1ba 0f00 	cmp.w	sl, #0
 8003a2a:	f1a5 0508 	sub.w	r5, r5, #8
 8003a2e:	dc77      	bgt.n	8003b20 <__kernel_rem_pio2+0x208>
 8003a30:	4658      	mov	r0, fp
 8003a32:	ed9d 0b02 	vldr	d0, [sp, #8]
 8003a36:	f000 fac7 	bl	8003fc8 <scalbn>
 8003a3a:	ec57 6b10 	vmov	r6, r7, d0
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003a44:	4630      	mov	r0, r6
 8003a46:	4639      	mov	r1, r7
 8003a48:	f7fc fd7a 	bl	8000540 <__aeabi_dmul>
 8003a4c:	ec41 0b10 	vmov	d0, r0, r1
 8003a50:	f000 fb3a 	bl	80040c8 <floor>
 8003a54:	4b75      	ldr	r3, [pc, #468]	@ (8003c2c <__kernel_rem_pio2+0x314>)
 8003a56:	ec51 0b10 	vmov	r0, r1, d0
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f7fc fd70 	bl	8000540 <__aeabi_dmul>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4630      	mov	r0, r6
 8003a66:	4639      	mov	r1, r7
 8003a68:	f7fc fbb2 	bl	80001d0 <__aeabi_dsub>
 8003a6c:	460f      	mov	r7, r1
 8003a6e:	4606      	mov	r6, r0
 8003a70:	f7fd f800 	bl	8000a74 <__aeabi_d2iz>
 8003a74:	9002      	str	r0, [sp, #8]
 8003a76:	f7fc fcf9 	bl	800046c <__aeabi_i2d>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4630      	mov	r0, r6
 8003a80:	4639      	mov	r1, r7
 8003a82:	f7fc fba5 	bl	80001d0 <__aeabi_dsub>
 8003a86:	f1bb 0f00 	cmp.w	fp, #0
 8003a8a:	4606      	mov	r6, r0
 8003a8c:	460f      	mov	r7, r1
 8003a8e:	dd6c      	ble.n	8003b6a <__kernel_rem_pio2+0x252>
 8003a90:	f108 31ff 	add.w	r1, r8, #4294967295
 8003a94:	ab0c      	add	r3, sp, #48	@ 0x30
 8003a96:	9d02      	ldr	r5, [sp, #8]
 8003a98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a9c:	f1cb 0018 	rsb	r0, fp, #24
 8003aa0:	fa43 f200 	asr.w	r2, r3, r0
 8003aa4:	4415      	add	r5, r2
 8003aa6:	4082      	lsls	r2, r0
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	aa0c      	add	r2, sp, #48	@ 0x30
 8003aac:	9502      	str	r5, [sp, #8]
 8003aae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003ab2:	f1cb 0217 	rsb	r2, fp, #23
 8003ab6:	fa43 f902 	asr.w	r9, r3, r2
 8003aba:	f1b9 0f00 	cmp.w	r9, #0
 8003abe:	dd64      	ble.n	8003b8a <__kernel_rem_pio2+0x272>
 8003ac0:	9b02      	ldr	r3, [sp, #8]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	9302      	str	r3, [sp, #8]
 8003ac8:	4615      	mov	r5, r2
 8003aca:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8003ace:	4590      	cmp	r8, r2
 8003ad0:	f300 80b8 	bgt.w	8003c44 <__kernel_rem_pio2+0x32c>
 8003ad4:	f1bb 0f00 	cmp.w	fp, #0
 8003ad8:	dd07      	ble.n	8003aea <__kernel_rem_pio2+0x1d2>
 8003ada:	f1bb 0f01 	cmp.w	fp, #1
 8003ade:	f000 80bf 	beq.w	8003c60 <__kernel_rem_pio2+0x348>
 8003ae2:	f1bb 0f02 	cmp.w	fp, #2
 8003ae6:	f000 80c6 	beq.w	8003c76 <__kernel_rem_pio2+0x35e>
 8003aea:	f1b9 0f02 	cmp.w	r9, #2
 8003aee:	d14c      	bne.n	8003b8a <__kernel_rem_pio2+0x272>
 8003af0:	4632      	mov	r2, r6
 8003af2:	463b      	mov	r3, r7
 8003af4:	494e      	ldr	r1, [pc, #312]	@ (8003c30 <__kernel_rem_pio2+0x318>)
 8003af6:	2000      	movs	r0, #0
 8003af8:	f7fc fb6a 	bl	80001d0 <__aeabi_dsub>
 8003afc:	4606      	mov	r6, r0
 8003afe:	460f      	mov	r7, r1
 8003b00:	2d00      	cmp	r5, #0
 8003b02:	d042      	beq.n	8003b8a <__kernel_rem_pio2+0x272>
 8003b04:	4658      	mov	r0, fp
 8003b06:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8003c20 <__kernel_rem_pio2+0x308>
 8003b0a:	f000 fa5d 	bl	8003fc8 <scalbn>
 8003b0e:	4630      	mov	r0, r6
 8003b10:	4639      	mov	r1, r7
 8003b12:	ec53 2b10 	vmov	r2, r3, d0
 8003b16:	f7fc fb5b 	bl	80001d0 <__aeabi_dsub>
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	460f      	mov	r7, r1
 8003b1e:	e034      	b.n	8003b8a <__kernel_rem_pio2+0x272>
 8003b20:	4b44      	ldr	r3, [pc, #272]	@ (8003c34 <__kernel_rem_pio2+0x31c>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b28:	f7fc fd0a 	bl	8000540 <__aeabi_dmul>
 8003b2c:	f7fc ffa2 	bl	8000a74 <__aeabi_d2iz>
 8003b30:	f7fc fc9c 	bl	800046c <__aeabi_i2d>
 8003b34:	4b40      	ldr	r3, [pc, #256]	@ (8003c38 <__kernel_rem_pio2+0x320>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	4606      	mov	r6, r0
 8003b3a:	460f      	mov	r7, r1
 8003b3c:	f7fc fd00 	bl	8000540 <__aeabi_dmul>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b48:	f7fc fb42 	bl	80001d0 <__aeabi_dsub>
 8003b4c:	f7fc ff92 	bl	8000a74 <__aeabi_d2iz>
 8003b50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003b54:	f849 0b04 	str.w	r0, [r9], #4
 8003b58:	4639      	mov	r1, r7
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f7fc fb3a 	bl	80001d4 <__adddf3>
 8003b60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b68:	e75d      	b.n	8003a26 <__kernel_rem_pio2+0x10e>
 8003b6a:	d107      	bne.n	8003b7c <__kernel_rem_pio2+0x264>
 8003b6c:	f108 33ff 	add.w	r3, r8, #4294967295
 8003b70:	aa0c      	add	r2, sp, #48	@ 0x30
 8003b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b76:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8003b7a:	e79e      	b.n	8003aba <__kernel_rem_pio2+0x1a2>
 8003b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8003c3c <__kernel_rem_pio2+0x324>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f7fc ff64 	bl	8000a4c <__aeabi_dcmpge>
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d143      	bne.n	8003c10 <__kernel_rem_pio2+0x2f8>
 8003b88:	4681      	mov	r9, r0
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	4630      	mov	r0, r6
 8003b90:	4639      	mov	r1, r7
 8003b92:	f7fc ff3d 	bl	8000a10 <__aeabi_dcmpeq>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	f000 80bf 	beq.w	8003d1a <__kernel_rem_pio2+0x402>
 8003b9c:	f108 33ff 	add.w	r3, r8, #4294967295
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	9900      	ldr	r1, [sp, #0]
 8003ba4:	428b      	cmp	r3, r1
 8003ba6:	da6e      	bge.n	8003c86 <__kernel_rem_pio2+0x36e>
 8003ba8:	2a00      	cmp	r2, #0
 8003baa:	f000 8089 	beq.w	8003cc0 <__kernel_rem_pio2+0x3a8>
 8003bae:	f108 38ff 	add.w	r8, r8, #4294967295
 8003bb2:	ab0c      	add	r3, sp, #48	@ 0x30
 8003bb4:	f1ab 0b18 	sub.w	fp, fp, #24
 8003bb8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f6      	beq.n	8003bae <__kernel_rem_pio2+0x296>
 8003bc0:	4658      	mov	r0, fp
 8003bc2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8003c20 <__kernel_rem_pio2+0x308>
 8003bc6:	f000 f9ff 	bl	8003fc8 <scalbn>
 8003bca:	f108 0301 	add.w	r3, r8, #1
 8003bce:	00da      	lsls	r2, r3, #3
 8003bd0:	9205      	str	r2, [sp, #20]
 8003bd2:	ec55 4b10 	vmov	r4, r5, d0
 8003bd6:	aa70      	add	r2, sp, #448	@ 0x1c0
 8003bd8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8003c34 <__kernel_rem_pio2+0x31c>
 8003bdc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8003be0:	4646      	mov	r6, r8
 8003be2:	f04f 0a00 	mov.w	sl, #0
 8003be6:	2e00      	cmp	r6, #0
 8003be8:	f280 80cf 	bge.w	8003d8a <__kernel_rem_pio2+0x472>
 8003bec:	4644      	mov	r4, r8
 8003bee:	2c00      	cmp	r4, #0
 8003bf0:	f2c0 80fd 	blt.w	8003dee <__kernel_rem_pio2+0x4d6>
 8003bf4:	4b12      	ldr	r3, [pc, #72]	@ (8003c40 <__kernel_rem_pio2+0x328>)
 8003bf6:	461f      	mov	r7, r3
 8003bf8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003bfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003bfe:	9306      	str	r3, [sp, #24]
 8003c00:	f04f 0a00 	mov.w	sl, #0
 8003c04:	f04f 0b00 	mov.w	fp, #0
 8003c08:	2600      	movs	r6, #0
 8003c0a:	eba8 0504 	sub.w	r5, r8, r4
 8003c0e:	e0e2      	b.n	8003dd6 <__kernel_rem_pio2+0x4be>
 8003c10:	f04f 0902 	mov.w	r9, #2
 8003c14:	e754      	b.n	8003ac0 <__kernel_rem_pio2+0x1a8>
 8003c16:	bf00      	nop
	...
 8003c24:	3ff00000 	.word	0x3ff00000
 8003c28:	080043b0 	.word	0x080043b0
 8003c2c:	40200000 	.word	0x40200000
 8003c30:	3ff00000 	.word	0x3ff00000
 8003c34:	3e700000 	.word	0x3e700000
 8003c38:	41700000 	.word	0x41700000
 8003c3c:	3fe00000 	.word	0x3fe00000
 8003c40:	08004370 	.word	0x08004370
 8003c44:	f854 3b04 	ldr.w	r3, [r4], #4
 8003c48:	b945      	cbnz	r5, 8003c5c <__kernel_rem_pio2+0x344>
 8003c4a:	b123      	cbz	r3, 8003c56 <__kernel_rem_pio2+0x33e>
 8003c4c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8003c50:	f844 3c04 	str.w	r3, [r4, #-4]
 8003c54:	2301      	movs	r3, #1
 8003c56:	3201      	adds	r2, #1
 8003c58:	461d      	mov	r5, r3
 8003c5a:	e738      	b.n	8003ace <__kernel_rem_pio2+0x1b6>
 8003c5c:	1acb      	subs	r3, r1, r3
 8003c5e:	e7f7      	b.n	8003c50 <__kernel_rem_pio2+0x338>
 8003c60:	f108 32ff 	add.w	r2, r8, #4294967295
 8003c64:	ab0c      	add	r3, sp, #48	@ 0x30
 8003c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c6a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003c6e:	a90c      	add	r1, sp, #48	@ 0x30
 8003c70:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003c74:	e739      	b.n	8003aea <__kernel_rem_pio2+0x1d2>
 8003c76:	f108 32ff 	add.w	r2, r8, #4294967295
 8003c7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8003c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003c84:	e7f3      	b.n	8003c6e <__kernel_rem_pio2+0x356>
 8003c86:	a90c      	add	r1, sp, #48	@ 0x30
 8003c88:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	e787      	b.n	8003ba2 <__kernel_rem_pio2+0x28a>
 8003c92:	3401      	adds	r4, #1
 8003c94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003c98:	2a00      	cmp	r2, #0
 8003c9a:	d0fa      	beq.n	8003c92 <__kernel_rem_pio2+0x37a>
 8003c9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003c9e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003ca2:	eb0d 0503 	add.w	r5, sp, r3
 8003ca6:	9b06      	ldr	r3, [sp, #24]
 8003ca8:	aa20      	add	r2, sp, #128	@ 0x80
 8003caa:	4443      	add	r3, r8
 8003cac:	f108 0701 	add.w	r7, r8, #1
 8003cb0:	3d98      	subs	r5, #152	@ 0x98
 8003cb2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8003cb6:	4444      	add	r4, r8
 8003cb8:	42bc      	cmp	r4, r7
 8003cba:	da04      	bge.n	8003cc6 <__kernel_rem_pio2+0x3ae>
 8003cbc:	46a0      	mov	r8, r4
 8003cbe:	e6a2      	b.n	8003a06 <__kernel_rem_pio2+0xee>
 8003cc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003cc2:	2401      	movs	r4, #1
 8003cc4:	e7e6      	b.n	8003c94 <__kernel_rem_pio2+0x37c>
 8003cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cc8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8003ccc:	f7fc fbce 	bl	800046c <__aeabi_i2d>
 8003cd0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8003f98 <__kernel_rem_pio2+0x680>
 8003cd4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003cd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003cdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ce0:	46b2      	mov	sl, r6
 8003ce2:	f04f 0800 	mov.w	r8, #0
 8003ce6:	9b05      	ldr	r3, [sp, #20]
 8003ce8:	4598      	cmp	r8, r3
 8003cea:	dd05      	ble.n	8003cf8 <__kernel_rem_pio2+0x3e0>
 8003cec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003cf0:	3701      	adds	r7, #1
 8003cf2:	eca5 7b02 	vstmia	r5!, {d7}
 8003cf6:	e7df      	b.n	8003cb8 <__kernel_rem_pio2+0x3a0>
 8003cf8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8003cfc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003d00:	f7fc fc1e 	bl	8000540 <__aeabi_dmul>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d0c:	f7fc fa62 	bl	80001d4 <__adddf3>
 8003d10:	f108 0801 	add.w	r8, r8, #1
 8003d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d18:	e7e5      	b.n	8003ce6 <__kernel_rem_pio2+0x3ce>
 8003d1a:	f1cb 0000 	rsb	r0, fp, #0
 8003d1e:	ec47 6b10 	vmov	d0, r6, r7
 8003d22:	f000 f951 	bl	8003fc8 <scalbn>
 8003d26:	ec55 4b10 	vmov	r4, r5, d0
 8003d2a:	4b9d      	ldr	r3, [pc, #628]	@ (8003fa0 <__kernel_rem_pio2+0x688>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4620      	mov	r0, r4
 8003d30:	4629      	mov	r1, r5
 8003d32:	f7fc fe8b 	bl	8000a4c <__aeabi_dcmpge>
 8003d36:	b300      	cbz	r0, 8003d7a <__kernel_rem_pio2+0x462>
 8003d38:	4b9a      	ldr	r3, [pc, #616]	@ (8003fa4 <__kernel_rem_pio2+0x68c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	4629      	mov	r1, r5
 8003d40:	f7fc fbfe 	bl	8000540 <__aeabi_dmul>
 8003d44:	f7fc fe96 	bl	8000a74 <__aeabi_d2iz>
 8003d48:	4606      	mov	r6, r0
 8003d4a:	f7fc fb8f 	bl	800046c <__aeabi_i2d>
 8003d4e:	4b94      	ldr	r3, [pc, #592]	@ (8003fa0 <__kernel_rem_pio2+0x688>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	f7fc fbf5 	bl	8000540 <__aeabi_dmul>
 8003d56:	460b      	mov	r3, r1
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	f7fc fa37 	bl	80001d0 <__aeabi_dsub>
 8003d62:	f7fc fe87 	bl	8000a74 <__aeabi_d2iz>
 8003d66:	ab0c      	add	r3, sp, #48	@ 0x30
 8003d68:	f10b 0b18 	add.w	fp, fp, #24
 8003d6c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8003d70:	f108 0801 	add.w	r8, r8, #1
 8003d74:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8003d78:	e722      	b.n	8003bc0 <__kernel_rem_pio2+0x2a8>
 8003d7a:	4620      	mov	r0, r4
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	f7fc fe79 	bl	8000a74 <__aeabi_d2iz>
 8003d82:	ab0c      	add	r3, sp, #48	@ 0x30
 8003d84:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8003d88:	e71a      	b.n	8003bc0 <__kernel_rem_pio2+0x2a8>
 8003d8a:	ab0c      	add	r3, sp, #48	@ 0x30
 8003d8c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003d90:	f7fc fb6c 	bl	800046c <__aeabi_i2d>
 8003d94:	4622      	mov	r2, r4
 8003d96:	462b      	mov	r3, r5
 8003d98:	f7fc fbd2 	bl	8000540 <__aeabi_dmul>
 8003d9c:	4652      	mov	r2, sl
 8003d9e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8003da2:	465b      	mov	r3, fp
 8003da4:	4620      	mov	r0, r4
 8003da6:	4629      	mov	r1, r5
 8003da8:	f7fc fbca 	bl	8000540 <__aeabi_dmul>
 8003dac:	3e01      	subs	r6, #1
 8003dae:	4604      	mov	r4, r0
 8003db0:	460d      	mov	r5, r1
 8003db2:	e718      	b.n	8003be6 <__kernel_rem_pio2+0x2ce>
 8003db4:	9906      	ldr	r1, [sp, #24]
 8003db6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8003dba:	9106      	str	r1, [sp, #24]
 8003dbc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8003dc0:	f7fc fbbe 	bl	8000540 <__aeabi_dmul>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4650      	mov	r0, sl
 8003dca:	4659      	mov	r1, fp
 8003dcc:	f7fc fa02 	bl	80001d4 <__adddf3>
 8003dd0:	3601      	adds	r6, #1
 8003dd2:	4682      	mov	sl, r0
 8003dd4:	468b      	mov	fp, r1
 8003dd6:	9b00      	ldr	r3, [sp, #0]
 8003dd8:	429e      	cmp	r6, r3
 8003dda:	dc01      	bgt.n	8003de0 <__kernel_rem_pio2+0x4c8>
 8003ddc:	42b5      	cmp	r5, r6
 8003dde:	dae9      	bge.n	8003db4 <__kernel_rem_pio2+0x49c>
 8003de0:	ab48      	add	r3, sp, #288	@ 0x120
 8003de2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003de6:	e9c5 ab00 	strd	sl, fp, [r5]
 8003dea:	3c01      	subs	r4, #1
 8003dec:	e6ff      	b.n	8003bee <__kernel_rem_pio2+0x2d6>
 8003dee:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	dc0b      	bgt.n	8003e0c <__kernel_rem_pio2+0x4f4>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	dc39      	bgt.n	8003e6c <__kernel_rem_pio2+0x554>
 8003df8:	d05d      	beq.n	8003eb6 <__kernel_rem_pio2+0x59e>
 8003dfa:	9b02      	ldr	r3, [sp, #8]
 8003dfc:	f003 0007 	and.w	r0, r3, #7
 8003e00:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8003e04:	ecbd 8b02 	vpop	{d8}
 8003e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d1f3      	bne.n	8003dfa <__kernel_rem_pio2+0x4e2>
 8003e12:	9b05      	ldr	r3, [sp, #20]
 8003e14:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003e18:	eb0d 0403 	add.w	r4, sp, r3
 8003e1c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8003e20:	4625      	mov	r5, r4
 8003e22:	46c2      	mov	sl, r8
 8003e24:	f1ba 0f00 	cmp.w	sl, #0
 8003e28:	f1a5 0508 	sub.w	r5, r5, #8
 8003e2c:	dc6b      	bgt.n	8003f06 <__kernel_rem_pio2+0x5ee>
 8003e2e:	4645      	mov	r5, r8
 8003e30:	2d01      	cmp	r5, #1
 8003e32:	f1a4 0408 	sub.w	r4, r4, #8
 8003e36:	f300 8087 	bgt.w	8003f48 <__kernel_rem_pio2+0x630>
 8003e3a:	9c05      	ldr	r4, [sp, #20]
 8003e3c:	ab48      	add	r3, sp, #288	@ 0x120
 8003e3e:	441c      	add	r4, r3
 8003e40:	2000      	movs	r0, #0
 8003e42:	2100      	movs	r1, #0
 8003e44:	f1b8 0f01 	cmp.w	r8, #1
 8003e48:	f300 809c 	bgt.w	8003f84 <__kernel_rem_pio2+0x66c>
 8003e4c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8003e50:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8003e54:	f1b9 0f00 	cmp.w	r9, #0
 8003e58:	f040 80a6 	bne.w	8003fa8 <__kernel_rem_pio2+0x690>
 8003e5c:	9b04      	ldr	r3, [sp, #16]
 8003e5e:	e9c3 7800 	strd	r7, r8, [r3]
 8003e62:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003e66:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003e6a:	e7c6      	b.n	8003dfa <__kernel_rem_pio2+0x4e2>
 8003e6c:	9d05      	ldr	r5, [sp, #20]
 8003e6e:	ab48      	add	r3, sp, #288	@ 0x120
 8003e70:	441d      	add	r5, r3
 8003e72:	4644      	mov	r4, r8
 8003e74:	2000      	movs	r0, #0
 8003e76:	2100      	movs	r1, #0
 8003e78:	2c00      	cmp	r4, #0
 8003e7a:	da35      	bge.n	8003ee8 <__kernel_rem_pio2+0x5d0>
 8003e7c:	f1b9 0f00 	cmp.w	r9, #0
 8003e80:	d038      	beq.n	8003ef4 <__kernel_rem_pio2+0x5dc>
 8003e82:	4602      	mov	r2, r0
 8003e84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003e88:	9c04      	ldr	r4, [sp, #16]
 8003e8a:	e9c4 2300 	strd	r2, r3, [r4]
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8003e96:	f7fc f99b 	bl	80001d0 <__aeabi_dsub>
 8003e9a:	ad4a      	add	r5, sp, #296	@ 0x128
 8003e9c:	2401      	movs	r4, #1
 8003e9e:	45a0      	cmp	r8, r4
 8003ea0:	da2b      	bge.n	8003efa <__kernel_rem_pio2+0x5e2>
 8003ea2:	f1b9 0f00 	cmp.w	r9, #0
 8003ea6:	d002      	beq.n	8003eae <__kernel_rem_pio2+0x596>
 8003ea8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003eac:	4619      	mov	r1, r3
 8003eae:	9b04      	ldr	r3, [sp, #16]
 8003eb0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003eb4:	e7a1      	b.n	8003dfa <__kernel_rem_pio2+0x4e2>
 8003eb6:	9c05      	ldr	r4, [sp, #20]
 8003eb8:	ab48      	add	r3, sp, #288	@ 0x120
 8003eba:	441c      	add	r4, r3
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	f1b8 0f00 	cmp.w	r8, #0
 8003ec4:	da09      	bge.n	8003eda <__kernel_rem_pio2+0x5c2>
 8003ec6:	f1b9 0f00 	cmp.w	r9, #0
 8003eca:	d002      	beq.n	8003ed2 <__kernel_rem_pio2+0x5ba>
 8003ecc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	9b04      	ldr	r3, [sp, #16]
 8003ed4:	e9c3 0100 	strd	r0, r1, [r3]
 8003ed8:	e78f      	b.n	8003dfa <__kernel_rem_pio2+0x4e2>
 8003eda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003ede:	f7fc f979 	bl	80001d4 <__adddf3>
 8003ee2:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ee6:	e7eb      	b.n	8003ec0 <__kernel_rem_pio2+0x5a8>
 8003ee8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003eec:	f7fc f972 	bl	80001d4 <__adddf3>
 8003ef0:	3c01      	subs	r4, #1
 8003ef2:	e7c1      	b.n	8003e78 <__kernel_rem_pio2+0x560>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	e7c6      	b.n	8003e88 <__kernel_rem_pio2+0x570>
 8003efa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8003efe:	f7fc f969 	bl	80001d4 <__adddf3>
 8003f02:	3401      	adds	r4, #1
 8003f04:	e7cb      	b.n	8003e9e <__kernel_rem_pio2+0x586>
 8003f06:	ed95 7b00 	vldr	d7, [r5]
 8003f0a:	ed8d 7b00 	vstr	d7, [sp]
 8003f0e:	ed95 7b02 	vldr	d7, [r5, #8]
 8003f12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f16:	ec53 2b17 	vmov	r2, r3, d7
 8003f1a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003f1e:	f7fc f959 	bl	80001d4 <__adddf3>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4606      	mov	r6, r0
 8003f28:	460f      	mov	r7, r1
 8003f2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f2e:	f7fc f94f 	bl	80001d0 <__aeabi_dsub>
 8003f32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f36:	f7fc f94d 	bl	80001d4 <__adddf3>
 8003f3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f3e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8003f42:	e9c5 6700 	strd	r6, r7, [r5]
 8003f46:	e76d      	b.n	8003e24 <__kernel_rem_pio2+0x50c>
 8003f48:	ed94 7b00 	vldr	d7, [r4]
 8003f4c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8003f50:	ec51 0b17 	vmov	r0, r1, d7
 8003f54:	4652      	mov	r2, sl
 8003f56:	465b      	mov	r3, fp
 8003f58:	ed8d 7b00 	vstr	d7, [sp]
 8003f5c:	f7fc f93a 	bl	80001d4 <__adddf3>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4606      	mov	r6, r0
 8003f66:	460f      	mov	r7, r1
 8003f68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f6c:	f7fc f930 	bl	80001d0 <__aeabi_dsub>
 8003f70:	4652      	mov	r2, sl
 8003f72:	465b      	mov	r3, fp
 8003f74:	f7fc f92e 	bl	80001d4 <__adddf3>
 8003f78:	3d01      	subs	r5, #1
 8003f7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003f7e:	e9c4 6700 	strd	r6, r7, [r4]
 8003f82:	e755      	b.n	8003e30 <__kernel_rem_pio2+0x518>
 8003f84:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003f88:	f7fc f924 	bl	80001d4 <__adddf3>
 8003f8c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f90:	e758      	b.n	8003e44 <__kernel_rem_pio2+0x52c>
 8003f92:	bf00      	nop
 8003f94:	f3af 8000 	nop.w
	...
 8003fa0:	41700000 	.word	0x41700000
 8003fa4:	3e700000 	.word	0x3e700000
 8003fa8:	9b04      	ldr	r3, [sp, #16]
 8003faa:	9a04      	ldr	r2, [sp, #16]
 8003fac:	601f      	str	r7, [r3, #0]
 8003fae:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8003fb2:	605c      	str	r4, [r3, #4]
 8003fb4:	609d      	str	r5, [r3, #8]
 8003fb6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003fba:	60d3      	str	r3, [r2, #12]
 8003fbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003fc0:	6110      	str	r0, [r2, #16]
 8003fc2:	6153      	str	r3, [r2, #20]
 8003fc4:	e719      	b.n	8003dfa <__kernel_rem_pio2+0x4e2>
 8003fc6:	bf00      	nop

08003fc8 <scalbn>:
 8003fc8:	b570      	push	{r4, r5, r6, lr}
 8003fca:	ec55 4b10 	vmov	r4, r5, d0
 8003fce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8003fd2:	4606      	mov	r6, r0
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	b991      	cbnz	r1, 8003ffe <scalbn+0x36>
 8003fd8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003fdc:	4323      	orrs	r3, r4
 8003fde:	d03d      	beq.n	800405c <scalbn+0x94>
 8003fe0:	4b35      	ldr	r3, [pc, #212]	@ (80040b8 <scalbn+0xf0>)
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f7fc faaa 	bl	8000540 <__aeabi_dmul>
 8003fec:	4b33      	ldr	r3, [pc, #204]	@ (80040bc <scalbn+0xf4>)
 8003fee:	429e      	cmp	r6, r3
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	460d      	mov	r5, r1
 8003ff4:	da0f      	bge.n	8004016 <scalbn+0x4e>
 8003ff6:	a328      	add	r3, pc, #160	@ (adr r3, 8004098 <scalbn+0xd0>)
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	e01e      	b.n	800403c <scalbn+0x74>
 8003ffe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004002:	4291      	cmp	r1, r2
 8004004:	d10b      	bne.n	800401e <scalbn+0x56>
 8004006:	4622      	mov	r2, r4
 8004008:	4620      	mov	r0, r4
 800400a:	4629      	mov	r1, r5
 800400c:	f7fc f8e2 	bl	80001d4 <__adddf3>
 8004010:	4604      	mov	r4, r0
 8004012:	460d      	mov	r5, r1
 8004014:	e022      	b.n	800405c <scalbn+0x94>
 8004016:	460b      	mov	r3, r1
 8004018:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800401c:	3936      	subs	r1, #54	@ 0x36
 800401e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004022:	4296      	cmp	r6, r2
 8004024:	dd0d      	ble.n	8004042 <scalbn+0x7a>
 8004026:	2d00      	cmp	r5, #0
 8004028:	a11d      	add	r1, pc, #116	@ (adr r1, 80040a0 <scalbn+0xd8>)
 800402a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800402e:	da02      	bge.n	8004036 <scalbn+0x6e>
 8004030:	a11d      	add	r1, pc, #116	@ (adr r1, 80040a8 <scalbn+0xe0>)
 8004032:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004036:	a31a      	add	r3, pc, #104	@ (adr r3, 80040a0 <scalbn+0xd8>)
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f7fc fa80 	bl	8000540 <__aeabi_dmul>
 8004040:	e7e6      	b.n	8004010 <scalbn+0x48>
 8004042:	1872      	adds	r2, r6, r1
 8004044:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004048:	428a      	cmp	r2, r1
 800404a:	dcec      	bgt.n	8004026 <scalbn+0x5e>
 800404c:	2a00      	cmp	r2, #0
 800404e:	dd08      	ble.n	8004062 <scalbn+0x9a>
 8004050:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004054:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004058:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800405c:	ec45 4b10 	vmov	d0, r4, r5
 8004060:	bd70      	pop	{r4, r5, r6, pc}
 8004062:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004066:	da08      	bge.n	800407a <scalbn+0xb2>
 8004068:	2d00      	cmp	r5, #0
 800406a:	a10b      	add	r1, pc, #44	@ (adr r1, 8004098 <scalbn+0xd0>)
 800406c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004070:	dac1      	bge.n	8003ff6 <scalbn+0x2e>
 8004072:	a10f      	add	r1, pc, #60	@ (adr r1, 80040b0 <scalbn+0xe8>)
 8004074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004078:	e7bd      	b.n	8003ff6 <scalbn+0x2e>
 800407a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800407e:	3236      	adds	r2, #54	@ 0x36
 8004080:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004084:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004088:	4620      	mov	r0, r4
 800408a:	4b0d      	ldr	r3, [pc, #52]	@ (80040c0 <scalbn+0xf8>)
 800408c:	4629      	mov	r1, r5
 800408e:	2200      	movs	r2, #0
 8004090:	e7d4      	b.n	800403c <scalbn+0x74>
 8004092:	bf00      	nop
 8004094:	f3af 8000 	nop.w
 8004098:	c2f8f359 	.word	0xc2f8f359
 800409c:	01a56e1f 	.word	0x01a56e1f
 80040a0:	8800759c 	.word	0x8800759c
 80040a4:	7e37e43c 	.word	0x7e37e43c
 80040a8:	8800759c 	.word	0x8800759c
 80040ac:	fe37e43c 	.word	0xfe37e43c
 80040b0:	c2f8f359 	.word	0xc2f8f359
 80040b4:	81a56e1f 	.word	0x81a56e1f
 80040b8:	43500000 	.word	0x43500000
 80040bc:	ffff3cb0 	.word	0xffff3cb0
 80040c0:	3c900000 	.word	0x3c900000
 80040c4:	00000000 	.word	0x00000000

080040c8 <floor>:
 80040c8:	ec51 0b10 	vmov	r0, r1, d0
 80040cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80040d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80040d8:	2e13      	cmp	r6, #19
 80040da:	460c      	mov	r4, r1
 80040dc:	4605      	mov	r5, r0
 80040de:	4680      	mov	r8, r0
 80040e0:	dc34      	bgt.n	800414c <floor+0x84>
 80040e2:	2e00      	cmp	r6, #0
 80040e4:	da17      	bge.n	8004116 <floor+0x4e>
 80040e6:	a332      	add	r3, pc, #200	@ (adr r3, 80041b0 <floor+0xe8>)
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f7fc f872 	bl	80001d4 <__adddf3>
 80040f0:	2200      	movs	r2, #0
 80040f2:	2300      	movs	r3, #0
 80040f4:	f7fc fcb4 	bl	8000a60 <__aeabi_dcmpgt>
 80040f8:	b150      	cbz	r0, 8004110 <floor+0x48>
 80040fa:	2c00      	cmp	r4, #0
 80040fc:	da55      	bge.n	80041aa <floor+0xe2>
 80040fe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004102:	432c      	orrs	r4, r5
 8004104:	2500      	movs	r5, #0
 8004106:	42ac      	cmp	r4, r5
 8004108:	4c2b      	ldr	r4, [pc, #172]	@ (80041b8 <floor+0xf0>)
 800410a:	bf08      	it	eq
 800410c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004110:	4621      	mov	r1, r4
 8004112:	4628      	mov	r0, r5
 8004114:	e023      	b.n	800415e <floor+0x96>
 8004116:	4f29      	ldr	r7, [pc, #164]	@ (80041bc <floor+0xf4>)
 8004118:	4137      	asrs	r7, r6
 800411a:	ea01 0307 	and.w	r3, r1, r7
 800411e:	4303      	orrs	r3, r0
 8004120:	d01d      	beq.n	800415e <floor+0x96>
 8004122:	a323      	add	r3, pc, #140	@ (adr r3, 80041b0 <floor+0xe8>)
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f7fc f854 	bl	80001d4 <__adddf3>
 800412c:	2200      	movs	r2, #0
 800412e:	2300      	movs	r3, #0
 8004130:	f7fc fc96 	bl	8000a60 <__aeabi_dcmpgt>
 8004134:	2800      	cmp	r0, #0
 8004136:	d0eb      	beq.n	8004110 <floor+0x48>
 8004138:	2c00      	cmp	r4, #0
 800413a:	bfbe      	ittt	lt
 800413c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004140:	4133      	asrlt	r3, r6
 8004142:	18e4      	addlt	r4, r4, r3
 8004144:	ea24 0407 	bic.w	r4, r4, r7
 8004148:	2500      	movs	r5, #0
 800414a:	e7e1      	b.n	8004110 <floor+0x48>
 800414c:	2e33      	cmp	r6, #51	@ 0x33
 800414e:	dd0a      	ble.n	8004166 <floor+0x9e>
 8004150:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004154:	d103      	bne.n	800415e <floor+0x96>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	f7fc f83b 	bl	80001d4 <__adddf3>
 800415e:	ec41 0b10 	vmov	d0, r0, r1
 8004162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004166:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800416a:	f04f 37ff 	mov.w	r7, #4294967295
 800416e:	40df      	lsrs	r7, r3
 8004170:	4207      	tst	r7, r0
 8004172:	d0f4      	beq.n	800415e <floor+0x96>
 8004174:	a30e      	add	r3, pc, #56	@ (adr r3, 80041b0 <floor+0xe8>)
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f7fc f82b 	bl	80001d4 <__adddf3>
 800417e:	2200      	movs	r2, #0
 8004180:	2300      	movs	r3, #0
 8004182:	f7fc fc6d 	bl	8000a60 <__aeabi_dcmpgt>
 8004186:	2800      	cmp	r0, #0
 8004188:	d0c2      	beq.n	8004110 <floor+0x48>
 800418a:	2c00      	cmp	r4, #0
 800418c:	da0a      	bge.n	80041a4 <floor+0xdc>
 800418e:	2e14      	cmp	r6, #20
 8004190:	d101      	bne.n	8004196 <floor+0xce>
 8004192:	3401      	adds	r4, #1
 8004194:	e006      	b.n	80041a4 <floor+0xdc>
 8004196:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800419a:	2301      	movs	r3, #1
 800419c:	40b3      	lsls	r3, r6
 800419e:	441d      	add	r5, r3
 80041a0:	4545      	cmp	r5, r8
 80041a2:	d3f6      	bcc.n	8004192 <floor+0xca>
 80041a4:	ea25 0507 	bic.w	r5, r5, r7
 80041a8:	e7b2      	b.n	8004110 <floor+0x48>
 80041aa:	2500      	movs	r5, #0
 80041ac:	462c      	mov	r4, r5
 80041ae:	e7af      	b.n	8004110 <floor+0x48>
 80041b0:	8800759c 	.word	0x8800759c
 80041b4:	7e37e43c 	.word	0x7e37e43c
 80041b8:	bff00000 	.word	0xbff00000
 80041bc:	000fffff 	.word	0x000fffff

080041c0 <_init>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	bf00      	nop
 80041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c6:	bc08      	pop	{r3}
 80041c8:	469e      	mov	lr, r3
 80041ca:	4770      	bx	lr

080041cc <_fini>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr
